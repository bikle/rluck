
SQL*Plus: Release 11.2.0.1.0 Production on Sat Dec 18 07:20:02 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:20:02 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:20:02 SQL> 07:20:02 SQL> --
07:20:02 SQL> -- eur10.sql
07:20:02 SQL> --
07:20:02 SQL> 
07:20:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:02 SQL> 
07:20:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
07:20:02 SQL> 
07:20:02 SQL> -- I created di5min here:
07:20:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:02 SQL> 
07:20:02 SQL> CREATE OR REPLACE VIEW q11 AS
07:20:02   2  SELECT
07:20:02   3  pair
07:20:02   4  ,ydate
07:20:02   5  ,prdate
07:20:02   6  ,rownum rnum -- acts as t in my time-series
07:20:02   7  ,clse
07:20:02   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:20:02   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:20:02  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:20:02  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:20:02  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:20:02  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:20:02  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:20:02  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:20:02  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:20:02  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:20:02  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:20:02  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:20:02  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:20:02  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:20:02  22  FROM di5min WHERE pair LIKE'%eur%'
07:20:02  23  ORDER BY ydate
07:20:02  24  /

View created.

Elapsed: 00:00:00.05
07:20:02 SQL> 
07:20:02 SQL> -- rpt
07:20:02 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20711

Elapsed: 00:00:00.35
07:20:02 SQL> 
07:20:02 SQL> -- Calc deltas and gains
07:20:02 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.04
07:20:02 SQL> 
07:20:02 SQL> CREATE TABLE q13 COMPRESS AS
07:20:02   2  SELECT
07:20:02   3  pair
07:20:02   4  ,ydate
07:20:02   5  ,prdate
07:20:02   6  ,rnum
07:20:02   7  ,ld8
07:20:02   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:20:02   9  -- step by 2
07:20:02  10  ,clse-lg6  d06
07:20:02  11  ,lg6 -lg8  d68
07:20:02  12  ,lg8 -lg10 d810
07:20:02  13  ,lg10-lg12 d1012
07:20:02  14  ,lg12-lg14 d1214
07:20:02  15  ,lg14-lg16 d1416
07:20:02  16  ,lg16-lg18 d1618
07:20:02  17  -- step by 4
07:20:02  18  ,lg6 -lg10 d610
07:20:02  19  ,lg8 -lg12 d812
07:20:02  20  ,lg10-lg14 d1014
07:20:02  21  ,lg12-lg16 d1216
07:20:02  22  --
07:20:02  23  ,ABS(clse-lg6 )dc6
07:20:02  24  ,ABS(clse-lg8 )dc8
07:20:02  25  ,ABS(clse-lg10)dc10
07:20:02  26  ,ABS(clse-lg12)dc12
07:20:02  27  ,ABS(clse-lg14)dc14
07:20:02  28  ,ABS(clse-lg16)dc16
07:20:02  29  ,ABS(clse-lg18)dc18
07:20:02  30  ,ABS(clse-lg20)dc20
07:20:02  31  ,ABS(clse-lg22)dc22
07:20:02  32  ,(ld8-clse) ug8
07:20:02  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:02  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:02  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:02  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:02  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:02  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:02  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:02  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:20:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:20:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:20:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:20:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:20:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:20:02  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:02  47  ,0+TO_CHAR(ydate,'D')d
07:20:02  48  ,0+TO_CHAR(ydate,'W')w
07:20:02  49  -- mpm stands for minutes-past-midnight:
07:20:02  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:02  51  FROM q11
07:20:02  52  -- I dont want any NULL values from the LAG() functions:
07:20:02  53  WHERE lg32 > 0
07:20:02  54  ORDER BY pair,ydate
07:20:02  55  /

Table created.

Elapsed: 00:00:01.96
07:20:04 SQL> 
07:20:04 SQL> -- rpt
07:20:04 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10282
	-1	   10045

Elapsed: 00:00:00.03
07:20:04 SQL> 
07:20:04 SQL> -- Calc gains and ntiles
07:20:04 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.03
07:20:04 SQL> CREATE TABLE q15 COMPRESS AS
07:20:04   2  SELECT
07:20:04   3  pair
07:20:04   4  ,ydate
07:20:04   5  ,prdate -- Should be unique
07:20:04   6  ,trend -- +1 or -1
07:20:04   7  -- Use NTILE() to derive some attributes
07:20:04   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:20:04   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:20:04  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:20:04  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:20:04  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:20:04  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:20:04  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:20:04  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:20:04  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:20:04  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:20:04  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:20:04  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:20:04  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:20:04  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:20:04  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:20:04  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:20:04  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:20:04  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:20:04  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:20:04  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:20:04  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:20:04  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:20:04  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:20:04  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:20:04  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:20:04  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:20:04  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:20:04  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:20:04  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:20:04  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:20:04  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:20:04  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:20:04  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:20:04  41  ,hh    att32
07:20:04  42  ,d     att33
07:20:04  43  ,w     att34
07:20:04  44  ,mpm   att35
07:20:04  45  ,trend att36
07:20:04  46  ,ug8 g8
07:20:04  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:20:04  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:20:04  49  FROM q13
07:20:04  50  ORDER BY pair,ydate
07:20:04  51  /

Table created.

Elapsed: 00:00:05.40
07:20:10 SQL> 
07:20:10 SQL> -- rpt
07:20:10 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:20:10   2  GROUP BY pair,trend,gatt,gattn
07:20:10   3  ORDER BY pair,trend,gatt,gattn
07:20:10   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup   .0000157	    2852
eur_usd 	-1 nup up  -.00606336	    3534
eur_usd 	-1 up  nup .006153305	    3563
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00008681	    3108
eur_usd 	 1 nup up  -.00627211	    3326
eur_usd 	 1 up  nup .006518354	    3848

7 rows selected.

Elapsed: 00:00:00.03
07:20:10 SQL> 
07:20:10 SQL> -- rpt
07:20:10 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-17 21:55:00

Elapsed: 00:00:00.01
07:20:10 SQL> 
07:20:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.03
07:20:10 SQL> CREATE TABLE modsrc COMPRESS AS
07:20:10   2  SELECT
07:20:10   3  pair
07:20:10   4  ,ydate
07:20:10   5  ,prdate
07:20:10   6  ,trend
07:20:10   7  ,g8
07:20:10   8  ,gatt
07:20:10   9  ,gattn
07:20:10  10  FROM q15
07:20:10  11  /

Table created.

Elapsed: 00:00:00.08
07:20:10 SQL> 
07:20:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:20:10 SQL> 
07:20:10 SQL> -- rpt
07:20:10 SQL> 
07:20:10 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20711

Elapsed: 00:00:00.34
07:20:10 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20327

Elapsed: 00:00:00.01
07:20:10 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20327

Elapsed: 00:00:00.00
07:20:10 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20327

Elapsed: 00:00:00.00
07:20:10 SQL> 
07:20:10 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:20:10 SQL> CREATE TABLE eur_ms10 COMPRESS AS
07:20:10   2  SELECT
07:20:10   3  ydate
07:20:10   4  ,trend eur_trend
07:20:10   5  ,g8    eur_g8
07:20:10   6  ,gatt  eur_gatt
07:20:10   7  ,gattn eur_gattn
07:20:10   8  FROM modsrc
07:20:10   9  /

Table created.

Elapsed: 00:00:00.06
07:20:10 SQL> 
07:20:10 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:20:11 SQL> 
07:20:11 SQL> -- rpt
07:20:11 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-10 15:20:01 2010-12-17 11:40:00	10282	  -.0218     .02165
	-1 2010-09-10 15:45:01 2010-12-17 21:55:00	 9949	 -.02085      .0196

Elapsed: 00:00:00.02
07:20:11 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-10 15:20:01 2010-12-17 11:40:00	      10282	 -.0218      .02165
	-1 2010-09-10 15:45:01 2010-12-17 21:55:00	      10045	-.02085       .0196

Elapsed: 00:00:00.02
07:20:11 SQL> 
07:20:11 SQL> -- I need a copy of q15 attributes
07:20:11 SQL> 
07:20:11 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.03
07:20:11 SQL> CREATE TABLE eur_att COMPRESS AS
07:20:11   2  SELECT
07:20:11   3  ydate
07:20:11   4  ,att00 eur_att00
07:20:11   5  ,att01 eur_att01
07:20:11   6  ,att02 eur_att02
07:20:11   7  ,att03 eur_att03
07:20:11   8  ,att04 eur_att04
07:20:11   9  ,att05 eur_att05
07:20:11  10  ,att06 eur_att06
07:20:11  11  ,att07 eur_att07
07:20:11  12  ,att08 eur_att08
07:20:11  13  ,att09 eur_att09
07:20:11  14  ,att10 eur_att10
07:20:11  15  ,att11 eur_att11
07:20:11  16  ,att12 eur_att12
07:20:11  17  ,att13 eur_att13
07:20:11  18  ,att14 eur_att14
07:20:11  19  ,att15 eur_att15
07:20:11  20  ,att16 eur_att16
07:20:11  21  ,att17 eur_att17
07:20:11  22  ,att18 eur_att18
07:20:11  23  ,att19 eur_att19
07:20:11  24  ,att20 eur_att20
07:20:11  25  ,att21 eur_att21
07:20:11  26  ,att22 eur_att22
07:20:11  27  ,att23 eur_att23
07:20:11  28  ,att24 eur_att24
07:20:11  29  ,att25 eur_att25
07:20:11  30  ,att26 eur_att26
07:20:11  31  ,att27 eur_att27
07:20:11  32  ,att28 eur_att28
07:20:11  33  ,att29 eur_att29
07:20:11  34  ,att30 eur_att30
07:20:11  35  ,att31 eur_att31
07:20:11  36  ,att32 eur_att32
07:20:11  37  ,att32 eur_att33
07:20:11  38  ,att32 eur_att34
07:20:11  39  ,att32 eur_att35
07:20:11  40  ,att32 eur_att36
07:20:11  41  FROM q15
07:20:11  42  /

Table created.

Elapsed: 00:00:00.20
07:20:11 SQL> 
07:20:11 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:20:11 SQL> 
07:20:11 SQL> -- rpt
07:20:11 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20327

Elapsed: 00:00:00.01
07:20:11 SQL> 
07:20:11 SQL> --
07:20:11 SQL> -- aud10.sql
07:20:11 SQL> --
07:20:11 SQL> 
07:20:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:11 SQL> 
07:20:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.77
07:20:12 SQL> 
07:20:12 SQL> -- I created di5min here:
07:20:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:12 SQL> 
07:20:12 SQL> CREATE OR REPLACE VIEW q11 AS
07:20:12   2  SELECT
07:20:12   3  pair
07:20:12   4  ,ydate
07:20:12   5  ,prdate
07:20:12   6  ,rownum rnum -- acts as t in my time-series
07:20:12   7  ,clse
07:20:12   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:20:12   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:20:12  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:20:12  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:20:12  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:20:12  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:20:12  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:20:12  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:20:12  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:20:12  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:20:12  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:20:12  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:20:12  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:20:12  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:20:12  22  FROM di5min WHERE pair LIKE'%aud%'
07:20:12  23  ORDER BY ydate
07:20:12  24  /

View created.

Elapsed: 00:00:00.31
07:20:12 SQL> 
07:20:12 SQL> -- rpt
07:20:12 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20708

Elapsed: 00:00:00.35
07:20:13 SQL> 
07:20:13 SQL> -- Calc deltas and gains
07:20:13 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
07:20:13 SQL> 
07:20:13 SQL> CREATE TABLE q13 COMPRESS AS
07:20:13   2  SELECT
07:20:13   3  pair
07:20:13   4  ,ydate
07:20:13   5  ,prdate
07:20:13   6  ,rnum
07:20:13   7  ,ld8
07:20:13   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:20:13   9  -- step by 2
07:20:13  10  ,clse-lg6  d06
07:20:13  11  ,lg6 -lg8  d68
07:20:13  12  ,lg8 -lg10 d810
07:20:13  13  ,lg10-lg12 d1012
07:20:13  14  ,lg12-lg14 d1214
07:20:13  15  ,lg14-lg16 d1416
07:20:13  16  ,lg16-lg18 d1618
07:20:13  17  -- step by 4
07:20:13  18  ,lg6 -lg10 d610
07:20:13  19  ,lg8 -lg12 d812
07:20:13  20  ,lg10-lg14 d1014
07:20:13  21  ,lg12-lg16 d1216
07:20:13  22  --
07:20:13  23  ,ABS(clse-lg6 )dc6
07:20:13  24  ,ABS(clse-lg8 )dc8
07:20:13  25  ,ABS(clse-lg10)dc10
07:20:13  26  ,ABS(clse-lg12)dc12
07:20:13  27  ,ABS(clse-lg14)dc14
07:20:13  28  ,ABS(clse-lg16)dc16
07:20:13  29  ,ABS(clse-lg18)dc18
07:20:13  30  ,ABS(clse-lg20)dc20
07:20:13  31  ,ABS(clse-lg22)dc22
07:20:13  32  ,(ld8-clse) ug8
07:20:13  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:13  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:13  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:13  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:13  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:13  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:13  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:13  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:20:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:20:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:20:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:20:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:20:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:20:13  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:13  47  ,0+TO_CHAR(ydate,'D')d
07:20:13  48  ,0+TO_CHAR(ydate,'W')w
07:20:13  49  -- mpm stands for minutes-past-midnight:
07:20:13  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:13  51  FROM q11
07:20:13  52  -- I dont want any NULL values from the LAG() functions:
07:20:13  53  WHERE lg32 > 0
07:20:13  54  ORDER BY pair,ydate
07:20:13  55  /

Table created.

Elapsed: 00:00:01.73
07:20:15 SQL> 
07:20:15 SQL> -- rpt
07:20:15 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10652
	-1	    9672

Elapsed: 00:00:00.03
07:20:15 SQL> 
07:20:15 SQL> -- Calc gains and ntiles
07:20:15 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
07:20:15 SQL> CREATE TABLE q15 COMPRESS AS
07:20:15   2  SELECT
07:20:15   3  pair
07:20:15   4  ,ydate
07:20:15   5  ,prdate -- Should be unique
07:20:15   6  ,trend -- +1 or -1
07:20:15   7  -- Use NTILE() to derive some attributes
07:20:15   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:20:15   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:20:15  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:20:15  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:20:15  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:20:15  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:20:15  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:20:15  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:20:15  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:20:15  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:20:15  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:20:15  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:20:15  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:20:15  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:20:15  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:20:15  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:20:15  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:20:15  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:20:15  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:20:15  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:20:15  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:20:15  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:20:15  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:20:15  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:20:15  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:20:15  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:20:15  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:20:15  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:20:15  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:20:15  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:20:15  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:20:15  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:20:15  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:20:15  41  ,hh    att32
07:20:15  42  ,d     att33
07:20:15  43  ,w     att34
07:20:15  44  ,mpm   att35
07:20:15  45  ,trend att36
07:20:15  46  ,ug8 g8
07:20:15  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:20:15  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:20:15  49  FROM q13
07:20:15  50  ORDER BY pair,ydate
07:20:15  51  /

Table created.

Elapsed: 00:00:05.35
07:20:20 SQL> 
07:20:20 SQL> -- rpt
07:20:20 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:20:20   2  GROUP BY pair,trend,gatt,gattn
07:20:20   3  ORDER BY pair,trend,gatt,gattn
07:20:20   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup 6.6744E-06	    3667
aud_usd 	-1 nup up  -.00519783	    2598
aud_usd 	-1 up  nup .005293381	    3350
aud_usd 	-1			       0
aud_usd 	 1 nup nup   .0000126	    4014
aud_usd 	 1 nup up  -.00493298	    3223
aud_usd 	 1 up  nup  .00515291	    3376
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:20:20 SQL> 
07:20:20 SQL> -- rpt
07:20:20 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-17 21:55:00

Elapsed: 00:00:00.02
07:20:20 SQL> 
07:20:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
07:20:20 SQL> CREATE TABLE modsrc COMPRESS AS
07:20:20   2  SELECT
07:20:20   3  pair
07:20:20   4  ,ydate
07:20:20   5  ,prdate
07:20:20   6  ,trend
07:20:20   7  ,g8
07:20:20   8  ,gatt
07:20:20   9  ,gattn
07:20:20  10  FROM q15
07:20:20  11  /

Table created.

Elapsed: 00:00:00.10
07:20:20 SQL> 
07:20:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
07:20:21 SQL> 
07:20:21 SQL> -- rpt
07:20:21 SQL> 
07:20:21 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20708

Elapsed: 00:00:00.34
07:20:21 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20324

Elapsed: 00:00:00.01
07:20:21 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20324

Elapsed: 00:00:00.01
07:20:21 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20324

Elapsed: 00:00:00.00
07:20:21 SQL> 
07:20:21 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:20:21 SQL> CREATE TABLE aud_ms10 COMPRESS AS
07:20:21   2  SELECT
07:20:21   3  ydate
07:20:21   4  ,trend aud_trend
07:20:21   5  ,g8    aud_g8
07:20:21   6  ,gatt  aud_gatt
07:20:21   7  ,gattn aud_gattn
07:20:21   8  FROM modsrc
07:20:21   9  /

Table created.

Elapsed: 00:00:00.06
07:20:21 SQL> 
07:20:21 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:20:21 SQL> 
07:20:21 SQL> -- rpt
07:20:21 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-10 15:20:01 2010-12-17 21:55:00	10613	  -.0203      .0136
	-1 2010-09-10 18:55:01 2010-12-17 19:05:00	 9615	  -.0196      .0148

Elapsed: 00:00:00.02
07:20:21 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-10 15:20:01 2010-12-17 21:55:00	      10652	 -.0203       .0136
	-1 2010-09-10 18:55:01 2010-12-17 19:05:00	       9672	 -.0196       .0148

Elapsed: 00:00:00.02
07:20:21 SQL> 
07:20:21 SQL> -- I need a copy of q15 attributes
07:20:21 SQL> 
07:20:21 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
07:20:21 SQL> CREATE TABLE aud_att COMPRESS AS
07:20:21   2  SELECT
07:20:21   3  ydate
07:20:21   4  ,att00 aud_att00
07:20:21   5  ,att01 aud_att01
07:20:21   6  ,att02 aud_att02
07:20:21   7  ,att03 aud_att03
07:20:21   8  ,att04 aud_att04
07:20:21   9  ,att05 aud_att05
07:20:21  10  ,att06 aud_att06
07:20:21  11  ,att07 aud_att07
07:20:21  12  ,att08 aud_att08
07:20:21  13  ,att09 aud_att09
07:20:21  14  ,att10 aud_att10
07:20:21  15  ,att11 aud_att11
07:20:21  16  ,att12 aud_att12
07:20:21  17  ,att13 aud_att13
07:20:21  18  ,att14 aud_att14
07:20:21  19  ,att15 aud_att15
07:20:21  20  ,att16 aud_att16
07:20:21  21  ,att17 aud_att17
07:20:21  22  ,att18 aud_att18
07:20:21  23  ,att19 aud_att19
07:20:21  24  ,att20 aud_att20
07:20:21  25  ,att21 aud_att21
07:20:21  26  ,att22 aud_att22
07:20:21  27  ,att23 aud_att23
07:20:21  28  ,att24 aud_att24
07:20:21  29  ,att25 aud_att25
07:20:21  30  ,att26 aud_att26
07:20:21  31  ,att27 aud_att27
07:20:21  32  ,att28 aud_att28
07:20:21  33  ,att29 aud_att29
07:20:21  34  ,att30 aud_att30
07:20:21  35  ,att31 aud_att31
07:20:21  36  ,att32 aud_att32
07:20:21  37  ,att32 aud_att33
07:20:21  38  ,att32 aud_att34
07:20:21  39  ,att32 aud_att35
07:20:21  40  ,att32 aud_att36
07:20:21  41  FROM q15
07:20:21  42  /

Table created.

Elapsed: 00:00:00.20
07:20:22 SQL> 
07:20:22 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
07:20:22 SQL> 
07:20:22 SQL> -- rpt
07:20:22 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20324

Elapsed: 00:00:00.00
07:20:22 SQL> 
07:20:22 SQL> --
07:20:22 SQL> -- gbp10.sql
07:20:22 SQL> --
07:20:22 SQL> 
07:20:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:22 SQL> 
07:20:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
07:20:22 SQL> 
07:20:22 SQL> -- I created di5min here:
07:20:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:22 SQL> 
07:20:22 SQL> CREATE OR REPLACE VIEW q11 AS
07:20:22   2  SELECT
07:20:22   3  pair
07:20:22   4  ,ydate
07:20:22   5  ,prdate
07:20:22   6  ,rownum rnum -- acts as t in my time-series
07:20:22   7  ,clse
07:20:22   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:20:22   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:20:22  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:20:22  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:20:22  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:20:22  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:20:22  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:20:22  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:20:22  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:20:22  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:20:22  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:20:22  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:20:22  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:20:22  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:20:22  22  FROM di5min WHERE pair LIKE'%gbp%'
07:20:22  23  ORDER BY ydate
07:20:22  24  /

View created.

Elapsed: 00:00:00.04
07:20:22 SQL> 
07:20:22 SQL> -- rpt
07:20:22 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20710

Elapsed: 00:00:00.34
07:20:23 SQL> 
07:20:23 SQL> -- Calc deltas and gains
07:20:23 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
07:20:23 SQL> 
07:20:23 SQL> CREATE TABLE q13 COMPRESS AS
07:20:23   2  SELECT
07:20:23   3  pair
07:20:23   4  ,ydate
07:20:23   5  ,prdate
07:20:23   6  ,rnum
07:20:23   7  ,ld8
07:20:23   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:20:23   9  -- step by 2
07:20:23  10  ,clse-lg6  d06
07:20:23  11  ,lg6 -lg8  d68
07:20:23  12  ,lg8 -lg10 d810
07:20:23  13  ,lg10-lg12 d1012
07:20:23  14  ,lg12-lg14 d1214
07:20:23  15  ,lg14-lg16 d1416
07:20:23  16  ,lg16-lg18 d1618
07:20:23  17  -- step by 4
07:20:23  18  ,lg6 -lg10 d610
07:20:23  19  ,lg8 -lg12 d812
07:20:23  20  ,lg10-lg14 d1014
07:20:23  21  ,lg12-lg16 d1216
07:20:23  22  --
07:20:23  23  ,ABS(clse-lg6 )dc6
07:20:23  24  ,ABS(clse-lg8 )dc8
07:20:23  25  ,ABS(clse-lg10)dc10
07:20:23  26  ,ABS(clse-lg12)dc12
07:20:23  27  ,ABS(clse-lg14)dc14
07:20:23  28  ,ABS(clse-lg16)dc16
07:20:23  29  ,ABS(clse-lg18)dc18
07:20:23  30  ,ABS(clse-lg20)dc20
07:20:23  31  ,ABS(clse-lg22)dc22
07:20:23  32  ,(ld8-clse) ug8
07:20:23  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:23  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:23  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:23  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:23  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:23  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:23  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:23  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:20:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:20:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:20:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:20:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:20:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:20:23  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:23  47  ,0+TO_CHAR(ydate,'D')d
07:20:23  48  ,0+TO_CHAR(ydate,'W')w
07:20:23  49  -- mpm stands for minutes-past-midnight:
07:20:23  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:23  51  FROM q11
07:20:23  52  -- I dont want any NULL values from the LAG() functions:
07:20:23  53  WHERE lg32 > 0
07:20:23  54  ORDER BY pair,ydate
07:20:23  55  /

Table created.

Elapsed: 00:00:01.69
07:20:25 SQL> 
07:20:25 SQL> -- rpt
07:20:25 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9955
	-1	   10371

Elapsed: 00:00:00.03
07:20:25 SQL> 
07:20:25 SQL> -- Calc gains and ntiles
07:20:25 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
07:20:25 SQL> CREATE TABLE q15 COMPRESS AS
07:20:25   2  SELECT
07:20:25   3  pair
07:20:25   4  ,ydate
07:20:25   5  ,prdate -- Should be unique
07:20:25   6  ,trend -- +1 or -1
07:20:25   7  -- Use NTILE() to derive some attributes
07:20:25   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:20:25   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:20:25  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:20:25  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:20:25  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:20:25  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:20:25  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:20:25  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:20:25  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:20:25  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:20:25  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:20:25  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:20:25  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:20:25  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:20:25  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:20:25  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:20:25  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:20:25  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:20:25  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:20:25  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:20:25  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:20:25  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:20:25  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:20:25  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:20:25  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:20:25  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:20:25  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:20:25  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:20:25  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:20:25  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:20:25  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:20:25  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:20:25  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:20:25  41  ,hh    att32
07:20:25  42  ,d     att33
07:20:25  43  ,w     att34
07:20:25  44  ,mpm   att35
07:20:25  45  ,trend att36
07:20:25  46  ,ug8 g8
07:20:25  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:20:25  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:20:25  49  FROM q13
07:20:25  50  ORDER BY pair,ydate
07:20:25  51  /

Table created.

Elapsed: 00:00:05.38
07:20:30 SQL> 
07:20:30 SQL> -- rpt
07:20:30 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:20:30   2  GROUP BY pair,trend,gatt,gattn
07:20:30   3  ORDER BY pair,trend,gatt,gattn
07:20:30   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000087457	    3807
gbp_usd 	-1 nup up  -.00588688	    3210
gbp_usd 	-1 up  nup .005807176	    3261
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00008951	    3736
gbp_usd 	 1 nup up  -.00552294	    3183
gbp_usd 	 1 up  nup .006245392	    3033
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:20:30 SQL> 
07:20:30 SQL> -- rpt
07:20:30 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-17 21:55:00

Elapsed: 00:00:00.02
07:20:30 SQL> 
07:20:30 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
07:20:30 SQL> CREATE TABLE modsrc COMPRESS AS
07:20:30   2  SELECT
07:20:30   3  pair
07:20:30   4  ,ydate
07:20:30   5  ,prdate
07:20:30   6  ,trend
07:20:30   7  ,g8
07:20:30   8  ,gatt
07:20:30   9  ,gattn
07:20:30  10  FROM q15
07:20:30  11  /

Table created.

Elapsed: 00:00:00.08
07:20:30 SQL> 
07:20:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
07:20:31 SQL> 
07:20:31 SQL> -- rpt
07:20:31 SQL> 
07:20:31 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20710

Elapsed: 00:00:00.34
07:20:31 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20326

Elapsed: 00:00:00.01
07:20:31 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20326

Elapsed: 00:00:00.00
07:20:31 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20326

Elapsed: 00:00:00.00
07:20:31 SQL> 
07:20:31 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
07:20:31 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
07:20:31   2  SELECT
07:20:31   3  ydate
07:20:31   4  ,trend gbp_trend
07:20:31   5  ,g8    gbp_g8
07:20:31   6  ,gatt  gbp_gatt
07:20:31   7  ,gattn gbp_gattn
07:20:31   8  FROM modsrc
07:20:31   9  /

Table created.

Elapsed: 00:00:00.06
07:20:31 SQL> 
07:20:31 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:20:31 SQL> 
07:20:31 SQL> -- rpt
07:20:31 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-12 23:25:01 2010-12-17 21:50:00	 9952	  -.0231       .019
	-1 2010-09-10 15:20:01 2010-12-17 21:55:00	10278	    -.02      .0204

Elapsed: 00:00:00.01
07:20:31 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-12 23:25:01 2010-12-17 21:50:00	       9955	 -.0231        .019
	-1 2010-09-10 15:20:01 2010-12-17 21:55:00	      10371	   -.02       .0204

Elapsed: 00:00:00.02
07:20:31 SQL> 
07:20:31 SQL> -- I need a copy of q15 attributes
07:20:31 SQL> 
07:20:31 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
07:20:31 SQL> CREATE TABLE gbp_att COMPRESS AS
07:20:31   2  SELECT
07:20:31   3  ydate
07:20:31   4  ,att00 gbp_att00
07:20:31   5  ,att01 gbp_att01
07:20:31   6  ,att02 gbp_att02
07:20:31   7  ,att03 gbp_att03
07:20:31   8  ,att04 gbp_att04
07:20:31   9  ,att05 gbp_att05
07:20:31  10  ,att06 gbp_att06
07:20:31  11  ,att07 gbp_att07
07:20:31  12  ,att08 gbp_att08
07:20:31  13  ,att09 gbp_att09
07:20:31  14  ,att10 gbp_att10
07:20:31  15  ,att11 gbp_att11
07:20:31  16  ,att12 gbp_att12
07:20:31  17  ,att13 gbp_att13
07:20:31  18  ,att14 gbp_att14
07:20:31  19  ,att15 gbp_att15
07:20:31  20  ,att16 gbp_att16
07:20:31  21  ,att17 gbp_att17
07:20:31  22  ,att18 gbp_att18
07:20:31  23  ,att19 gbp_att19
07:20:31  24  ,att20 gbp_att20
07:20:31  25  ,att21 gbp_att21
07:20:31  26  ,att22 gbp_att22
07:20:31  27  ,att23 gbp_att23
07:20:31  28  ,att24 gbp_att24
07:20:31  29  ,att25 gbp_att25
07:20:31  30  ,att26 gbp_att26
07:20:31  31  ,att27 gbp_att27
07:20:31  32  ,att28 gbp_att28
07:20:31  33  ,att29 gbp_att29
07:20:31  34  ,att30 gbp_att30
07:20:31  35  ,att31 gbp_att31
07:20:31  36  ,att32 gbp_att32
07:20:31  37  ,att32 gbp_att33
07:20:31  38  ,att32 gbp_att34
07:20:31  39  ,att32 gbp_att35
07:20:31  40  ,att32 gbp_att36
07:20:31  41  FROM q15
07:20:31  42  /

Table created.

Elapsed: 00:00:00.17
07:20:31 SQL> 
07:20:31 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:20:32 SQL> 
07:20:32 SQL> -- rpt
07:20:32 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20326

Elapsed: 00:00:00.00
07:20:32 SQL> 
07:20:32 SQL> --
07:20:32 SQL> -- jpy10.sql
07:20:32 SQL> --
07:20:32 SQL> 
07:20:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:32 SQL> 
07:20:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
07:20:32 SQL> 
07:20:32 SQL> -- I created di5min here:
07:20:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:32 SQL> 
07:20:32 SQL> CREATE OR REPLACE VIEW q11 AS
07:20:32   2  SELECT
07:20:32   3  pair
07:20:32   4  ,ydate
07:20:32   5  ,prdate
07:20:32   6  ,rownum rnum -- acts as t in my time-series
07:20:32   7  ,clse
07:20:32   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:20:32   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:20:32  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:20:32  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:20:32  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:20:32  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:20:32  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:20:32  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:20:32  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:20:32  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:20:32  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:20:32  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:20:32  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:20:32  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:20:32  22  FROM di5min WHERE pair LIKE'%jpy%'
07:20:32  23  ORDER BY ydate
07:20:32  24  /

View created.

Elapsed: 00:00:00.05
07:20:32 SQL> 
07:20:32 SQL> -- rpt
07:20:32 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20711

Elapsed: 00:00:00.35
07:20:33 SQL> 
07:20:33 SQL> -- Calc deltas and gains
07:20:33 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.28
07:20:33 SQL> 
07:20:33 SQL> CREATE TABLE q13 COMPRESS AS
07:20:33   2  SELECT
07:20:33   3  pair
07:20:33   4  ,ydate
07:20:33   5  ,prdate
07:20:33   6  ,rnum
07:20:33   7  ,ld8
07:20:33   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:20:33   9  -- step by 2
07:20:33  10  ,clse-lg6  d06
07:20:33  11  ,lg6 -lg8  d68
07:20:33  12  ,lg8 -lg10 d810
07:20:33  13  ,lg10-lg12 d1012
07:20:33  14  ,lg12-lg14 d1214
07:20:33  15  ,lg14-lg16 d1416
07:20:33  16  ,lg16-lg18 d1618
07:20:33  17  -- step by 4
07:20:33  18  ,lg6 -lg10 d610
07:20:33  19  ,lg8 -lg12 d812
07:20:33  20  ,lg10-lg14 d1014
07:20:33  21  ,lg12-lg16 d1216
07:20:33  22  --
07:20:33  23  ,ABS(clse-lg6 )dc6
07:20:33  24  ,ABS(clse-lg8 )dc8
07:20:33  25  ,ABS(clse-lg10)dc10
07:20:33  26  ,ABS(clse-lg12)dc12
07:20:33  27  ,ABS(clse-lg14)dc14
07:20:33  28  ,ABS(clse-lg16)dc16
07:20:33  29  ,ABS(clse-lg18)dc18
07:20:33  30  ,ABS(clse-lg20)dc20
07:20:33  31  ,ABS(clse-lg22)dc22
07:20:33  32  ,(ld8-clse) ug8
07:20:33  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:33  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:33  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:33  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:33  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:33  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:33  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:33  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:20:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:20:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:20:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:20:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:20:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:20:33  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:33  47  ,0+TO_CHAR(ydate,'D')d
07:20:33  48  ,0+TO_CHAR(ydate,'W')w
07:20:33  49  -- mpm stands for minutes-past-midnight:
07:20:33  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:33  51  FROM q11
07:20:33  52  -- I dont want any NULL values from the LAG() functions:
07:20:33  53  WHERE lg32 > 0
07:20:33  54  ORDER BY pair,ydate
07:20:33  55  /

Table created.

Elapsed: 00:00:01.67
07:20:35 SQL> 
07:20:35 SQL> -- rpt
07:20:35 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9524
	-1	   10803

Elapsed: 00:00:00.03
07:20:35 SQL> 
07:20:35 SQL> -- Calc gains and ntiles
07:20:35 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
07:20:35 SQL> CREATE TABLE q15 COMPRESS AS
07:20:35   2  SELECT
07:20:35   3  pair
07:20:35   4  ,ydate
07:20:35   5  ,prdate -- Should be unique
07:20:35   6  ,trend -- +1 or -1
07:20:35   7  -- Use NTILE() to derive some attributes
07:20:35   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:20:35   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:20:35  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:20:35  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:20:35  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:20:35  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:20:35  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:20:35  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:20:35  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:20:35  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:20:35  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:20:35  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:20:35  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:20:35  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:20:35  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:20:35  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:20:35  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:20:35  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:20:35  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:20:35  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:20:35  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:20:35  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:20:35  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:20:35  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:20:35  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:20:35  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:20:35  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:20:35  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:20:35  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:20:35  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:20:35  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:20:35  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:20:35  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:20:35  41  ,hh    att32
07:20:35  42  ,d     att33
07:20:35  43  ,w     att34
07:20:35  44  ,mpm   att35
07:20:35  45  ,trend att36
07:20:35  46  ,ug8 g8
07:20:35  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:20:35  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:20:35  49  FROM q13
07:20:35  50  ORDER BY pair,ydate
07:20:35  51  /

Table created.

Elapsed: 00:00:05.53
07:20:40 SQL> 
07:20:40 SQL> -- rpt
07:20:40 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:20:40   2  GROUP BY pair,trend,gatt,gattn
07:20:40   3  ORDER BY pair,trend,gatt,gattn
07:20:40   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup	    0	     160
usd_jpy 	-1 nup up  -.19025064	    5496
usd_jpy 	-1 up  nup .207898105	    5118
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     122
usd_jpy 	 1 nup up  -.18974555	    5001
usd_jpy 	 1 up  nup .211861444	    4334
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:20:40 SQL> 
07:20:40 SQL> -- rpt
07:20:40 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-17 21:55:00

Elapsed: 00:00:00.02
07:20:40 SQL> 
07:20:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
07:20:40 SQL> CREATE TABLE modsrc COMPRESS AS
07:20:40   2  SELECT
07:20:40   3  pair
07:20:40   4  ,ydate
07:20:40   5  ,prdate
07:20:40   6  ,trend
07:20:40   7  ,g8
07:20:40   8  ,gatt
07:20:40   9  ,gattn
07:20:40  10  FROM q15
07:20:40  11  /

Table created.

Elapsed: 00:00:00.10
07:20:41 SQL> 
07:20:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
07:20:41 SQL> 
07:20:41 SQL> -- rpt
07:20:41 SQL> 
07:20:41 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20711

Elapsed: 00:00:00.34
07:20:41 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20327

Elapsed: 00:00:00.01
07:20:41 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20327

Elapsed: 00:00:00.00
07:20:41 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20327

Elapsed: 00:00:00.01
07:20:41 SQL> 
07:20:41 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:20:41 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
07:20:41   2  SELECT
07:20:41   3  ydate
07:20:41   4  ,trend jpy_trend
07:20:41   5  ,g8    jpy_g8
07:20:41   6  ,gatt  jpy_gatt
07:20:41   7  ,gattn jpy_gattn
07:20:41   8  FROM modsrc
07:20:41   9  /

Table created.

Elapsed: 00:00:00.07
07:20:41 SQL> 
07:20:41 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:20:41 SQL> 
07:20:41 SQL> -- rpt
07:20:41 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-10 15:20:01 2010-12-17 21:50:00	 9457	  -1.185       2.42
	-1 2010-09-10 20:25:01 2010-12-17 21:55:00	10774	 -1.0575       2.49

Elapsed: 00:00:00.02
07:20:41 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-10 15:20:01 2010-12-17 21:50:00	       9524	 -1.185        2.42
	-1 2010-09-10 20:25:01 2010-12-17 21:55:00	      10803	-1.0575        2.49

Elapsed: 00:00:00.02
07:20:41 SQL> 
07:20:41 SQL> -- I need a copy of q15 attributes
07:20:41 SQL> 
07:20:41 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
07:20:41 SQL> CREATE TABLE jpy_att COMPRESS AS
07:20:41   2  SELECT
07:20:41   3  ydate
07:20:41   4  ,att00 jpy_att00
07:20:41   5  ,att01 jpy_att01
07:20:41   6  ,att02 jpy_att02
07:20:41   7  ,att03 jpy_att03
07:20:41   8  ,att04 jpy_att04
07:20:41   9  ,att05 jpy_att05
07:20:41  10  ,att06 jpy_att06
07:20:41  11  ,att07 jpy_att07
07:20:41  12  ,att08 jpy_att08
07:20:41  13  ,att09 jpy_att09
07:20:41  14  ,att10 jpy_att10
07:20:41  15  ,att11 jpy_att11
07:20:41  16  ,att12 jpy_att12
07:20:41  17  ,att13 jpy_att13
07:20:41  18  ,att14 jpy_att14
07:20:41  19  ,att15 jpy_att15
07:20:41  20  ,att16 jpy_att16
07:20:41  21  ,att17 jpy_att17
07:20:41  22  ,att18 jpy_att18
07:20:41  23  ,att19 jpy_att19
07:20:41  24  ,att20 jpy_att20
07:20:41  25  ,att21 jpy_att21
07:20:41  26  ,att22 jpy_att22
07:20:41  27  ,att23 jpy_att23
07:20:41  28  ,att24 jpy_att24
07:20:41  29  ,att25 jpy_att25
07:20:41  30  ,att26 jpy_att26
07:20:41  31  ,att27 jpy_att27
07:20:41  32  ,att28 jpy_att28
07:20:41  33  ,att29 jpy_att29
07:20:41  34  ,att30 jpy_att30
07:20:41  35  ,att31 jpy_att31
07:20:41  36  ,att32 jpy_att32
07:20:41  37  ,att32 jpy_att33
07:20:41  38  ,att32 jpy_att34
07:20:41  39  ,att32 jpy_att35
07:20:41  40  ,att32 jpy_att36
07:20:41  41  FROM q15
07:20:41  42  /

Table created.

Elapsed: 00:00:00.19
07:20:42 SQL> 
07:20:42 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:20:42 SQL> 
07:20:42 SQL> -- rpt
07:20:42 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20327

Elapsed: 00:00:00.00
07:20:42 SQL> 
07:20:42 SQL> --
07:20:42 SQL> -- cad10.sql
07:20:42 SQL> --
07:20:42 SQL> 
07:20:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:42 SQL> 
07:20:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
07:20:42 SQL> 
07:20:42 SQL> -- I created di5min here:
07:20:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:42 SQL> 
07:20:42 SQL> CREATE OR REPLACE VIEW q11 AS
07:20:42   2  SELECT
07:20:42   3  pair
07:20:42   4  ,ydate
07:20:42   5  ,prdate
07:20:42   6  ,rownum rnum -- acts as t in my time-series
07:20:42   7  ,clse
07:20:42   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:20:42   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:20:42  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:20:42  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:20:42  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:20:42  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:20:42  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:20:42  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:20:42  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:20:42  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:20:42  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:20:42  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:20:42  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:20:42  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:20:42  22  FROM di5min WHERE pair LIKE'%cad%'
07:20:42  23  ORDER BY ydate
07:20:42  24  /

View created.

Elapsed: 00:00:00.04
07:20:42 SQL> 
07:20:42 SQL> -- rpt
07:20:42 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20707

Elapsed: 00:00:00.34
07:20:43 SQL> 
07:20:43 SQL> -- Calc deltas and gains
07:20:43 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
07:20:43 SQL> 
07:20:43 SQL> CREATE TABLE q13 COMPRESS AS
07:20:43   2  SELECT
07:20:43   3  pair
07:20:43   4  ,ydate
07:20:43   5  ,prdate
07:20:43   6  ,rnum
07:20:43   7  ,ld8
07:20:43   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:20:43   9  -- step by 2
07:20:43  10  ,clse-lg6  d06
07:20:43  11  ,lg6 -lg8  d68
07:20:43  12  ,lg8 -lg10 d810
07:20:43  13  ,lg10-lg12 d1012
07:20:43  14  ,lg12-lg14 d1214
07:20:43  15  ,lg14-lg16 d1416
07:20:43  16  ,lg16-lg18 d1618
07:20:43  17  -- step by 4
07:20:43  18  ,lg6 -lg10 d610
07:20:43  19  ,lg8 -lg12 d812
07:20:43  20  ,lg10-lg14 d1014
07:20:43  21  ,lg12-lg16 d1216
07:20:43  22  --
07:20:43  23  ,ABS(clse-lg6 )dc6
07:20:43  24  ,ABS(clse-lg8 )dc8
07:20:43  25  ,ABS(clse-lg10)dc10
07:20:43  26  ,ABS(clse-lg12)dc12
07:20:43  27  ,ABS(clse-lg14)dc14
07:20:43  28  ,ABS(clse-lg16)dc16
07:20:43  29  ,ABS(clse-lg18)dc18
07:20:43  30  ,ABS(clse-lg20)dc20
07:20:43  31  ,ABS(clse-lg22)dc22
07:20:43  32  ,(ld8-clse) ug8
07:20:43  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:43  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:43  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:43  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:43  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:43  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:43  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:43  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:20:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:20:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:20:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:20:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:20:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:20:43  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:43  47  ,0+TO_CHAR(ydate,'D')d
07:20:43  48  ,0+TO_CHAR(ydate,'W')w
07:20:43  49  -- mpm stands for minutes-past-midnight:
07:20:43  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:43  51  FROM q11
07:20:43  52  -- I dont want any NULL values from the LAG() functions:
07:20:43  53  WHERE lg32 > 0
07:20:43  54  ORDER BY pair,ydate
07:20:43  55  /

Table created.

Elapsed: 00:00:01.70
07:20:45 SQL> 
07:20:45 SQL> -- rpt
07:20:45 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9360
	-1	   10963

Elapsed: 00:00:00.03
07:20:45 SQL> 
07:20:45 SQL> -- Calc gains and ntiles
07:20:45 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
07:20:45 SQL> CREATE TABLE q15 COMPRESS AS
07:20:45   2  SELECT
07:20:45   3  pair
07:20:45   4  ,ydate
07:20:45   5  ,prdate -- Should be unique
07:20:45   6  ,trend -- +1 or -1
07:20:45   7  -- Use NTILE() to derive some attributes
07:20:45   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:20:45   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:20:45  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:20:45  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:20:45  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:20:45  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:20:45  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:20:45  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:20:45  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:20:45  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:20:45  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:20:45  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:20:45  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:20:45  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:20:45  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:20:45  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:20:45  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:20:45  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:20:45  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:20:45  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:20:45  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:20:45  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:20:45  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:20:45  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:20:45  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:20:45  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:20:45  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:20:45  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:20:45  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:20:45  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:20:45  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:20:45  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:20:45  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:20:45  41  ,hh    att32
07:20:45  42  ,d     att33
07:20:45  43  ,w     att34
07:20:45  44  ,mpm   att35
07:20:45  45  ,trend att36
07:20:45  46  ,ug8 g8
07:20:45  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:20:45  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:20:45  49  FROM q13
07:20:45  50  ORDER BY pair,ydate
07:20:45  51  /

Table created.

Elapsed: 00:00:05.38
07:20:50 SQL> 
07:20:50 SQL> -- rpt
07:20:50 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:20:50   2  GROUP BY pair,trend,gatt,gattn
07:20:50   3  ORDER BY pair,trend,gatt,gattn
07:20:50   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002879	    5725
usd_cad 	-1 nup up  -.00398858	    2709
usd_cad 	-1 up  nup .004646847	    2529
usd_cad 	 1 nup nup -.00009792	    4475
usd_cad 	 1 nup up  -.00420139	    2799
usd_cad 	 1 up  nup .004602186	    1990
usd_cad 	 1			       0

7 rows selected.

Elapsed: 00:00:00.03
07:20:50 SQL> 
07:20:50 SQL> -- rpt
07:20:50 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-17 21:55:00

Elapsed: 00:00:00.01
07:20:50 SQL> 
07:20:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:20:50 SQL> CREATE TABLE modsrc COMPRESS AS
07:20:50   2  SELECT
07:20:50   3  pair
07:20:50   4  ,ydate
07:20:50   5  ,prdate
07:20:50   6  ,trend
07:20:50   7  ,g8
07:20:50   8  ,gatt
07:20:50   9  ,gattn
07:20:50  10  FROM q15
07:20:50  11  /

Table created.

Elapsed: 00:00:00.09
07:20:50 SQL> 
07:20:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:20:51 SQL> 
07:20:51 SQL> -- rpt
07:20:51 SQL> 
07:20:51 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20707

Elapsed: 00:00:00.34
07:20:51 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20323

Elapsed: 00:00:00.01
07:20:51 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20323

Elapsed: 00:00:00.01
07:20:51 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20323

Elapsed: 00:00:00.00
07:20:51 SQL> 
07:20:51 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.61
07:20:52 SQL> CREATE TABLE cad_ms10 COMPRESS AS
07:20:52   2  SELECT
07:20:52   3  ydate
07:20:52   4  ,trend cad_trend
07:20:52   5  ,g8    cad_g8
07:20:52   6  ,gatt  cad_gatt
07:20:52   7  ,gattn cad_gattn
07:20:52   8  FROM modsrc
07:20:52   9  /

Table created.

Elapsed: 00:00:00.09
07:20:52 SQL> 
07:20:52 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:20:52 SQL> 
07:20:52 SQL> -- rpt
07:20:52 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-10 15:20:01 2010-12-17 21:55:00	 9264	  -.0122      .0159
	-1 2010-09-12 22:20:01 2010-12-17 08:05:00	10963	 -.01105      .0176

Elapsed: 00:00:00.02
07:20:52 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-10 15:20:01 2010-12-17 21:55:00	       9360	 -.0122       .0159
	-1 2010-09-12 22:20:01 2010-12-17 08:05:00	      10963	-.01105       .0176

Elapsed: 00:00:00.01
07:20:52 SQL> 
07:20:52 SQL> -- I need a copy of q15 attributes
07:20:52 SQL> 
07:20:52 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
07:20:52 SQL> CREATE TABLE cad_att COMPRESS AS
07:20:52   2  SELECT
07:20:52   3  ydate
07:20:52   4  ,att00 cad_att00
07:20:52   5  ,att01 cad_att01
07:20:52   6  ,att02 cad_att02
07:20:52   7  ,att03 cad_att03
07:20:52   8  ,att04 cad_att04
07:20:52   9  ,att05 cad_att05
07:20:52  10  ,att06 cad_att06
07:20:52  11  ,att07 cad_att07
07:20:52  12  ,att08 cad_att08
07:20:52  13  ,att09 cad_att09
07:20:52  14  ,att10 cad_att10
07:20:52  15  ,att11 cad_att11
07:20:52  16  ,att12 cad_att12
07:20:52  17  ,att13 cad_att13
07:20:52  18  ,att14 cad_att14
07:20:52  19  ,att15 cad_att15
07:20:52  20  ,att16 cad_att16
07:20:52  21  ,att17 cad_att17
07:20:52  22  ,att18 cad_att18
07:20:52  23  ,att19 cad_att19
07:20:52  24  ,att20 cad_att20
07:20:52  25  ,att21 cad_att21
07:20:52  26  ,att22 cad_att22
07:20:52  27  ,att23 cad_att23
07:20:52  28  ,att24 cad_att24
07:20:52  29  ,att25 cad_att25
07:20:52  30  ,att26 cad_att26
07:20:52  31  ,att27 cad_att27
07:20:52  32  ,att28 cad_att28
07:20:52  33  ,att29 cad_att29
07:20:52  34  ,att30 cad_att30
07:20:52  35  ,att31 cad_att31
07:20:52  36  ,att32 cad_att32
07:20:52  37  ,att32 cad_att33
07:20:52  38  ,att32 cad_att34
07:20:52  39  ,att32 cad_att35
07:20:52  40  ,att32 cad_att36
07:20:52  41  FROM q15
07:20:52  42  /

Table created.

Elapsed: 00:00:00.21
07:20:52 SQL> 
07:20:52 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:20:53 SQL> 
07:20:53 SQL> -- rpt
07:20:53 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20323

Elapsed: 00:00:00.01
07:20:53 SQL> 
07:20:53 SQL> --
07:20:53 SQL> -- chf10.sql
07:20:53 SQL> --
07:20:53 SQL> 
07:20:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:53 SQL> 
07:20:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
07:20:53 SQL> 
07:20:53 SQL> -- I created di5min here:
07:20:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:53 SQL> 
07:20:53 SQL> CREATE OR REPLACE VIEW q11 AS
07:20:53   2  SELECT
07:20:53   3  pair
07:20:53   4  ,ydate
07:20:53   5  ,prdate
07:20:53   6  ,rownum rnum -- acts as t in my time-series
07:20:53   7  ,clse
07:20:53   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:20:53   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:20:53  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:20:53  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:20:53  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:20:53  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:20:53  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:20:53  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:20:53  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:20:53  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:20:53  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:20:53  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:20:53  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:20:53  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:20:53  22  FROM di5min WHERE pair LIKE'%chf%'
07:20:53  23  ORDER BY ydate
07:20:53  24  /

View created.

Elapsed: 00:00:00.05
07:20:53 SQL> 
07:20:53 SQL> -- rpt
07:20:53 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20710

Elapsed: 00:00:00.33
07:20:53 SQL> 
07:20:53 SQL> -- Calc deltas and gains
07:20:53 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
07:20:53 SQL> 
07:20:53 SQL> CREATE TABLE q13 COMPRESS AS
07:20:53   2  SELECT
07:20:53   3  pair
07:20:53   4  ,ydate
07:20:53   5  ,prdate
07:20:53   6  ,rnum
07:20:53   7  ,ld8
07:20:53   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:20:53   9  -- step by 2
07:20:53  10  ,clse-lg6  d06
07:20:53  11  ,lg6 -lg8  d68
07:20:53  12  ,lg8 -lg10 d810
07:20:53  13  ,lg10-lg12 d1012
07:20:53  14  ,lg12-lg14 d1214
07:20:53  15  ,lg14-lg16 d1416
07:20:53  16  ,lg16-lg18 d1618
07:20:53  17  -- step by 4
07:20:53  18  ,lg6 -lg10 d610
07:20:53  19  ,lg8 -lg12 d812
07:20:53  20  ,lg10-lg14 d1014
07:20:53  21  ,lg12-lg16 d1216
07:20:53  22  --
07:20:53  23  ,ABS(clse-lg6 )dc6
07:20:53  24  ,ABS(clse-lg8 )dc8
07:20:53  25  ,ABS(clse-lg10)dc10
07:20:53  26  ,ABS(clse-lg12)dc12
07:20:53  27  ,ABS(clse-lg14)dc14
07:20:53  28  ,ABS(clse-lg16)dc16
07:20:53  29  ,ABS(clse-lg18)dc18
07:20:53  30  ,ABS(clse-lg20)dc20
07:20:53  31  ,ABS(clse-lg22)dc22
07:20:53  32  ,(ld8-clse) ug8
07:20:53  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:53  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:53  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:53  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:53  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:53  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:53  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:53  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:20:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:20:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:20:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:20:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:20:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:20:53  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:53  47  ,0+TO_CHAR(ydate,'D')d
07:20:53  48  ,0+TO_CHAR(ydate,'W')w
07:20:53  49  -- mpm stands for minutes-past-midnight:
07:20:53  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:53  51  FROM q11
07:20:53  52  -- I dont want any NULL values from the LAG() functions:
07:20:53  53  WHERE lg32 > 0
07:20:53  54  ORDER BY pair,ydate
07:20:53  55  /

Table created.

Elapsed: 00:00:01.73
07:20:55 SQL> 
07:20:55 SQL> -- rpt
07:20:55 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9629
	-1	   10697

Elapsed: 00:00:00.03
07:20:55 SQL> 
07:20:55 SQL> -- Calc gains and ntiles
07:20:55 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.25
07:20:55 SQL> CREATE TABLE q15 COMPRESS AS
07:20:55   2  SELECT
07:20:55   3  pair
07:20:55   4  ,ydate
07:20:55   5  ,prdate -- Should be unique
07:20:55   6  ,trend -- +1 or -1
07:20:55   7  -- Use NTILE() to derive some attributes
07:20:55   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:20:55   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:20:55  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:20:55  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:20:55  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:20:55  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:20:55  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:20:55  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:20:55  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:20:55  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:20:55  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:20:55  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:20:55  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:20:55  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:20:55  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:20:55  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:20:55  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:20:55  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:20:55  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:20:55  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:20:55  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:20:55  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:20:55  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:20:55  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:20:55  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:20:55  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:20:55  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:20:55  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:20:55  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:20:55  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:20:55  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:20:55  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:20:55  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:20:55  41  ,hh    att32
07:20:55  42  ,d     att33
07:20:55  43  ,w     att34
07:20:55  44  ,mpm   att35
07:20:55  45  ,trend att36
07:20:55  46  ,ug8 g8
07:20:55  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:20:55  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:20:55  49  FROM q13
07:20:55  50  ORDER BY pair,ydate
07:20:55  51  /

Table created.

Elapsed: 00:00:05.43
07:21:01 SQL> 
07:21:01 SQL> -- rpt
07:21:01 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:21:01   2  GROUP BY pair,trend,gatt,gattn
07:21:01   3  ORDER BY pair,trend,gatt,gattn
07:21:01   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000058178	    4790
usd_chf 	-1 nup up  -.00512553	    3176
usd_chf 	-1 up  nup .005201877	    2731
usd_chf 	 1 nup nup -2.091E-06	    4603
usd_chf 	 1 nup up  -.00464032	    2800
usd_chf 	 1 up  nup .004709131	    2130
usd_chf 	 1			       0

7 rows selected.

Elapsed: 00:00:00.03
07:21:01 SQL> 
07:21:01 SQL> -- rpt
07:21:01 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-17 21:55:00

Elapsed: 00:00:00.01
07:21:01 SQL> 
07:21:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:21:01 SQL> CREATE TABLE modsrc COMPRESS AS
07:21:01   2  SELECT
07:21:01   3  pair
07:21:01   4  ,ydate
07:21:01   5  ,prdate
07:21:01   6  ,trend
07:21:01   7  ,g8
07:21:01   8  ,gatt
07:21:01   9  ,gattn
07:21:01  10  FROM q15
07:21:01  11  /

Table created.

Elapsed: 00:00:00.08
07:21:01 SQL> 
07:21:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:21:01 SQL> 
07:21:01 SQL> -- rpt
07:21:01 SQL> 
07:21:01 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20710

Elapsed: 00:00:00.33
07:21:02 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20326

Elapsed: 00:00:00.01
07:21:02 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20326

Elapsed: 00:00:00.00
07:21:02 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20326

Elapsed: 00:00:00.01
07:21:02 SQL> 
07:21:02 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:21:02 SQL> CREATE TABLE chf_ms10 COMPRESS AS
07:21:02   2  SELECT
07:21:02   3  ydate
07:21:02   4  ,trend chf_trend
07:21:02   5  ,g8    chf_g8
07:21:02   6  ,gatt  chf_gatt
07:21:02   7  ,gattn chf_gattn
07:21:02   8  FROM modsrc
07:21:02   9  /

Table created.

Elapsed: 00:00:00.07
07:21:02 SQL> 
07:21:02 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:21:02 SQL> 
07:21:02 SQL> -- rpt
07:21:02 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-12 22:35:01 2010-12-17 21:55:00	 9533	 -.01775      .0155
	-1 2010-09-10 15:20:01 2010-12-17 11:35:00	10697	 -.01825     .01545

Elapsed: 00:00:00.03
07:21:02 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-12 22:35:01 2010-12-17 21:55:00	       9629	-.01775       .0155
	-1 2010-09-10 15:20:01 2010-12-17 11:35:00	      10697	-.01825      .01545

Elapsed: 00:00:00.01
07:21:02 SQL> 
07:21:02 SQL> -- I need a copy of q15 attributes
07:21:02 SQL> 
07:21:02 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
07:21:02 SQL> CREATE TABLE chf_att COMPRESS AS
07:21:02   2  SELECT
07:21:02   3  ydate
07:21:02   4  ,att00 chf_att00
07:21:02   5  ,att01 chf_att01
07:21:02   6  ,att02 chf_att02
07:21:02   7  ,att03 chf_att03
07:21:02   8  ,att04 chf_att04
07:21:02   9  ,att05 chf_att05
07:21:02  10  ,att06 chf_att06
07:21:02  11  ,att07 chf_att07
07:21:02  12  ,att08 chf_att08
07:21:02  13  ,att09 chf_att09
07:21:02  14  ,att10 chf_att10
07:21:02  15  ,att11 chf_att11
07:21:02  16  ,att12 chf_att12
07:21:02  17  ,att13 chf_att13
07:21:02  18  ,att14 chf_att14
07:21:02  19  ,att15 chf_att15
07:21:02  20  ,att16 chf_att16
07:21:02  21  ,att17 chf_att17
07:21:02  22  ,att18 chf_att18
07:21:02  23  ,att19 chf_att19
07:21:02  24  ,att20 chf_att20
07:21:02  25  ,att21 chf_att21
07:21:02  26  ,att22 chf_att22
07:21:02  27  ,att23 chf_att23
07:21:02  28  ,att24 chf_att24
07:21:02  29  ,att25 chf_att25
07:21:02  30  ,att26 chf_att26
07:21:02  31  ,att27 chf_att27
07:21:02  32  ,att28 chf_att28
07:21:02  33  ,att29 chf_att29
07:21:02  34  ,att30 chf_att30
07:21:02  35  ,att31 chf_att31
07:21:02  36  ,att32 chf_att32
07:21:02  37  ,att32 chf_att33
07:21:02  38  ,att32 chf_att34
07:21:02  39  ,att32 chf_att35
07:21:02  40  ,att32 chf_att36
07:21:02  41  FROM q15
07:21:02  42  /

Table created.

Elapsed: 00:00:00.17
07:21:02 SQL> 
07:21:02 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:21:03 SQL> 
07:21:03 SQL> -- rpt
07:21:03 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20326

Elapsed: 00:00:00.01
07:21:03 SQL> 
07:21:03 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
