
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 9 20:40:46 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:40:47 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
20:40:47 SQL> 20:40:47 SQL> --
20:40:47 SQL> -- stk10.sql
20:40:47 SQL> --
20:40:47 SQL> 
20:40:47 SQL> -- Creates views and tables for demonstrating SVM.
20:40:47 SQL> 
20:40:47 SQL> CREATE OR REPLACE VIEW stk10 AS
20:40:47   2  SELECT
20:40:47   3  tkr
20:40:47   4  ,ydate
20:40:47   5  ,tkr||ydate tkrdate
20:40:47   6  ,clse
20:40:47   7  ,rownum rnum -- acts as t in my time-series
20:40:47   8  -- Derive some attributes from clse.
20:40:47   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
20:40:47  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
20:40:47  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
20:40:47  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
20:40:47  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
20:40:47  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
20:40:47  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
20:40:47  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
20:40:47  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
20:40:47  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
20:40:47  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
20:40:47  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
20:40:47  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
20:40:47  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
20:40:47  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
20:40:47  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
20:40:47  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
20:40:47  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
20:40:47  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
20:40:47  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
20:40:47  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
20:40:47  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
20:40:47  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
20:40:47  32  ORDER BY ydate
20:40:47  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='AMX'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.08
20:40:47 SQL> 
20:40:47 SQL> -- rpt
20:40:47 SQL> 
20:40:47 SQL> SELECT
20:40:47   2  tkr
20:40:47   3  ,COUNT(tkr)
20:40:47   4  ,MIN(clse),MAX(clse)
20:40:47   5  ,MIN(avg4),MAX(avg4)
20:40:47   6  ,MIN(ydate),MAX(ydate)
20:40:47   7  FROM stk10
20:40:47   8  GROUP BY tkr
20:40:47   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
AMX		2489	   3.62      66.85	3.752	   65.34 2001-02-13 2011-01-07

Elapsed: 00:00:00.14
20:40:47 SQL> 
20:40:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:40:47 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.15
20:40:47 SQL> CREATE TABLE stk12 COMPRESS AS
20:40:47   2  SELECT
20:40:47   3  tkr
20:40:47   4  ,ydate
20:40:47   5  ,tkrdate
20:40:47   6  ,clse
20:40:47   7  ,rnum
20:40:47   8  -- g1 is important. I want to predict g1:
20:40:47   9  ,ld - clse g1
20:40:47  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:40:47  11  -- I want more attributes from the ones I derived above:
20:40:47  12  -- clse relation to moving-min
20:40:47  13  ,clse-min3  cm3
20:40:47  14  ,clse-min4  cm4
20:40:47  15  ,clse-min5  cm5
20:40:47  16  ,clse-min6  cm6
20:40:47  17  ,clse-min7  cm7
20:40:47  18  ,clse-min8  cm8
20:40:47  19  ,clse-min9  cm9
20:40:47  20  -- clse relation to moving-avg
20:40:47  21  ,clse-avg3  ca3
20:40:47  22  ,clse-avg4  ca4
20:40:47  23  ,clse-avg5  ca5
20:40:47  24  ,clse-avg6  ca6
20:40:47  25  ,clse-avg7  ca7
20:40:47  26  ,clse-avg8  ca8
20:40:47  27  ,clse-avg9  ca9
20:40:47  28  -- clse relation to moving-max
20:40:47  29  ,clse-max3  cx3
20:40:47  30  ,clse-max4  cx4
20:40:47  31  ,clse-max5  cx5
20:40:47  32  ,clse-max6  cx6
20:40:47  33  ,clse-max7  cx7
20:40:47  34  ,clse-max8  cx8
20:40:47  35  ,clse-max9  cx9
20:40:47  36  -- Derive date related attributes:
20:40:47  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:40:47  38  ,0+TO_CHAR(ydate,'D')d
20:40:47  39  ,0+TO_CHAR(ydate,'W')w
20:40:47  40  -- mpm stands for minutes-past-midnight:
20:40:47  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:40:47  42  -- mph stands for minutes-past-hour:
20:40:47  43  ,0+TO_CHAR(ydate,'MI')mph
20:40:47  44  FROM stk10
20:40:47  45  ORDER BY ydate
20:40:47  46  /

Table created.

Elapsed: 00:00:00.34
20:40:47 SQL> 
20:40:47 SQL> -- rpt
20:40:47 SQL> 
20:40:47 SQL> SELECT
20:40:47   2  tkr
20:40:47   3  ,COUNT(tkr)
20:40:47   4  ,MIN(clse),MAX(clse)
20:40:47   5  ,MIN(ydate),MAX(ydate)
20:40:47   6  FROM stk12
20:40:47   7  GROUP BY tkr
20:40:47   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
AMX		2489	   3.62      66.85 2001-02-13 2011-01-07

Elapsed: 00:00:00.01
20:40:47 SQL> 
20:40:47 SQL> -- Prepare for derivation of NTILE based parameters.
20:40:47 SQL> -- Also derive the "trend" parameter:
20:40:47 SQL> 
20:40:47 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.07
20:40:47 SQL> CREATE TABLE stk14 COMPRESS AS
20:40:47   2  SELECT
20:40:47   3  tkr
20:40:47   4  ,ydate
20:40:47   5  ,tkrdate
20:40:47   6  ,clse
20:40:47   7  ,g1
20:40:47   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:40:47   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:40:47  10  ,CASE WHEN trend IS NULL THEN 1
20:40:47  11  	    WHEN trend =0      THEN 1
20:40:47  12  	    ELSE trend END trend
20:40:47  13  ,cm3
20:40:47  14  ,cm4
20:40:47  15  ,cm5
20:40:47  16  ,cm6
20:40:47  17  ,cm7
20:40:47  18  ,cm8
20:40:47  19  ,cm9
20:40:47  20  ,ca3
20:40:47  21  ,ca4
20:40:47  22  ,ca5
20:40:47  23  ,ca6
20:40:47  24  ,ca7
20:40:47  25  ,ca8
20:40:47  26  ,ca9
20:40:47  27  ,cx3
20:40:47  28  ,cx4
20:40:47  29  ,cx5
20:40:47  30  ,cx6
20:40:47  31  ,cx7
20:40:47  32  ,cx8
20:40:47  33  ,cx9
20:40:47  34  ,hh
20:40:47  35  ,d
20:40:47  36  ,w
20:40:47  37  ,mpm
20:40:47  38  ,mph
20:40:47  39  FROM stk12
20:40:47  40  -- Guard against divide by 0:
20:40:47  41  WHERE clse > 0
20:40:47  42  ORDER BY ydate
20:40:47  43  /

Table created.

Elapsed: 00:00:00.12
20:40:47 SQL> 
20:40:47 SQL> -- rpt
20:40:47 SQL> 
20:40:47 SQL> SELECT
20:40:47   2  tkr
20:40:47   3  ,trend
20:40:47   4  ,gatt
20:40:47   5  ,COUNT(tkr)
20:40:47   6  ,AVG(g1)
20:40:47   7  FROM stk14
20:40:47   8  GROUP BY tkr,trend,gatt
20:40:47   9  ORDER BY tkr,trend,gatt
20:40:47  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AMX		  -1 nup	537 -.45642458
AMX		  -1 up 	498 .608072289
AMX		   1 nup	817 -.38649939
AMX		   1 up 	636 .487814465
AMX		   1		  1

Elapsed: 00:00:00.01
20:40:47 SQL> 
20:40:47 SQL> -- Derive NTILE based params:
20:40:47 SQL> 
20:40:47 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.06
20:40:48 SQL> CREATE TABLE stk16 COMPRESS AS
20:40:48   2  SELECT
20:40:48   3  tkr
20:40:48   4  ,ydate
20:40:48   5  ,tkrdate
20:40:48   6  ,clse
20:40:48   7  ,g1
20:40:48   8  ,gatt
20:40:48   9  ,gattn
20:40:48  10  ,trend
20:40:48  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:40:48  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:40:48  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:40:48  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:40:48  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:40:48  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:40:48  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:40:48  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:40:48  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:40:48  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:40:48  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:40:48  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:40:48  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:40:48  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:40:48  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:40:48  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:40:48  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:40:48  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:40:48  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:40:48  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:40:48  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:40:48  32  ,hh  att21
20:40:48  33  ,d   att22
20:40:48  34  ,w   att23
20:40:48  35  ,mpm att24
20:40:48  36  ,mph att25
20:40:48  37  ,trend att26
20:40:48  38  FROM stk14
20:40:48  39  ORDER BY ydate
20:40:48  40  /

Table created.

Elapsed: 00:00:00.34
20:40:48 SQL> 
20:40:48 SQL> -- rpt
20:40:48 SQL> 
20:40:48 SQL> SELECT
20:40:48   2  tkr
20:40:48   3  ,trend
20:40:48   4  ,gatt
20:40:48   5  ,COUNT(tkr)
20:40:48   6  ,AVG(g1)
20:40:48   7  FROM stk16
20:40:48   8  GROUP BY tkr,trend,gatt
20:40:48   9  ORDER BY tkr,trend,gatt
20:40:48  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AMX		  -1 nup	537 -.45642458
AMX		  -1 up 	498 .608072289
AMX		   1 nup	817 -.38649939
AMX		   1 up 	636 .487814465
AMX		   1		  1

Elapsed: 00:00:00.01
20:40:48 SQL> 
20:40:48 SQL> -- Now I derive goodness attributes:
20:40:48 SQL> 
20:40:48 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.04
20:40:48 SQL> CREATE TABLE stk_ms COMPRESS AS
20:40:48   2  SELECT
20:40:48   3  tkr
20:40:48   4  ,ydate
20:40:48   5  ,tkrdate
20:40:48   6  ,trend
20:40:48   7  ,g1
20:40:48   8  ,gatt
20:40:48   9  ,gattn
20:40:48  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
20:40:48  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
20:40:48  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
20:40:48  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
20:40:48  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
20:40:48  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
20:40:48  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
20:40:48  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
20:40:48  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
20:40:48  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
20:40:48  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
20:40:48  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
20:40:48  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
20:40:48  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
20:40:48  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
20:40:48  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
20:40:48  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
20:40:48  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
20:40:48  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
20:40:48  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
20:40:48  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
20:40:48  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
20:40:48  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
20:40:48  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
20:40:48  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
20:40:48  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
20:40:48  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
20:40:48  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:40:48  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
20:40:48  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
20:40:48  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
20:40:48  41  FROM stk16
20:40:48  42  /

Table created.

Elapsed: 00:00:00.50
20:40:48 SQL> 
20:40:48 SQL> -- rpt
20:40:48 SQL> 
20:40:48 SQL> SELECT
20:40:48   2  tkr
20:40:48   3  ,trend
20:40:48   4  ,gatt
20:40:48   5  ,COUNT(tkr)
20:40:48   6  ,AVG(g1)
20:40:48   7  FROM stk_ms
20:40:48   8  GROUP BY tkr,trend,gatt
20:40:48   9  ORDER BY tkr,trend,gatt
20:40:48  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AMX		  -1 nup	537 -.45642458
AMX		  -1 up 	498 .608072289
AMX		   1 nup	817 -.38649939
AMX		   1 up 	636 .487814465
AMX		   1		  1

Elapsed: 00:00:00.01
20:40:48 SQL> 
20:40:48 SQL> SELECT
20:40:48   2  tkr
20:40:48   3  ,COUNT(tkr)
20:40:48   4  ,MIN(ydate),MAX(ydate)
20:40:48   5  FROM stk_ms
20:40:48   6  GROUP BY tkr
20:40:48   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
AMX		2489 2001-02-13 2011-01-07

Elapsed: 00:00:00.01
20:40:48 SQL> 
20:40:48 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
