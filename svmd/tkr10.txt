
SQL*Plus: Release 11.2.0.1.0 Production on Tue Jan 11 16:20:48 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

16:20:49 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
16:20:49 SQL> 16:20:49 SQL> --
16:20:49 SQL> -- stk10.sql
16:20:49 SQL> --
16:20:49 SQL> 
16:20:49 SQL> -- Creates views and tables for demonstrating SVM.
16:20:49 SQL> 
16:20:49 SQL> CREATE OR REPLACE VIEW stk10 AS
16:20:49   2  SELECT
16:20:49   3  tkr
16:20:49   4  ,ydate
16:20:49   5  ,tkr||ydate tkrdate
16:20:49   6  ,clse
16:20:49   7  ,rownum rnum -- acts as t in my time-series
16:20:49   8  -- Derive some attributes from clse.
16:20:49   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
16:20:49  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
16:20:49  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
16:20:49  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
16:20:49  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
16:20:49  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
16:20:49  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
16:20:49  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
16:20:49  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
16:20:49  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
16:20:49  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
16:20:49  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
16:20:49  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
16:20:49  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
16:20:49  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
16:20:49  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
16:20:49  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
16:20:49  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
16:20:49  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
16:20:49  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
16:20:49  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
16:20:49  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
16:20:49  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
16:20:49  32  ORDER BY ydate
16:20:49  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='GOOG'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.11
16:20:49 SQL> 
16:20:49 SQL> -- rpt
16:20:49 SQL> 
16:20:49 SQL> SELECT
16:20:49   2  tkr
16:20:49   3  ,COUNT(tkr)
16:20:49   4  ,MIN(clse),MAX(clse)
16:20:49   5  ,MIN(avg4),MAX(avg4)
16:20:49   6  ,MIN(ydate),MAX(ydate)
16:20:49   7  FROM stk10
16:20:49   8  GROUP BY tkr
16:20:49   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
GOOG		1610	 100.01     741.79     100.34	 722.968 2004-08-19 2011-01-07

Elapsed: 00:00:00.69
16:20:49 SQL> 
16:20:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:20:49 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.46
16:20:50 SQL> CREATE TABLE stk12 COMPRESS AS
16:20:50   2  SELECT
16:20:50   3  tkr
16:20:50   4  ,ydate
16:20:50   5  ,tkrdate
16:20:50   6  ,clse
16:20:50   7  ,rnum
16:20:50   8  -- g1 is important. I want to predict g1:
16:20:50   9  ,ld - clse g1
16:20:50  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
16:20:50  11  -- I want more attributes from the ones I derived above:
16:20:50  12  -- clse relation to moving-min
16:20:50  13  ,clse-min3  cm3
16:20:50  14  ,clse-min4  cm4
16:20:50  15  ,clse-min5  cm5
16:20:50  16  ,clse-min6  cm6
16:20:50  17  ,clse-min7  cm7
16:20:50  18  ,clse-min8  cm8
16:20:50  19  ,clse-min9  cm9
16:20:50  20  -- clse relation to moving-avg
16:20:50  21  ,clse-avg3  ca3
16:20:50  22  ,clse-avg4  ca4
16:20:50  23  ,clse-avg5  ca5
16:20:50  24  ,clse-avg6  ca6
16:20:50  25  ,clse-avg7  ca7
16:20:50  26  ,clse-avg8  ca8
16:20:50  27  ,clse-avg9  ca9
16:20:50  28  -- clse relation to moving-max
16:20:50  29  ,clse-max3  cx3
16:20:50  30  ,clse-max4  cx4
16:20:50  31  ,clse-max5  cx5
16:20:50  32  ,clse-max6  cx6
16:20:50  33  ,clse-max7  cx7
16:20:50  34  ,clse-max8  cx8
16:20:50  35  ,clse-max9  cx9
16:20:50  36  -- Derive date related attributes:
16:20:50  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:20:50  38  ,0+TO_CHAR(ydate,'D')d
16:20:50  39  ,0+TO_CHAR(ydate,'W')w
16:20:50  40  -- mpm stands for minutes-past-midnight:
16:20:50  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:20:50  42  -- mph stands for minutes-past-hour:
16:20:50  43  ,0+TO_CHAR(ydate,'MI')mph
16:20:50  44  FROM stk10
16:20:50  45  ORDER BY ydate
16:20:50  46  /

Table created.

Elapsed: 00:00:00.37
16:20:50 SQL> 
16:20:50 SQL> -- rpt
16:20:50 SQL> 
16:20:50 SQL> SELECT
16:20:50   2  tkr
16:20:50   3  ,COUNT(tkr)
16:20:50   4  ,MIN(clse),MAX(clse)
16:20:50   5  ,MIN(ydate),MAX(ydate)
16:20:50   6  FROM stk12
16:20:50   7  GROUP BY tkr
16:20:50   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
GOOG		1610	 100.01     741.79 2004-08-19 2011-01-07

Elapsed: 00:00:00.02
16:20:50 SQL> 
16:20:50 SQL> -- Prepare for derivation of NTILE based parameters.
16:20:50 SQL> -- Also derive the "trend" parameter:
16:20:50 SQL> 
16:20:50 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.08
16:20:50 SQL> CREATE TABLE stk14 COMPRESS AS
16:20:50   2  SELECT
16:20:50   3  tkr
16:20:50   4  ,ydate
16:20:50   5  ,tkrdate
16:20:50   6  ,clse
16:20:50   7  ,g1
16:20:50   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
16:20:50   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
16:20:50  10  ,CASE WHEN trend IS NULL THEN 1
16:20:50  11  	    WHEN trend =0      THEN 1
16:20:50  12  	    ELSE trend END trend
16:20:50  13  ,cm3
16:20:50  14  ,cm4
16:20:50  15  ,cm5
16:20:50  16  ,cm6
16:20:50  17  ,cm7
16:20:50  18  ,cm8
16:20:50  19  ,cm9
16:20:50  20  ,ca3
16:20:50  21  ,ca4
16:20:50  22  ,ca5
16:20:50  23  ,ca6
16:20:50  24  ,ca7
16:20:50  25  ,ca8
16:20:50  26  ,ca9
16:20:50  27  ,cx3
16:20:50  28  ,cx4
16:20:50  29  ,cx5
16:20:50  30  ,cx6
16:20:50  31  ,cx7
16:20:50  32  ,cx8
16:20:50  33  ,cx9
16:20:50  34  ,hh
16:20:50  35  ,d
16:20:50  36  ,w
16:20:50  37  ,mpm
16:20:50  38  ,mph
16:20:50  39  FROM stk12
16:20:50  40  -- Guard against divide by 0:
16:20:50  41  WHERE clse > 0
16:20:50  42  ORDER BY ydate
16:20:50  43  /

Table created.

Elapsed: 00:00:00.13
16:20:51 SQL> 
16:20:51 SQL> -- rpt
16:20:51 SQL> 
16:20:51 SQL> SELECT
16:20:51   2  tkr
16:20:51   3  ,trend
16:20:51   4  ,gatt
16:20:51   5  ,COUNT(tkr)
16:20:51   6  ,AVG(g1)
16:20:51   7  FROM stk14
16:20:51   8  GROUP BY tkr,trend,gatt
16:20:51   9  ORDER BY tkr,trend,gatt
16:20:51  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GOOG		  -1 nup	386 -6.4498446
GOOG		  -1 up 	296 8.20084459
GOOG		   1 nup	505 -4.4878218
GOOG		   1 up 	422 6.74085308
GOOG		   1		  1

Elapsed: 00:00:00.02
16:20:51 SQL> 
16:20:51 SQL> -- Derive NTILE based params:
16:20:51 SQL> 
16:20:51 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.06
16:20:51 SQL> CREATE TABLE stk16 COMPRESS AS
16:20:51   2  SELECT
16:20:51   3  tkr
16:20:51   4  ,ydate
16:20:51   5  ,tkrdate
16:20:51   6  ,clse
16:20:51   7  ,g1
16:20:51   8  ,gatt
16:20:51   9  ,gattn
16:20:51  10  ,trend
16:20:51  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
16:20:51  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
16:20:51  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
16:20:51  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
16:20:51  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
16:20:51  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
16:20:51  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
16:20:51  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
16:20:51  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
16:20:51  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
16:20:51  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
16:20:51  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
16:20:51  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
16:20:51  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
16:20:51  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
16:20:51  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
16:20:51  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
16:20:51  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
16:20:51  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
16:20:51  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
16:20:51  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
16:20:51  32  ,hh  att21
16:20:51  33  ,d   att22
16:20:51  34  ,w   att23
16:20:51  35  ,mpm att24
16:20:51  36  ,mph att25
16:20:51  37  ,trend att26
16:20:51  38  FROM stk14
16:20:51  39  ORDER BY ydate
16:20:51  40  /

Table created.

Elapsed: 00:00:00.21
16:20:51 SQL> 
16:20:51 SQL> -- rpt
16:20:51 SQL> 
16:20:51 SQL> SELECT
16:20:51   2  tkr
16:20:51   3  ,trend
16:20:51   4  ,gatt
16:20:51   5  ,COUNT(tkr)
16:20:51   6  ,AVG(g1)
16:20:51   7  FROM stk16
16:20:51   8  GROUP BY tkr,trend,gatt
16:20:51   9  ORDER BY tkr,trend,gatt
16:20:51  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GOOG		  -1 nup	386 -6.4498446
GOOG		  -1 up 	296 8.20084459
GOOG		   1 nup	505 -4.4878218
GOOG		   1 up 	422 6.74085308
GOOG		   1		  1

Elapsed: 00:00:00.01
16:20:51 SQL> 
16:20:51 SQL> -- Now I derive goodness attributes:
16:20:51 SQL> 
16:20:51 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.06
16:20:51 SQL> CREATE TABLE stk_ms COMPRESS AS
16:20:51   2  SELECT
16:20:51   3  tkr
16:20:51   4  ,ydate
16:20:51   5  ,tkrdate
16:20:51   6  ,trend
16:20:51   7  ,g1
16:20:51   8  ,gatt
16:20:51   9  ,gattn
16:20:51  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
16:20:51  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
16:20:51  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
16:20:51  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
16:20:51  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
16:20:51  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
16:20:51  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
16:20:51  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
16:20:51  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
16:20:51  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
16:20:51  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
16:20:51  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
16:20:51  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
16:20:51  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
16:20:51  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
16:20:51  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
16:20:51  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
16:20:51  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
16:20:51  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
16:20:51  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
16:20:51  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
16:20:51  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
16:20:51  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
16:20:51  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
16:20:51  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
16:20:51  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
16:20:51  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
16:20:51  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
16:20:51  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
16:20:51  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
16:20:51  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
16:20:51  41  FROM stk16
16:20:51  42  /

Table created.

Elapsed: 00:00:00.31
16:20:51 SQL> 
16:20:51 SQL> -- rpt
16:20:51 SQL> 
16:20:51 SQL> SELECT
16:20:51   2  tkr
16:20:51   3  ,trend
16:20:51   4  ,gatt
16:20:51   5  ,COUNT(tkr)
16:20:51   6  ,AVG(g1)
16:20:51   7  FROM stk_ms
16:20:51   8  GROUP BY tkr,trend,gatt
16:20:51   9  ORDER BY tkr,trend,gatt
16:20:51  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GOOG		  -1 nup	386 -6.4498446
GOOG		  -1 up 	296 8.20084459
GOOG		   1 nup	505 -4.4878218
GOOG		   1 up 	422 6.74085308
GOOG		   1		  1

Elapsed: 00:00:00.01
16:20:51 SQL> 
16:20:51 SQL> SELECT
16:20:51   2  tkr
16:20:51   3  ,COUNT(tkr)
16:20:51   4  ,MIN(ydate),MAX(ydate)
16:20:51   5  FROM stk_ms
16:20:51   6  GROUP BY tkr
16:20:51   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
GOOG		1610 2004-08-19 2011-01-07

Elapsed: 00:00:00.00
16:20:51 SQL> 
16:20:51 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
