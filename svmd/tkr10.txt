
SQL*Plus: Release 11.2.0.1.0 Production on Thu Apr 7 12:01:50 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

12:01:50 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
12:01:50 SQL> 
12:01:50 SQL> 12:01:50 SQL> --
12:01:50 SQL> -- stk10.sql
12:01:50 SQL> --
12:01:50 SQL> 
12:01:50 SQL> -- Creates views and tables for demonstrating SVM.
12:01:50 SQL> 
12:01:50 SQL> CREATE OR REPLACE VIEW stk_svmd10 AS
12:01:50   2  SELECT
12:01:50   3  tkr
12:01:50   4  ,ydate
12:01:50   5  ,tkr||ydate tkrdate
12:01:50   6  ,clse
12:01:50   7  ,rownum rnum -- acts as t in my time-series
12:01:50   8  -- Derive some attributes from clse.
12:01:50   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
12:01:50  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
12:01:50  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
12:01:50  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
12:01:50  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
12:01:50  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
12:01:50  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
12:01:50  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
12:01:50  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
12:01:50  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
12:01:50  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
12:01:50  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
12:01:50  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
12:01:50  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
12:01:50  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
12:01:50  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
12:01:50  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
12:01:50  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
12:01:50  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
12:01:50  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
12:01:50  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
12:01:50  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
12:01:50  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
12:01:50  32  ORDER BY ydate
12:01:50  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='XOM'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.03
12:01:50 SQL> 
12:01:50 SQL> -- rpt
12:01:50 SQL> 
12:01:50 SQL> SELECT
12:01:50   2  tkr
12:01:50   3  ,COUNT(tkr)
12:01:50   4  ,MIN(clse),MAX(clse)
12:01:50   5  ,MIN(avg4),MAX(avg4)
12:01:50   6  ,MIN(ydate),MAX(ydate)
12:01:50   7  FROM stk_svmd10
12:01:50   8  GROUP BY tkr
12:01:50   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
XOM		5361	   6.01      88.55	6.042	  87.684 1990-01-02 2011-04-06

Elapsed: 00:00:00.18
12:01:50 SQL> 
12:01:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:01:50 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.12
12:01:50 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
12:01:50   2  SELECT
12:01:50   3  tkr
12:01:50   4  ,ydate
12:01:50   5  ,tkrdate
12:01:50   6  ,clse
12:01:50   7  ,rnum
12:01:50   8  -- g1 is important. I want to predict g1:
12:01:50   9  ,ld - clse g1
12:01:50  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
12:01:50  11  -- I want more attributes from the ones I derived above:
12:01:50  12  -- clse relation to moving-min
12:01:50  13  ,clse-min3  cm3
12:01:50  14  ,clse-min4  cm4
12:01:50  15  ,clse-min5  cm5
12:01:50  16  ,clse-min6  cm6
12:01:50  17  ,clse-min7  cm7
12:01:50  18  ,clse-min8  cm8
12:01:50  19  ,clse-min9  cm9
12:01:50  20  -- clse relation to moving-avg
12:01:50  21  ,clse-avg3  ca3
12:01:50  22  ,clse-avg4  ca4
12:01:50  23  ,clse-avg5  ca5
12:01:50  24  ,clse-avg6  ca6
12:01:50  25  ,clse-avg7  ca7
12:01:50  26  ,clse-avg8  ca8
12:01:50  27  ,clse-avg9  ca9
12:01:50  28  -- clse relation to moving-max
12:01:50  29  ,clse-max3  cx3
12:01:50  30  ,clse-max4  cx4
12:01:50  31  ,clse-max5  cx5
12:01:50  32  ,clse-max6  cx6
12:01:50  33  ,clse-max7  cx7
12:01:50  34  ,clse-max8  cx8
12:01:50  35  ,clse-max9  cx9
12:01:50  36  -- Derive date related attributes:
12:01:50  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:01:50  38  ,0+TO_CHAR(ydate,'D')d
12:01:50  39  ,0+TO_CHAR(ydate,'W')w
12:01:50  40  -- mpm stands for minutes-past-midnight:
12:01:50  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:01:50  42  -- mph stands for minutes-past-hour:
12:01:50  43  ,0+TO_CHAR(ydate,'MI')mph
12:01:50  44  FROM stk_svmd10
12:01:50  45  ORDER BY ydate
12:01:50  46  /

Table created.

Elapsed: 00:00:00.50
12:01:51 SQL> 
12:01:51 SQL> -- rpt
12:01:51 SQL> 
12:01:51 SQL> SELECT
12:01:51   2  tkr
12:01:51   3  ,COUNT(tkr)
12:01:51   4  ,MIN(clse),MAX(clse)
12:01:51   5  ,MIN(ydate),MAX(ydate)
12:01:51   6  FROM stk_svmd12
12:01:51   7  GROUP BY tkr
12:01:51   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
XOM		5361	   6.01      88.55 1990-01-02 2011-04-06

Elapsed: 00:00:00.02
12:01:51 SQL> 
12:01:51 SQL> -- Prepare for derivation of NTILE based parameters.
12:01:51 SQL> -- Also derive the "trend" parameter:
12:01:51 SQL> 
12:01:51 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.13
12:01:51 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
12:01:51   2  SELECT
12:01:51   3  tkr
12:01:51   4  ,ydate
12:01:51   5  ,tkrdate
12:01:51   6  ,clse
12:01:51   7  ,g1
12:01:51   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
12:01:51   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
12:01:51  10  ,CASE WHEN trend IS NULL THEN 1
12:01:51  11  	    WHEN trend =0      THEN 1
12:01:51  12  	    ELSE trend END trend
12:01:51  13  ,cm3
12:01:51  14  ,cm4
12:01:51  15  ,cm5
12:01:51  16  ,cm6
12:01:51  17  ,cm7
12:01:51  18  ,cm8
12:01:51  19  ,cm9
12:01:51  20  ,ca3
12:01:51  21  ,ca4
12:01:51  22  ,ca5
12:01:51  23  ,ca6
12:01:51  24  ,ca7
12:01:51  25  ,ca8
12:01:51  26  ,ca9
12:01:51  27  ,cx3
12:01:51  28  ,cx4
12:01:51  29  ,cx5
12:01:51  30  ,cx6
12:01:51  31  ,cx7
12:01:51  32  ,cx8
12:01:51  33  ,cx9
12:01:51  34  ,hh
12:01:51  35  ,d
12:01:51  36  ,w
12:01:51  37  ,mpm
12:01:51  38  ,mph
12:01:51  39  FROM stk_svmd12
12:01:51  40  -- Guard against divide by 0:
12:01:51  41  WHERE clse > 0
12:01:51  42  ORDER BY ydate
12:01:51  43  /

Table created.

Elapsed: 00:00:00.11
12:01:51 SQL> 
12:01:51 SQL> -- rpt
12:01:51 SQL> 
12:01:51 SQL> SELECT
12:01:51   2  tkr
12:01:51   3  ,trend
12:01:51   4  ,gatt
12:01:51   5  ,COUNT(tkr)
12:01:51   6  ,AVG(g1)
12:01:51   7  FROM stk_svmd14
12:01:51   8  GROUP BY tkr,trend,gatt
12:01:51   9  ORDER BY tkr,trend,gatt
12:01:51  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259  -.3575695
XOM		  -1 up        1058 .520746692
XOM		   1 nup       1854 -.30872168
XOM		   1 up        1189 .462733389
XOM		   1		  1

Elapsed: 00:00:00.01
12:01:51 SQL> 
12:01:51 SQL> -- Derive NTILE based params:
12:01:51 SQL> 
12:01:51 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.14
12:01:51 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
12:01:51   2  SELECT
12:01:51   3  tkr
12:01:51   4  ,ydate
12:01:51   5  ,tkrdate
12:01:51   6  ,clse
12:01:51   7  ,g1
12:01:51   8  ,gatt
12:01:51   9  ,gattn
12:01:51  10  ,trend
12:01:51  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
12:01:51  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
12:01:51  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
12:01:51  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
12:01:51  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
12:01:51  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
12:01:51  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
12:01:51  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
12:01:51  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
12:01:51  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
12:01:51  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
12:01:51  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
12:01:51  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
12:01:51  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
12:01:51  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
12:01:51  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
12:01:51  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
12:01:51  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
12:01:51  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
12:01:51  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
12:01:51  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
12:01:51  32  ,hh  att21
12:01:51  33  ,d   att22
12:01:51  34  ,w   att23
12:01:51  35  ,mpm att24
12:01:51  36  ,mph att25
12:01:51  37  ,trend att26
12:01:51  38  FROM stk_svmd14
12:01:51  39  ORDER BY ydate
12:01:51  40  /

Table created.

Elapsed: 00:00:00.59
12:01:52 SQL> 
12:01:52 SQL> -- rpt
12:01:52 SQL> 
12:01:52 SQL> SELECT
12:01:52   2  tkr
12:01:52   3  ,trend
12:01:52   4  ,gatt
12:01:52   5  ,COUNT(tkr)
12:01:52   6  ,AVG(g1)
12:01:52   7  FROM stk_svmd16
12:01:52   8  GROUP BY tkr,trend,gatt
12:01:52   9  ORDER BY tkr,trend,gatt
12:01:52  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259  -.3575695
XOM		  -1 up        1058 .520746692
XOM		   1 nup       1854 -.30872168
XOM		   1 up        1189 .462733389
XOM		   1		  1

Elapsed: 00:00:00.01
12:01:52 SQL> 
12:01:52 SQL> CREATE OR REPLACE VIEW sc12tkr AS
12:01:52   2  SELECT
12:01:52   3  m.tkr
12:01:52   4  ,m.ydate
12:01:52   5  ,m.tkrdate
12:01:52   6  ,l.score score_long
12:01:52   7  ,s.score score_short
12:01:52   8  ,m.g1
12:01:52   9  FROM ystkscores l,ystkscores s,stk_svmd16 m
12:01:52  10  WHERE l.targ='gatt'
12:01:52  11  AND   s.targ='gattn'
12:01:52  12  AND l.tkrdate = s.tkrdate
12:01:52  13  AND l.tkrdate = m.tkrdate
12:01:52  14  -- Speed things up:
12:01:52  15  AND l.tkr = '&1'
12:01:52  16  AND s.tkr = '&1'
12:01:52  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'XOM'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'XOM'

View created.

Elapsed: 00:00:00.03
12:01:52 SQL> 
12:01:52 SQL> -- DROP TABLE score_corr_tkr;
12:01:52 SQL> --
12:01:52 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
12:01:52 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
12:01:52 SQL> -- (
12:01:52 SQL> --   SELECT
12:01:52 SQL> --   tkrdate
12:01:52 SQL> --   -- Find corr() tween score and g1 over 8 day period:
12:01:52 SQL> --   ,CORR((score_long - score_short),g1)
12:01:52 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
12:01:52 SQL> --   FROM sc12tkr
12:01:52 SQL> -- )
12:01:52 SQL> -- GROUP BY tkrdate
12:01:52 SQL> -- /
12:01:52 SQL> --
12:01:52 SQL> -- -- rpt
12:01:52 SQL> -- SELECT AVG(sc_corr),COUNT(sc_corr)FROM score_corr_tkr;
12:01:52 SQL> 
12:01:52 SQL> -- Now I derive goodness attributes:
12:01:52 SQL> 
12:01:52 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.18
12:01:52 SQL> 
12:01:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
12:01:52 SQL> 
12:01:52 SQL> CREATE TABLE stk_ms COMPRESS AS
12:01:52   2  SELECT
12:01:52   3  tkr
12:01:52   4  ,ydate
12:01:52   5  ,s.tkrdate
12:01:52   6  ,trend
12:01:52   7  ,g1
12:01:52   8  ,gatt
12:01:52   9  ,gattn
12:01:52  10  -- Recent CORR()tween scores and gains:
12:01:52  11  -- ,NVL(sc_corr,0)sc_corr
12:01:52  12  -- Goodness attributes:
12:01:52  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
12:01:52  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
12:01:52  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
12:01:52  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
12:01:52  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
12:01:52  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
12:01:52  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
12:01:52  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
12:01:52  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
12:01:52  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
12:01:52  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
12:01:52  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
12:01:52  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
12:01:52  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
12:01:52  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
12:01:52  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
12:01:52  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
12:01:52  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
12:01:52  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
12:01:52  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
12:01:52  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
12:01:52  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
12:01:52  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
12:01:52  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
12:01:52  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
12:01:52  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
12:01:52  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
12:01:52  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
12:01:52  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
12:01:52  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
12:01:52  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
12:01:52  44  -- FROM stk_svmd16 s,score_corr_tkr c
12:01:52  45  -- WHERE s.tkrdate = c.tkrdate(+)
12:01:52  46  FROM stk_svmd16 s
12:01:52  47  /

Table created.

Elapsed: 00:00:00.95
12:01:53 SQL> 
12:01:53 SQL> -- rpt
12:01:53 SQL> 
12:01:53 SQL> SELECT
12:01:53   2  tkr
12:01:53   3  ,trend
12:01:53   4  ,gatt
12:01:53   5  ,COUNT(tkr)
12:01:53   6  ,AVG(g1)
12:01:53   7  -- ,AVG(sc_corr)
12:01:53   8  FROM stk_ms
12:01:53   9  GROUP BY tkr,trend,gatt
12:01:53  10  ORDER BY tkr,trend,gatt
12:01:53  11  /

TKR	       TREND GAT COUNT(TKR) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ----------------------
XOM		  -1 nup       1259		 -.3575695
XOM		  -1 up        1058		.520746692
XOM		   1 nup       1854		-.30872168
XOM		   1 up        1189		.462733389
XOM		   1		  1

Elapsed: 00:00:00.02
12:01:53 SQL> 
12:01:53 SQL> SELECT
12:01:53   2  tkr
12:01:53   3  ,trend
12:01:53   4  ,gattn
12:01:53   5  ,MIN(ydate)
12:01:53   6  ,COUNT(tkr)
12:01:53   7  ,MAX(ydate)
12:01:53   8  ,AVG(g1)
12:01:53   9  -- ,AVG(sc_corr)
12:01:53  10  FROM stk_ms
12:01:53  11  GROUP BY tkr,trend,gattn
12:01:53  12  ORDER BY tkr,trend,gattn
12:01:53  13  /

TKR	       TREND GAT MIN(YDATE) COUNT(TKR) MAX(YDATE) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ---------- ----------------------
XOM		  -1 nup 1990-01-05	  1462 2011-03-18	      .376908345
XOM		  -1 up  1990-01-04	   855 2011-03-21	      -.52663158
XOM		   1 nup 1990-02-01	  1834 2011-04-05	      .301837514
XOM		   1 up  1990-01-02	  1209 2011-03-30	      -.47622002
XOM		   1	 2011-04-06	     1 2011-04-06

Elapsed: 00:00:00.01
12:01:53 SQL> 
12:01:53 SQL> SELECT
12:01:53   2  tkr
12:01:53   3  ,COUNT(tkr)
12:01:53   4  ,MIN(ydate),MAX(ydate)
12:01:53   5  FROM stk_ms
12:01:53   6  GROUP BY tkr
12:01:53   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
XOM		5361 1990-01-02 2011-04-06

Elapsed: 00:00:00.00
12:01:53 SQL> 
12:01:53 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
