
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 10 17:06:56 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

17:06:56 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
17:06:56 SQL> 17:06:56 SQL> --
17:06:56 SQL> -- stk10.sql
17:06:56 SQL> --
17:06:56 SQL> 
17:06:56 SQL> -- Creates views and tables for demonstrating SVM.
17:06:56 SQL> 
17:06:56 SQL> CREATE OR REPLACE VIEW stk10 AS
17:06:56   2  SELECT
17:06:56   3  tkr
17:06:56   4  ,ydate
17:06:56   5  ,tkr||ydate tkrdate
17:06:56   6  ,clse
17:06:56   7  ,rownum rnum -- acts as t in my time-series
17:06:56   8  -- Derive some attributes from clse.
17:06:56   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
17:06:56  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
17:06:56  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
17:06:56  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
17:06:56  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
17:06:56  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
17:06:56  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
17:06:56  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
17:06:56  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
17:06:56  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
17:06:56  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
17:06:56  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
17:06:56  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
17:06:56  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
17:06:56  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
17:06:56  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
17:06:56  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
17:06:56  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
17:06:56  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
17:06:56  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
17:06:56  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
17:06:56  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
17:06:56  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
17:06:56  32  ORDER BY ydate
17:06:56  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='COST'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.10
17:06:57 SQL> 
17:06:57 SQL> -- rpt
17:06:57 SQL> 
17:06:57 SQL> SELECT
17:06:57   2  tkr
17:06:57   3  ,COUNT(tkr)
17:06:57   4  ,MIN(clse),MAX(clse)
17:06:57   5  ,MIN(avg4),MAX(avg4)
17:06:57   6  ,MIN(ydate),MAX(ydate)
17:06:57   7  FROM stk10
17:06:57   8  GROUP BY tkr
17:06:57   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
COST		5300	   5.69      72.85	5.732	  72.588 1990-01-02 2011-01-07

Elapsed: 00:00:00.23
17:06:57 SQL> 
17:06:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
17:06:57 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.25
17:06:57 SQL> CREATE TABLE stk12 COMPRESS AS
17:06:57   2  SELECT
17:06:57   3  tkr
17:06:57   4  ,ydate
17:06:57   5  ,tkrdate
17:06:57   6  ,clse
17:06:57   7  ,rnum
17:06:57   8  -- g1 is important. I want to predict g1:
17:06:57   9  ,ld - clse g1
17:06:57  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
17:06:57  11  -- I want more attributes from the ones I derived above:
17:06:57  12  -- clse relation to moving-min
17:06:57  13  ,clse-min3  cm3
17:06:57  14  ,clse-min4  cm4
17:06:57  15  ,clse-min5  cm5
17:06:57  16  ,clse-min6  cm6
17:06:57  17  ,clse-min7  cm7
17:06:57  18  ,clse-min8  cm8
17:06:57  19  ,clse-min9  cm9
17:06:57  20  -- clse relation to moving-avg
17:06:57  21  ,clse-avg3  ca3
17:06:57  22  ,clse-avg4  ca4
17:06:57  23  ,clse-avg5  ca5
17:06:57  24  ,clse-avg6  ca6
17:06:57  25  ,clse-avg7  ca7
17:06:57  26  ,clse-avg8  ca8
17:06:57  27  ,clse-avg9  ca9
17:06:57  28  -- clse relation to moving-max
17:06:57  29  ,clse-max3  cx3
17:06:57  30  ,clse-max4  cx4
17:06:57  31  ,clse-max5  cx5
17:06:57  32  ,clse-max6  cx6
17:06:57  33  ,clse-max7  cx7
17:06:57  34  ,clse-max8  cx8
17:06:57  35  ,clse-max9  cx9
17:06:57  36  -- Derive date related attributes:
17:06:57  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
17:06:57  38  ,0+TO_CHAR(ydate,'D')d
17:06:57  39  ,0+TO_CHAR(ydate,'W')w
17:06:57  40  -- mpm stands for minutes-past-midnight:
17:06:57  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
17:06:57  42  -- mph stands for minutes-past-hour:
17:06:57  43  ,0+TO_CHAR(ydate,'MI')mph
17:06:57  44  FROM stk10
17:06:57  45  ORDER BY ydate
17:06:57  46  /

Table created.

Elapsed: 00:00:00.47
17:06:58 SQL> 
17:06:58 SQL> -- rpt
17:06:58 SQL> 
17:06:58 SQL> SELECT
17:06:58   2  tkr
17:06:58   3  ,COUNT(tkr)
17:06:58   4  ,MIN(clse),MAX(clse)
17:06:58   5  ,MIN(ydate),MAX(ydate)
17:06:58   6  FROM stk12
17:06:58   7  GROUP BY tkr
17:06:58   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
COST		5300	   5.69      72.85 1990-01-02 2011-01-07

Elapsed: 00:00:00.01
17:06:58 SQL> 
17:06:58 SQL> -- Prepare for derivation of NTILE based parameters.
17:06:58 SQL> -- Also derive the "trend" parameter:
17:06:58 SQL> 
17:06:58 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.06
17:06:58 SQL> CREATE TABLE stk14 COMPRESS AS
17:06:58   2  SELECT
17:06:58   3  tkr
17:06:58   4  ,ydate
17:06:58   5  ,tkrdate
17:06:58   6  ,clse
17:06:58   7  ,g1
17:06:58   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
17:06:58   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
17:06:58  10  ,CASE WHEN trend IS NULL THEN 1
17:06:58  11  	    WHEN trend =0      THEN 1
17:06:58  12  	    ELSE trend END trend
17:06:58  13  ,cm3
17:06:58  14  ,cm4
17:06:58  15  ,cm5
17:06:58  16  ,cm6
17:06:58  17  ,cm7
17:06:58  18  ,cm8
17:06:58  19  ,cm9
17:06:58  20  ,ca3
17:06:58  21  ,ca4
17:06:58  22  ,ca5
17:06:58  23  ,ca6
17:06:58  24  ,ca7
17:06:58  25  ,ca8
17:06:58  26  ,ca9
17:06:58  27  ,cx3
17:06:58  28  ,cx4
17:06:58  29  ,cx5
17:06:58  30  ,cx6
17:06:58  31  ,cx7
17:06:58  32  ,cx8
17:06:58  33  ,cx9
17:06:58  34  ,hh
17:06:58  35  ,d
17:06:58  36  ,w
17:06:58  37  ,mpm
17:06:58  38  ,mph
17:06:58  39  FROM stk12
17:06:58  40  -- Guard against divide by 0:
17:06:58  41  WHERE clse > 0
17:06:58  42  ORDER BY ydate
17:06:58  43  /

Table created.

Elapsed: 00:00:00.12
17:06:58 SQL> 
17:06:58 SQL> -- rpt
17:06:58 SQL> 
17:06:58 SQL> SELECT
17:06:58   2  tkr
17:06:58   3  ,trend
17:06:58   4  ,gatt
17:06:58   5  ,COUNT(tkr)
17:06:58   6  ,AVG(g1)
17:06:58   7  FROM stk14
17:06:58   8  GROUP BY tkr,trend,gatt
17:06:58   9  ORDER BY tkr,trend,gatt
17:06:58  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
COST		  -1 nup       1382 -.37236614
COST		  -1 up        1100 .563163636
COST		  -1		  1
COST		   1 nup       1675  -.3874209
COST		   1 up        1142 .528817863

Elapsed: 00:00:00.01
17:06:58 SQL> 
17:06:58 SQL> -- Derive NTILE based params:
17:06:58 SQL> 
17:06:58 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.04
17:06:58 SQL> CREATE TABLE stk16 COMPRESS AS
17:06:58   2  SELECT
17:06:58   3  tkr
17:06:58   4  ,ydate
17:06:58   5  ,tkrdate
17:06:58   6  ,clse
17:06:58   7  ,g1
17:06:58   8  ,gatt
17:06:58   9  ,gattn
17:06:58  10  ,trend
17:06:58  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
17:06:58  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
17:06:58  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
17:06:58  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
17:06:58  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
17:06:58  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
17:06:58  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
17:06:58  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
17:06:58  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
17:06:58  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
17:06:58  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
17:06:58  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
17:06:58  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
17:06:58  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
17:06:58  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
17:06:58  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
17:06:58  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
17:06:58  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
17:06:58  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
17:06:58  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
17:06:58  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
17:06:58  32  ,hh  att21
17:06:58  33  ,d   att22
17:06:58  34  ,w   att23
17:06:58  35  ,mpm att24
17:06:58  36  ,mph att25
17:06:58  37  ,trend att26
17:06:58  38  FROM stk14
17:06:58  39  ORDER BY ydate
17:06:58  40  /

Table created.

Elapsed: 00:00:00.58
17:06:58 SQL> 
17:06:58 SQL> -- rpt
17:06:58 SQL> 
17:06:58 SQL> SELECT
17:06:58   2  tkr
17:06:58   3  ,trend
17:06:58   4  ,gatt
17:06:58   5  ,COUNT(tkr)
17:06:58   6  ,AVG(g1)
17:06:58   7  FROM stk16
17:06:58   8  GROUP BY tkr,trend,gatt
17:06:58   9  ORDER BY tkr,trend,gatt
17:06:58  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
COST		  -1 nup       1382 -.37236614
COST		  -1 up        1100 .563163636
COST		  -1		  1
COST		   1 nup       1675  -.3874209
COST		   1 up        1142 .528817863

Elapsed: 00:00:00.01
17:06:58 SQL> 
17:06:58 SQL> -- Now I derive goodness attributes:
17:06:58 SQL> 
17:06:58 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.06
17:06:58 SQL> CREATE TABLE stk_ms COMPRESS AS
17:06:58   2  SELECT
17:06:58   3  tkr
17:06:58   4  ,ydate
17:06:58   5  ,tkrdate
17:06:58   6  ,trend
17:06:58   7  ,g1
17:06:58   8  ,gatt
17:06:58   9  ,gattn
17:06:58  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
17:06:58  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
17:06:58  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
17:06:58  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
17:06:58  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
17:06:58  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
17:06:58  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
17:06:58  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
17:06:58  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
17:06:58  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
17:06:58  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
17:06:58  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
17:06:58  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
17:06:58  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
17:06:58  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
17:06:58  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
17:06:58  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
17:06:58  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
17:06:58  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
17:06:58  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
17:06:58  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
17:06:58  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
17:06:58  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
17:06:58  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
17:06:58  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
17:06:58  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
17:06:58  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
17:06:58  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
17:06:58  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
17:06:58  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
17:06:58  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
17:06:58  41  FROM stk16
17:06:58  42  /

Table created.

Elapsed: 00:00:00.96
17:06:59 SQL> 
17:06:59 SQL> -- rpt
17:06:59 SQL> 
17:06:59 SQL> SELECT
17:06:59   2  tkr
17:06:59   3  ,trend
17:06:59   4  ,gatt
17:06:59   5  ,COUNT(tkr)
17:06:59   6  ,AVG(g1)
17:06:59   7  FROM stk_ms
17:06:59   8  GROUP BY tkr,trend,gatt
17:06:59   9  ORDER BY tkr,trend,gatt
17:06:59  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
COST		  -1 nup       1382 -.37236614
COST		  -1 up        1100 .563163636
COST		  -1		  1
COST		   1 nup       1675  -.3874209
COST		   1 up        1142 .528817863

Elapsed: 00:00:00.01
17:06:59 SQL> 
17:06:59 SQL> SELECT
17:06:59   2  tkr
17:06:59   3  ,COUNT(tkr)
17:06:59   4  ,MIN(ydate),MAX(ydate)
17:06:59   5  FROM stk_ms
17:06:59   6  GROUP BY tkr
17:06:59   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
COST		5300 1990-01-02 2011-01-07

Elapsed: 00:00:00.02
17:06:59 SQL> 
17:06:59 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
