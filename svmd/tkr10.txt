
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 12 06:27:18 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:27:18 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
06:27:18 SQL> 06:27:18 SQL> --
06:27:18 SQL> -- stk10.sql
06:27:18 SQL> --
06:27:18 SQL> 
06:27:18 SQL> -- Creates views and tables for demonstrating SVM.
06:27:18 SQL> 
06:27:18 SQL> CREATE OR REPLACE VIEW stk10 AS
06:27:18   2  SELECT
06:27:18   3  tkr
06:27:18   4  ,ydate
06:27:18   5  ,tkr||ydate tkrdate
06:27:18   6  ,clse
06:27:18   7  ,rownum rnum -- acts as t in my time-series
06:27:18   8  -- Derive some attributes from clse.
06:27:18   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
06:27:18  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
06:27:18  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
06:27:18  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
06:27:18  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
06:27:18  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
06:27:18  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
06:27:18  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
06:27:18  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
06:27:18  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
06:27:18  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
06:27:18  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
06:27:18  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
06:27:18  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
06:27:18  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
06:27:18  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
06:27:18  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
06:27:18  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
06:27:18  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
06:27:18  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
06:27:18  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
06:27:18  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
06:27:18  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
06:27:18  32  ORDER BY ydate
06:27:18  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='FDX'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.09
06:27:18 SQL> 
06:27:18 SQL> -- rpt
06:27:18 SQL> 
06:27:18 SQL> SELECT
06:27:18   2  tkr
06:27:18   3  ,COUNT(tkr)
06:27:18   4  ,MIN(clse),MAX(clse)
06:27:18   5  ,MIN(avg4),MAX(avg4)
06:27:18   6  ,MIN(ydate),MAX(ydate)
06:27:18   7  FROM stk10
06:27:18   8  GROUP BY tkr
06:27:18   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
FDX		5296	   7.18     118.26	7.398	 116.228 1990-01-02 2011-01-11

Elapsed: 00:00:00.18
06:27:18 SQL> 
06:27:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:27:18 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.19
06:27:18 SQL> CREATE TABLE stk12 COMPRESS AS
06:27:18   2  SELECT
06:27:18   3  tkr
06:27:18   4  ,ydate
06:27:18   5  ,tkrdate
06:27:18   6  ,clse
06:27:18   7  ,rnum
06:27:18   8  -- g1 is important. I want to predict g1:
06:27:18   9  ,ld - clse g1
06:27:18  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:27:18  11  -- I want more attributes from the ones I derived above:
06:27:18  12  -- clse relation to moving-min
06:27:18  13  ,clse-min3  cm3
06:27:18  14  ,clse-min4  cm4
06:27:18  15  ,clse-min5  cm5
06:27:18  16  ,clse-min6  cm6
06:27:18  17  ,clse-min7  cm7
06:27:18  18  ,clse-min8  cm8
06:27:18  19  ,clse-min9  cm9
06:27:18  20  -- clse relation to moving-avg
06:27:18  21  ,clse-avg3  ca3
06:27:18  22  ,clse-avg4  ca4
06:27:18  23  ,clse-avg5  ca5
06:27:18  24  ,clse-avg6  ca6
06:27:18  25  ,clse-avg7  ca7
06:27:18  26  ,clse-avg8  ca8
06:27:18  27  ,clse-avg9  ca9
06:27:18  28  -- clse relation to moving-max
06:27:18  29  ,clse-max3  cx3
06:27:18  30  ,clse-max4  cx4
06:27:18  31  ,clse-max5  cx5
06:27:18  32  ,clse-max6  cx6
06:27:18  33  ,clse-max7  cx7
06:27:18  34  ,clse-max8  cx8
06:27:18  35  ,clse-max9  cx9
06:27:18  36  -- Derive date related attributes:
06:27:18  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:27:18  38  ,0+TO_CHAR(ydate,'D')d
06:27:18  39  ,0+TO_CHAR(ydate,'W')w
06:27:18  40  -- mpm stands for minutes-past-midnight:
06:27:18  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:27:18  42  -- mph stands for minutes-past-hour:
06:27:18  43  ,0+TO_CHAR(ydate,'MI')mph
06:27:18  44  FROM stk10
06:27:18  45  ORDER BY ydate
06:27:18  46  /

Table created.

Elapsed: 00:00:00.46
06:27:19 SQL> 
06:27:19 SQL> -- rpt
06:27:19 SQL> 
06:27:19 SQL> SELECT
06:27:19   2  tkr
06:27:19   3  ,COUNT(tkr)
06:27:19   4  ,MIN(clse),MAX(clse)
06:27:19   5  ,MIN(ydate),MAX(ydate)
06:27:19   6  FROM stk12
06:27:19   7  GROUP BY tkr
06:27:19   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
FDX		5296	   7.18     118.26 1990-01-02 2011-01-11

Elapsed: 00:00:00.02
06:27:19 SQL> 
06:27:19 SQL> -- Prepare for derivation of NTILE based parameters.
06:27:19 SQL> -- Also derive the "trend" parameter:
06:27:19 SQL> 
06:27:19 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.07
06:27:19 SQL> CREATE TABLE stk14 COMPRESS AS
06:27:19   2  SELECT
06:27:19   3  tkr
06:27:19   4  ,ydate
06:27:19   5  ,tkrdate
06:27:19   6  ,clse
06:27:19   7  ,g1
06:27:19   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
06:27:19   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
06:27:19  10  ,CASE WHEN trend IS NULL THEN 1
06:27:19  11  	    WHEN trend =0      THEN 1
06:27:19  12  	    ELSE trend END trend
06:27:19  13  ,cm3
06:27:19  14  ,cm4
06:27:19  15  ,cm5
06:27:19  16  ,cm6
06:27:19  17  ,cm7
06:27:19  18  ,cm8
06:27:19  19  ,cm9
06:27:19  20  ,ca3
06:27:19  21  ,ca4
06:27:19  22  ,ca5
06:27:19  23  ,ca6
06:27:19  24  ,ca7
06:27:19  25  ,ca8
06:27:19  26  ,ca9
06:27:19  27  ,cx3
06:27:19  28  ,cx4
06:27:19  29  ,cx5
06:27:19  30  ,cx6
06:27:19  31  ,cx7
06:27:19  32  ,cx8
06:27:19  33  ,cx9
06:27:19  34  ,hh
06:27:19  35  ,d
06:27:19  36  ,w
06:27:19  37  ,mpm
06:27:19  38  ,mph
06:27:19  39  FROM stk12
06:27:19  40  -- Guard against divide by 0:
06:27:19  41  WHERE clse > 0
06:27:19  42  ORDER BY ydate
06:27:19  43  /

Table created.

Elapsed: 00:00:00.11
06:27:19 SQL> 
06:27:19 SQL> -- rpt
06:27:19 SQL> 
06:27:19 SQL> SELECT
06:27:19   2  tkr
06:27:19   3  ,trend
06:27:19   4  ,gatt
06:27:19   5  ,COUNT(tkr)
06:27:19   6  ,AVG(g1)
06:27:19   7  FROM stk14
06:27:19   8  GROUP BY tkr,trend,gatt
06:27:19   9  ORDER BY tkr,trend,gatt
06:27:19  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FDX		  -1 nup       1434 -.57132497
FDX		  -1 up        1061 .855768143
FDX		   1 nup       1657 -.54789982
FDX		   1 up        1143 .788206474
FDX		   1		  1

Elapsed: 00:00:00.01
06:27:19 SQL> 
06:27:19 SQL> -- Derive NTILE based params:
06:27:19 SQL> 
06:27:19 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.04
06:27:19 SQL> CREATE TABLE stk16 COMPRESS AS
06:27:19   2  SELECT
06:27:19   3  tkr
06:27:19   4  ,ydate
06:27:19   5  ,tkrdate
06:27:19   6  ,clse
06:27:19   7  ,g1
06:27:19   8  ,gatt
06:27:19   9  ,gattn
06:27:19  10  ,trend
06:27:19  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
06:27:19  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
06:27:19  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
06:27:19  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
06:27:19  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
06:27:19  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
06:27:19  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
06:27:19  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
06:27:19  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
06:27:19  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
06:27:19  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
06:27:19  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
06:27:19  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
06:27:19  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
06:27:19  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
06:27:19  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
06:27:19  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
06:27:19  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
06:27:19  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
06:27:19  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
06:27:19  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
06:27:19  32  ,hh  att21
06:27:19  33  ,d   att22
06:27:19  34  ,w   att23
06:27:19  35  ,mpm att24
06:27:19  36  ,mph att25
06:27:19  37  ,trend att26
06:27:19  38  FROM stk14
06:27:19  39  ORDER BY ydate
06:27:19  40  /

Table created.

Elapsed: 00:00:00.61
06:27:20 SQL> 
06:27:20 SQL> -- rpt
06:27:20 SQL> 
06:27:20 SQL> SELECT
06:27:20   2  tkr
06:27:20   3  ,trend
06:27:20   4  ,gatt
06:27:20   5  ,COUNT(tkr)
06:27:20   6  ,AVG(g1)
06:27:20   7  FROM stk16
06:27:20   8  GROUP BY tkr,trend,gatt
06:27:20   9  ORDER BY tkr,trend,gatt
06:27:20  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FDX		  -1 nup       1434 -.57132497
FDX		  -1 up        1061 .855768143
FDX		   1 nup       1657 -.54789982
FDX		   1 up        1143 .788206474
FDX		   1		  1

Elapsed: 00:00:00.01
06:27:20 SQL> 
06:27:20 SQL> -- Now I derive goodness attributes:
06:27:20 SQL> 
06:27:20 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.08
06:27:20 SQL> CREATE TABLE stk_ms COMPRESS AS
06:27:20   2  SELECT
06:27:20   3  tkr
06:27:20   4  ,ydate
06:27:20   5  ,tkrdate
06:27:20   6  ,trend
06:27:20   7  ,g1
06:27:20   8  ,gatt
06:27:20   9  ,gattn
06:27:20  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
06:27:20  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
06:27:20  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
06:27:20  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
06:27:20  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
06:27:20  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
06:27:20  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
06:27:20  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
06:27:20  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
06:27:20  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
06:27:20  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
06:27:20  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
06:27:20  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
06:27:20  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
06:27:20  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
06:27:20  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
06:27:20  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
06:27:20  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
06:27:20  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
06:27:20  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
06:27:20  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
06:27:20  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
06:27:20  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
06:27:20  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
06:27:20  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
06:27:20  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
06:27:20  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
06:27:20  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:27:20  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
06:27:20  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
06:27:20  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
06:27:20  41  FROM stk16
06:27:20  42  /

Table created.

Elapsed: 00:00:01.11
06:27:21 SQL> 
06:27:21 SQL> -- rpt
06:27:21 SQL> 
06:27:21 SQL> SELECT
06:27:21   2  tkr
06:27:21   3  ,trend
06:27:21   4  ,gatt
06:27:21   5  ,COUNT(tkr)
06:27:21   6  ,AVG(g1)
06:27:21   7  FROM stk_ms
06:27:21   8  GROUP BY tkr,trend,gatt
06:27:21   9  ORDER BY tkr,trend,gatt
06:27:21  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FDX		  -1 nup       1434 -.57132497
FDX		  -1 up        1061 .855768143
FDX		   1 nup       1657 -.54789982
FDX		   1 up        1143 .788206474
FDX		   1		  1

Elapsed: 00:00:00.01
06:27:21 SQL> 
06:27:21 SQL> SELECT
06:27:21   2  tkr
06:27:21   3  ,COUNT(tkr)
06:27:21   4  ,MIN(ydate),MAX(ydate)
06:27:21   5  FROM stk_ms
06:27:21   6  GROUP BY tkr
06:27:21   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
FDX		5296 1990-01-02 2011-01-11

Elapsed: 00:00:00.01
06:27:21 SQL> 
06:27:21 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
