
SQL*Plus: Release 11.2.0.1.0 Production on Wed May 4 07:56:19 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:56:20 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.01
07:56:20 SQL> 
07:56:20 SQL> 07:56:20 SQL> --
07:56:20 SQL> -- stk10.sql
07:56:20 SQL> --
07:56:20 SQL> 
07:56:20 SQL> -- Creates views and tables for demonstrating SVM.
07:56:20 SQL> 
07:56:20 SQL> CREATE OR REPLACE VIEW stk_svmd10 AS
07:56:20   2  SELECT
07:56:20   3  tkr
07:56:20   4  ,ydate
07:56:20   5  ,tkr||ydate tkrdate
07:56:20   6  ,clse
07:56:20   7  ,rownum rnum -- acts as t in my time-series
07:56:20   8  -- Derive some attributes from clse.
07:56:20   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
07:56:20  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
07:56:20  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
07:56:20  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
07:56:20  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
07:56:20  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
07:56:20  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
07:56:20  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
07:56:20  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
07:56:20  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
07:56:20  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
07:56:20  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
07:56:20  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
07:56:20  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
07:56:20  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
07:56:20  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
07:56:20  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
07:56:20  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
07:56:20  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
07:56:20  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
07:56:20  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
07:56:20  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
07:56:20  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
07:56:20  32  ORDER BY ydate
07:56:20  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='XOM'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.26
07:56:20 SQL> 
07:56:20 SQL> -- rpt
07:56:20 SQL> 
07:56:20 SQL> SELECT
07:56:20   2  tkr
07:56:20   3  ,COUNT(tkr)
07:56:20   4  ,MIN(clse),MAX(clse)
07:56:20   5  ,MIN(avg4),MAX(avg4)
07:56:20   6  ,MIN(ydate),MAX(ydate)
07:56:20   7  FROM stk_svmd10
07:56:20   8  GROUP BY tkr
07:56:20   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
XOM		5379	  30.27     109.37     32.284	 107.572 1990-01-02 2011-05-03

Elapsed: 00:00:00.20
07:56:20 SQL> 
07:56:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:56:20 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.17
07:56:20 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
07:56:20   2  SELECT
07:56:20   3  tkr
07:56:20   4  ,ydate
07:56:20   5  ,tkrdate
07:56:20   6  ,clse
07:56:20   7  ,rnum
07:56:20   8  -- g1 is important. I want to predict g1:
07:56:20   9  ,ld - clse g1
07:56:20  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
07:56:20  11  -- I want more attributes from the ones I derived above:
07:56:20  12  -- clse relation to moving-min
07:56:20  13  ,clse-min3  cm3
07:56:20  14  ,clse-min4  cm4
07:56:20  15  ,clse-min5  cm5
07:56:20  16  ,clse-min6  cm6
07:56:20  17  ,clse-min7  cm7
07:56:20  18  ,clse-min8  cm8
07:56:20  19  ,clse-min9  cm9
07:56:20  20  -- clse relation to moving-avg
07:56:20  21  ,clse-avg3  ca3
07:56:20  22  ,clse-avg4  ca4
07:56:20  23  ,clse-avg5  ca5
07:56:20  24  ,clse-avg6  ca6
07:56:20  25  ,clse-avg7  ca7
07:56:20  26  ,clse-avg8  ca8
07:56:20  27  ,clse-avg9  ca9
07:56:20  28  -- clse relation to moving-max
07:56:20  29  ,clse-max3  cx3
07:56:20  30  ,clse-max4  cx4
07:56:20  31  ,clse-max5  cx5
07:56:20  32  ,clse-max6  cx6
07:56:20  33  ,clse-max7  cx7
07:56:20  34  ,clse-max8  cx8
07:56:20  35  ,clse-max9  cx9
07:56:20  36  -- Derive date related attributes:
07:56:20  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:56:20  38  ,0+TO_CHAR(ydate,'D')d
07:56:20  39  ,0+TO_CHAR(ydate,'W')w
07:56:20  40  -- mpm stands for minutes-past-midnight:
07:56:20  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:56:20  42  -- mph stands for minutes-past-hour:
07:56:20  43  ,0+TO_CHAR(ydate,'MI')mph
07:56:20  44  FROM stk_svmd10
07:56:20  45  ORDER BY ydate
07:56:20  46  /

Table created.

Elapsed: 00:00:00.66
07:56:21 SQL> 
07:56:21 SQL> -- rpt
07:56:21 SQL> 
07:56:21 SQL> SELECT
07:56:21   2  tkr
07:56:21   3  ,COUNT(tkr)
07:56:21   4  ,MIN(clse),MAX(clse)
07:56:21   5  ,MIN(ydate),MAX(ydate)
07:56:21   6  FROM stk_svmd12
07:56:21   7  GROUP BY tkr
07:56:21   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
XOM		5379	  30.27     109.37 1990-01-02 2011-05-03

Elapsed: 00:00:00.02
07:56:21 SQL> 
07:56:21 SQL> -- Prepare for derivation of NTILE based parameters.
07:56:21 SQL> -- Also derive the "trend" parameter:
07:56:21 SQL> 
07:56:21 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.29
07:56:21 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
07:56:21   2  SELECT
07:56:21   3  tkr
07:56:21   4  ,ydate
07:56:21   5  ,tkrdate
07:56:21   6  ,clse
07:56:21   7  ,g1
07:56:21   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
07:56:21   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
07:56:21  10  ,CASE WHEN trend IS NULL THEN 1
07:56:21  11  	    WHEN trend =0      THEN 1
07:56:21  12  	    ELSE trend END trend
07:56:21  13  ,cm3
07:56:21  14  ,cm4
07:56:21  15  ,cm5
07:56:21  16  ,cm6
07:56:21  17  ,cm7
07:56:21  18  ,cm8
07:56:21  19  ,cm9
07:56:21  20  ,ca3
07:56:21  21  ,ca4
07:56:21  22  ,ca5
07:56:21  23  ,ca6
07:56:21  24  ,ca7
07:56:21  25  ,ca8
07:56:21  26  ,ca9
07:56:21  27  ,cx3
07:56:21  28  ,cx4
07:56:21  29  ,cx5
07:56:21  30  ,cx6
07:56:21  31  ,cx7
07:56:21  32  ,cx8
07:56:21  33  ,cx9
07:56:21  34  ,hh
07:56:21  35  ,d
07:56:21  36  ,w
07:56:21  37  ,mpm
07:56:21  38  ,mph
07:56:21  39  FROM stk_svmd12
07:56:21  40  -- Guard against divide by 0:
07:56:21  41  WHERE clse > 0
07:56:21  42  ORDER BY ydate
07:56:21  43  /

Table created.

Elapsed: 00:00:00.19
07:56:21 SQL> 
07:56:21 SQL> -- rpt
07:56:21 SQL> 
07:56:21 SQL> SELECT
07:56:21   2  tkr
07:56:21   3  ,trend
07:56:21   4  ,gatt
07:56:21   5  ,COUNT(tkr)
07:56:21   6  ,AVG(g1)
07:56:21   7  FROM stk_svmd14
07:56:21   8  GROUP BY tkr,trend,gatt
07:56:21   9  ORDER BY tkr,trend,gatt
07:56:21  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1315 -.62453232
XOM		  -1 up        1074 .940074488
XOM		  -1		  1
XOM		   1 nup       1843 -.59556158
XOM		   1 up        1146 .824485166

Elapsed: 00:00:00.01
07:56:21 SQL> 
07:56:21 SQL> -- Derive NTILE based params:
07:56:21 SQL> 
07:56:21 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.11
07:56:21 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
07:56:21   2  SELECT
07:56:21   3  tkr
07:56:21   4  ,ydate
07:56:21   5  ,tkrdate
07:56:21   6  ,clse
07:56:21   7  ,g1
07:56:21   8  ,gatt
07:56:21   9  ,gattn
07:56:21  10  ,trend
07:56:21  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
07:56:21  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
07:56:21  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
07:56:21  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
07:56:21  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
07:56:21  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
07:56:21  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
07:56:21  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
07:56:21  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
07:56:21  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
07:56:21  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
07:56:21  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
07:56:21  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
07:56:21  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
07:56:21  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
07:56:21  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
07:56:21  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
07:56:21  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
07:56:21  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
07:56:21  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
07:56:21  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
07:56:21  32  ,hh  att21
07:56:21  33  ,d   att22
07:56:21  34  ,w   att23
07:56:21  35  ,mpm att24
07:56:21  36  ,mph att25
07:56:21  37  ,trend att26
07:56:21  38  FROM stk_svmd14
07:56:21  39  ORDER BY ydate
07:56:21  40  /

Table created.

Elapsed: 00:00:00.62
07:56:22 SQL> 
07:56:22 SQL> -- rpt
07:56:22 SQL> 
07:56:22 SQL> SELECT
07:56:22   2  tkr
07:56:22   3  ,trend
07:56:22   4  ,gatt
07:56:22   5  ,COUNT(tkr)
07:56:22   6  ,AVG(g1)
07:56:22   7  FROM stk_svmd16
07:56:22   8  GROUP BY tkr,trend,gatt
07:56:22   9  ORDER BY tkr,trend,gatt
07:56:22  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1315 -.62453232
XOM		  -1 up        1074 .940074488
XOM		  -1		  1
XOM		   1 nup       1843 -.59556158
XOM		   1 up        1146 .824485166

Elapsed: 00:00:00.02
07:56:22 SQL> 
07:56:22 SQL> CREATE OR REPLACE VIEW sc12tkr AS
07:56:22   2  SELECT
07:56:22   3  m.tkr
07:56:22   4  ,m.ydate
07:56:22   5  ,m.tkrdate
07:56:22   6  ,l.score score_long
07:56:22   7  ,s.score score_short
07:56:22   8  ,m.g1
07:56:22   9  FROM ystkscores l,ystkscores s,stk_svmd16 m
07:56:22  10  WHERE l.targ='gatt'
07:56:22  11  AND   s.targ='gattn'
07:56:22  12  AND l.tkrdate = s.tkrdate
07:56:22  13  AND l.tkrdate = m.tkrdate
07:56:22  14  -- Speed things up:
07:56:22  15  AND l.tkr = '&1'
07:56:22  16  AND s.tkr = '&1'
07:56:22  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'XOM'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'XOM'

View created.

Elapsed: 00:00:00.05
07:56:22 SQL> 
07:56:22 SQL> -- DROP TABLE score_corr_tkr;
07:56:22 SQL> --
07:56:22 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
07:56:22 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
07:56:22 SQL> -- (
07:56:22 SQL> --   SELECT
07:56:22 SQL> --   tkrdate
07:56:22 SQL> --   -- Find corr() tween score and g1 over 8 day period:
07:56:22 SQL> --   ,CORR((score_long - score_short),g1)
07:56:22 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
07:56:22 SQL> --   FROM sc12tkr
07:56:22 SQL> -- )
07:56:22 SQL> -- GROUP BY tkrdate
07:56:22 SQL> -- /
07:56:22 SQL> --
07:56:22 SQL> -- -- rpt
07:56:22 SQL> -- SELECT AVG(sc_corr),COUNT(sc_corr)FROM score_corr_tkr;
07:56:22 SQL> 
07:56:22 SQL> -- Now I derive goodness attributes:
07:56:22 SQL> 
07:56:22 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.18
07:56:22 SQL> 
07:56:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
07:56:23 SQL> 
07:56:23 SQL> CREATE TABLE stk_ms COMPRESS AS
07:56:23   2  SELECT
07:56:23   3  tkr
07:56:23   4  ,ydate
07:56:23   5  ,s.tkrdate
07:56:23   6  ,trend
07:56:23   7  ,g1
07:56:23   8  ,gatt
07:56:23   9  ,gattn
07:56:23  10  -- Recent CORR()tween scores and gains:
07:56:23  11  -- ,NVL(sc_corr,0)sc_corr
07:56:23  12  -- Goodness attributes:
07:56:23  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
07:56:23  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
07:56:23  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
07:56:23  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
07:56:23  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
07:56:23  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
07:56:23  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
07:56:23  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
07:56:23  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
07:56:23  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
07:56:23  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
07:56:23  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
07:56:23  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
07:56:23  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
07:56:23  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
07:56:23  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
07:56:23  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
07:56:23  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
07:56:23  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
07:56:23  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
07:56:23  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
07:56:23  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
07:56:23  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
07:56:23  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
07:56:23  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
07:56:23  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
07:56:23  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
07:56:23  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
07:56:23  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
07:56:23  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
07:56:23  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
07:56:23  44  -- FROM stk_svmd16 s,score_corr_tkr c
07:56:23  45  -- WHERE s.tkrdate = c.tkrdate(+)
07:56:23  46  FROM stk_svmd16 s
07:56:23  47  /

Table created.

Elapsed: 00:00:00.98
07:56:24 SQL> 
07:56:24 SQL> -- rpt
07:56:24 SQL> 
07:56:24 SQL> SELECT
07:56:24   2  tkr
07:56:24   3  ,trend
07:56:24   4  ,gatt
07:56:24   5  ,COUNT(tkr)
07:56:24   6  ,AVG(g1)
07:56:24   7  -- ,AVG(sc_corr)
07:56:24   8  FROM stk_ms
07:56:24   9  GROUP BY tkr,trend,gatt
07:56:24  10  ORDER BY tkr,trend,gatt
07:56:24  11  /

TKR	       TREND GAT COUNT(TKR) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ----------------------
XOM		  -1 nup       1315		-.62453232
XOM		  -1 up        1074		.940074488
XOM		  -1		  1
XOM		   1 nup       1843		-.59556158
XOM		   1 up        1146		.824485166

Elapsed: 00:00:00.01
07:56:24 SQL> 
07:56:24 SQL> SELECT
07:56:24   2  tkr
07:56:24   3  ,trend
07:56:24   4  ,gattn
07:56:24   5  ,MIN(ydate)
07:56:24   6  ,COUNT(tkr)
07:56:24   7  ,MAX(ydate)
07:56:24   8  ,AVG(g1)
07:56:24   9  -- ,AVG(sc_corr)
07:56:24  10  FROM stk_ms
07:56:24  11  GROUP BY tkr,trend,gattn
07:56:24  12  ORDER BY tkr,trend,gattn
07:56:24  13  /

TKR	       TREND GAT MIN(YDATE) COUNT(TKR) MAX(YDATE) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ---------- ----------------------
XOM		  -1 nup 1990-01-05	  1498 2011-04-19	      .673978638
XOM		  -1 up  1990-01-04	   891 2011-04-15	      -.92170595
XOM		  -1	 2011-05-03	     1 2011-05-03
XOM		   1 nup 1990-02-01	  1800 2011-04-28	      .526011111
XOM		   1 up  1990-01-02	  1189 2011-05-02	      -.92479394

Elapsed: 00:00:00.01
07:56:24 SQL> 
07:56:24 SQL> SELECT
07:56:24   2  tkr
07:56:24   3  ,COUNT(tkr)
07:56:24   4  ,MIN(ydate),MAX(ydate)
07:56:24   5  FROM stk_ms
07:56:24   6  GROUP BY tkr
07:56:24   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
XOM		5379 1990-01-02 2011-05-03

Elapsed: 00:00:00.01
07:56:24 SQL> 
07:56:24 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
