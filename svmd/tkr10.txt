
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 10 08:49:18 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:49:19 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
08:49:19 SQL> 08:49:19 SQL> --
08:49:19 SQL> -- stk10.sql
08:49:19 SQL> --
08:49:19 SQL> 
08:49:19 SQL> -- Creates views and tables for demonstrating SVM.
08:49:19 SQL> 
08:49:19 SQL> CREATE OR REPLACE VIEW stk10 AS
08:49:19   2  SELECT
08:49:19   3  tkr
08:49:19   4  ,ydate
08:49:19   5  ,tkr||ydate tkrdate
08:49:19   6  ,clse
08:49:19   7  ,rownum rnum -- acts as t in my time-series
08:49:19   8  -- Derive some attributes from clse.
08:49:19   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
08:49:19  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
08:49:19  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
08:49:19  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
08:49:19  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
08:49:19  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
08:49:19  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
08:49:19  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
08:49:19  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
08:49:19  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
08:49:19  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
08:49:19  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
08:49:19  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
08:49:19  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
08:49:19  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
08:49:19  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
08:49:19  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
08:49:19  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
08:49:19  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
08:49:19  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
08:49:19  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
08:49:19  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
08:49:19  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
08:49:19  32  ORDER BY ydate
08:49:19  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='BRCM'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.11
08:49:19 SQL> 
08:49:19 SQL> -- rpt
08:49:19 SQL> 
08:49:19 SQL> SELECT
08:49:19   2  tkr
08:49:19   3  ,COUNT(tkr)
08:49:19   4  ,MIN(clse),MAX(clse)
08:49:19   5  ,MIN(avg4),MAX(avg4)
08:49:19   6  ,MIN(ydate),MAX(ydate)
08:49:19   7  FROM stk10
08:49:19   8  GROUP BY tkr
08:49:19   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
BRCM		3204	   6.41     180.75	6.602	 176.896 1998-04-17 2011-01-07

Elapsed: 00:00:01.79
08:49:21 SQL> 
08:49:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:49:21 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.54
08:49:21 SQL> CREATE TABLE stk12 COMPRESS AS
08:49:21   2  SELECT
08:49:21   3  tkr
08:49:21   4  ,ydate
08:49:21   5  ,tkrdate
08:49:21   6  ,clse
08:49:21   7  ,rnum
08:49:21   8  -- g1 is important. I want to predict g1:
08:49:21   9  ,ld - clse g1
08:49:21  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
08:49:21  11  -- I want more attributes from the ones I derived above:
08:49:21  12  -- clse relation to moving-min
08:49:21  13  ,clse-min3  cm3
08:49:21  14  ,clse-min4  cm4
08:49:21  15  ,clse-min5  cm5
08:49:21  16  ,clse-min6  cm6
08:49:21  17  ,clse-min7  cm7
08:49:21  18  ,clse-min8  cm8
08:49:21  19  ,clse-min9  cm9
08:49:21  20  -- clse relation to moving-avg
08:49:21  21  ,clse-avg3  ca3
08:49:21  22  ,clse-avg4  ca4
08:49:21  23  ,clse-avg5  ca5
08:49:21  24  ,clse-avg6  ca6
08:49:21  25  ,clse-avg7  ca7
08:49:21  26  ,clse-avg8  ca8
08:49:21  27  ,clse-avg9  ca9
08:49:21  28  -- clse relation to moving-max
08:49:21  29  ,clse-max3  cx3
08:49:21  30  ,clse-max4  cx4
08:49:21  31  ,clse-max5  cx5
08:49:21  32  ,clse-max6  cx6
08:49:21  33  ,clse-max7  cx7
08:49:21  34  ,clse-max8  cx8
08:49:21  35  ,clse-max9  cx9
08:49:21  36  -- Derive date related attributes:
08:49:21  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:49:21  38  ,0+TO_CHAR(ydate,'D')d
08:49:21  39  ,0+TO_CHAR(ydate,'W')w
08:49:21  40  -- mpm stands for minutes-past-midnight:
08:49:21  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:49:21  42  -- mph stands for minutes-past-hour:
08:49:21  43  ,0+TO_CHAR(ydate,'MI')mph
08:49:21  44  FROM stk10
08:49:21  45  ORDER BY ydate
08:49:21  46  /

Table created.

Elapsed: 00:00:00.40
08:49:22 SQL> 
08:49:22 SQL> -- rpt
08:49:22 SQL> 
08:49:22 SQL> SELECT
08:49:22   2  tkr
08:49:22   3  ,COUNT(tkr)
08:49:22   4  ,MIN(clse),MAX(clse)
08:49:22   5  ,MIN(ydate),MAX(ydate)
08:49:22   6  FROM stk12
08:49:22   7  GROUP BY tkr
08:49:22   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
BRCM		3204	   6.41     180.75 1998-04-17 2011-01-07

Elapsed: 00:00:00.01
08:49:22 SQL> 
08:49:22 SQL> -- Prepare for derivation of NTILE based parameters.
08:49:22 SQL> -- Also derive the "trend" parameter:
08:49:22 SQL> 
08:49:22 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.06
08:49:22 SQL> CREATE TABLE stk14 COMPRESS AS
08:49:22   2  SELECT
08:49:22   3  tkr
08:49:22   4  ,ydate
08:49:22   5  ,tkrdate
08:49:22   6  ,clse
08:49:22   7  ,g1
08:49:22   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
08:49:22   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
08:49:22  10  ,CASE WHEN trend IS NULL THEN 1
08:49:22  11  	    WHEN trend =0      THEN 1
08:49:22  12  	    ELSE trend END trend
08:49:22  13  ,cm3
08:49:22  14  ,cm4
08:49:22  15  ,cm5
08:49:22  16  ,cm6
08:49:22  17  ,cm7
08:49:22  18  ,cm8
08:49:22  19  ,cm9
08:49:22  20  ,ca3
08:49:22  21  ,ca4
08:49:22  22  ,ca5
08:49:22  23  ,ca6
08:49:22  24  ,ca7
08:49:22  25  ,ca8
08:49:22  26  ,ca9
08:49:22  27  ,cx3
08:49:22  28  ,cx4
08:49:22  29  ,cx5
08:49:22  30  ,cx6
08:49:22  31  ,cx7
08:49:22  32  ,cx8
08:49:22  33  ,cx9
08:49:22  34  ,hh
08:49:22  35  ,d
08:49:22  36  ,w
08:49:22  37  ,mpm
08:49:22  38  ,mph
08:49:22  39  FROM stk12
08:49:22  40  -- Guard against divide by 0:
08:49:22  41  WHERE clse > 0
08:49:22  42  ORDER BY ydate
08:49:22  43  /

Table created.

Elapsed: 00:00:00.17
08:49:22 SQL> 
08:49:22 SQL> -- rpt
08:49:22 SQL> 
08:49:22 SQL> SELECT
08:49:22   2  tkr
08:49:22   3  ,trend
08:49:22   4  ,gatt
08:49:22   5  ,COUNT(tkr)
08:49:22   6  ,AVG(g1)
08:49:22   7  FROM stk14
08:49:22   8  GROUP BY tkr,trend,gatt
08:49:22   9  ORDER BY tkr,trend,gatt
08:49:22  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BRCM		  -1 nup	830 -1.0571687
BRCM		  -1 up 	703 1.19650071
BRCM		   1 nup	882 -.99936508
BRCM		   1 up 	788 1.21038071
BRCM		   1		  1

Elapsed: 00:00:00.05
08:49:22 SQL> 
08:49:22 SQL> -- Derive NTILE based params:
08:49:22 SQL> 
08:49:22 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.09
08:49:22 SQL> CREATE TABLE stk16 COMPRESS AS
08:49:22   2  SELECT
08:49:22   3  tkr
08:49:22   4  ,ydate
08:49:22   5  ,tkrdate
08:49:22   6  ,clse
08:49:22   7  ,g1
08:49:22   8  ,gatt
08:49:22   9  ,gattn
08:49:22  10  ,trend
08:49:22  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
08:49:22  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
08:49:22  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
08:49:22  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
08:49:22  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
08:49:22  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
08:49:22  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
08:49:22  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
08:49:22  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
08:49:22  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
08:49:22  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
08:49:22  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
08:49:22  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
08:49:22  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
08:49:22  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
08:49:22  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
08:49:22  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
08:49:22  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
08:49:22  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
08:49:22  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
08:49:22  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
08:49:22  32  ,hh  att21
08:49:22  33  ,d   att22
08:49:22  34  ,w   att23
08:49:22  35  ,mpm att24
08:49:22  36  ,mph att25
08:49:22  37  ,trend att26
08:49:22  38  FROM stk14
08:49:22  39  ORDER BY ydate
08:49:22  40  /

Table created.

Elapsed: 00:00:00.46
08:49:23 SQL> 
08:49:23 SQL> -- rpt
08:49:23 SQL> 
08:49:23 SQL> SELECT
08:49:23   2  tkr
08:49:23   3  ,trend
08:49:23   4  ,gatt
08:49:23   5  ,COUNT(tkr)
08:49:23   6  ,AVG(g1)
08:49:23   7  FROM stk16
08:49:23   8  GROUP BY tkr,trend,gatt
08:49:23   9  ORDER BY tkr,trend,gatt
08:49:23  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BRCM		  -1 nup	830 -1.0571687
BRCM		  -1 up 	703 1.19650071
BRCM		   1 nup	882 -.99936508
BRCM		   1 up 	788 1.21038071
BRCM		   1		  1

Elapsed: 00:00:00.02
08:49:23 SQL> 
08:49:23 SQL> -- Now I derive goodness attributes:
08:49:23 SQL> 
08:49:23 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.04
08:49:23 SQL> CREATE TABLE stk_ms COMPRESS AS
08:49:23   2  SELECT
08:49:23   3  tkr
08:49:23   4  ,ydate
08:49:23   5  ,tkrdate
08:49:23   6  ,trend
08:49:23   7  ,g1
08:49:23   8  ,gatt
08:49:23   9  ,gattn
08:49:23  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
08:49:23  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
08:49:23  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
08:49:23  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
08:49:23  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
08:49:23  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
08:49:23  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
08:49:23  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
08:49:23  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
08:49:23  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
08:49:23  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
08:49:23  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
08:49:23  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
08:49:23  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
08:49:23  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
08:49:23  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
08:49:23  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
08:49:23  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
08:49:23  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
08:49:23  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
08:49:23  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
08:49:23  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
08:49:23  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
08:49:23  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
08:49:23  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
08:49:23  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
08:49:23  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
08:49:23  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
08:49:23  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
08:49:23  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
08:49:23  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
08:49:23  41  FROM stk16
08:49:23  42  /

Table created.

Elapsed: 00:00:00.63
08:49:23 SQL> 
08:49:23 SQL> -- rpt
08:49:23 SQL> 
08:49:23 SQL> SELECT
08:49:23   2  tkr
08:49:23   3  ,trend
08:49:23   4  ,gatt
08:49:23   5  ,COUNT(tkr)
08:49:23   6  ,AVG(g1)
08:49:23   7  FROM stk_ms
08:49:23   8  GROUP BY tkr,trend,gatt
08:49:23   9  ORDER BY tkr,trend,gatt
08:49:23  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BRCM		  -1 nup	830 -1.0571687
BRCM		  -1 up 	703 1.19650071
BRCM		   1 nup	882 -.99936508
BRCM		   1 up 	788 1.21038071
BRCM		   1		  1

Elapsed: 00:00:00.02
08:49:23 SQL> 
08:49:23 SQL> SELECT
08:49:23   2  tkr
08:49:23   3  ,COUNT(tkr)
08:49:23   4  ,MIN(ydate),MAX(ydate)
08:49:23   5  FROM stk_ms
08:49:23   6  GROUP BY tkr
08:49:23   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
BRCM		3204 1998-04-17 2011-01-07

Elapsed: 00:00:00.00
08:49:23 SQL> 
08:49:23 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
