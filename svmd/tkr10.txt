
SQL*Plus: Release 11.2.0.1.0 Production on Mon Mar 28 05:27:39 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:27:39 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
05:27:39 SQL> 
05:27:39 SQL> 05:27:39 SQL> --
05:27:39 SQL> -- stk10.sql
05:27:39 SQL> --
05:27:39 SQL> 
05:27:39 SQL> -- Creates views and tables for demonstrating SVM.
05:27:39 SQL> 
05:27:39 SQL> CREATE OR REPLACE VIEW stk_svmd10 AS
05:27:39   2  SELECT
05:27:39   3  tkr
05:27:39   4  ,ydate
05:27:39   5  ,tkr||ydate tkrdate
05:27:39   6  ,clse
05:27:39   7  ,rownum rnum -- acts as t in my time-series
05:27:39   8  -- Derive some attributes from clse.
05:27:39   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
05:27:39  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
05:27:39  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
05:27:39  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
05:27:39  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
05:27:39  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
05:27:39  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
05:27:39  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
05:27:39  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
05:27:39  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
05:27:39  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
05:27:39  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
05:27:39  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
05:27:39  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
05:27:39  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
05:27:39  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
05:27:39  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
05:27:39  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
05:27:39  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
05:27:39  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
05:27:39  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
05:27:39  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
05:27:39  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
05:27:39  32  ORDER BY ydate
05:27:39  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='BBY'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.04
05:27:39 SQL> 
05:27:39 SQL> -- rpt
05:27:39 SQL> 
05:27:39 SQL> SELECT
05:27:39   2  tkr
05:27:39   3  ,COUNT(tkr)
05:27:39   4  ,MIN(clse),MAX(clse)
05:27:39   5  ,MIN(avg4),MAX(avg4)
05:27:39   6  ,MIN(ydate),MAX(ydate)
05:27:39   7  FROM stk_svmd10
05:27:39   8  GROUP BY tkr
05:27:39   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
BBY		5353	    .16       55.2	 .168	  54.386 1990-01-02 2011-03-25

Elapsed: 00:00:00.19
05:27:40 SQL> 
05:27:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:27:40 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.22
05:27:40 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
05:27:40   2  SELECT
05:27:40   3  tkr
05:27:40   4  ,ydate
05:27:40   5  ,tkrdate
05:27:40   6  ,clse
05:27:40   7  ,rnum
05:27:40   8  -- g1 is important. I want to predict g1:
05:27:40   9  ,ld - clse g1
05:27:40  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
05:27:40  11  -- I want more attributes from the ones I derived above:
05:27:40  12  -- clse relation to moving-min
05:27:40  13  ,clse-min3  cm3
05:27:40  14  ,clse-min4  cm4
05:27:40  15  ,clse-min5  cm5
05:27:40  16  ,clse-min6  cm6
05:27:40  17  ,clse-min7  cm7
05:27:40  18  ,clse-min8  cm8
05:27:40  19  ,clse-min9  cm9
05:27:40  20  -- clse relation to moving-avg
05:27:40  21  ,clse-avg3  ca3
05:27:40  22  ,clse-avg4  ca4
05:27:40  23  ,clse-avg5  ca5
05:27:40  24  ,clse-avg6  ca6
05:27:40  25  ,clse-avg7  ca7
05:27:40  26  ,clse-avg8  ca8
05:27:40  27  ,clse-avg9  ca9
05:27:40  28  -- clse relation to moving-max
05:27:40  29  ,clse-max3  cx3
05:27:40  30  ,clse-max4  cx4
05:27:40  31  ,clse-max5  cx5
05:27:40  32  ,clse-max6  cx6
05:27:40  33  ,clse-max7  cx7
05:27:40  34  ,clse-max8  cx8
05:27:40  35  ,clse-max9  cx9
05:27:40  36  -- Derive date related attributes:
05:27:40  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:27:40  38  ,0+TO_CHAR(ydate,'D')d
05:27:40  39  ,0+TO_CHAR(ydate,'W')w
05:27:40  40  -- mpm stands for minutes-past-midnight:
05:27:40  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:27:40  42  -- mph stands for minutes-past-hour:
05:27:40  43  ,0+TO_CHAR(ydate,'MI')mph
05:27:40  44  FROM stk_svmd10
05:27:40  45  ORDER BY ydate
05:27:40  46  /

Table created.

Elapsed: 00:00:00.57
05:27:40 SQL> 
05:27:40 SQL> -- rpt
05:27:40 SQL> 
05:27:40 SQL> SELECT
05:27:40   2  tkr
05:27:40   3  ,COUNT(tkr)
05:27:40   4  ,MIN(clse),MAX(clse)
05:27:40   5  ,MIN(ydate),MAX(ydate)
05:27:40   6  FROM stk_svmd12
05:27:40   7  GROUP BY tkr
05:27:40   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
BBY		5353	    .16       55.2 1990-01-02 2011-03-25

Elapsed: 00:00:00.02
05:27:40 SQL> 
05:27:40 SQL> -- Prepare for derivation of NTILE based parameters.
05:27:40 SQL> -- Also derive the "trend" parameter:
05:27:40 SQL> 
05:27:40 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.15
05:27:41 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
05:27:41   2  SELECT
05:27:41   3  tkr
05:27:41   4  ,ydate
05:27:41   5  ,tkrdate
05:27:41   6  ,clse
05:27:41   7  ,g1
05:27:41   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
05:27:41   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
05:27:41  10  ,CASE WHEN trend IS NULL THEN 1
05:27:41  11  	    WHEN trend =0      THEN 1
05:27:41  12  	    ELSE trend END trend
05:27:41  13  ,cm3
05:27:41  14  ,cm4
05:27:41  15  ,cm5
05:27:41  16  ,cm6
05:27:41  17  ,cm7
05:27:41  18  ,cm8
05:27:41  19  ,cm9
05:27:41  20  ,ca3
05:27:41  21  ,ca4
05:27:41  22  ,ca5
05:27:41  23  ,ca6
05:27:41  24  ,ca7
05:27:41  25  ,ca8
05:27:41  26  ,ca9
05:27:41  27  ,cx3
05:27:41  28  ,cx4
05:27:41  29  ,cx5
05:27:41  30  ,cx6
05:27:41  31  ,cx7
05:27:41  32  ,cx8
05:27:41  33  ,cx9
05:27:41  34  ,hh
05:27:41  35  ,d
05:27:41  36  ,w
05:27:41  37  ,mpm
05:27:41  38  ,mph
05:27:41  39  FROM stk_svmd12
05:27:41  40  -- Guard against divide by 0:
05:27:41  41  WHERE clse > 0
05:27:41  42  ORDER BY ydate
05:27:41  43  /

Table created.

Elapsed: 00:00:00.11
05:27:41 SQL> 
05:27:41 SQL> -- rpt
05:27:41 SQL> 
05:27:41 SQL> SELECT
05:27:41   2  tkr
05:27:41   3  ,trend
05:27:41   4  ,gatt
05:27:41   5  ,COUNT(tkr)
05:27:41   6  ,AVG(g1)
05:27:41   7  FROM stk_svmd14
05:27:41   8  GROUP BY tkr,trend,gatt
05:27:41   9  ORDER BY tkr,trend,gatt
05:27:41  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BBY		  -1 nup       1435 -.34618118
BBY		  -1 up        1069 .496258185
BBY		  -1		  1
BBY		   1 nup       1624 -.32028325
BBY		   1 up        1224 .421094771

Elapsed: 00:00:00.02
05:27:41 SQL> 
05:27:41 SQL> -- Derive NTILE based params:
05:27:41 SQL> 
05:27:41 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.16
05:27:41 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
05:27:41   2  SELECT
05:27:41   3  tkr
05:27:41   4  ,ydate
05:27:41   5  ,tkrdate
05:27:41   6  ,clse
05:27:41   7  ,g1
05:27:41   8  ,gatt
05:27:41   9  ,gattn
05:27:41  10  ,trend
05:27:41  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
05:27:41  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
05:27:41  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
05:27:41  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
05:27:41  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
05:27:41  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
05:27:41  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
05:27:41  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
05:27:41  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
05:27:41  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
05:27:41  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
05:27:41  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
05:27:41  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
05:27:41  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
05:27:41  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
05:27:41  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
05:27:41  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
05:27:41  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
05:27:41  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
05:27:41  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
05:27:41  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
05:27:41  32  ,hh  att21
05:27:41  33  ,d   att22
05:27:41  34  ,w   att23
05:27:41  35  ,mpm att24
05:27:41  36  ,mph att25
05:27:41  37  ,trend att26
05:27:41  38  FROM stk_svmd14
05:27:41  39  ORDER BY ydate
05:27:41  40  /

Table created.

Elapsed: 00:00:00.59
05:27:41 SQL> 
05:27:41 SQL> -- rpt
05:27:41 SQL> 
05:27:41 SQL> SELECT
05:27:41   2  tkr
05:27:41   3  ,trend
05:27:41   4  ,gatt
05:27:41   5  ,COUNT(tkr)
05:27:41   6  ,AVG(g1)
05:27:41   7  FROM stk_svmd16
05:27:41   8  GROUP BY tkr,trend,gatt
05:27:41   9  ORDER BY tkr,trend,gatt
05:27:41  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BBY		  -1 nup       1435 -.34618118
BBY		  -1 up        1069 .496258185
BBY		  -1		  1
BBY		   1 nup       1624 -.32028325
BBY		   1 up        1224 .421094771

Elapsed: 00:00:00.01
05:27:41 SQL> 
05:27:41 SQL> CREATE OR REPLACE VIEW sc12tkr AS
05:27:41   2  SELECT
05:27:41   3  m.tkr
05:27:41   4  ,m.ydate
05:27:41   5  ,m.tkrdate
05:27:41   6  ,l.score score_long
05:27:41   7  ,s.score score_short
05:27:41   8  ,m.g1
05:27:41   9  FROM ystkscores l,ystkscores s,stk_svmd16 m
05:27:41  10  WHERE l.targ='gatt'
05:27:41  11  AND   s.targ='gattn'
05:27:41  12  AND l.tkrdate = s.tkrdate
05:27:41  13  AND l.tkrdate = m.tkrdate
05:27:41  14  -- Speed things up:
05:27:41  15  AND l.tkr = '&1'
05:27:41  16  AND s.tkr = '&1'
05:27:41  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'BBY'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'BBY'

View created.

Elapsed: 00:00:00.03
05:27:41 SQL> 
05:27:41 SQL> -- DROP TABLE score_corr_tkr;
05:27:41 SQL> --
05:27:41 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
05:27:41 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
05:27:41 SQL> -- (
05:27:41 SQL> --   SELECT
05:27:41 SQL> --   tkrdate
05:27:41 SQL> --   -- Find corr() tween score and g1 over 8 day period:
05:27:41 SQL> --   ,CORR((score_long - score_short),g1)
05:27:41 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
05:27:41 SQL> --   FROM sc12tkr
05:27:41 SQL> -- )
05:27:41 SQL> -- GROUP BY tkrdate
05:27:41 SQL> -- /
05:27:41 SQL> --
05:27:41 SQL> -- -- rpt
05:27:41 SQL> -- SELECT AVG(sc_corr),COUNT(sc_corr)FROM score_corr_tkr;
05:27:41 SQL> 
05:27:41 SQL> -- Now I derive goodness attributes:
05:27:41 SQL> 
05:27:41 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.10
05:27:42 SQL> 
05:27:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
05:27:42 SQL> 
05:27:42 SQL> CREATE TABLE stk_ms COMPRESS AS
05:27:42   2  SELECT
05:27:42   3  tkr
05:27:42   4  ,ydate
05:27:42   5  ,s.tkrdate
05:27:42   6  ,trend
05:27:42   7  ,g1
05:27:42   8  ,gatt
05:27:42   9  ,gattn
05:27:42  10  -- Recent CORR()tween scores and gains:
05:27:42  11  -- ,NVL(sc_corr,0)sc_corr
05:27:42  12  -- Goodness attributes:
05:27:42  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
05:27:42  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
05:27:42  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
05:27:42  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
05:27:42  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
05:27:42  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
05:27:42  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
05:27:42  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
05:27:42  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
05:27:42  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
05:27:42  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
05:27:42  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
05:27:42  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
05:27:42  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
05:27:42  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
05:27:42  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
05:27:42  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
05:27:42  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
05:27:42  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
05:27:42  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
05:27:42  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
05:27:42  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
05:27:42  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
05:27:42  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
05:27:42  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
05:27:42  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
05:27:42  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
05:27:42  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
05:27:42  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
05:27:42  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
05:27:42  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
05:27:42  44  -- FROM stk_svmd16 s,score_corr_tkr c
05:27:42  45  -- WHERE s.tkrdate = c.tkrdate(+)
05:27:42  46  FROM stk_svmd16 s
05:27:42  47  /

Table created.

Elapsed: 00:00:00.97
05:27:43 SQL> 
05:27:43 SQL> -- rpt
05:27:43 SQL> 
05:27:43 SQL> SELECT
05:27:43   2  tkr
05:27:43   3  ,trend
05:27:43   4  ,gatt
05:27:43   5  ,COUNT(tkr)
05:27:43   6  ,AVG(g1)
05:27:43   7  -- ,AVG(sc_corr)
05:27:43   8  FROM stk_ms
05:27:43   9  GROUP BY tkr,trend,gatt
05:27:43  10  ORDER BY tkr,trend,gatt
05:27:43  11  /

TKR	       TREND GAT COUNT(TKR) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ----------------------
BBY		  -1 nup       1435		-.34618118
BBY		  -1 up        1069		.496258185
BBY		  -1		  1
BBY		   1 nup       1624		-.32028325
BBY		   1 up        1224		.421094771

Elapsed: 00:00:00.01
05:27:43 SQL> 
05:27:43 SQL> SELECT
05:27:43   2  tkr
05:27:43   3  ,trend
05:27:43   4  ,gattn
05:27:43   5  ,MIN(ydate)
05:27:43   6  ,COUNT(tkr)
05:27:43   7  ,MAX(ydate)
05:27:43   8  ,AVG(g1)
05:27:43   9  -- ,AVG(sc_corr)
05:27:43  10  FROM stk_ms
05:27:43  11  GROUP BY tkr,trend,gattn
05:27:43  12  ORDER BY tkr,trend,gattn
05:27:43  13  /

TKR	       TREND GAT MIN(YDATE) COUNT(TKR) MAX(YDATE) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ---------- ----------------------
BBY		  -1 nup 1990-01-08	  1418 2011-03-18	      .373991537
BBY		  -1 up  1990-01-11	  1086 2011-03-15	      -.45726519
BBY		  -1	 2011-03-25	     1 2011-03-25
BBY		   1 nup 1990-01-02	  1636 2011-03-22	      .315482885
BBY		   1 up  1990-01-03	  1212 2011-03-24	      -.42974422

Elapsed: 00:00:00.01
05:27:43 SQL> 
05:27:43 SQL> SELECT
05:27:43   2  tkr
05:27:43   3  ,COUNT(tkr)
05:27:43   4  ,MIN(ydate),MAX(ydate)
05:27:43   5  FROM stk_ms
05:27:43   6  GROUP BY tkr
05:27:43   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
BBY		5353 1990-01-02 2011-03-25

Elapsed: 00:00:00.01
05:27:43 SQL> 
05:27:43 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
