
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 12 08:21:55 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:21:56 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
08:21:56 SQL> 08:21:56 SQL> --
08:21:56 SQL> -- stk10.sql
08:21:56 SQL> --
08:21:56 SQL> 
08:21:56 SQL> -- Creates views and tables for demonstrating SVM.
08:21:56 SQL> 
08:21:56 SQL> CREATE OR REPLACE VIEW stk10 AS
08:21:56   2  SELECT
08:21:56   3  tkr
08:21:56   4  ,ydate
08:21:56   5  ,tkr||ydate tkrdate
08:21:56   6  ,clse
08:21:56   7  ,rownum rnum -- acts as t in my time-series
08:21:56   8  -- Derive some attributes from clse.
08:21:56   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
08:21:56  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
08:21:56  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
08:21:56  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
08:21:56  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
08:21:56  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
08:21:56  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
08:21:56  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
08:21:56  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
08:21:56  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
08:21:56  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
08:21:56  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
08:21:56  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
08:21:56  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
08:21:56  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
08:21:56  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
08:21:56  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
08:21:56  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
08:21:56  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
08:21:56  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
08:21:56  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
08:21:56  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
08:21:56  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
08:21:56  32  ORDER BY ydate
08:21:56  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='FLS'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.17
08:21:57 SQL> 
08:21:57 SQL> -- rpt
08:21:57 SQL> 
08:21:57 SQL> SELECT
08:21:57   2  tkr
08:21:57   3  ,COUNT(tkr)
08:21:57   4  ,MIN(clse),MAX(clse)
08:21:57   5  ,MIN(avg4),MAX(avg4)
08:21:57   6  ,MIN(ydate),MAX(ydate)
08:21:57   7  FROM stk10
08:21:57   8  GROUP BY tkr
08:21:57   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
FLS		5238	   5.72     136.83	 5.83	  132.51 1990-03-26 2011-01-11

Elapsed: 00:00:00.48
08:21:57 SQL> 
08:21:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:21:57 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.93
08:21:58 SQL> CREATE TABLE stk12 COMPRESS AS
08:21:58   2  SELECT
08:21:58   3  tkr
08:21:58   4  ,ydate
08:21:58   5  ,tkrdate
08:21:58   6  ,clse
08:21:58   7  ,rnum
08:21:58   8  -- g1 is important. I want to predict g1:
08:21:58   9  ,ld - clse g1
08:21:58  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
08:21:58  11  -- I want more attributes from the ones I derived above:
08:21:58  12  -- clse relation to moving-min
08:21:58  13  ,clse-min3  cm3
08:21:58  14  ,clse-min4  cm4
08:21:58  15  ,clse-min5  cm5
08:21:58  16  ,clse-min6  cm6
08:21:58  17  ,clse-min7  cm7
08:21:58  18  ,clse-min8  cm8
08:21:58  19  ,clse-min9  cm9
08:21:58  20  -- clse relation to moving-avg
08:21:58  21  ,clse-avg3  ca3
08:21:58  22  ,clse-avg4  ca4
08:21:58  23  ,clse-avg5  ca5
08:21:58  24  ,clse-avg6  ca6
08:21:58  25  ,clse-avg7  ca7
08:21:58  26  ,clse-avg8  ca8
08:21:58  27  ,clse-avg9  ca9
08:21:58  28  -- clse relation to moving-max
08:21:58  29  ,clse-max3  cx3
08:21:58  30  ,clse-max4  cx4
08:21:58  31  ,clse-max5  cx5
08:21:58  32  ,clse-max6  cx6
08:21:58  33  ,clse-max7  cx7
08:21:58  34  ,clse-max8  cx8
08:21:58  35  ,clse-max9  cx9
08:21:58  36  -- Derive date related attributes:
08:21:58  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:21:58  38  ,0+TO_CHAR(ydate,'D')d
08:21:58  39  ,0+TO_CHAR(ydate,'W')w
08:21:58  40  -- mpm stands for minutes-past-midnight:
08:21:58  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:21:58  42  -- mph stands for minutes-past-hour:
08:21:58  43  ,0+TO_CHAR(ydate,'MI')mph
08:21:58  44  FROM stk10
08:21:58  45  ORDER BY ydate
08:21:58  46  /

Table created.

Elapsed: 00:00:00.77
08:21:59 SQL> 
08:21:59 SQL> -- rpt
08:21:59 SQL> 
08:21:59 SQL> SELECT
08:21:59   2  tkr
08:21:59   3  ,COUNT(tkr)
08:21:59   4  ,MIN(clse),MAX(clse)
08:21:59   5  ,MIN(ydate),MAX(ydate)
08:21:59   6  FROM stk12
08:21:59   7  GROUP BY tkr
08:21:59   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
FLS		5238	   5.72     136.83 1990-03-26 2011-01-11

Elapsed: 00:00:00.05
08:21:59 SQL> 
08:21:59 SQL> -- Prepare for derivation of NTILE based parameters.
08:21:59 SQL> -- Also derive the "trend" parameter:
08:21:59 SQL> 
08:21:59 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.25
08:21:59 SQL> CREATE TABLE stk14 COMPRESS AS
08:21:59   2  SELECT
08:21:59   3  tkr
08:21:59   4  ,ydate
08:21:59   5  ,tkrdate
08:21:59   6  ,clse
08:21:59   7  ,g1
08:21:59   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
08:21:59   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
08:21:59  10  ,CASE WHEN trend IS NULL THEN 1
08:21:59  11  	    WHEN trend =0      THEN 1
08:21:59  12  	    ELSE trend END trend
08:21:59  13  ,cm3
08:21:59  14  ,cm4
08:21:59  15  ,cm5
08:21:59  16  ,cm6
08:21:59  17  ,cm7
08:21:59  18  ,cm8
08:21:59  19  ,cm9
08:21:59  20  ,ca3
08:21:59  21  ,ca4
08:21:59  22  ,ca5
08:21:59  23  ,ca6
08:21:59  24  ,ca7
08:21:59  25  ,ca8
08:21:59  26  ,ca9
08:21:59  27  ,cx3
08:21:59  28  ,cx4
08:21:59  29  ,cx5
08:21:59  30  ,cx6
08:21:59  31  ,cx7
08:21:59  32  ,cx8
08:21:59  33  ,cx9
08:21:59  34  ,hh
08:21:59  35  ,d
08:21:59  36  ,w
08:21:59  37  ,mpm
08:21:59  38  ,mph
08:21:59  39  FROM stk12
08:21:59  40  -- Guard against divide by 0:
08:21:59  41  WHERE clse > 0
08:21:59  42  ORDER BY ydate
08:21:59  43  /

Table created.

Elapsed: 00:00:00.41
08:22:00 SQL> 
08:22:00 SQL> -- rpt
08:22:00 SQL> 
08:22:00 SQL> SELECT
08:22:00   2  tkr
08:22:00   3  ,trend
08:22:00   4  ,gatt
08:22:00   5  ,COUNT(tkr)
08:22:00   6  ,AVG(g1)
08:22:00   7  FROM stk14
08:22:00   8  GROUP BY tkr,trend,gatt
08:22:00   9  ORDER BY tkr,trend,gatt
08:22:00  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FLS		  -1 nup       1331 -.52189331
FLS		  -1 up        1032 .783149225
FLS		  -1		  1
FLS		   1 nup       1640 -.48823171
FLS		   1 up        1234 .647163695

Elapsed: 00:00:00.11
08:22:00 SQL> 
08:22:00 SQL> -- Derive NTILE based params:
08:22:00 SQL> 
08:22:00 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.14
08:22:00 SQL> CREATE TABLE stk16 COMPRESS AS
08:22:00   2  SELECT
08:22:00   3  tkr
08:22:00   4  ,ydate
08:22:00   5  ,tkrdate
08:22:00   6  ,clse
08:22:00   7  ,g1
08:22:00   8  ,gatt
08:22:00   9  ,gattn
08:22:00  10  ,trend
08:22:00  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
08:22:00  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
08:22:00  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
08:22:00  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
08:22:00  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
08:22:00  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
08:22:00  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
08:22:00  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
08:22:00  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
08:22:00  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
08:22:00  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
08:22:00  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
08:22:00  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
08:22:00  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
08:22:00  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
08:22:00  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
08:22:00  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
08:22:00  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
08:22:00  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
08:22:00  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
08:22:00  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
08:22:00  32  ,hh  att21
08:22:00  33  ,d   att22
08:22:00  34  ,w   att23
08:22:00  35  ,mpm att24
08:22:00  36  ,mph att25
08:22:00  37  ,trend att26
08:22:00  38  FROM stk14
08:22:00  39  ORDER BY ydate
08:22:00  40  /

Table created.

Elapsed: 00:00:00.62
08:22:00 SQL> 
08:22:00 SQL> -- rpt
08:22:00 SQL> 
08:22:00 SQL> SELECT
08:22:00   2  tkr
08:22:00   3  ,trend
08:22:00   4  ,gatt
08:22:00   5  ,COUNT(tkr)
08:22:00   6  ,AVG(g1)
08:22:00   7  FROM stk16
08:22:00   8  GROUP BY tkr,trend,gatt
08:22:00   9  ORDER BY tkr,trend,gatt
08:22:00  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FLS		  -1 nup       1331 -.52189331
FLS		  -1 up        1032 .783149225
FLS		  -1		  1
FLS		   1 nup       1640 -.48823171
FLS		   1 up        1234 .647163695

Elapsed: 00:00:00.05
08:22:00 SQL> 
08:22:00 SQL> -- Now I derive goodness attributes:
08:22:00 SQL> 
08:22:00 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.14
08:22:01 SQL> CREATE TABLE stk_ms COMPRESS AS
08:22:01   2  SELECT
08:22:01   3  tkr
08:22:01   4  ,ydate
08:22:01   5  ,tkrdate
08:22:01   6  ,trend
08:22:01   7  ,g1
08:22:01   8  ,gatt
08:22:01   9  ,gattn
08:22:01  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
08:22:01  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
08:22:01  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
08:22:01  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
08:22:01  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
08:22:01  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
08:22:01  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
08:22:01  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
08:22:01  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
08:22:01  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
08:22:01  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
08:22:01  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
08:22:01  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
08:22:01  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
08:22:01  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
08:22:01  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
08:22:01  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
08:22:01  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
08:22:01  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
08:22:01  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
08:22:01  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
08:22:01  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
08:22:01  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
08:22:01  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
08:22:01  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
08:22:01  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
08:22:01  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
08:22:01  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
08:22:01  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
08:22:01  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
08:22:01  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
08:22:01  41  FROM stk16
08:22:01  42  /

Table created.

Elapsed: 00:00:01.03
08:22:02 SQL> 
08:22:02 SQL> -- rpt
08:22:02 SQL> 
08:22:02 SQL> SELECT
08:22:02   2  tkr
08:22:02   3  ,trend
08:22:02   4  ,gatt
08:22:02   5  ,COUNT(tkr)
08:22:02   6  ,AVG(g1)
08:22:02   7  FROM stk_ms
08:22:02   8  GROUP BY tkr,trend,gatt
08:22:02   9  ORDER BY tkr,trend,gatt
08:22:02  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FLS		  -1 nup       1331 -.52189331
FLS		  -1 up        1032 .783149225
FLS		  -1		  1
FLS		   1 nup       1640 -.48823171
FLS		   1 up        1234 .647163695

Elapsed: 00:00:00.02
08:22:02 SQL> 
08:22:02 SQL> SELECT
08:22:02   2  tkr
08:22:02   3  ,COUNT(tkr)
08:22:02   4  ,MIN(ydate),MAX(ydate)
08:22:02   5  FROM stk_ms
08:22:02   6  GROUP BY tkr
08:22:02   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
FLS		5238 1990-03-26 2011-01-11

Elapsed: 00:00:00.00
08:22:02 SQL> 
08:22:02 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
