
SQL*Plus: Release 11.2.0.1.0 Production on Sat Jan 15 20:48:13 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:48:13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
20:48:13 SQL> 
20:48:13 SQL> 20:48:13 SQL> --
20:48:13 SQL> -- stk10.sql
20:48:13 SQL> --
20:48:13 SQL> 
20:48:13 SQL> -- Creates views and tables for demonstrating SVM.
20:48:13 SQL> 
20:48:13 SQL> CREATE OR REPLACE VIEW stk_svmd10 AS
20:48:13   2  SELECT
20:48:13   3  tkr
20:48:13   4  ,ydate
20:48:13   5  ,tkr||ydate tkrdate
20:48:13   6  ,clse
20:48:13   7  ,rownum rnum -- acts as t in my time-series
20:48:13   8  -- Derive some attributes from clse.
20:48:13   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
20:48:13  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
20:48:13  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
20:48:13  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
20:48:13  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
20:48:13  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
20:48:13  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
20:48:13  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
20:48:13  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
20:48:13  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
20:48:13  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
20:48:13  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
20:48:13  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
20:48:13  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
20:48:13  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
20:48:13  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
20:48:13  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
20:48:13  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
20:48:13  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
20:48:13  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
20:48:13  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
20:48:13  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
20:48:13  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
20:48:13  32  ORDER BY ydate
20:48:13  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='XOM'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.04
20:48:13 SQL> 
20:48:13 SQL> -- rpt
20:48:13 SQL> 
20:48:13 SQL> SELECT
20:48:13   2  tkr
20:48:13   3  ,COUNT(tkr)
20:48:13   4  ,MIN(clse),MAX(clse)
20:48:13   5  ,MIN(avg4),MAX(avg4)
20:48:13   6  ,MIN(ydate),MAX(ydate)
20:48:13   7  FROM stk_svmd10
20:48:13   8  GROUP BY tkr
20:48:13   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
XOM		5305	   6.04      89.02	6.078	  88.146 1990-01-02 2011-01-14

Elapsed: 00:00:00.18
20:48:13 SQL> 
20:48:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:48:13 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.19
20:48:14 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
20:48:14   2  SELECT
20:48:14   3  tkr
20:48:14   4  ,ydate
20:48:14   5  ,tkrdate
20:48:14   6  ,clse
20:48:14   7  ,rnum
20:48:14   8  -- g1 is important. I want to predict g1:
20:48:14   9  ,ld - clse g1
20:48:14  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:48:14  11  -- I want more attributes from the ones I derived above:
20:48:14  12  -- clse relation to moving-min
20:48:14  13  ,clse-min3  cm3
20:48:14  14  ,clse-min4  cm4
20:48:14  15  ,clse-min5  cm5
20:48:14  16  ,clse-min6  cm6
20:48:14  17  ,clse-min7  cm7
20:48:14  18  ,clse-min8  cm8
20:48:14  19  ,clse-min9  cm9
20:48:14  20  -- clse relation to moving-avg
20:48:14  21  ,clse-avg3  ca3
20:48:14  22  ,clse-avg4  ca4
20:48:14  23  ,clse-avg5  ca5
20:48:14  24  ,clse-avg6  ca6
20:48:14  25  ,clse-avg7  ca7
20:48:14  26  ,clse-avg8  ca8
20:48:14  27  ,clse-avg9  ca9
20:48:14  28  -- clse relation to moving-max
20:48:14  29  ,clse-max3  cx3
20:48:14  30  ,clse-max4  cx4
20:48:14  31  ,clse-max5  cx5
20:48:14  32  ,clse-max6  cx6
20:48:14  33  ,clse-max7  cx7
20:48:14  34  ,clse-max8  cx8
20:48:14  35  ,clse-max9  cx9
20:48:14  36  -- Derive date related attributes:
20:48:14  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:48:14  38  ,0+TO_CHAR(ydate,'D')d
20:48:14  39  ,0+TO_CHAR(ydate,'W')w
20:48:14  40  -- mpm stands for minutes-past-midnight:
20:48:14  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:48:14  42  -- mph stands for minutes-past-hour:
20:48:14  43  ,0+TO_CHAR(ydate,'MI')mph
20:48:14  44  FROM stk_svmd10
20:48:14  45  ORDER BY ydate
20:48:14  46  /

Table created.

Elapsed: 00:00:00.42
20:48:14 SQL> 
20:48:14 SQL> -- rpt
20:48:14 SQL> 
20:48:14 SQL> SELECT
20:48:14   2  tkr
20:48:14   3  ,COUNT(tkr)
20:48:14   4  ,MIN(clse),MAX(clse)
20:48:14   5  ,MIN(ydate),MAX(ydate)
20:48:14   6  FROM stk_svmd12
20:48:14   7  GROUP BY tkr
20:48:14   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
XOM		5305	   6.04      89.02 1990-01-02 2011-01-14

Elapsed: 00:00:00.01
20:48:14 SQL> 
20:48:14 SQL> -- Prepare for derivation of NTILE based parameters.
20:48:14 SQL> -- Also derive the "trend" parameter:
20:48:14 SQL> 
20:48:14 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.15
20:48:14 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
20:48:14   2  SELECT
20:48:14   3  tkr
20:48:14   4  ,ydate
20:48:14   5  ,tkrdate
20:48:14   6  ,clse
20:48:14   7  ,g1
20:48:14   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:48:14   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:48:14  10  ,CASE WHEN trend IS NULL THEN 1
20:48:14  11  	    WHEN trend =0      THEN 1
20:48:14  12  	    ELSE trend END trend
20:48:14  13  ,cm3
20:48:14  14  ,cm4
20:48:14  15  ,cm5
20:48:14  16  ,cm6
20:48:14  17  ,cm7
20:48:14  18  ,cm8
20:48:14  19  ,cm9
20:48:14  20  ,ca3
20:48:14  21  ,ca4
20:48:14  22  ,ca5
20:48:14  23  ,ca6
20:48:14  24  ,ca7
20:48:14  25  ,ca8
20:48:14  26  ,ca9
20:48:14  27  ,cx3
20:48:14  28  ,cx4
20:48:14  29  ,cx5
20:48:14  30  ,cx6
20:48:14  31  ,cx7
20:48:14  32  ,cx8
20:48:14  33  ,cx9
20:48:14  34  ,hh
20:48:14  35  ,d
20:48:14  36  ,w
20:48:14  37  ,mpm
20:48:14  38  ,mph
20:48:14  39  FROM stk_svmd12
20:48:14  40  -- Guard against divide by 0:
20:48:14  41  WHERE clse > 0
20:48:14  42  ORDER BY ydate
20:48:14  43  /

Table created.

Elapsed: 00:00:00.10
20:48:14 SQL> 
20:48:14 SQL> -- rpt
20:48:14 SQL> 
20:48:14 SQL> SELECT
20:48:14   2  tkr
20:48:14   3  ,trend
20:48:14   4  ,gatt
20:48:14   5  ,COUNT(tkr)
20:48:14   6  ,AVG(g1)
20:48:14   7  FROM stk_svmd14
20:48:14   8  GROUP BY tkr,trend,gatt
20:48:14   9  ORDER BY tkr,trend,gatt
20:48:14  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259 -.35269261
XOM		  -1 up        1047 .523008596
XOM		   1 nup       1829 -.31027337
XOM		   1 up        1169 .457784431
XOM		   1		  1

Elapsed: 00:00:00.02
20:48:14 SQL> 
20:48:14 SQL> -- Derive NTILE based params:
20:48:14 SQL> 
20:48:14 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.15
20:48:15 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
20:48:15   2  SELECT
20:48:15   3  tkr
20:48:15   4  ,ydate
20:48:15   5  ,tkrdate
20:48:15   6  ,clse
20:48:15   7  ,g1
20:48:15   8  ,gatt
20:48:15   9  ,gattn
20:48:15  10  ,trend
20:48:15  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:48:15  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:48:15  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:48:15  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:48:15  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:48:15  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:48:15  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:48:15  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:48:15  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:48:15  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:48:15  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:48:15  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:48:15  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:48:15  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:48:15  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:48:15  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:48:15  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:48:15  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:48:15  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:48:15  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:48:15  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:48:15  32  ,hh  att21
20:48:15  33  ,d   att22
20:48:15  34  ,w   att23
20:48:15  35  ,mpm att24
20:48:15  36  ,mph att25
20:48:15  37  ,trend att26
20:48:15  38  FROM stk_svmd14
20:48:15  39  ORDER BY ydate
20:48:15  40  /

Table created.

Elapsed: 00:00:00.58
20:48:15 SQL> 
20:48:15 SQL> -- rpt
20:48:15 SQL> 
20:48:15 SQL> SELECT
20:48:15   2  tkr
20:48:15   3  ,trend
20:48:15   4  ,gatt
20:48:15   5  ,COUNT(tkr)
20:48:15   6  ,AVG(g1)
20:48:15   7  FROM stk_svmd16
20:48:15   8  GROUP BY tkr,trend,gatt
20:48:15   9  ORDER BY tkr,trend,gatt
20:48:15  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259 -.35269261
XOM		  -1 up        1047 .523008596
XOM		   1 nup       1829 -.31027337
XOM		   1 up        1169 .457784431
XOM		   1		  1

Elapsed: 00:00:00.01
20:48:15 SQL> 
20:48:15 SQL> -- Now I derive goodness attributes:
20:48:15 SQL> 
20:48:15 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.12
20:48:15 SQL> CREATE TABLE stk_ms COMPRESS AS
20:48:15   2  SELECT
20:48:15   3  tkr
20:48:15   4  ,ydate
20:48:15   5  ,tkrdate
20:48:15   6  ,trend
20:48:15   7  ,g1
20:48:15   8  ,gatt
20:48:15   9  ,gattn
20:48:15  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
20:48:15  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
20:48:15  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
20:48:15  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
20:48:15  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
20:48:15  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
20:48:15  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
20:48:15  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
20:48:15  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
20:48:15  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
20:48:15  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
20:48:15  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
20:48:15  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
20:48:15  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
20:48:15  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
20:48:15  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
20:48:15  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
20:48:15  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
20:48:15  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
20:48:15  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
20:48:15  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
20:48:15  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
20:48:15  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
20:48:15  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
20:48:15  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
20:48:15  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
20:48:15  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
20:48:15  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:48:15  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
20:48:15  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
20:48:15  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
20:48:15  41  FROM stk_svmd16
20:48:15  42  /

Table created.

Elapsed: 00:00:00.95
20:48:16 SQL> 
20:48:16 SQL> -- rpt
20:48:16 SQL> 
20:48:16 SQL> SELECT
20:48:16   2  tkr
20:48:16   3  ,trend
20:48:16   4  ,gatt
20:48:16   5  ,COUNT(tkr)
20:48:16   6  ,AVG(g1)
20:48:16   7  FROM stk_ms
20:48:16   8  GROUP BY tkr,trend,gatt
20:48:16   9  ORDER BY tkr,trend,gatt
20:48:16  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259 -.35269261
XOM		  -1 up        1047 .523008596
XOM		   1 nup       1829 -.31027337
XOM		   1 up        1169 .457784431
XOM		   1		  1

Elapsed: 00:00:00.01
20:48:16 SQL> 
20:48:16 SQL> SELECT
20:48:16   2  tkr
20:48:16   3  ,COUNT(tkr)
20:48:16   4  ,MIN(ydate),MAX(ydate)
20:48:16   5  FROM stk_ms
20:48:16   6  GROUP BY tkr
20:48:16   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
XOM		5305 1990-01-02 2011-01-14

Elapsed: 00:00:00.01
20:48:16 SQL> 
20:48:16 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
