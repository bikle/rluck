
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 10 21:43:15 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:43:15 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
21:43:15 SQL> 21:43:15 SQL> --
21:43:15 SQL> -- stk10.sql
21:43:15 SQL> --
21:43:15 SQL> 
21:43:15 SQL> -- Creates views and tables for demonstrating SVM.
21:43:15 SQL> 
21:43:15 SQL> CREATE OR REPLACE VIEW stk10 AS
21:43:15   2  SELECT
21:43:15   3  tkr
21:43:15   4  ,ydate
21:43:15   5  ,tkr||ydate tkrdate
21:43:15   6  ,clse
21:43:15   7  ,rownum rnum -- acts as t in my time-series
21:43:15   8  -- Derive some attributes from clse.
21:43:15   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
21:43:15  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
21:43:15  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
21:43:15  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
21:43:15  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
21:43:15  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
21:43:15  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
21:43:15  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
21:43:15  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
21:43:15  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
21:43:15  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
21:43:15  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
21:43:15  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
21:43:15  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
21:43:15  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
21:43:15  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
21:43:15  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
21:43:15  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
21:43:15  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
21:43:15  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
21:43:15  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
21:43:15  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
21:43:15  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
21:43:15  32  ORDER BY ydate
21:43:15  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='CVS'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.08
21:43:15 SQL> 
21:43:15 SQL> -- rpt
21:43:15 SQL> 
21:43:15 SQL> SELECT
21:43:15   2  tkr
21:43:15   3  ,COUNT(tkr)
21:43:15   4  ,MIN(clse),MAX(clse)
21:43:15   5  ,MIN(avg4),MAX(avg4)
21:43:15   6  ,MIN(ydate),MAX(ydate)
21:43:15   7  FROM stk10
21:43:15   8  GROUP BY tkr
21:43:15   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
CVS		5294	   3.48      43.04	3.544	  42.206 1990-01-02 2011-01-07

Elapsed: 00:00:00.64
21:43:16 SQL> 
21:43:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:43:16 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.26
21:43:16 SQL> CREATE TABLE stk12 COMPRESS AS
21:43:16   2  SELECT
21:43:16   3  tkr
21:43:16   4  ,ydate
21:43:16   5  ,tkrdate
21:43:16   6  ,clse
21:43:16   7  ,rnum
21:43:16   8  -- g1 is important. I want to predict g1:
21:43:16   9  ,ld - clse g1
21:43:16  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
21:43:16  11  -- I want more attributes from the ones I derived above:
21:43:16  12  -- clse relation to moving-min
21:43:16  13  ,clse-min3  cm3
21:43:16  14  ,clse-min4  cm4
21:43:16  15  ,clse-min5  cm5
21:43:16  16  ,clse-min6  cm6
21:43:16  17  ,clse-min7  cm7
21:43:16  18  ,clse-min8  cm8
21:43:16  19  ,clse-min9  cm9
21:43:16  20  -- clse relation to moving-avg
21:43:16  21  ,clse-avg3  ca3
21:43:16  22  ,clse-avg4  ca4
21:43:16  23  ,clse-avg5  ca5
21:43:16  24  ,clse-avg6  ca6
21:43:16  25  ,clse-avg7  ca7
21:43:16  26  ,clse-avg8  ca8
21:43:16  27  ,clse-avg9  ca9
21:43:16  28  -- clse relation to moving-max
21:43:16  29  ,clse-max3  cx3
21:43:16  30  ,clse-max4  cx4
21:43:16  31  ,clse-max5  cx5
21:43:16  32  ,clse-max6  cx6
21:43:16  33  ,clse-max7  cx7
21:43:16  34  ,clse-max8  cx8
21:43:16  35  ,clse-max9  cx9
21:43:16  36  -- Derive date related attributes:
21:43:16  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:43:16  38  ,0+TO_CHAR(ydate,'D')d
21:43:16  39  ,0+TO_CHAR(ydate,'W')w
21:43:16  40  -- mpm stands for minutes-past-midnight:
21:43:16  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:43:16  42  -- mph stands for minutes-past-hour:
21:43:16  43  ,0+TO_CHAR(ydate,'MI')mph
21:43:16  44  FROM stk10
21:43:16  45  ORDER BY ydate
21:43:16  46  /

Table created.

Elapsed: 00:00:00.51
21:43:17 SQL> 
21:43:17 SQL> -- rpt
21:43:17 SQL> 
21:43:17 SQL> SELECT
21:43:17   2  tkr
21:43:17   3  ,COUNT(tkr)
21:43:17   4  ,MIN(clse),MAX(clse)
21:43:17   5  ,MIN(ydate),MAX(ydate)
21:43:17   6  FROM stk12
21:43:17   7  GROUP BY tkr
21:43:17   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
CVS		5294	   3.48      43.04 1990-01-02 2011-01-07

Elapsed: 00:00:00.01
21:43:17 SQL> 
21:43:17 SQL> -- Prepare for derivation of NTILE based parameters.
21:43:17 SQL> -- Also derive the "trend" parameter:
21:43:17 SQL> 
21:43:17 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.06
21:43:17 SQL> CREATE TABLE stk14 COMPRESS AS
21:43:17   2  SELECT
21:43:17   3  tkr
21:43:17   4  ,ydate
21:43:17   5  ,tkrdate
21:43:17   6  ,clse
21:43:17   7  ,g1
21:43:17   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
21:43:17   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
21:43:17  10  ,CASE WHEN trend IS NULL THEN 1
21:43:17  11  	    WHEN trend =0      THEN 1
21:43:17  12  	    ELSE trend END trend
21:43:17  13  ,cm3
21:43:17  14  ,cm4
21:43:17  15  ,cm5
21:43:17  16  ,cm6
21:43:17  17  ,cm7
21:43:17  18  ,cm8
21:43:17  19  ,cm9
21:43:17  20  ,ca3
21:43:17  21  ,ca4
21:43:17  22  ,ca5
21:43:17  23  ,ca6
21:43:17  24  ,ca7
21:43:17  25  ,ca8
21:43:17  26  ,ca9
21:43:17  27  ,cx3
21:43:17  28  ,cx4
21:43:17  29  ,cx5
21:43:17  30  ,cx6
21:43:17  31  ,cx7
21:43:17  32  ,cx8
21:43:17  33  ,cx9
21:43:17  34  ,hh
21:43:17  35  ,d
21:43:17  36  ,w
21:43:17  37  ,mpm
21:43:17  38  ,mph
21:43:17  39  FROM stk12
21:43:17  40  -- Guard against divide by 0:
21:43:17  41  WHERE clse > 0
21:43:17  42  ORDER BY ydate
21:43:17  43  /

Table created.

Elapsed: 00:00:00.14
21:43:17 SQL> 
21:43:17 SQL> -- rpt
21:43:17 SQL> 
21:43:17 SQL> SELECT
21:43:17   2  tkr
21:43:17   3  ,trend
21:43:17   4  ,gatt
21:43:17   5  ,COUNT(tkr)
21:43:17   6  ,AVG(g1)
21:43:17   7  FROM stk14
21:43:17   8  GROUP BY tkr,trend,gatt
21:43:17   9  ORDER BY tkr,trend,gatt
21:43:17  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CVS		  -1 nup       1379 -.21860769
CVS		  -1 up        1055 .330085308
CVS		   1 nup       1719 -.19758581
CVS		   1 up        1140 .283745614
CVS		   1		  1

Elapsed: 00:00:00.01
21:43:17 SQL> 
21:43:17 SQL> -- Derive NTILE based params:
21:43:17 SQL> 
21:43:17 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.05
21:43:17 SQL> CREATE TABLE stk16 COMPRESS AS
21:43:17   2  SELECT
21:43:17   3  tkr
21:43:17   4  ,ydate
21:43:17   5  ,tkrdate
21:43:17   6  ,clse
21:43:17   7  ,g1
21:43:17   8  ,gatt
21:43:17   9  ,gattn
21:43:17  10  ,trend
21:43:17  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
21:43:17  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
21:43:17  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
21:43:17  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
21:43:17  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
21:43:17  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
21:43:17  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
21:43:17  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
21:43:17  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
21:43:17  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
21:43:17  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
21:43:17  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
21:43:17  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
21:43:17  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
21:43:17  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
21:43:17  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
21:43:17  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
21:43:17  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
21:43:17  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
21:43:17  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
21:43:17  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
21:43:17  32  ,hh  att21
21:43:17  33  ,d   att22
21:43:17  34  ,w   att23
21:43:17  35  ,mpm att24
21:43:17  36  ,mph att25
21:43:17  37  ,trend att26
21:43:17  38  FROM stk14
21:43:17  39  ORDER BY ydate
21:43:17  40  /

Table created.

Elapsed: 00:00:00.58
21:43:18 SQL> 
21:43:18 SQL> -- rpt
21:43:18 SQL> 
21:43:18 SQL> SELECT
21:43:18   2  tkr
21:43:18   3  ,trend
21:43:18   4  ,gatt
21:43:18   5  ,COUNT(tkr)
21:43:18   6  ,AVG(g1)
21:43:18   7  FROM stk16
21:43:18   8  GROUP BY tkr,trend,gatt
21:43:18   9  ORDER BY tkr,trend,gatt
21:43:18  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CVS		  -1 nup       1379 -.21860769
CVS		  -1 up        1055 .330085308
CVS		   1 nup       1719 -.19758581
CVS		   1 up        1140 .283745614
CVS		   1		  1

Elapsed: 00:00:00.02
21:43:18 SQL> 
21:43:18 SQL> -- Now I derive goodness attributes:
21:43:18 SQL> 
21:43:18 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.05
21:43:18 SQL> CREATE TABLE stk_ms COMPRESS AS
21:43:18   2  SELECT
21:43:18   3  tkr
21:43:18   4  ,ydate
21:43:18   5  ,tkrdate
21:43:18   6  ,trend
21:43:18   7  ,g1
21:43:18   8  ,gatt
21:43:18   9  ,gattn
21:43:18  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
21:43:18  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
21:43:18  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
21:43:18  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
21:43:18  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
21:43:18  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
21:43:18  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
21:43:18  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
21:43:18  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
21:43:18  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
21:43:18  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
21:43:18  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
21:43:18  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
21:43:18  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
21:43:18  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
21:43:18  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
21:43:18  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
21:43:18  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
21:43:18  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
21:43:18  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
21:43:18  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
21:43:18  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
21:43:18  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
21:43:18  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
21:43:18  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
21:43:18  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
21:43:18  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
21:43:18  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
21:43:18  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
21:43:18  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
21:43:18  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
21:43:18  41  FROM stk16
21:43:18  42  /

Table created.

Elapsed: 00:00:00.99
21:43:19 SQL> 
21:43:19 SQL> -- rpt
21:43:19 SQL> 
21:43:19 SQL> SELECT
21:43:19   2  tkr
21:43:19   3  ,trend
21:43:19   4  ,gatt
21:43:19   5  ,COUNT(tkr)
21:43:19   6  ,AVG(g1)
21:43:19   7  FROM stk_ms
21:43:19   8  GROUP BY tkr,trend,gatt
21:43:19   9  ORDER BY tkr,trend,gatt
21:43:19  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CVS		  -1 nup       1379 -.21860769
CVS		  -1 up        1055 .330085308
CVS		   1 nup       1719 -.19758581
CVS		   1 up        1140 .283745614
CVS		   1		  1

Elapsed: 00:00:00.02
21:43:19 SQL> 
21:43:19 SQL> SELECT
21:43:19   2  tkr
21:43:19   3  ,COUNT(tkr)
21:43:19   4  ,MIN(ydate),MAX(ydate)
21:43:19   5  FROM stk_ms
21:43:19   6  GROUP BY tkr
21:43:19   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
CVS		5294 1990-01-02 2011-01-07

Elapsed: 00:00:00.01
21:43:19 SQL> 
21:43:19 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
