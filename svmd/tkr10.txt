
SQL*Plus: Release 11.2.0.1.0 Production on Tue Jan 11 15:36:26 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:36:27 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
15:36:27 SQL> 15:36:27 SQL> --
15:36:27 SQL> -- stk10.sql
15:36:27 SQL> --
15:36:27 SQL> 
15:36:27 SQL> -- Creates views and tables for demonstrating SVM.
15:36:27 SQL> 
15:36:27 SQL> CREATE OR REPLACE VIEW stk10 AS
15:36:27   2  SELECT
15:36:27   3  tkr
15:36:27   4  ,ydate
15:36:27   5  ,tkr||ydate tkrdate
15:36:27   6  ,clse
15:36:27   7  ,rownum rnum -- acts as t in my time-series
15:36:27   8  -- Derive some attributes from clse.
15:36:27   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
15:36:27  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
15:36:27  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
15:36:27  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
15:36:27  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
15:36:27  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
15:36:27  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
15:36:27  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
15:36:27  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
15:36:27  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
15:36:27  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
15:36:27  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
15:36:27  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
15:36:27  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
15:36:27  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
15:36:27  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
15:36:27  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
15:36:27  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
15:36:27  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
15:36:27  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
15:36:27  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
15:36:27  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
15:36:27  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
15:36:27  32  ORDER BY ydate
15:36:27  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='GLD'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.09
15:36:27 SQL> 
15:36:27 SQL> -- rpt
15:36:27 SQL> 
15:36:27 SQL> SELECT
15:36:27   2  tkr
15:36:27   3  ,COUNT(tkr)
15:36:27   4  ,MIN(clse),MAX(clse)
15:36:27   5  ,MIN(avg4),MAX(avg4)
15:36:27   6  ,MIN(ydate),MAX(ydate)
15:36:27   7  FROM stk10
15:36:27   8  GROUP BY tkr
15:36:27   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
GLD		1546	  41.26     139.11     41.398	 137.736 2004-11-18 2011-01-07

Elapsed: 00:00:00.60
15:36:27 SQL> 
15:36:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:36:27 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.40
15:36:28 SQL> CREATE TABLE stk12 COMPRESS AS
15:36:28   2  SELECT
15:36:28   3  tkr
15:36:28   4  ,ydate
15:36:28   5  ,tkrdate
15:36:28   6  ,clse
15:36:28   7  ,rnum
15:36:28   8  -- g1 is important. I want to predict g1:
15:36:28   9  ,ld - clse g1
15:36:28  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
15:36:28  11  -- I want more attributes from the ones I derived above:
15:36:28  12  -- clse relation to moving-min
15:36:28  13  ,clse-min3  cm3
15:36:28  14  ,clse-min4  cm4
15:36:28  15  ,clse-min5  cm5
15:36:28  16  ,clse-min6  cm6
15:36:28  17  ,clse-min7  cm7
15:36:28  18  ,clse-min8  cm8
15:36:28  19  ,clse-min9  cm9
15:36:28  20  -- clse relation to moving-avg
15:36:28  21  ,clse-avg3  ca3
15:36:28  22  ,clse-avg4  ca4
15:36:28  23  ,clse-avg5  ca5
15:36:28  24  ,clse-avg6  ca6
15:36:28  25  ,clse-avg7  ca7
15:36:28  26  ,clse-avg8  ca8
15:36:28  27  ,clse-avg9  ca9
15:36:28  28  -- clse relation to moving-max
15:36:28  29  ,clse-max3  cx3
15:36:28  30  ,clse-max4  cx4
15:36:28  31  ,clse-max5  cx5
15:36:28  32  ,clse-max6  cx6
15:36:28  33  ,clse-max7  cx7
15:36:28  34  ,clse-max8  cx8
15:36:28  35  ,clse-max9  cx9
15:36:28  36  -- Derive date related attributes:
15:36:28  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:36:28  38  ,0+TO_CHAR(ydate,'D')d
15:36:28  39  ,0+TO_CHAR(ydate,'W')w
15:36:28  40  -- mpm stands for minutes-past-midnight:
15:36:28  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:36:28  42  -- mph stands for minutes-past-hour:
15:36:28  43  ,0+TO_CHAR(ydate,'MI')mph
15:36:28  44  FROM stk10
15:36:28  45  ORDER BY ydate
15:36:28  46  /

Table created.

Elapsed: 00:00:00.28
15:36:28 SQL> 
15:36:28 SQL> -- rpt
15:36:28 SQL> 
15:36:28 SQL> SELECT
15:36:28   2  tkr
15:36:28   3  ,COUNT(tkr)
15:36:28   4  ,MIN(clse),MAX(clse)
15:36:28   5  ,MIN(ydate),MAX(ydate)
15:36:28   6  FROM stk12
15:36:28   7  GROUP BY tkr
15:36:28   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
GLD		1546	  41.26     139.11 2004-11-18 2011-01-07

Elapsed: 00:00:00.02
15:36:28 SQL> 
15:36:28 SQL> -- Prepare for derivation of NTILE based parameters.
15:36:28 SQL> -- Also derive the "trend" parameter:
15:36:28 SQL> 
15:36:28 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.05
15:36:28 SQL> CREATE TABLE stk14 COMPRESS AS
15:36:28   2  SELECT
15:36:28   3  tkr
15:36:28   4  ,ydate
15:36:28   5  ,tkrdate
15:36:28   6  ,clse
15:36:28   7  ,g1
15:36:28   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
15:36:28   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
15:36:28  10  ,CASE WHEN trend IS NULL THEN 1
15:36:28  11  	    WHEN trend =0      THEN 1
15:36:28  12  	    ELSE trend END trend
15:36:28  13  ,cm3
15:36:28  14  ,cm4
15:36:28  15  ,cm5
15:36:28  16  ,cm6
15:36:28  17  ,cm7
15:36:28  18  ,cm8
15:36:28  19  ,cm9
15:36:28  20  ,ca3
15:36:28  21  ,ca4
15:36:28  22  ,ca5
15:36:28  23  ,ca6
15:36:28  24  ,ca7
15:36:28  25  ,ca8
15:36:28  26  ,ca9
15:36:28  27  ,cx3
15:36:28  28  ,cx4
15:36:28  29  ,cx5
15:36:28  30  ,cx6
15:36:28  31  ,cx7
15:36:28  32  ,cx8
15:36:28  33  ,cx9
15:36:28  34  ,hh
15:36:28  35  ,d
15:36:28  36  ,w
15:36:28  37  ,mpm
15:36:28  38  ,mph
15:36:28  39  FROM stk12
15:36:28  40  -- Guard against divide by 0:
15:36:28  41  WHERE clse > 0
15:36:28  42  ORDER BY ydate
15:36:28  43  /

Table created.

Elapsed: 00:00:00.10
15:36:28 SQL> 
15:36:28 SQL> -- rpt
15:36:28 SQL> 
15:36:28 SQL> SELECT
15:36:28   2  tkr
15:36:28   3  ,trend
15:36:28   4  ,gatt
15:36:28   5  ,COUNT(tkr)
15:36:28   6  ,AVG(g1)
15:36:28   7  FROM stk14
15:36:28   8  GROUP BY tkr,trend,gatt
15:36:28   9  ORDER BY tkr,trend,gatt
15:36:28  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GLD		  -1 nup	367 -.60683924
GLD		  -1 up 	269 .986840149
GLD		  -1		  1
GLD		   1 nup	524  -.5954771
GLD		   1 up 	385 .931116883

Elapsed: 00:00:00.03
15:36:28 SQL> 
15:36:28 SQL> -- Derive NTILE based params:
15:36:28 SQL> 
15:36:28 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.09
15:36:28 SQL> CREATE TABLE stk16 COMPRESS AS
15:36:28   2  SELECT
15:36:28   3  tkr
15:36:28   4  ,ydate
15:36:28   5  ,tkrdate
15:36:28   6  ,clse
15:36:28   7  ,g1
15:36:28   8  ,gatt
15:36:28   9  ,gattn
15:36:28  10  ,trend
15:36:28  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
15:36:28  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
15:36:28  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
15:36:28  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
15:36:28  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
15:36:28  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
15:36:28  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
15:36:28  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
15:36:28  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
15:36:28  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
15:36:28  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
15:36:28  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
15:36:28  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
15:36:28  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
15:36:28  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
15:36:28  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
15:36:28  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
15:36:28  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
15:36:28  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
15:36:28  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
15:36:28  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
15:36:28  32  ,hh  att21
15:36:28  33  ,d   att22
15:36:28  34  ,w   att23
15:36:28  35  ,mpm att24
15:36:28  36  ,mph att25
15:36:28  37  ,trend att26
15:36:28  38  FROM stk14
15:36:28  39  ORDER BY ydate
15:36:28  40  /

Table created.

Elapsed: 00:00:00.20
15:36:28 SQL> 
15:36:28 SQL> -- rpt
15:36:28 SQL> 
15:36:28 SQL> SELECT
15:36:28   2  tkr
15:36:28   3  ,trend
15:36:28   4  ,gatt
15:36:28   5  ,COUNT(tkr)
15:36:28   6  ,AVG(g1)
15:36:28   7  FROM stk16
15:36:28   8  GROUP BY tkr,trend,gatt
15:36:28   9  ORDER BY tkr,trend,gatt
15:36:28  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GLD		  -1 nup	367 -.60683924
GLD		  -1 up 	269 .986840149
GLD		  -1		  1
GLD		   1 nup	524  -.5954771
GLD		   1 up 	385 .931116883

Elapsed: 00:00:00.01
15:36:28 SQL> 
15:36:28 SQL> -- Now I derive goodness attributes:
15:36:28 SQL> 
15:36:28 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.05
15:36:28 SQL> CREATE TABLE stk_ms COMPRESS AS
15:36:28   2  SELECT
15:36:28   3  tkr
15:36:28   4  ,ydate
15:36:28   5  ,tkrdate
15:36:28   6  ,trend
15:36:28   7  ,g1
15:36:28   8  ,gatt
15:36:28   9  ,gattn
15:36:28  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
15:36:28  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
15:36:28  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
15:36:28  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
15:36:28  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
15:36:28  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
15:36:28  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
15:36:28  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
15:36:28  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
15:36:28  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
15:36:28  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
15:36:28  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
15:36:28  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
15:36:28  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
15:36:28  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
15:36:28  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
15:36:28  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
15:36:28  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
15:36:28  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
15:36:28  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
15:36:28  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
15:36:28  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
15:36:28  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
15:36:28  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
15:36:28  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
15:36:28  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
15:36:28  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
15:36:28  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
15:36:28  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
15:36:28  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
15:36:28  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
15:36:28  41  FROM stk16
15:36:28  42  /

Table created.

Elapsed: 00:00:00.29
15:36:29 SQL> 
15:36:29 SQL> -- rpt
15:36:29 SQL> 
15:36:29 SQL> SELECT
15:36:29   2  tkr
15:36:29   3  ,trend
15:36:29   4  ,gatt
15:36:29   5  ,COUNT(tkr)
15:36:29   6  ,AVG(g1)
15:36:29   7  FROM stk_ms
15:36:29   8  GROUP BY tkr,trend,gatt
15:36:29   9  ORDER BY tkr,trend,gatt
15:36:29  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GLD		  -1 nup	367 -.60683924
GLD		  -1 up 	269 .986840149
GLD		  -1		  1
GLD		   1 nup	524  -.5954771
GLD		   1 up 	385 .931116883

Elapsed: 00:00:00.01
15:36:29 SQL> 
15:36:29 SQL> SELECT
15:36:29   2  tkr
15:36:29   3  ,COUNT(tkr)
15:36:29   4  ,MIN(ydate),MAX(ydate)
15:36:29   5  FROM stk_ms
15:36:29   6  GROUP BY tkr
15:36:29   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
GLD		1546 2004-11-18 2011-01-07

Elapsed: 00:00:00.00
15:36:29 SQL> 
15:36:29 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
