
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 10 19:01:47 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

19:01:48 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.01
19:01:48 SQL> 19:01:48 SQL> --
19:01:48 SQL> -- stk10.sql
19:01:48 SQL> --
19:01:48 SQL> 
19:01:48 SQL> -- Creates views and tables for demonstrating SVM.
19:01:48 SQL> 
19:01:48 SQL> CREATE OR REPLACE VIEW stk10 AS
19:01:48   2  SELECT
19:01:48   3  tkr
19:01:48   4  ,ydate
19:01:48   5  ,tkr||ydate tkrdate
19:01:48   6  ,clse
19:01:48   7  ,rownum rnum -- acts as t in my time-series
19:01:48   8  -- Derive some attributes from clse.
19:01:48   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
19:01:48  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
19:01:48  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
19:01:48  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
19:01:48  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
19:01:48  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
19:01:48  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
19:01:48  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
19:01:48  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
19:01:48  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
19:01:48  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
19:01:48  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
19:01:48  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
19:01:48  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
19:01:48  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
19:01:48  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
19:01:48  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
19:01:48  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
19:01:48  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
19:01:48  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
19:01:48  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
19:01:48  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
19:01:48  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
19:01:48  32  ORDER BY ydate
19:01:48  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='CRM'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.14
19:01:48 SQL> 
19:01:48 SQL> -- rpt
19:01:48 SQL> 
19:01:48 SQL> SELECT
19:01:48   2  tkr
19:01:48   3  ,COUNT(tkr)
19:01:48   4  ,MIN(clse),MAX(clse)
19:01:48   5  ,MIN(avg4),MAX(avg4)
19:01:48   6  ,MIN(ydate),MAX(ydate)
19:01:48   7  FROM stk10
19:01:48   8  GROUP BY tkr
19:01:48   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
CRM		1650	   9.59     150.58     10.178	  147.63 2004-06-23 2011-01-07

Elapsed: 00:00:00.67
19:01:49 SQL> 
19:01:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:01:49 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.35
19:01:49 SQL> CREATE TABLE stk12 COMPRESS AS
19:01:49   2  SELECT
19:01:49   3  tkr
19:01:49   4  ,ydate
19:01:49   5  ,tkrdate
19:01:49   6  ,clse
19:01:49   7  ,rnum
19:01:49   8  -- g1 is important. I want to predict g1:
19:01:49   9  ,ld - clse g1
19:01:49  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
19:01:49  11  -- I want more attributes from the ones I derived above:
19:01:49  12  -- clse relation to moving-min
19:01:49  13  ,clse-min3  cm3
19:01:49  14  ,clse-min4  cm4
19:01:49  15  ,clse-min5  cm5
19:01:49  16  ,clse-min6  cm6
19:01:49  17  ,clse-min7  cm7
19:01:49  18  ,clse-min8  cm8
19:01:49  19  ,clse-min9  cm9
19:01:49  20  -- clse relation to moving-avg
19:01:49  21  ,clse-avg3  ca3
19:01:49  22  ,clse-avg4  ca4
19:01:49  23  ,clse-avg5  ca5
19:01:49  24  ,clse-avg6  ca6
19:01:49  25  ,clse-avg7  ca7
19:01:49  26  ,clse-avg8  ca8
19:01:49  27  ,clse-avg9  ca9
19:01:49  28  -- clse relation to moving-max
19:01:49  29  ,clse-max3  cx3
19:01:49  30  ,clse-max4  cx4
19:01:49  31  ,clse-max5  cx5
19:01:49  32  ,clse-max6  cx6
19:01:49  33  ,clse-max7  cx7
19:01:49  34  ,clse-max8  cx8
19:01:49  35  ,clse-max9  cx9
19:01:49  36  -- Derive date related attributes:
19:01:49  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:01:49  38  ,0+TO_CHAR(ydate,'D')d
19:01:49  39  ,0+TO_CHAR(ydate,'W')w
19:01:49  40  -- mpm stands for minutes-past-midnight:
19:01:49  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:01:49  42  -- mph stands for minutes-past-hour:
19:01:49  43  ,0+TO_CHAR(ydate,'MI')mph
19:01:49  44  FROM stk10
19:01:49  45  ORDER BY ydate
19:01:49  46  /

Table created.

Elapsed: 00:00:00.33
19:01:50 SQL> 
19:01:50 SQL> -- rpt
19:01:50 SQL> 
19:01:50 SQL> SELECT
19:01:50   2  tkr
19:01:50   3  ,COUNT(tkr)
19:01:50   4  ,MIN(clse),MAX(clse)
19:01:50   5  ,MIN(ydate),MAX(ydate)
19:01:50   6  FROM stk12
19:01:50   7  GROUP BY tkr
19:01:50   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
CRM		1650	   9.59     150.58 2004-06-23 2011-01-07

Elapsed: 00:00:00.01
19:01:50 SQL> 
19:01:50 SQL> -- Prepare for derivation of NTILE based parameters.
19:01:50 SQL> -- Also derive the "trend" parameter:
19:01:50 SQL> 
19:01:50 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.05
19:01:50 SQL> CREATE TABLE stk14 COMPRESS AS
19:01:50   2  SELECT
19:01:50   3  tkr
19:01:50   4  ,ydate
19:01:50   5  ,tkrdate
19:01:50   6  ,clse
19:01:50   7  ,g1
19:01:50   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
19:01:50   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
19:01:50  10  ,CASE WHEN trend IS NULL THEN 1
19:01:50  11  	    WHEN trend =0      THEN 1
19:01:50  12  	    ELSE trend END trend
19:01:50  13  ,cm3
19:01:50  14  ,cm4
19:01:50  15  ,cm5
19:01:50  16  ,cm6
19:01:50  17  ,cm7
19:01:50  18  ,cm8
19:01:50  19  ,cm9
19:01:50  20  ,ca3
19:01:50  21  ,ca4
19:01:50  22  ,ca5
19:01:50  23  ,ca6
19:01:50  24  ,ca7
19:01:50  25  ,ca8
19:01:50  26  ,ca9
19:01:50  27  ,cx3
19:01:50  28  ,cx4
19:01:50  29  ,cx5
19:01:50  30  ,cx6
19:01:50  31  ,cx7
19:01:50  32  ,cx8
19:01:50  33  ,cx9
19:01:50  34  ,hh
19:01:50  35  ,d
19:01:50  36  ,w
19:01:50  37  ,mpm
19:01:50  38  ,mph
19:01:50  39  FROM stk12
19:01:50  40  -- Guard against divide by 0:
19:01:50  41  WHERE clse > 0
19:01:50  42  ORDER BY ydate
19:01:50  43  /

Table created.

Elapsed: 00:00:00.06
19:01:50 SQL> 
19:01:50 SQL> -- rpt
19:01:50 SQL> 
19:01:50 SQL> SELECT
19:01:50   2  tkr
19:01:50   3  ,trend
19:01:50   4  ,gatt
19:01:50   5  ,COUNT(tkr)
19:01:50   6  ,AVG(g1)
19:01:50   7  FROM stk14
19:01:50   8  GROUP BY tkr,trend,gatt
19:01:50   9  ORDER BY tkr,trend,gatt
19:01:50  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CRM		  -1 nup	411 -.87858881
CRM		  -1 up 	341 1.27079179
CRM		   1 nup	503 -.82407555
CRM		   1 up 	394 1.18601523
CRM		   1		  1

Elapsed: 00:00:00.02
19:01:50 SQL> 
19:01:50 SQL> -- Derive NTILE based params:
19:01:50 SQL> 
19:01:50 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.07
19:01:50 SQL> CREATE TABLE stk16 COMPRESS AS
19:01:50   2  SELECT
19:01:50   3  tkr
19:01:50   4  ,ydate
19:01:50   5  ,tkrdate
19:01:50   6  ,clse
19:01:50   7  ,g1
19:01:50   8  ,gatt
19:01:50   9  ,gattn
19:01:50  10  ,trend
19:01:50  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
19:01:50  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
19:01:50  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
19:01:50  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
19:01:50  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
19:01:50  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
19:01:50  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
19:01:50  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
19:01:50  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
19:01:50  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
19:01:50  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
19:01:50  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
19:01:50  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
19:01:50  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
19:01:50  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
19:01:50  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
19:01:50  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
19:01:50  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
19:01:50  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
19:01:50  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
19:01:50  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
19:01:50  32  ,hh  att21
19:01:50  33  ,d   att22
19:01:50  34  ,w   att23
19:01:50  35  ,mpm att24
19:01:50  36  ,mph att25
19:01:50  37  ,trend att26
19:01:50  38  FROM stk14
19:01:50  39  ORDER BY ydate
19:01:50  40  /

Table created.

Elapsed: 00:00:00.20
19:01:50 SQL> 
19:01:50 SQL> -- rpt
19:01:50 SQL> 
19:01:50 SQL> SELECT
19:01:50   2  tkr
19:01:50   3  ,trend
19:01:50   4  ,gatt
19:01:50   5  ,COUNT(tkr)
19:01:50   6  ,AVG(g1)
19:01:50   7  FROM stk16
19:01:50   8  GROUP BY tkr,trend,gatt
19:01:50   9  ORDER BY tkr,trend,gatt
19:01:50  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CRM		  -1 nup	411 -.87858881
CRM		  -1 up 	341 1.27079179
CRM		   1 nup	503 -.82407555
CRM		   1 up 	394 1.18601523
CRM		   1		  1

Elapsed: 00:00:00.01
19:01:50 SQL> 
19:01:50 SQL> -- Now I derive goodness attributes:
19:01:50 SQL> 
19:01:50 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.10
19:01:50 SQL> CREATE TABLE stk_ms COMPRESS AS
19:01:50   2  SELECT
19:01:50   3  tkr
19:01:50   4  ,ydate
19:01:50   5  ,tkrdate
19:01:50   6  ,trend
19:01:50   7  ,g1
19:01:50   8  ,gatt
19:01:50   9  ,gattn
19:01:50  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
19:01:50  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
19:01:50  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
19:01:50  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
19:01:50  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
19:01:50  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
19:01:50  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
19:01:50  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
19:01:50  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
19:01:50  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
19:01:50  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
19:01:50  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
19:01:50  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
19:01:50  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
19:01:50  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
19:01:50  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
19:01:50  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
19:01:50  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
19:01:50  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
19:01:50  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
19:01:50  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
19:01:50  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
19:01:50  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
19:01:50  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
19:01:50  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
19:01:50  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
19:01:50  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
19:01:50  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
19:01:50  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
19:01:50  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
19:01:50  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
19:01:50  41  FROM stk16
19:01:50  42  /

Table created.

Elapsed: 00:00:00.31
19:01:51 SQL> 
19:01:51 SQL> -- rpt
19:01:51 SQL> 
19:01:51 SQL> SELECT
19:01:51   2  tkr
19:01:51   3  ,trend
19:01:51   4  ,gatt
19:01:51   5  ,COUNT(tkr)
19:01:51   6  ,AVG(g1)
19:01:51   7  FROM stk_ms
19:01:51   8  GROUP BY tkr,trend,gatt
19:01:51   9  ORDER BY tkr,trend,gatt
19:01:51  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CRM		  -1 nup	411 -.87858881
CRM		  -1 up 	341 1.27079179
CRM		   1 nup	503 -.82407555
CRM		   1 up 	394 1.18601523
CRM		   1		  1

Elapsed: 00:00:00.01
19:01:51 SQL> 
19:01:51 SQL> SELECT
19:01:51   2  tkr
19:01:51   3  ,COUNT(tkr)
19:01:51   4  ,MIN(ydate),MAX(ydate)
19:01:51   5  FROM stk_ms
19:01:51   6  GROUP BY tkr
19:01:51   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
CRM		1650 2004-06-23 2011-01-07

Elapsed: 00:00:00.01
19:01:51 SQL> 
19:01:51 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
