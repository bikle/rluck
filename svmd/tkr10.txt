
SQL*Plus: Release 11.2.0.1.0 Production on Sat Mar 12 05:57:01 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:57:01 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
05:57:01 SQL> 
05:57:01 SQL> 05:57:01 SQL> --
05:57:01 SQL> -- stk10.sql
05:57:01 SQL> --
05:57:01 SQL> 
05:57:01 SQL> -- Creates views and tables for demonstrating SVM.
05:57:01 SQL> 
05:57:01 SQL> CREATE OR REPLACE VIEW stk_svmd10 AS
05:57:01   2  SELECT
05:57:01   3  tkr
05:57:01   4  ,ydate
05:57:01   5  ,tkr||ydate tkrdate
05:57:01   6  ,clse
05:57:01   7  ,rownum rnum -- acts as t in my time-series
05:57:01   8  -- Derive some attributes from clse.
05:57:01   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
05:57:01  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
05:57:01  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
05:57:01  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
05:57:01  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
05:57:01  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
05:57:01  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
05:57:01  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
05:57:01  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
05:57:01  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
05:57:01  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
05:57:01  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
05:57:01  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
05:57:01  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
05:57:01  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
05:57:01  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
05:57:01  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
05:57:01  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
05:57:01  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
05:57:01  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
05:57:01  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
05:57:01  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
05:57:01  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
05:57:01  32  ORDER BY ydate
05:57:01  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='XOM'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.04
05:57:01 SQL> 
05:57:01 SQL> -- rpt
05:57:01 SQL> 
05:57:01 SQL> SELECT
05:57:01   2  tkr
05:57:01   3  ,COUNT(tkr)
05:57:01   4  ,MIN(clse),MAX(clse)
05:57:01   5  ,MIN(avg4),MAX(avg4)
05:57:01   6  ,MIN(ydate),MAX(ydate)
05:57:01   7  FROM stk_svmd10
05:57:01   8  GROUP BY tkr
05:57:01   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
XOM		5343	   6.01      88.55	6.042	  87.684 1990-01-02 2011-03-11

Elapsed: 00:00:00.20
05:57:01 SQL> 
05:57:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:57:01 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.19
05:57:02 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
05:57:02   2  SELECT
05:57:02   3  tkr
05:57:02   4  ,ydate
05:57:02   5  ,tkrdate
05:57:02   6  ,clse
05:57:02   7  ,rnum
05:57:02   8  -- g1 is important. I want to predict g1:
05:57:02   9  ,ld - clse g1
05:57:02  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
05:57:02  11  -- I want more attributes from the ones I derived above:
05:57:02  12  -- clse relation to moving-min
05:57:02  13  ,clse-min3  cm3
05:57:02  14  ,clse-min4  cm4
05:57:02  15  ,clse-min5  cm5
05:57:02  16  ,clse-min6  cm6
05:57:02  17  ,clse-min7  cm7
05:57:02  18  ,clse-min8  cm8
05:57:02  19  ,clse-min9  cm9
05:57:02  20  -- clse relation to moving-avg
05:57:02  21  ,clse-avg3  ca3
05:57:02  22  ,clse-avg4  ca4
05:57:02  23  ,clse-avg5  ca5
05:57:02  24  ,clse-avg6  ca6
05:57:02  25  ,clse-avg7  ca7
05:57:02  26  ,clse-avg8  ca8
05:57:02  27  ,clse-avg9  ca9
05:57:02  28  -- clse relation to moving-max
05:57:02  29  ,clse-max3  cx3
05:57:02  30  ,clse-max4  cx4
05:57:02  31  ,clse-max5  cx5
05:57:02  32  ,clse-max6  cx6
05:57:02  33  ,clse-max7  cx7
05:57:02  34  ,clse-max8  cx8
05:57:02  35  ,clse-max9  cx9
05:57:02  36  -- Derive date related attributes:
05:57:02  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:57:02  38  ,0+TO_CHAR(ydate,'D')d
05:57:02  39  ,0+TO_CHAR(ydate,'W')w
05:57:02  40  -- mpm stands for minutes-past-midnight:
05:57:02  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:57:02  42  -- mph stands for minutes-past-hour:
05:57:02  43  ,0+TO_CHAR(ydate,'MI')mph
05:57:02  44  FROM stk_svmd10
05:57:02  45  ORDER BY ydate
05:57:02  46  /

Table created.

Elapsed: 00:00:00.51
05:57:02 SQL> 
05:57:02 SQL> -- rpt
05:57:02 SQL> 
05:57:02 SQL> SELECT
05:57:02   2  tkr
05:57:02   3  ,COUNT(tkr)
05:57:02   4  ,MIN(clse),MAX(clse)
05:57:02   5  ,MIN(ydate),MAX(ydate)
05:57:02   6  FROM stk_svmd12
05:57:02   7  GROUP BY tkr
05:57:02   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
XOM		5343	   6.01      88.55 1990-01-02 2011-03-11

Elapsed: 00:00:00.01
05:57:02 SQL> 
05:57:02 SQL> -- Prepare for derivation of NTILE based parameters.
05:57:02 SQL> -- Also derive the "trend" parameter:
05:57:02 SQL> 
05:57:02 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.17
05:57:02 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
05:57:02   2  SELECT
05:57:02   3  tkr
05:57:02   4  ,ydate
05:57:02   5  ,tkrdate
05:57:02   6  ,clse
05:57:02   7  ,g1
05:57:02   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
05:57:02   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
05:57:02  10  ,CASE WHEN trend IS NULL THEN 1
05:57:02  11  	    WHEN trend =0      THEN 1
05:57:02  12  	    ELSE trend END trend
05:57:02  13  ,cm3
05:57:02  14  ,cm4
05:57:02  15  ,cm5
05:57:02  16  ,cm6
05:57:02  17  ,cm7
05:57:02  18  ,cm8
05:57:02  19  ,cm9
05:57:02  20  ,ca3
05:57:02  21  ,ca4
05:57:02  22  ,ca5
05:57:02  23  ,ca6
05:57:02  24  ,ca7
05:57:02  25  ,ca8
05:57:02  26  ,ca9
05:57:02  27  ,cx3
05:57:02  28  ,cx4
05:57:02  29  ,cx5
05:57:02  30  ,cx6
05:57:02  31  ,cx7
05:57:02  32  ,cx8
05:57:02  33  ,cx9
05:57:02  34  ,hh
05:57:02  35  ,d
05:57:02  36  ,w
05:57:02  37  ,mpm
05:57:02  38  ,mph
05:57:02  39  FROM stk_svmd12
05:57:02  40  -- Guard against divide by 0:
05:57:02  41  WHERE clse > 0
05:57:02  42  ORDER BY ydate
05:57:02  43  /

Table created.

Elapsed: 00:00:00.11
05:57:02 SQL> 
05:57:02 SQL> -- rpt
05:57:02 SQL> 
05:57:02 SQL> SELECT
05:57:02   2  tkr
05:57:02   3  ,trend
05:57:02   4  ,gatt
05:57:02   5  ,COUNT(tkr)
05:57:02   6  ,AVG(g1)
05:57:02   7  FROM stk_svmd14
05:57:02   8  GROUP BY tkr,trend,gatt
05:57:02   9  ORDER BY tkr,trend,gatt
05:57:02  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1255 -.35579283
XOM		  -1 up        1055 .518341232
XOM		  -1		  1
XOM		   1 nup       1847 -.30956145
XOM		   1 up        1185  .46156962

Elapsed: 00:00:00.01
05:57:02 SQL> 
05:57:02 SQL> -- Derive NTILE based params:
05:57:02 SQL> 
05:57:02 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.15
05:57:03 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
05:57:03   2  SELECT
05:57:03   3  tkr
05:57:03   4  ,ydate
05:57:03   5  ,tkrdate
05:57:03   6  ,clse
05:57:03   7  ,g1
05:57:03   8  ,gatt
05:57:03   9  ,gattn
05:57:03  10  ,trend
05:57:03  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
05:57:03  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
05:57:03  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
05:57:03  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
05:57:03  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
05:57:03  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
05:57:03  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
05:57:03  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
05:57:03  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
05:57:03  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
05:57:03  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
05:57:03  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
05:57:03  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
05:57:03  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
05:57:03  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
05:57:03  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
05:57:03  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
05:57:03  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
05:57:03  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
05:57:03  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
05:57:03  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
05:57:03  32  ,hh  att21
05:57:03  33  ,d   att22
05:57:03  34  ,w   att23
05:57:03  35  ,mpm att24
05:57:03  36  ,mph att25
05:57:03  37  ,trend att26
05:57:03  38  FROM stk_svmd14
05:57:03  39  ORDER BY ydate
05:57:03  40  /

Table created.

Elapsed: 00:00:00.56
05:57:03 SQL> 
05:57:03 SQL> -- rpt
05:57:03 SQL> 
05:57:03 SQL> SELECT
05:57:03   2  tkr
05:57:03   3  ,trend
05:57:03   4  ,gatt
05:57:03   5  ,COUNT(tkr)
05:57:03   6  ,AVG(g1)
05:57:03   7  FROM stk_svmd16
05:57:03   8  GROUP BY tkr,trend,gatt
05:57:03   9  ORDER BY tkr,trend,gatt
05:57:03  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1255 -.35579283
XOM		  -1 up        1055 .518341232
XOM		  -1		  1
XOM		   1 nup       1847 -.30956145
XOM		   1 up        1185  .46156962

Elapsed: 00:00:00.01
05:57:03 SQL> 
05:57:03 SQL> CREATE OR REPLACE VIEW sc12tkr AS
05:57:03   2  SELECT
05:57:03   3  m.tkr
05:57:03   4  ,m.ydate
05:57:03   5  ,m.tkrdate
05:57:03   6  ,l.score score_long
05:57:03   7  ,s.score score_short
05:57:03   8  ,m.g1
05:57:03   9  FROM ystkscores l,ystkscores s,stk_svmd16 m
05:57:03  10  WHERE l.targ='gatt'
05:57:03  11  AND   s.targ='gattn'
05:57:03  12  AND l.tkrdate = s.tkrdate
05:57:03  13  AND l.tkrdate = m.tkrdate
05:57:03  14  -- Speed things up:
05:57:03  15  AND l.tkr = '&1'
05:57:03  16  AND s.tkr = '&1'
05:57:03  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'XOM'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'XOM'

View created.

Elapsed: 00:00:00.03
05:57:03 SQL> 
05:57:03 SQL> -- DROP TABLE score_corr_tkr;
05:57:03 SQL> --
05:57:03 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
05:57:03 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
05:57:03 SQL> -- (
05:57:03 SQL> --   SELECT
05:57:03 SQL> --   tkrdate
05:57:03 SQL> --   -- Find corr() tween score and g1 over 8 day period:
05:57:03 SQL> --   ,CORR((score_long - score_short),g1)
05:57:03 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
05:57:03 SQL> --   FROM sc12tkr
05:57:03 SQL> -- )
05:57:03 SQL> -- GROUP BY tkrdate
05:57:03 SQL> -- /
05:57:03 SQL> --
05:57:03 SQL> -- -- rpt
05:57:03 SQL> -- SELECT AVG(sc_corr),COUNT(sc_corr)FROM score_corr_tkr;
05:57:03 SQL> 
05:57:03 SQL> -- Now I derive goodness attributes:
05:57:03 SQL> 
05:57:03 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.19
05:57:03 SQL> 
05:57:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
05:57:04 SQL> 
05:57:04 SQL> CREATE TABLE stk_ms COMPRESS AS
05:57:04   2  SELECT
05:57:04   3  tkr
05:57:04   4  ,ydate
05:57:04   5  ,s.tkrdate
05:57:04   6  ,trend
05:57:04   7  ,g1
05:57:04   8  ,gatt
05:57:04   9  ,gattn
05:57:04  10  -- Recent CORR()tween scores and gains:
05:57:04  11  -- ,NVL(sc_corr,0)sc_corr
05:57:04  12  -- Goodness attributes:
05:57:04  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
05:57:04  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
05:57:04  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
05:57:04  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
05:57:04  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
05:57:04  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
05:57:04  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
05:57:04  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
05:57:04  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
05:57:04  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
05:57:04  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
05:57:04  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
05:57:04  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
05:57:04  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
05:57:04  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
05:57:04  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
05:57:04  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
05:57:04  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
05:57:04  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
05:57:04  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
05:57:04  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
05:57:04  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
05:57:04  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
05:57:04  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
05:57:04  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
05:57:04  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
05:57:04  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
05:57:04  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
05:57:04  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
05:57:04  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
05:57:04  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
05:57:04  44  -- FROM stk_svmd16 s,score_corr_tkr c
05:57:04  45  -- WHERE s.tkrdate = c.tkrdate(+)
05:57:04  46  FROM stk_svmd16 s
05:57:04  47  /

Table created.

Elapsed: 00:00:00.94
05:57:05 SQL> 
05:57:05 SQL> -- rpt
05:57:05 SQL> 
05:57:05 SQL> SELECT
05:57:05   2  tkr
05:57:05   3  ,trend
05:57:05   4  ,gatt
05:57:05   5  ,COUNT(tkr)
05:57:05   6  ,AVG(g1)
05:57:05   7  -- ,AVG(sc_corr)
05:57:05   8  FROM stk_ms
05:57:05   9  GROUP BY tkr,trend,gatt
05:57:05  10  ORDER BY tkr,trend,gatt
05:57:05  11  /

TKR	       TREND GAT COUNT(TKR) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ----------------------
XOM		  -1 nup       1255		-.35579283
XOM		  -1 up        1055		.518341232
XOM		  -1		  1
XOM		   1 nup       1847		-.30956145
XOM		   1 up        1185		 .46156962

Elapsed: 00:00:00.01
05:57:05 SQL> 
05:57:05 SQL> SELECT
05:57:05   2  tkr
05:57:05   3  ,trend
05:57:05   4  ,gattn
05:57:05   5  ,MIN(ydate)
05:57:05   6  ,COUNT(tkr)
05:57:05   7  ,MAX(ydate)
05:57:05   8  ,AVG(g1)
05:57:05   9  -- ,AVG(sc_corr)
05:57:05  10  FROM stk_ms
05:57:05  11  GROUP BY tkr,trend,gattn
05:57:05  12  ORDER BY tkr,trend,gattn
05:57:05  13  /

TKR	       TREND GAT MIN(YDATE) COUNT(TKR) MAX(YDATE) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ---------- ----------------------
XOM		  -1 nup 1990-01-05	  1459 2011-03-10	      .374873201
XOM		  -1 up  1990-01-04	   851 2011-03-09	      -.52480611
XOM		  -1	 2011-03-11	     1 2011-03-11
XOM		   1 nup 1990-02-01	  1824 2011-03-01	      .301858553
XOM		   1 up  1990-01-02	  1208 2011-02-28	      -.47631623

Elapsed: 00:00:00.01
05:57:05 SQL> 
05:57:05 SQL> SELECT
05:57:05   2  tkr
05:57:05   3  ,COUNT(tkr)
05:57:05   4  ,MIN(ydate),MAX(ydate)
05:57:05   5  FROM stk_ms
05:57:05   6  GROUP BY tkr
05:57:05   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
XOM		5343 1990-01-02 2011-03-11

Elapsed: 00:00:00.01
05:57:05 SQL> 
05:57:05 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
