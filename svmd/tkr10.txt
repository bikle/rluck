
SQL*Plus: Release 11.2.0.1.0 Production on Tue Jan 11 05:20:32 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:20:32 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
05:20:32 SQL> 05:20:32 SQL> --
05:20:32 SQL> -- stk10.sql
05:20:32 SQL> --
05:20:32 SQL> 
05:20:32 SQL> -- Creates views and tables for demonstrating SVM.
05:20:32 SQL> 
05:20:32 SQL> CREATE OR REPLACE VIEW stk10 AS
05:20:32   2  SELECT
05:20:32   3  tkr
05:20:32   4  ,ydate
05:20:32   5  ,tkr||ydate tkrdate
05:20:32   6  ,clse
05:20:32   7  ,rownum rnum -- acts as t in my time-series
05:20:32   8  -- Derive some attributes from clse.
05:20:32   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
05:20:32  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
05:20:32  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
05:20:32  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
05:20:32  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
05:20:32  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
05:20:32  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
05:20:32  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
05:20:32  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
05:20:32  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
05:20:32  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
05:20:32  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
05:20:32  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
05:20:32  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
05:20:32  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
05:20:32  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
05:20:32  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
05:20:32  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
05:20:32  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
05:20:32  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
05:20:32  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
05:20:32  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
05:20:32  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
05:20:32  32  ORDER BY ydate
05:20:32  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='EFA'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.09
05:20:32 SQL> 
05:20:32 SQL> -- rpt
05:20:32 SQL> 
05:20:32 SQL> SELECT
05:20:32   2  tkr
05:20:32   3  ,COUNT(tkr)
05:20:32   4  ,MIN(clse),MAX(clse)
05:20:32   5  ,MIN(avg4),MAX(avg4)
05:20:32   6  ,MIN(ydate),MAX(ydate)
05:20:32   7  FROM stk10
05:20:32   8  GROUP BY tkr
05:20:32   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
EFA		2356	  24.87      79.69	25.31	  78.828 2001-08-27 2011-01-07

Elapsed: 00:00:00.30
05:20:33 SQL> 
05:20:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:20:33 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.26
05:20:33 SQL> CREATE TABLE stk12 COMPRESS AS
05:20:33   2  SELECT
05:20:33   3  tkr
05:20:33   4  ,ydate
05:20:33   5  ,tkrdate
05:20:33   6  ,clse
05:20:33   7  ,rnum
05:20:33   8  -- g1 is important. I want to predict g1:
05:20:33   9  ,ld - clse g1
05:20:33  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
05:20:33  11  -- I want more attributes from the ones I derived above:
05:20:33  12  -- clse relation to moving-min
05:20:33  13  ,clse-min3  cm3
05:20:33  14  ,clse-min4  cm4
05:20:33  15  ,clse-min5  cm5
05:20:33  16  ,clse-min6  cm6
05:20:33  17  ,clse-min7  cm7
05:20:33  18  ,clse-min8  cm8
05:20:33  19  ,clse-min9  cm9
05:20:33  20  -- clse relation to moving-avg
05:20:33  21  ,clse-avg3  ca3
05:20:33  22  ,clse-avg4  ca4
05:20:33  23  ,clse-avg5  ca5
05:20:33  24  ,clse-avg6  ca6
05:20:33  25  ,clse-avg7  ca7
05:20:33  26  ,clse-avg8  ca8
05:20:33  27  ,clse-avg9  ca9
05:20:33  28  -- clse relation to moving-max
05:20:33  29  ,clse-max3  cx3
05:20:33  30  ,clse-max4  cx4
05:20:33  31  ,clse-max5  cx5
05:20:33  32  ,clse-max6  cx6
05:20:33  33  ,clse-max7  cx7
05:20:33  34  ,clse-max8  cx8
05:20:33  35  ,clse-max9  cx9
05:20:33  36  -- Derive date related attributes:
05:20:33  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:20:33  38  ,0+TO_CHAR(ydate,'D')d
05:20:33  39  ,0+TO_CHAR(ydate,'W')w
05:20:33  40  -- mpm stands for minutes-past-midnight:
05:20:33  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:20:33  42  -- mph stands for minutes-past-hour:
05:20:33  43  ,0+TO_CHAR(ydate,'MI')mph
05:20:33  44  FROM stk10
05:20:33  45  ORDER BY ydate
05:20:33  46  /

Table created.

Elapsed: 00:00:00.31
05:20:33 SQL> 
05:20:33 SQL> -- rpt
05:20:33 SQL> 
05:20:33 SQL> SELECT
05:20:33   2  tkr
05:20:33   3  ,COUNT(tkr)
05:20:33   4  ,MIN(clse),MAX(clse)
05:20:33   5  ,MIN(ydate),MAX(ydate)
05:20:33   6  FROM stk12
05:20:33   7  GROUP BY tkr
05:20:33   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
EFA		2356	  24.87      79.69 2001-08-27 2011-01-07

Elapsed: 00:00:00.02
05:20:33 SQL> 
05:20:33 SQL> -- Prepare for derivation of NTILE based parameters.
05:20:33 SQL> -- Also derive the "trend" parameter:
05:20:33 SQL> 
05:20:33 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.08
05:20:33 SQL> CREATE TABLE stk14 COMPRESS AS
05:20:33   2  SELECT
05:20:33   3  tkr
05:20:33   4  ,ydate
05:20:33   5  ,tkrdate
05:20:33   6  ,clse
05:20:33   7  ,g1
05:20:33   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
05:20:33   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
05:20:33  10  ,CASE WHEN trend IS NULL THEN 1
05:20:33  11  	    WHEN trend =0      THEN 1
05:20:33  12  	    ELSE trend END trend
05:20:33  13  ,cm3
05:20:33  14  ,cm4
05:20:33  15  ,cm5
05:20:33  16  ,cm6
05:20:33  17  ,cm7
05:20:33  18  ,cm8
05:20:33  19  ,cm9
05:20:33  20  ,ca3
05:20:33  21  ,ca4
05:20:33  22  ,ca5
05:20:33  23  ,ca6
05:20:33  24  ,ca7
05:20:33  25  ,ca8
05:20:33  26  ,ca9
05:20:33  27  ,cx3
05:20:33  28  ,cx4
05:20:33  29  ,cx5
05:20:33  30  ,cx6
05:20:33  31  ,cx7
05:20:33  32  ,cx8
05:20:33  33  ,cx9
05:20:33  34  ,hh
05:20:33  35  ,d
05:20:33  36  ,w
05:20:33  37  ,mpm
05:20:33  38  ,mph
05:20:33  39  FROM stk12
05:20:33  40  -- Guard against divide by 0:
05:20:33  41  WHERE clse > 0
05:20:33  42  ORDER BY ydate
05:20:33  43  /

Table created.

Elapsed: 00:00:00.16
05:20:33 SQL> 
05:20:33 SQL> -- rpt
05:20:33 SQL> 
05:20:33 SQL> SELECT
05:20:33   2  tkr
05:20:33   3  ,trend
05:20:33   4  ,gatt
05:20:33   5  ,COUNT(tkr)
05:20:33   6  ,AVG(g1)
05:20:33   7  FROM stk14
05:20:33   8  GROUP BY tkr,trend,gatt
05:20:33   9  ORDER BY tkr,trend,gatt
05:20:33  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
EFA		  -1 nup	585 -.47671795
EFA		  -1 up 	438 .671575342
EFA		  -1		  1
EFA		   1 nup	806 -.32854839
EFA		   1 up 	526 .514676806

Elapsed: 00:00:00.01
05:20:33 SQL> 
05:20:33 SQL> -- Derive NTILE based params:
05:20:33 SQL> 
05:20:33 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.07
05:20:34 SQL> CREATE TABLE stk16 COMPRESS AS
05:20:34   2  SELECT
05:20:34   3  tkr
05:20:34   4  ,ydate
05:20:34   5  ,tkrdate
05:20:34   6  ,clse
05:20:34   7  ,g1
05:20:34   8  ,gatt
05:20:34   9  ,gattn
05:20:34  10  ,trend
05:20:34  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
05:20:34  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
05:20:34  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
05:20:34  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
05:20:34  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
05:20:34  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
05:20:34  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
05:20:34  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
05:20:34  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
05:20:34  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
05:20:34  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
05:20:34  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
05:20:34  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
05:20:34  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
05:20:34  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
05:20:34  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
05:20:34  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
05:20:34  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
05:20:34  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
05:20:34  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
05:20:34  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
05:20:34  32  ,hh  att21
05:20:34  33  ,d   att22
05:20:34  34  ,w   att23
05:20:34  35  ,mpm att24
05:20:34  36  ,mph att25
05:20:34  37  ,trend att26
05:20:34  38  FROM stk14
05:20:34  39  ORDER BY ydate
05:20:34  40  /

Table created.

Elapsed: 00:00:00.29
05:20:34 SQL> 
05:20:34 SQL> -- rpt
05:20:34 SQL> 
05:20:34 SQL> SELECT
05:20:34   2  tkr
05:20:34   3  ,trend
05:20:34   4  ,gatt
05:20:34   5  ,COUNT(tkr)
05:20:34   6  ,AVG(g1)
05:20:34   7  FROM stk16
05:20:34   8  GROUP BY tkr,trend,gatt
05:20:34   9  ORDER BY tkr,trend,gatt
05:20:34  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
EFA		  -1 nup	585 -.47671795
EFA		  -1 up 	438 .671575342
EFA		  -1		  1
EFA		   1 nup	806 -.32854839
EFA		   1 up 	526 .514676806

Elapsed: 00:00:00.01
05:20:34 SQL> 
05:20:34 SQL> -- Now I derive goodness attributes:
05:20:34 SQL> 
05:20:34 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.06
05:20:34 SQL> CREATE TABLE stk_ms COMPRESS AS
05:20:34   2  SELECT
05:20:34   3  tkr
05:20:34   4  ,ydate
05:20:34   5  ,tkrdate
05:20:34   6  ,trend
05:20:34   7  ,g1
05:20:34   8  ,gatt
05:20:34   9  ,gattn
05:20:34  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
05:20:34  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
05:20:34  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
05:20:34  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
05:20:34  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
05:20:34  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
05:20:34  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
05:20:34  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
05:20:34  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
05:20:34  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
05:20:34  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
05:20:34  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
05:20:34  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
05:20:34  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
05:20:34  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
05:20:34  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
05:20:34  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
05:20:34  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
05:20:34  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
05:20:34  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
05:20:34  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
05:20:34  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
05:20:34  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
05:20:34  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
05:20:34  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
05:20:34  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
05:20:34  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
05:20:34  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
05:20:34  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
05:20:34  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
05:20:34  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
05:20:34  41  FROM stk16
05:20:34  42  /

Table created.

Elapsed: 00:00:00.52
05:20:34 SQL> 
05:20:34 SQL> -- rpt
05:20:34 SQL> 
05:20:34 SQL> SELECT
05:20:34   2  tkr
05:20:34   3  ,trend
05:20:34   4  ,gatt
05:20:34   5  ,COUNT(tkr)
05:20:34   6  ,AVG(g1)
05:20:34   7  FROM stk_ms
05:20:34   8  GROUP BY tkr,trend,gatt
05:20:34   9  ORDER BY tkr,trend,gatt
05:20:34  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
EFA		  -1 nup	585 -.47671795
EFA		  -1 up 	438 .671575342
EFA		  -1		  1
EFA		   1 nup	806 -.32854839
EFA		   1 up 	526 .514676806

Elapsed: 00:00:00.01
05:20:34 SQL> 
05:20:34 SQL> SELECT
05:20:34   2  tkr
05:20:34   3  ,COUNT(tkr)
05:20:34   4  ,MIN(ydate),MAX(ydate)
05:20:34   5  FROM stk_ms
05:20:34   6  GROUP BY tkr
05:20:34   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
EFA		2356 2001-08-27 2011-01-07

Elapsed: 00:00:00.01
05:20:34 SQL> 
05:20:34 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
