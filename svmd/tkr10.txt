
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 20 13:14:24 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

13:14:24 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
13:14:24 SQL> 
13:14:24 SQL> 13:14:24 SQL> --
13:14:24 SQL> -- stk10.sql
13:14:24 SQL> --
13:14:24 SQL> 
13:14:24 SQL> -- Creates views and tables for demonstrating SVM.
13:14:24 SQL> 
13:14:24 SQL> CREATE OR REPLACE VIEW stk_svmd10 AS
13:14:24   2  SELECT
13:14:24   3  tkr
13:14:24   4  ,ydate
13:14:24   5  ,tkr||ydate tkrdate
13:14:24   6  ,clse
13:14:24   7  ,rownum rnum -- acts as t in my time-series
13:14:24   8  -- Derive some attributes from clse.
13:14:24   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
13:14:24  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
13:14:24  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
13:14:24  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
13:14:24  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
13:14:24  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
13:14:24  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
13:14:24  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
13:14:24  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
13:14:24  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
13:14:24  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
13:14:24  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
13:14:24  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
13:14:24  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
13:14:24  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
13:14:24  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
13:14:24  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
13:14:24  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
13:14:24  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
13:14:24  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
13:14:24  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
13:14:24  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
13:14:24  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
13:14:24  32  ORDER BY ydate
13:14:24  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='XOM'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.04
13:14:24 SQL> 
13:14:24 SQL> -- rpt
13:14:24 SQL> 
13:14:24 SQL> SELECT
13:14:24   2  tkr
13:14:24   3  ,COUNT(tkr)
13:14:24   4  ,MIN(clse),MAX(clse)
13:14:24   5  ,MIN(avg4),MAX(avg4)
13:14:24   6  ,MIN(ydate),MAX(ydate)
13:14:24   7  FROM stk_svmd10
13:14:24   8  GROUP BY tkr
13:14:24   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
XOM		5307	   6.04      89.02	6.078	  88.146 1990-01-02 2011-01-19

Elapsed: 00:00:00.18
13:14:24 SQL> 
13:14:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
13:14:24 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.14
13:14:24 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
13:14:24   2  SELECT
13:14:24   3  tkr
13:14:24   4  ,ydate
13:14:24   5  ,tkrdate
13:14:24   6  ,clse
13:14:24   7  ,rnum
13:14:24   8  -- g1 is important. I want to predict g1:
13:14:24   9  ,ld - clse g1
13:14:24  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
13:14:24  11  -- I want more attributes from the ones I derived above:
13:14:24  12  -- clse relation to moving-min
13:14:24  13  ,clse-min3  cm3
13:14:24  14  ,clse-min4  cm4
13:14:24  15  ,clse-min5  cm5
13:14:24  16  ,clse-min6  cm6
13:14:24  17  ,clse-min7  cm7
13:14:24  18  ,clse-min8  cm8
13:14:24  19  ,clse-min9  cm9
13:14:24  20  -- clse relation to moving-avg
13:14:24  21  ,clse-avg3  ca3
13:14:24  22  ,clse-avg4  ca4
13:14:24  23  ,clse-avg5  ca5
13:14:24  24  ,clse-avg6  ca6
13:14:24  25  ,clse-avg7  ca7
13:14:24  26  ,clse-avg8  ca8
13:14:24  27  ,clse-avg9  ca9
13:14:24  28  -- clse relation to moving-max
13:14:24  29  ,clse-max3  cx3
13:14:24  30  ,clse-max4  cx4
13:14:24  31  ,clse-max5  cx5
13:14:24  32  ,clse-max6  cx6
13:14:24  33  ,clse-max7  cx7
13:14:24  34  ,clse-max8  cx8
13:14:24  35  ,clse-max9  cx9
13:14:24  36  -- Derive date related attributes:
13:14:24  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:14:24  38  ,0+TO_CHAR(ydate,'D')d
13:14:24  39  ,0+TO_CHAR(ydate,'W')w
13:14:24  40  -- mpm stands for minutes-past-midnight:
13:14:24  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:14:24  42  -- mph stands for minutes-past-hour:
13:14:24  43  ,0+TO_CHAR(ydate,'MI')mph
13:14:24  44  FROM stk_svmd10
13:14:24  45  ORDER BY ydate
13:14:24  46  /

Table created.

Elapsed: 00:00:00.46
13:14:25 SQL> 
13:14:25 SQL> -- rpt
13:14:25 SQL> 
13:14:25 SQL> SELECT
13:14:25   2  tkr
13:14:25   3  ,COUNT(tkr)
13:14:25   4  ,MIN(clse),MAX(clse)
13:14:25   5  ,MIN(ydate),MAX(ydate)
13:14:25   6  FROM stk_svmd12
13:14:25   7  GROUP BY tkr
13:14:25   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
XOM		5307	   6.04      89.02 1990-01-02 2011-01-19

Elapsed: 00:00:00.02
13:14:25 SQL> 
13:14:25 SQL> -- Prepare for derivation of NTILE based parameters.
13:14:25 SQL> -- Also derive the "trend" parameter:
13:14:25 SQL> 
13:14:25 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.11
13:14:25 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
13:14:25   2  SELECT
13:14:25   3  tkr
13:14:25   4  ,ydate
13:14:25   5  ,tkrdate
13:14:25   6  ,clse
13:14:25   7  ,g1
13:14:25   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
13:14:25   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
13:14:25  10  ,CASE WHEN trend IS NULL THEN 1
13:14:25  11  	    WHEN trend =0      THEN 1
13:14:25  12  	    ELSE trend END trend
13:14:25  13  ,cm3
13:14:25  14  ,cm4
13:14:25  15  ,cm5
13:14:25  16  ,cm6
13:14:25  17  ,cm7
13:14:25  18  ,cm8
13:14:25  19  ,cm9
13:14:25  20  ,ca3
13:14:25  21  ,ca4
13:14:25  22  ,ca5
13:14:25  23  ,ca6
13:14:25  24  ,ca7
13:14:25  25  ,ca8
13:14:25  26  ,ca9
13:14:25  27  ,cx3
13:14:25  28  ,cx4
13:14:25  29  ,cx5
13:14:25  30  ,cx6
13:14:25  31  ,cx7
13:14:25  32  ,cx8
13:14:25  33  ,cx9
13:14:25  34  ,hh
13:14:25  35  ,d
13:14:25  36  ,w
13:14:25  37  ,mpm
13:14:25  38  ,mph
13:14:25  39  FROM stk_svmd12
13:14:25  40  -- Guard against divide by 0:
13:14:25  41  WHERE clse > 0
13:14:25  42  ORDER BY ydate
13:14:25  43  /

Table created.

Elapsed: 00:00:00.13
13:14:25 SQL> 
13:14:25 SQL> -- rpt
13:14:25 SQL> 
13:14:25 SQL> SELECT
13:14:25   2  tkr
13:14:25   3  ,trend
13:14:25   4  ,gatt
13:14:25   5  ,COUNT(tkr)
13:14:25   6  ,AVG(g1)
13:14:25   7  FROM stk_svmd14
13:14:25   8  GROUP BY tkr,trend,gatt
13:14:25   9  ORDER BY tkr,trend,gatt
13:14:25  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259 -.35269261
XOM		  -1 up        1047 .523008596
XOM		   1 nup       1830 -.31036066
XOM		   1 up        1170 .458136752
XOM		   1		  1

Elapsed: 00:00:00.02
13:14:25 SQL> 
13:14:25 SQL> -- Derive NTILE based params:
13:14:25 SQL> 
13:14:25 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.12
13:14:25 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
13:14:25   2  SELECT
13:14:25   3  tkr
13:14:25   4  ,ydate
13:14:25   5  ,tkrdate
13:14:25   6  ,clse
13:14:25   7  ,g1
13:14:25   8  ,gatt
13:14:25   9  ,gattn
13:14:25  10  ,trend
13:14:25  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
13:14:25  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
13:14:25  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
13:14:25  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
13:14:25  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
13:14:25  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
13:14:25  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
13:14:25  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
13:14:25  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
13:14:25  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
13:14:25  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
13:14:25  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
13:14:25  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
13:14:25  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
13:14:25  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
13:14:25  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
13:14:25  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
13:14:25  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
13:14:25  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
13:14:25  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
13:14:25  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
13:14:25  32  ,hh  att21
13:14:25  33  ,d   att22
13:14:25  34  ,w   att23
13:14:25  35  ,mpm att24
13:14:25  36  ,mph att25
13:14:25  37  ,trend att26
13:14:25  38  FROM stk_svmd14
13:14:25  39  ORDER BY ydate
13:14:25  40  /

Table created.

Elapsed: 00:00:00.57
13:14:25 SQL> 
13:14:25 SQL> -- rpt
13:14:25 SQL> 
13:14:25 SQL> SELECT
13:14:25   2  tkr
13:14:25   3  ,trend
13:14:25   4  ,gatt
13:14:25   5  ,COUNT(tkr)
13:14:25   6  ,AVG(g1)
13:14:25   7  FROM stk_svmd16
13:14:25   8  GROUP BY tkr,trend,gatt
13:14:25   9  ORDER BY tkr,trend,gatt
13:14:25  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259 -.35269261
XOM		  -1 up        1047 .523008596
XOM		   1 nup       1830 -.31036066
XOM		   1 up        1170 .458136752
XOM		   1		  1

Elapsed: 00:00:00.01
13:14:26 SQL> 
13:14:26 SQL> -- Now I derive goodness attributes:
13:14:26 SQL> 
13:14:26 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.15
13:14:26 SQL> CREATE TABLE stk_ms COMPRESS AS
13:14:26   2  SELECT
13:14:26   3  tkr
13:14:26   4  ,ydate
13:14:26   5  ,tkrdate
13:14:26   6  ,trend
13:14:26   7  ,g1
13:14:26   8  ,gatt
13:14:26   9  ,gattn
13:14:26  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
13:14:26  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
13:14:26  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
13:14:26  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
13:14:26  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
13:14:26  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
13:14:26  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
13:14:26  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
13:14:26  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
13:14:26  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
13:14:26  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
13:14:26  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
13:14:26  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
13:14:26  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
13:14:26  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
13:14:26  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
13:14:26  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
13:14:26  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
13:14:26  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
13:14:26  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
13:14:26  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
13:14:26  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
13:14:26  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
13:14:26  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
13:14:26  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
13:14:26  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
13:14:26  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
13:14:26  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
13:14:26  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
13:14:26  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
13:14:26  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
13:14:26  41  FROM stk_svmd16
13:14:26  42  /

Table created.

Elapsed: 00:00:00.93
13:14:27 SQL> 
13:14:27 SQL> -- rpt
13:14:27 SQL> 
13:14:27 SQL> SELECT
13:14:27   2  tkr
13:14:27   3  ,trend
13:14:27   4  ,gatt
13:14:27   5  ,COUNT(tkr)
13:14:27   6  ,AVG(g1)
13:14:27   7  FROM stk_ms
13:14:27   8  GROUP BY tkr,trend,gatt
13:14:27   9  ORDER BY tkr,trend,gatt
13:14:27  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259 -.35269261
XOM		  -1 up        1047 .523008596
XOM		   1 nup       1830 -.31036066
XOM		   1 up        1170 .458136752
XOM		   1		  1

Elapsed: 00:00:00.02
13:14:27 SQL> 
13:14:27 SQL> SELECT
13:14:27   2  tkr
13:14:27   3  ,COUNT(tkr)
13:14:27   4  ,MIN(ydate),MAX(ydate)
13:14:27   5  FROM stk_ms
13:14:27   6  GROUP BY tkr
13:14:27   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
XOM		5307 1990-01-02 2011-01-19

Elapsed: 00:00:00.00
13:14:27 SQL> 
13:14:27 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
