
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 9 11:16:24 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

11:16:24 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
11:16:24 SQL> 11:16:24 SQL> --
11:16:24 SQL> -- stk10.sql
11:16:24 SQL> --
11:16:24 SQL> 
11:16:24 SQL> -- Creates views and tables for demonstrating SVM.
11:16:24 SQL> 
11:16:24 SQL> CREATE OR REPLACE VIEW stk10 AS
11:16:24   2  SELECT
11:16:24   3  tkr
11:16:24   4  ,ydate
11:16:24   5  ,tkr||ydate tkrdate
11:16:24   6  ,clse
11:16:24   7  ,rownum rnum -- acts as t in my time-series
11:16:24   8  -- Derive some attributes from clse.
11:16:24   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
11:16:24  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
11:16:24  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
11:16:24  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
11:16:24  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
11:16:24  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
11:16:24  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
11:16:24  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
11:16:24  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
11:16:24  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
11:16:24  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
11:16:24  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
11:16:24  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
11:16:24  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
11:16:24  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
11:16:24  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
11:16:24  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
11:16:24  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
11:16:24  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
11:16:24  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
11:16:24  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
11:16:24  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
11:16:24  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
11:16:24  32  ORDER BY ydate
11:16:24  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='AAPL'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.08
11:16:24 SQL> 
11:16:24 SQL> -- rpt
11:16:24 SQL> 
11:16:24 SQL> SELECT
11:16:24   2  tkr
11:16:24   3  ,COUNT(tkr)
11:16:24   4  ,MIN(clse),MAX(clse)
11:16:24   5  ,MIN(avg4),MAX(avg4)
11:16:24   6  ,MIN(ydate),MAX(ydate)
11:16:24   7  FROM stk10
11:16:24   8  GROUP BY tkr
11:16:24   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
AAPL		5300	   3.23     336.12	3.284	 332.942 1990-01-02 2011-01-07

Elapsed: 00:00:00.18
11:16:25 SQL> 
11:16:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:16:25 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.67
11:16:25 SQL> CREATE TABLE stk12 COMPRESS AS
11:16:25   2  SELECT
11:16:25   3  tkr
11:16:25   4  ,ydate
11:16:25   5  ,tkrdate
11:16:25   6  ,clse
11:16:25   7  ,rnum
11:16:25   8  -- g1 is important. I want to predict g1:
11:16:25   9  ,ld - clse g1
11:16:25  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
11:16:25  11  -- I want more attributes from the ones I derived above:
11:16:25  12  -- clse relation to moving-min
11:16:25  13  ,clse-min3  cm3
11:16:25  14  ,clse-min4  cm4
11:16:25  15  ,clse-min5  cm5
11:16:25  16  ,clse-min6  cm6
11:16:25  17  ,clse-min7  cm7
11:16:25  18  ,clse-min8  cm8
11:16:25  19  ,clse-min9  cm9
11:16:25  20  -- clse relation to moving-avg
11:16:25  21  ,clse-avg3  ca3
11:16:25  22  ,clse-avg4  ca4
11:16:25  23  ,clse-avg5  ca5
11:16:25  24  ,clse-avg6  ca6
11:16:25  25  ,clse-avg7  ca7
11:16:25  26  ,clse-avg8  ca8
11:16:25  27  ,clse-avg9  ca9
11:16:25  28  -- clse relation to moving-max
11:16:25  29  ,clse-max3  cx3
11:16:25  30  ,clse-max4  cx4
11:16:25  31  ,clse-max5  cx5
11:16:25  32  ,clse-max6  cx6
11:16:25  33  ,clse-max7  cx7
11:16:25  34  ,clse-max8  cx8
11:16:25  35  ,clse-max9  cx9
11:16:25  36  -- Derive date related attributes:
11:16:25  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:16:25  38  ,0+TO_CHAR(ydate,'D')d
11:16:25  39  ,0+TO_CHAR(ydate,'W')w
11:16:25  40  -- mpm stands for minutes-past-midnight:
11:16:25  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:16:25  42  -- mph stands for minutes-past-hour:
11:16:25  43  ,0+TO_CHAR(ydate,'MI')mph
11:16:25  44  FROM stk10
11:16:25  45  ORDER BY ydate
11:16:25  46  /

Table created.

Elapsed: 00:00:00.48
11:16:26 SQL> 
11:16:26 SQL> -- rpt
11:16:26 SQL> 
11:16:26 SQL> SELECT
11:16:26   2  tkr
11:16:26   3  ,COUNT(tkr)
11:16:26   4  ,MIN(clse),MAX(clse)
11:16:26   5  ,MIN(ydate),MAX(ydate)
11:16:26   6  FROM stk12
11:16:26   7  GROUP BY tkr
11:16:26   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
AAPL		5300	   3.23     336.12 1990-01-02 2011-01-07

Elapsed: 00:00:00.02
11:16:26 SQL> 
11:16:26 SQL> -- Prepare for derivation of NTILE based parameters.
11:16:26 SQL> -- Also derive the "trend" parameter:
11:16:26 SQL> 
11:16:26 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.03
11:16:26 SQL> CREATE TABLE stk14 COMPRESS AS
11:16:26   2  SELECT
11:16:26   3  tkr
11:16:26   4  ,ydate
11:16:26   5  ,tkrdate
11:16:26   6  ,clse
11:16:26   7  ,g1
11:16:26   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
11:16:26   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
11:16:26  10  ,CASE WHEN trend IS NULL THEN 1
11:16:26  11  	    WHEN trend =0      THEN 1
11:16:26  12  	    ELSE trend END trend
11:16:26  13  ,cm3
11:16:26  14  ,cm4
11:16:26  15  ,cm5
11:16:26  16  ,cm6
11:16:26  17  ,cm7
11:16:26  18  ,cm8
11:16:26  19  ,cm9
11:16:26  20  ,ca3
11:16:26  21  ,ca4
11:16:26  22  ,ca5
11:16:26  23  ,ca6
11:16:26  24  ,ca7
11:16:26  25  ,ca8
11:16:26  26  ,ca9
11:16:26  27  ,cx3
11:16:26  28  ,cx4
11:16:26  29  ,cx5
11:16:26  30  ,cx6
11:16:26  31  ,cx7
11:16:26  32  ,cx8
11:16:26  33  ,cx9
11:16:26  34  ,hh
11:16:26  35  ,d
11:16:26  36  ,w
11:16:26  37  ,mpm
11:16:26  38  ,mph
11:16:26  39  FROM stk12
11:16:26  40  -- Guard against divide by 0:
11:16:26  41  WHERE clse > 0
11:16:26  42  ORDER BY ydate
11:16:26  43  /

Table created.

Elapsed: 00:00:00.10
11:16:26 SQL> 
11:16:26 SQL> -- rpt
11:16:26 SQL> 
11:16:26 SQL> SELECT
11:16:26   2  tkr
11:16:26   3  ,trend
11:16:26   4  ,gatt
11:16:26   5  ,COUNT(tkr)
11:16:26   6  ,AVG(g1)
11:16:26   7  FROM stk14
11:16:26   8  GROUP BY tkr,trend,gatt
11:16:26   9  ORDER BY tkr,trend,gatt
11:16:26  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AAPL		  -1 nup       1322 -.79507564
AAPL		  -1 up        1125	.94024
AAPL		   1 nup       1554 -.62088803
AAPL		   1 up        1298 .990446841
AAPL		   1		  1

Elapsed: 00:00:00.02
11:16:26 SQL> 
11:16:26 SQL> -- Derive NTILE based params:
11:16:26 SQL> 
11:16:26 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.05
11:16:26 SQL> CREATE TABLE stk16 COMPRESS AS
11:16:26   2  SELECT
11:16:26   3  tkr
11:16:26   4  ,ydate
11:16:26   5  ,tkrdate
11:16:26   6  ,clse
11:16:26   7  ,g1
11:16:26   8  ,gatt
11:16:26   9  ,gattn
11:16:26  10  ,trend
11:16:26  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
11:16:26  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
11:16:26  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
11:16:26  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
11:16:26  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
11:16:26  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
11:16:26  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
11:16:26  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
11:16:26  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
11:16:26  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
11:16:26  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
11:16:26  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
11:16:26  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
11:16:26  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
11:16:26  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
11:16:26  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
11:16:26  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
11:16:26  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
11:16:26  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
11:16:26  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
11:16:26  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
11:16:26  32  ,hh  att21
11:16:26  33  ,d   att22
11:16:26  34  ,w   att23
11:16:26  35  ,mpm att24
11:16:26  36  ,mph att25
11:16:26  37  ,trend att26
11:16:26  38  FROM stk14
11:16:26  39  ORDER BY ydate
11:16:26  40  /

Table created.

Elapsed: 00:00:00.62
11:16:27 SQL> 
11:16:27 SQL> -- rpt
11:16:27 SQL> 
11:16:27 SQL> SELECT
11:16:27   2  tkr
11:16:27   3  ,trend
11:16:27   4  ,gatt
11:16:27   5  ,COUNT(tkr)
11:16:27   6  ,AVG(g1)
11:16:27   7  FROM stk16
11:16:27   8  GROUP BY tkr,trend,gatt
11:16:27   9  ORDER BY tkr,trend,gatt
11:16:27  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AAPL		  -1 nup       1322 -.79507564
AAPL		  -1 up        1125	.94024
AAPL		   1 nup       1554 -.62088803
AAPL		   1 up        1298 .990446841
AAPL		   1		  1

Elapsed: 00:00:00.01
11:16:27 SQL> 
11:16:27 SQL> -- Now I derive goodness attributes:
11:16:27 SQL> 
11:16:27 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.03
11:16:27 SQL> CREATE TABLE stk_ms COMPRESS AS
11:16:27   2  SELECT
11:16:27   3  tkr
11:16:27   4  ,ydate
11:16:27   5  ,tkrdate
11:16:27   6  ,trend
11:16:27   7  ,g1
11:16:27   8  ,gatt
11:16:27   9  ,gattn
11:16:27  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
11:16:27  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
11:16:27  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
11:16:27  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
11:16:27  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
11:16:27  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
11:16:27  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
11:16:27  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
11:16:27  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
11:16:27  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
11:16:27  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
11:16:27  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
11:16:27  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
11:16:27  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
11:16:27  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
11:16:27  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
11:16:27  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
11:16:27  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
11:16:27  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
11:16:27  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
11:16:27  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
11:16:27  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
11:16:27  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
11:16:27  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
11:16:27  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
11:16:27  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
11:16:27  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
11:16:27  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
11:16:27  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
11:16:27  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
11:16:27  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
11:16:27  41  FROM stk16
11:16:27  42  /

Table created.

Elapsed: 00:00:00.97
11:16:28 SQL> 
11:16:28 SQL> -- rpt
11:16:28 SQL> 
11:16:28 SQL> SELECT
11:16:28   2  tkr
11:16:28   3  ,trend
11:16:28   4  ,gatt
11:16:28   5  ,COUNT(tkr)
11:16:28   6  ,AVG(g1)
11:16:28   7  FROM stk_ms
11:16:28   8  GROUP BY tkr,trend,gatt
11:16:28   9  ORDER BY tkr,trend,gatt
11:16:28  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AAPL		  -1 nup       1322 -.79507564
AAPL		  -1 up        1125	.94024
AAPL		   1 nup       1554 -.62088803
AAPL		   1 up        1298 .990446841
AAPL		   1		  1

Elapsed: 00:00:00.01
11:16:28 SQL> 
11:16:28 SQL> SELECT
11:16:28   2  tkr
11:16:28   3  ,COUNT(tkr)
11:16:28   4  ,MIN(ydate),MAX(ydate)
11:16:28   5  FROM stk_ms
11:16:28   6  GROUP BY tkr
11:16:28   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
AAPL		5300 1990-01-02 2011-01-07

Elapsed: 00:00:00.01
11:16:28 SQL> 
11:16:28 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
