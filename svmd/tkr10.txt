
SQL*Plus: Release 11.2.0.1.0 Production on Tue Feb 1 08:20:05 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:20:05 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
08:20:05 SQL> 
08:20:05 SQL> 08:20:05 SQL> --
08:20:05 SQL> -- stk10.sql
08:20:05 SQL> --
08:20:05 SQL> 
08:20:05 SQL> -- Creates views and tables for demonstrating SVM.
08:20:05 SQL> 
08:20:05 SQL> CREATE OR REPLACE VIEW stk_svmd10 AS
08:20:05   2  SELECT
08:20:05   3  tkr
08:20:05   4  ,ydate
08:20:05   5  ,tkr||ydate tkrdate
08:20:05   6  ,clse
08:20:05   7  ,rownum rnum -- acts as t in my time-series
08:20:05   8  -- Derive some attributes from clse.
08:20:05   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
08:20:05  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
08:20:05  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
08:20:05  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
08:20:05  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
08:20:05  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
08:20:05  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
08:20:05  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
08:20:05  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
08:20:05  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
08:20:05  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
08:20:05  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
08:20:05  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
08:20:05  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
08:20:05  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
08:20:05  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
08:20:05  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
08:20:05  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
08:20:05  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
08:20:05  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
08:20:05  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
08:20:05  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
08:20:05  31  FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
08:20:05  32  ORDER BY ydate
08:20:05  33  /
old  31: FROM ystk WHERE UPPER(tkr)='&1'AND ydate > '1990-01-01'
new  31: FROM ystk WHERE UPPER(tkr)='XOM'AND ydate > '1990-01-01'

View created.

Elapsed: 00:00:00.09
08:20:05 SQL> 
08:20:05 SQL> -- rpt
08:20:05 SQL> 
08:20:05 SQL> SELECT
08:20:05   2  tkr
08:20:05   3  ,COUNT(tkr)
08:20:05   4  ,MIN(clse),MAX(clse)
08:20:05   5  ,MIN(avg4),MAX(avg4)
08:20:05   6  ,MIN(ydate),MAX(ydate)
08:20:05   7  FROM stk_svmd10
08:20:05   8  GROUP BY tkr
08:20:05   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
XOM		5315	   6.04      89.02	6.078	  88.146 1990-01-02 2011-01-31

Elapsed: 00:00:00.18
08:20:05 SQL> 
08:20:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:20:05 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.27
08:20:06 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
08:20:06   2  SELECT
08:20:06   3  tkr
08:20:06   4  ,ydate
08:20:06   5  ,tkrdate
08:20:06   6  ,clse
08:20:06   7  ,rnum
08:20:06   8  -- g1 is important. I want to predict g1:
08:20:06   9  ,ld - clse g1
08:20:06  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
08:20:06  11  -- I want more attributes from the ones I derived above:
08:20:06  12  -- clse relation to moving-min
08:20:06  13  ,clse-min3  cm3
08:20:06  14  ,clse-min4  cm4
08:20:06  15  ,clse-min5  cm5
08:20:06  16  ,clse-min6  cm6
08:20:06  17  ,clse-min7  cm7
08:20:06  18  ,clse-min8  cm8
08:20:06  19  ,clse-min9  cm9
08:20:06  20  -- clse relation to moving-avg
08:20:06  21  ,clse-avg3  ca3
08:20:06  22  ,clse-avg4  ca4
08:20:06  23  ,clse-avg5  ca5
08:20:06  24  ,clse-avg6  ca6
08:20:06  25  ,clse-avg7  ca7
08:20:06  26  ,clse-avg8  ca8
08:20:06  27  ,clse-avg9  ca9
08:20:06  28  -- clse relation to moving-max
08:20:06  29  ,clse-max3  cx3
08:20:06  30  ,clse-max4  cx4
08:20:06  31  ,clse-max5  cx5
08:20:06  32  ,clse-max6  cx6
08:20:06  33  ,clse-max7  cx7
08:20:06  34  ,clse-max8  cx8
08:20:06  35  ,clse-max9  cx9
08:20:06  36  -- Derive date related attributes:
08:20:06  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:20:06  38  ,0+TO_CHAR(ydate,'D')d
08:20:06  39  ,0+TO_CHAR(ydate,'W')w
08:20:06  40  -- mpm stands for minutes-past-midnight:
08:20:06  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:20:06  42  -- mph stands for minutes-past-hour:
08:20:06  43  ,0+TO_CHAR(ydate,'MI')mph
08:20:06  44  FROM stk_svmd10
08:20:06  45  ORDER BY ydate
08:20:06  46  /

Table created.

Elapsed: 00:00:00.52
08:20:06 SQL> 
08:20:06 SQL> -- rpt
08:20:06 SQL> 
08:20:06 SQL> SELECT
08:20:06   2  tkr
08:20:06   3  ,COUNT(tkr)
08:20:06   4  ,MIN(clse),MAX(clse)
08:20:06   5  ,MIN(ydate),MAX(ydate)
08:20:06   6  FROM stk_svmd12
08:20:06   7  GROUP BY tkr
08:20:06   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ----------
XOM		5315	   6.04      89.02 1990-01-02 2011-01-31

Elapsed: 00:00:00.02
08:20:06 SQL> 
08:20:06 SQL> -- Prepare for derivation of NTILE based parameters.
08:20:06 SQL> -- Also derive the "trend" parameter:
08:20:06 SQL> 
08:20:06 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.11
08:20:06 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
08:20:06   2  SELECT
08:20:06   3  tkr
08:20:06   4  ,ydate
08:20:06   5  ,tkrdate
08:20:06   6  ,clse
08:20:06   7  ,g1
08:20:06   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
08:20:06   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
08:20:06  10  ,CASE WHEN trend IS NULL THEN 1
08:20:06  11  	    WHEN trend =0      THEN 1
08:20:06  12  	    ELSE trend END trend
08:20:06  13  ,cm3
08:20:06  14  ,cm4
08:20:06  15  ,cm5
08:20:06  16  ,cm6
08:20:06  17  ,cm7
08:20:06  18  ,cm8
08:20:06  19  ,cm9
08:20:06  20  ,ca3
08:20:06  21  ,ca4
08:20:06  22  ,ca5
08:20:06  23  ,ca6
08:20:06  24  ,ca7
08:20:06  25  ,ca8
08:20:06  26  ,ca9
08:20:06  27  ,cx3
08:20:06  28  ,cx4
08:20:06  29  ,cx5
08:20:06  30  ,cx6
08:20:06  31  ,cx7
08:20:06  32  ,cx8
08:20:06  33  ,cx9
08:20:06  34  ,hh
08:20:06  35  ,d
08:20:06  36  ,w
08:20:06  37  ,mpm
08:20:06  38  ,mph
08:20:06  39  FROM stk_svmd12
08:20:06  40  -- Guard against divide by 0:
08:20:06  41  WHERE clse > 0
08:20:06  42  ORDER BY ydate
08:20:06  43  /

Table created.

Elapsed: 00:00:00.11
08:20:06 SQL> 
08:20:06 SQL> -- rpt
08:20:06 SQL> 
08:20:06 SQL> SELECT
08:20:06   2  tkr
08:20:06   3  ,trend
08:20:06   4  ,gatt
08:20:06   5  ,COUNT(tkr)
08:20:06   6  ,AVG(g1)
08:20:06   7  FROM stk_svmd14
08:20:06   8  GROUP BY tkr,trend,gatt
08:20:06   9  ORDER BY tkr,trend,gatt
08:20:06  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259 -.35269261
XOM		  -1 up        1047 .523008596
XOM		   1 nup       1835 -.31031063
XOM		   1 up        1173 .460289855
XOM		   1		  1

Elapsed: 00:00:00.02
08:20:06 SQL> 
08:20:06 SQL> -- Derive NTILE based params:
08:20:06 SQL> 
08:20:06 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.08
08:20:06 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
08:20:06   2  SELECT
08:20:06   3  tkr
08:20:06   4  ,ydate
08:20:06   5  ,tkrdate
08:20:06   6  ,clse
08:20:06   7  ,g1
08:20:06   8  ,gatt
08:20:06   9  ,gattn
08:20:06  10  ,trend
08:20:06  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
08:20:06  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
08:20:06  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
08:20:06  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
08:20:06  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
08:20:06  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
08:20:06  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
08:20:06  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
08:20:06  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
08:20:06  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
08:20:06  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
08:20:06  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
08:20:06  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
08:20:06  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
08:20:06  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
08:20:06  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
08:20:06  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
08:20:06  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
08:20:06  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
08:20:06  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
08:20:06  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
08:20:06  32  ,hh  att21
08:20:06  33  ,d   att22
08:20:06  34  ,w   att23
08:20:06  35  ,mpm att24
08:20:06  36  ,mph att25
08:20:06  37  ,trend att26
08:20:06  38  FROM stk_svmd14
08:20:06  39  ORDER BY ydate
08:20:06  40  /

Table created.

Elapsed: 00:00:00.56
08:20:07 SQL> 
08:20:07 SQL> -- rpt
08:20:07 SQL> 
08:20:07 SQL> SELECT
08:20:07   2  tkr
08:20:07   3  ,trend
08:20:07   4  ,gatt
08:20:07   5  ,COUNT(tkr)
08:20:07   6  ,AVG(g1)
08:20:07   7  FROM stk_svmd16
08:20:07   8  GROUP BY tkr,trend,gatt
08:20:07   9  ORDER BY tkr,trend,gatt
08:20:07  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XOM		  -1 nup       1259 -.35269261
XOM		  -1 up        1047 .523008596
XOM		   1 nup       1835 -.31031063
XOM		   1 up        1173 .460289855
XOM		   1		  1

Elapsed: 00:00:00.01
08:20:07 SQL> 
08:20:07 SQL> CREATE OR REPLACE VIEW sc12tkr AS
08:20:07   2  SELECT
08:20:07   3  m.tkr
08:20:07   4  ,m.ydate
08:20:07   5  ,m.tkrdate
08:20:07   6  ,l.score score_long
08:20:07   7  ,s.score score_short
08:20:07   8  ,m.g1
08:20:07   9  FROM ystkscores l,ystkscores s,stk_svmd16 m
08:20:07  10  WHERE l.targ='gatt'
08:20:07  11  AND   s.targ='gattn'
08:20:07  12  AND l.tkrdate = s.tkrdate
08:20:07  13  AND l.tkrdate = m.tkrdate
08:20:07  14  -- Speed things up:
08:20:07  15  AND l.tkr = '&1'
08:20:07  16  AND s.tkr = '&1'
08:20:07  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'XOM'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'XOM'

View created.

Elapsed: 00:00:00.07
08:20:07 SQL> 
08:20:07 SQL> -- DROP TABLE score_corr_tkr;
08:20:07 SQL> --
08:20:07 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
08:20:07 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
08:20:07 SQL> -- (
08:20:07 SQL> --   SELECT
08:20:07 SQL> --   tkrdate
08:20:07 SQL> --   -- Find corr() tween score and g1 over 8 day period:
08:20:07 SQL> --   ,CORR((score_long - score_short),g1)
08:20:07 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
08:20:07 SQL> --   FROM sc12tkr
08:20:07 SQL> -- )
08:20:07 SQL> -- GROUP BY tkrdate
08:20:07 SQL> -- /
08:20:07 SQL> --
08:20:07 SQL> -- -- rpt
08:20:07 SQL> -- SELECT AVG(sc_corr),COUNT(sc_corr)FROM score_corr_tkr;
08:20:07 SQL> 
08:20:07 SQL> -- Now I derive goodness attributes:
08:20:07 SQL> 
08:20:07 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.13
08:20:07 SQL> 
08:20:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
08:20:07 SQL> 
08:20:07 SQL> CREATE TABLE stk_ms COMPRESS AS
08:20:07   2  SELECT
08:20:07   3  tkr
08:20:07   4  ,ydate
08:20:07   5  ,s.tkrdate
08:20:07   6  ,trend
08:20:07   7  ,g1
08:20:07   8  ,gatt
08:20:07   9  ,gattn
08:20:07  10  -- Recent CORR()tween scores and gains:
08:20:07  11  -- ,NVL(sc_corr,0)sc_corr
08:20:07  12  -- Goodness attributes:
08:20:07  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
08:20:07  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
08:20:07  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
08:20:07  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
08:20:07  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
08:20:07  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
08:20:07  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
08:20:07  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
08:20:07  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
08:20:07  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
08:20:07  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
08:20:07  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
08:20:07  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
08:20:07  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
08:20:07  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
08:20:07  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
08:20:07  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
08:20:07  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
08:20:07  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
08:20:07  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
08:20:07  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
08:20:07  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
08:20:07  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
08:20:07  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
08:20:07  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
08:20:07  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
08:20:07  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
08:20:07  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
08:20:07  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
08:20:07  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
08:20:07  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
08:20:07  44  -- FROM stk_svmd16 s,score_corr_tkr c
08:20:07  45  -- WHERE s.tkrdate = c.tkrdate(+)
08:20:07  46  FROM stk_svmd16 s
08:20:07  47  /

Table created.

Elapsed: 00:00:00.94
08:20:08 SQL> 
08:20:08 SQL> -- rpt
08:20:08 SQL> 
08:20:08 SQL> SELECT
08:20:08   2  tkr
08:20:08   3  ,trend
08:20:08   4  ,gatt
08:20:08   5  ,COUNT(tkr)
08:20:08   6  ,AVG(g1)
08:20:08   7  -- ,AVG(sc_corr)
08:20:08   8  FROM stk_ms
08:20:08   9  GROUP BY tkr,trend,gatt
08:20:08  10  ORDER BY tkr,trend,gatt
08:20:08  11  /

TKR	       TREND GAT COUNT(TKR) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ----------------------
XOM		  -1 nup       1259		-.35269261
XOM		  -1 up        1047		.523008596
XOM		   1 nup       1835		-.31031063
XOM		   1 up        1173		.460289855
XOM		   1		  1

Elapsed: 00:00:00.01
08:20:08 SQL> 
08:20:08 SQL> SELECT
08:20:08   2  tkr
08:20:08   3  ,trend
08:20:08   4  ,gattn
08:20:08   5  ,MIN(ydate)
08:20:08   6  ,COUNT(tkr)
08:20:08   7  ,MAX(ydate)
08:20:08   8  ,AVG(g1)
08:20:08   9  -- ,AVG(sc_corr)
08:20:08  10  FROM stk_ms
08:20:08  11  GROUP BY tkr,trend,gattn
08:20:08  12  ORDER BY tkr,trend,gattn
08:20:08  13  /

TKR	       TREND GAT MIN(YDATE) COUNT(TKR) MAX(YDATE) AVG(G1)--,AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ---------- ----------------------
XOM		  -1 nup 1990-01-05	  1463 2010-12-20	      .374442925
XOM		  -1 up  1990-01-04	   843 2010-11-22	      -.52699881
XOM		   1 nup 1990-02-01	  1810 2011-01-28	      .299972376
XOM		   1 up  1990-01-02	  1198 2011-01-27	      -.47783806
XOM		   1	 2011-01-31	     1 2011-01-31

Elapsed: 00:00:00.01
08:20:08 SQL> 
08:20:08 SQL> SELECT
08:20:08   2  tkr
08:20:08   3  ,COUNT(tkr)
08:20:08   4  ,MIN(ydate),MAX(ydate)
08:20:08   5  FROM stk_ms
08:20:08   6  GROUP BY tkr
08:20:08   7  /

TKR	  COUNT(TKR) MIN(YDATE) MAX(YDATE)
--------- ---------- ---------- ----------
XOM		5315 1990-01-02 2011-01-31

Elapsed: 00:00:00.01
08:20:08 SQL> 
08:20:08 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
