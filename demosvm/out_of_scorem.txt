
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 07:43:41 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:43:41 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:43:41 SQL> 07:43:41 SQL> @score1_5min.sql	      2010-12-28 07:45:00
07:43:41 SQL> --
07:43:41 SQL> -- score1_5min.sql
07:43:41 SQL> --
07:43:41 SQL> 
07:43:41 SQL> CREATE OR REPLACE VIEW sme AS
07:43:41   2  SELECT
07:43:41   3  'jpy'||ydate prdate
07:43:41   4  ,NULL gatt
07:43:41   5  ,g00
07:43:41   6  ,g01
07:43:41   7  ,g02
07:43:41   8  ,g03
07:43:41   9  ,g04
07:43:41  10  ,g05
07:43:41  11  ,g06
07:43:41  12  ,g07
07:43:41  13  ,g08
07:43:41  14  FROM jpy_ms
07:43:41  15  WHERE ydate = '&1'||' '||'&2'
07:43:41  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'07:45:00'

View created.

Elapsed: 00:00:00.05
07:43:41 SQL> 
07:43:41 SQL> -- rpt
07:43:41 SQL> -- We should see just 1 row:
07:43:41 SQL> 
07:43:41 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:43:41 SQL> 
07:43:41 SQL> -- Build the model:
07:43:41 SQL> CREATE OR REPLACE VIEW bme AS
07:43:41   2  SELECT
07:43:41   3  'jpy'||ydate prdate
07:43:41   4  ,gatt
07:43:41   5  ,g00
07:43:41   6  ,g01
07:43:41   7  ,g02
07:43:41   8  ,g03
07:43:41   9  ,g04
07:43:41  10  ,g05
07:43:41  11  ,g06
07:43:41  12  ,g07
07:43:41  13  ,g08
07:43:41  14  FROM jpy_ms
07:43:41  15  WHERE gatt IN('nup','up')
07:43:41  16  -- Use only rows which are older than 1 day:
07:43:41  17  AND 1+ydate < '&1'||' '||'&2'
07:43:41  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'07:45:00'

View created.

Elapsed: 00:00:00.04
07:43:41 SQL> 
07:43:41 SQL> -- rpt
07:43:41 SQL> 
07:43:41 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8887

Elapsed: 00:00:00.06
07:43:41 SQL> 
07:43:41 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 07:40:00

Elapsed: 00:00:00.05
07:43:41 SQL> 
07:43:41 SQL> -- Now build model from bme and score sme
07:43:41 SQL> @score1.sql
07:43:41 SQL> -- score1.sql
07:43:41 SQL> 
07:43:41 SQL> -- Does the 1st SVM score
07:43:41 SQL> 
07:43:41 SQL> -- Fill up svmc_apply_prep
07:43:41 SQL> @score.sql
07:43:41 SQL> --
07:43:41 SQL> -- score.sql
07:43:41 SQL> --
07:43:41 SQL> 
07:43:41 SQL> -- usage: score.sql
07:43:41 SQL> 
07:43:41 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:43:41 SQL> 
07:43:41 SQL> DEFINE target	= 'gatt'
07:43:41 SQL> DEFINE model_name = 'forex14'
07:43:41 SQL> DEFINE bldtable	= 'bme'
07:43:41 SQL> DEFINE scoretable = 'sme'
07:43:41 SQL> DEFINE case_id	= 'prdate'
07:43:41 SQL> 
07:43:41 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:43:41 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:43:41 SQL> 
07:43:41 SQL> -- Builds an SVM model using pl/sql.
07:43:41 SQL> 
07:43:41 SQL> -----------------------------------------------------------------------
07:43:41 SQL> --			    BUILD THE MODEL
07:43:41 SQL> -----------------------------------------------------------------------
07:43:41 SQL> 
07:43:41 SQL> -- Cleanup old build data preparation objects for repeat runs
07:43:41 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:43:41 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:43:41 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:43:41 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:43:41 SQL> 
07:43:41 SQL> 
07:43:41 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:43:41 SQL> --
07:43:41 SQL> -- DROP	TABLE svmc_settings ;
07:43:41 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:43:41 SQL> -- DELETE svmc_settings;
07:43:41 SQL> 
07:43:41 SQL> -- The default classification algorithm is Naive Bayes. So override
07:43:41 SQL> -- this choice to SVM using a settings table.
07:43:41 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:43:41 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:43:41 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:43:41 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:43:41 SQL> -- models.
07:43:41 SQL> --
07:43:41 SQL> 
07:43:41 SQL> -- Do this once and then comment it out.
07:43:41 SQL> -- That makes script go faster.
07:43:41 SQL> -- BEGIN
07:43:41 SQL> -- -- Populate settings table
07:43:41 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:41 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:43:41 SQL> --
07:43:41 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:41 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:43:41 SQL> --
07:43:41 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:41 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:43:41 SQL> --   COMMIT;
07:43:41 SQL> -- END;
07:43:41 SQL> -- /
07:43:41 SQL> 
07:43:41 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:43:41 SQL> 
07:43:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:43:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:43:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:43:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:43:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:43:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:43:41 SQL> 
07:43:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:43:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:43:41 SQL> 
07:43:41 SQL> --------------------------------
07:43:41 SQL> -- PREPARE BUILD (TRAINING) DATA
07:43:41 SQL> --
07:43:41 SQL> 
07:43:41 SQL> -- 1. Missing Value treatment for all Predictors and
07:43:41 SQL> -- 2. Outlier Treatment and
07:43:41 SQL> -- 3. Normalization are performed below.
07:43:41 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:43:41 SQL> --    normalized here.
07:43:41 SQL> 
07:43:41 SQL> BEGIN
07:43:41   2  	-- Perform missing value treatment for all predictors
07:43:41   3  	-- create miss tables
07:43:41   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:43:41   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:43:41   6  
07:43:41   7  	-- populate miss tables
07:43:41   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:43:41   9  	  miss_table_name => 'svmc_miss_num',
07:43:41  10  	  data_table_name => '&bldtable',
07:43:41  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:41  12  
07:43:41  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:43:41  14  	  miss_table_name => 'svmc_miss_cat',
07:43:41  15  	  data_table_name => '&bldtable',
07:43:41  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:41  17  
07:43:41  18  	-- xform input data to replace missing values
07:43:41  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:43:41  20  	  miss_table_name => 'svmc_miss_num',
07:43:41  21  	  data_table_name => '&bldtable',
07:43:41  22  	  xform_view_name => 'xformed_build_miss_num');
07:43:41  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:43:41  24  	  miss_table_name => 'svmc_miss_cat',
07:43:41  25  	  data_table_name => '&bldtable',
07:43:41  26  	  xform_view_name => 'xformed_build_miss_cat');
07:43:41  27  
07:43:41  28  	-- Perform outlier treatment.
07:43:41  29  	-- create clip table
07:43:41  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:43:41  31  
07:43:41  32  	-- populate clip table
07:43:41  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:43:41  34  	  clip_table_name => 'svmc_clip',
07:43:41  35  	  data_table_name => '&bldtable',
07:43:41  36  	  tail_frac	  => 0.025,
07:43:41  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:41  38  
07:43:41  39  	-- xform input data to winsorized data
07:43:41  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:43:41  41  	  clip_table_name => 'svmc_clip',
07:43:41  42  	  data_table_name => '&bldtable',
07:43:41  43  	  xform_view_name => 'svmc_winsor');
07:43:41  44  
07:43:41  45  	-- create normalization table
07:43:41  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:43:41  47  
07:43:41  48  	-- populate normalization table based on winsorized data
07:43:41  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:43:41  50  	  norm_table_name => 'svmc_norm',
07:43:41  51  	  data_table_name => 'svmc_winsor',
07:43:41  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:41  53  
07:43:41  54  	-- normalize the original data
07:43:41  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:43:41  56  	  norm_table_name => 'svmc_norm',
07:43:41  57  	  data_table_name => '&bldtable',
07:43:41  58  	  xform_view_name => 'svmc_build_prep');
07:43:41  59  END;
07:43:41  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.12
07:43:43 SQL> 
07:43:43 SQL> ---------------------
07:43:43 SQL> -- CREATE A NEW MODEL
07:43:43 SQL> --
07:43:43 SQL> -- Cleanup old model with the same name for repeat runs
07:43:43 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:43:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:43   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.62
07:43:43 SQL> 
07:43:43 SQL> -- Build a new SVM Model
07:43:43 SQL> BEGIN
07:43:43   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:43:43   3  	  model_name	      => '&model_name',
07:43:43   4  	  mining_function     => dbms_data_mining.classification,
07:43:43   5  	  data_table_name     => 'svmc_build_prep',
07:43:43   6  	  case_id_column_name => '&case_id',
07:43:43   7  	  target_column_name  => '&target',
07:43:43   8  	  settings_table_name => 'svmc_settings');
07:43:43   9  END;
07:43:43  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:06.32
07:43:49 SQL> 
07:43:49 SQL> -----------------------------------------------------------------------
07:43:49 SQL> --			       APPLY/score THE MODEL
07:43:49 SQL> -----------------------------------------------------------------------
07:43:49 SQL> 
07:43:49 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:43:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:43:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:43:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:43:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:43:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:43:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:43:50 SQL> -----------------------
07:43:50 SQL> -- PREPARE SCORING DATA
07:43:50 SQL> --
07:43:50 SQL> -- If the data for model creation has been prepared, then the data
07:43:50 SQL> -- to be scored using the model must be prepared in the same manner
07:43:50 SQL> -- in order to obtain meaningful results.
07:43:50 SQL> --
07:43:50 SQL> -- 1. Missing Value treatment for all Predictors and
07:43:50 SQL> -- 2. Normalization
07:43:50 SQL> -- No outlier treatment will be performed during test and apply. The
07:43:50 SQL> -- normalization step is sufficient, since the normalization parameters
07:43:50 SQL> -- already capture the effects of outlier treatment done with build data.
07:43:50 SQL> --
07:43:50 SQL> BEGIN
07:43:50   2  	-- Xform Test data to replace missing values
07:43:50   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:43:50   4  	  miss_table_name => 'svmc_miss_num',
07:43:50   5  	  data_table_name => '&scoretable',
07:43:50   6  	  xform_view_name => 'xformed_apply_miss_num');
07:43:50   7  
07:43:50   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:43:50   9  	  miss_table_name => 'svmc_miss_cat',
07:43:50  10  	  data_table_name => '&scoretable',
07:43:50  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:43:50  12  
07:43:50  13  	-- Normalize the data to be scored
07:43:50  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:43:50  15  	  norm_table_name => 'svmc_norm',
07:43:50  16  	  data_table_name => '&scoretable',
07:43:50  17  	  xform_view_name => 'svmc_apply_prep');
07:43:50  18  END;
07:43:50  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
07:43:50 SQL> 
07:43:50 SQL> -- Use same model_name used in score.sql
07:43:50 SQL> DEFINE model_name = 'forex14'
07:43:50 SQL> 
07:43:50 SQL> -- Maybe I already collected a score for this prdate.
07:43:50 SQL> -- DELETE it if I did:
07:43:50 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:43:50 SQL> 
07:43:50 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:43:50   2  SELECT
07:43:50   3  prdate
07:43:50   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:43:50   5  ,sysdate
07:43:50   6  ,SUBSTR(prdate,1,3)pair
07:43:50   7  ,SUBSTR(prdate,4,19)ydate
07:43:50   8  FROM svmc_apply_prep
07:43:50   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:43:50 SQL> @score1_5min_gattn.sql	2010-12-28 07:45:00
07:43:50 SQL> --
07:43:50 SQL> -- score1_5min_gattn.sql
07:43:50 SQL> --
07:43:50 SQL> 
07:43:50 SQL> CREATE OR REPLACE VIEW sme AS
07:43:50   2  SELECT
07:43:50   3  'jpy'||ydate prdate
07:43:50   4  ,NULL gattn
07:43:50   5  ,g00
07:43:50   6  ,g01
07:43:50   7  ,g02
07:43:50   8  ,g03
07:43:50   9  ,g04
07:43:50  10  ,g05
07:43:50  11  ,g06
07:43:50  12  ,g07
07:43:50  13  ,g08
07:43:50  14  FROM jpy_ms
07:43:50  15  WHERE ydate = '&1'||' '||'&2'
07:43:50  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'07:45:00'

View created.

Elapsed: 00:00:00.04
07:43:50 SQL> 
07:43:50 SQL> -- rpt
07:43:50 SQL> -- We should see just 1 row:
07:43:50 SQL> 
07:43:50 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:43:50 SQL> 
07:43:50 SQL> -- Build the model:
07:43:50 SQL> CREATE OR REPLACE VIEW bme AS
07:43:50   2  SELECT
07:43:50   3  'jpy'||ydate prdate
07:43:50   4  ,gattn
07:43:50   5  ,g00
07:43:50   6  ,g01
07:43:50   7  ,g02
07:43:50   8  ,g03
07:43:50   9  ,g04
07:43:50  10  ,g05
07:43:50  11  ,g06
07:43:50  12  ,g07
07:43:50  13  ,g08
07:43:50  14  FROM jpy_ms
07:43:50  15  WHERE gattn IN('nup','up')
07:43:50  16  -- Use only rows which are older than 1 day:
07:43:50  17  AND 1+ydate < '&1'||' '||'&2'
07:43:50  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'07:45:00'

View created.

Elapsed: 00:00:00.04
07:43:50 SQL> 
07:43:50 SQL> -- rpt
07:43:50 SQL> 
07:43:50 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9179
up	     9649

Elapsed: 00:00:00.06
07:43:50 SQL> 
07:43:50 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 07:40:00

Elapsed: 00:00:00.05
07:43:50 SQL> 
07:43:50 SQL> -- Now build model from bme and score sme
07:43:50 SQL> @score1gattn.sql
07:43:50 SQL> -- score1gattn.sql
07:43:50 SQL> 
07:43:50 SQL> -- Does the 1st SVM score
07:43:50 SQL> 
07:43:50 SQL> -- Fill up svmc_apply_prep
07:43:50 SQL> @score_gattn.sql
07:43:50 SQL> --
07:43:50 SQL> -- score_gattn.sql
07:43:50 SQL> --
07:43:50 SQL> 
07:43:50 SQL> -- usage: score_gattn.sql
07:43:50 SQL> 
07:43:50 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:43:50 SQL> 
07:43:50 SQL> DEFINE target	= 'gattn'
07:43:50 SQL> DEFINE model_name = 'forex14'
07:43:50 SQL> DEFINE bldtable	= 'bme'
07:43:50 SQL> DEFINE scoretable = 'sme'
07:43:50 SQL> DEFINE case_id	= 'prdate'
07:43:50 SQL> 
07:43:50 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:43:50 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:43:50 SQL> 
07:43:50 SQL> -- Builds an SVM model using pl/sql.
07:43:50 SQL> 
07:43:50 SQL> -----------------------------------------------------------------------
07:43:50 SQL> --			    BUILD THE MODEL
07:43:50 SQL> -----------------------------------------------------------------------
07:43:50 SQL> 
07:43:50 SQL> -- Cleanup old build data preparation objects for repeat runs
07:43:50 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:43:50 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:43:50 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:43:50 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:43:50 SQL> 
07:43:50 SQL> 
07:43:50 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:43:50 SQL> --
07:43:50 SQL> -- DROP	TABLE svmc_settings ;
07:43:50 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:43:50 SQL> -- DELETE svmc_settings;
07:43:50 SQL> 
07:43:50 SQL> -- The default classification algorithm is Naive Bayes. So override
07:43:50 SQL> -- this choice to SVM using a settings table.
07:43:50 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:43:50 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:43:50 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:43:50 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:43:50 SQL> -- models.
07:43:50 SQL> --
07:43:50 SQL> 
07:43:50 SQL> -- Do this once and then comment it out.
07:43:50 SQL> -- That makes script go faster.
07:43:50 SQL> -- BEGIN
07:43:50 SQL> -- -- Populate settings table
07:43:50 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:50 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:43:50 SQL> --
07:43:50 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:50 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:43:50 SQL> --
07:43:50 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:50 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:43:50 SQL> --   COMMIT;
07:43:50 SQL> -- END;
07:43:50 SQL> -- /
07:43:50 SQL> 
07:43:50 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:43:50 SQL> 
07:43:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:43:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:43:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:43:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:43:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:43:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:43:50 SQL> 
07:43:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:43:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:43:50 SQL> 
07:43:50 SQL> --------------------------------
07:43:50 SQL> -- PREPARE BUILD (TRAINING) DATA
07:43:50 SQL> --
07:43:50 SQL> 
07:43:50 SQL> -- 1. Missing Value treatment for all Predictors and
07:43:50 SQL> -- 2. Outlier Treatment and
07:43:50 SQL> -- 3. Normalization are performed below.
07:43:50 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:43:50 SQL> --    normalized here.
07:43:50 SQL> 
07:43:50 SQL> BEGIN
07:43:50   2  	-- Perform missing value treatment for all predictors
07:43:50   3  	-- create miss tables
07:43:50   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:43:50   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:43:50   6  
07:43:50   7  	-- populate miss tables
07:43:50   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:43:50   9  	  miss_table_name => 'svmc_miss_num',
07:43:50  10  	  data_table_name => '&bldtable',
07:43:50  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:50  12  
07:43:50  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:43:50  14  	  miss_table_name => 'svmc_miss_cat',
07:43:50  15  	  data_table_name => '&bldtable',
07:43:50  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:50  17  
07:43:50  18  	-- xform input data to replace missing values
07:43:50  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:43:50  20  	  miss_table_name => 'svmc_miss_num',
07:43:50  21  	  data_table_name => '&bldtable',
07:43:50  22  	  xform_view_name => 'xformed_build_miss_num');
07:43:50  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:43:50  24  	  miss_table_name => 'svmc_miss_cat',
07:43:50  25  	  data_table_name => '&bldtable',
07:43:50  26  	  xform_view_name => 'xformed_build_miss_cat');
07:43:50  27  
07:43:50  28  	-- Perform outlier treatment.
07:43:50  29  	-- create clip table
07:43:50  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:43:50  31  
07:43:50  32  	-- populate clip table
07:43:50  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:43:50  34  	  clip_table_name => 'svmc_clip',
07:43:50  35  	  data_table_name => '&bldtable',
07:43:50  36  	  tail_frac	  => 0.025,
07:43:50  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:50  38  
07:43:50  39  	-- xform input data to winsorized data
07:43:50  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:43:50  41  	  clip_table_name => 'svmc_clip',
07:43:50  42  	  data_table_name => '&bldtable',
07:43:50  43  	  xform_view_name => 'svmc_winsor');
07:43:50  44  
07:43:50  45  	-- create normalization table
07:43:50  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:43:50  47  
07:43:50  48  	-- populate normalization table based on winsorized data
07:43:50  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:43:50  50  	  norm_table_name => 'svmc_norm',
07:43:50  51  	  data_table_name => 'svmc_winsor',
07:43:50  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:50  53  
07:43:50  54  	-- normalize the original data
07:43:50  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:43:50  56  	  norm_table_name => 'svmc_norm',
07:43:50  57  	  data_table_name => '&bldtable',
07:43:50  58  	  xform_view_name => 'svmc_build_prep');
07:43:50  59  END;
07:43:50  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
07:43:51 SQL> 
07:43:51 SQL> ---------------------
07:43:51 SQL> -- CREATE A NEW MODEL
07:43:51 SQL> --
07:43:51 SQL> -- Cleanup old model with the same name for repeat runs
07:43:51 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:43:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:51   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.85
07:43:52 SQL> 
07:43:52 SQL> -- Build a new SVM Model
07:43:52 SQL> BEGIN
07:43:52   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:43:52   3  	  model_name	      => '&model_name',
07:43:52   4  	  mining_function     => dbms_data_mining.classification,
07:43:52   5  	  data_table_name     => 'svmc_build_prep',
07:43:52   6  	  case_id_column_name => '&case_id',
07:43:52   7  	  target_column_name  => '&target',
07:43:52   8  	  settings_table_name => 'svmc_settings');
07:43:52   9  END;
07:43:52  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.75
07:43:57 SQL> 
07:43:57 SQL> -----------------------------------------------------------------------
07:43:57 SQL> --			       APPLY/score THE MODEL
07:43:57 SQL> -----------------------------------------------------------------------
07:43:57 SQL> 
07:43:57 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:43:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:43:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:43:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:43:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:43:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:43:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:43:57 SQL> -----------------------
07:43:57 SQL> -- PREPARE SCORING DATA
07:43:57 SQL> --
07:43:57 SQL> -- If the data for model creation has been prepared, then the data
07:43:57 SQL> -- to be scored using the model must be prepared in the same manner
07:43:57 SQL> -- in order to obtain meaningful results.
07:43:57 SQL> --
07:43:57 SQL> -- 1. Missing Value treatment for all Predictors and
07:43:57 SQL> -- 2. Normalization
07:43:57 SQL> -- No outlier treatment will be performed during test and apply. The
07:43:57 SQL> -- normalization step is sufficient, since the normalization parameters
07:43:57 SQL> -- already capture the effects of outlier treatment done with build data.
07:43:57 SQL> --
07:43:57 SQL> BEGIN
07:43:57   2  	-- Xform Test data to replace missing values
07:43:57   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:43:57   4  	  miss_table_name => 'svmc_miss_num',
07:43:57   5  	  data_table_name => '&scoretable',
07:43:57   6  	  xform_view_name => 'xformed_apply_miss_num');
07:43:57   7  
07:43:57   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:43:57   9  	  miss_table_name => 'svmc_miss_cat',
07:43:57  10  	  data_table_name => '&scoretable',
07:43:57  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:43:57  12  
07:43:57  13  	-- Normalize the data to be scored
07:43:57  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:43:57  15  	  norm_table_name => 'svmc_norm',
07:43:57  16  	  data_table_name => '&scoretable',
07:43:57  17  	  xform_view_name => 'svmc_apply_prep');
07:43:57  18  END;
07:43:57  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
07:43:57 SQL> 
07:43:57 SQL> -- Use same model_name used in score.sql
07:43:57 SQL> DEFINE model_name = 'forex14'
07:43:57 SQL> 
07:43:57 SQL> -- Maybe I already collected a score for this prdate.
07:43:57 SQL> -- DELETE it if I did:
07:43:57 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:43:57 SQL> 
07:43:57 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:43:57   2  SELECT
07:43:57   3  prdate
07:43:57   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:43:57   5  ,sysdate
07:43:57   6  ,SUBSTR(prdate,1,3)pair
07:43:57   7  ,SUBSTR(prdate,4,19)ydate
07:43:57   8  FROM svmc_apply_prep
07:43:57   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:43:57 SQL> @score1_5min.sql	      2010-12-28 07:50:00
07:43:57 SQL> --
07:43:57 SQL> -- score1_5min.sql
07:43:57 SQL> --
07:43:57 SQL> 
07:43:57 SQL> CREATE OR REPLACE VIEW sme AS
07:43:57   2  SELECT
07:43:57   3  'jpy'||ydate prdate
07:43:57   4  ,NULL gatt
07:43:57   5  ,g00
07:43:57   6  ,g01
07:43:57   7  ,g02
07:43:57   8  ,g03
07:43:57   9  ,g04
07:43:57  10  ,g05
07:43:57  11  ,g06
07:43:57  12  ,g07
07:43:57  13  ,g08
07:43:57  14  FROM jpy_ms
07:43:57  15  WHERE ydate = '&1'||' '||'&2'
07:43:57  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'07:50:00'

View created.

Elapsed: 00:00:00.02
07:43:57 SQL> 
07:43:57 SQL> -- rpt
07:43:57 SQL> -- We should see just 1 row:
07:43:57 SQL> 
07:43:57 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:43:57 SQL> 
07:43:57 SQL> -- Build the model:
07:43:57 SQL> CREATE OR REPLACE VIEW bme AS
07:43:57   2  SELECT
07:43:57   3  'jpy'||ydate prdate
07:43:57   4  ,gatt
07:43:57   5  ,g00
07:43:57   6  ,g01
07:43:57   7  ,g02
07:43:57   8  ,g03
07:43:57   9  ,g04
07:43:57  10  ,g05
07:43:57  11  ,g06
07:43:57  12  ,g07
07:43:57  13  ,g08
07:43:57  14  FROM jpy_ms
07:43:57  15  WHERE gatt IN('nup','up')
07:43:57  16  -- Use only rows which are older than 1 day:
07:43:57  17  AND 1+ydate < '&1'||' '||'&2'
07:43:57  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'07:50:00'

View created.

Elapsed: 00:00:00.02
07:43:57 SQL> 
07:43:57 SQL> -- rpt
07:43:57 SQL> 
07:43:57 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8888

Elapsed: 00:00:00.06
07:43:57 SQL> 
07:43:57 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 07:45:00

Elapsed: 00:00:00.05
07:43:57 SQL> 
07:43:57 SQL> -- Now build model from bme and score sme
07:43:57 SQL> @score1.sql
07:43:57 SQL> -- score1.sql
07:43:57 SQL> 
07:43:57 SQL> -- Does the 1st SVM score
07:43:57 SQL> 
07:43:57 SQL> -- Fill up svmc_apply_prep
07:43:57 SQL> @score.sql
07:43:57 SQL> --
07:43:57 SQL> -- score.sql
07:43:57 SQL> --
07:43:57 SQL> 
07:43:57 SQL> -- usage: score.sql
07:43:57 SQL> 
07:43:57 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:43:57 SQL> 
07:43:57 SQL> DEFINE target	= 'gatt'
07:43:57 SQL> DEFINE model_name = 'forex14'
07:43:57 SQL> DEFINE bldtable	= 'bme'
07:43:57 SQL> DEFINE scoretable = 'sme'
07:43:57 SQL> DEFINE case_id	= 'prdate'
07:43:57 SQL> 
07:43:57 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:43:57 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:43:57 SQL> 
07:43:57 SQL> -- Builds an SVM model using pl/sql.
07:43:57 SQL> 
07:43:57 SQL> -----------------------------------------------------------------------
07:43:57 SQL> --			    BUILD THE MODEL
07:43:57 SQL> -----------------------------------------------------------------------
07:43:57 SQL> 
07:43:57 SQL> -- Cleanup old build data preparation objects for repeat runs
07:43:57 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.01
07:43:57 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:43:57 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:43:57 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:43:57 SQL> 
07:43:57 SQL> 
07:43:57 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:43:57 SQL> --
07:43:57 SQL> -- DROP	TABLE svmc_settings ;
07:43:57 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:43:57 SQL> -- DELETE svmc_settings;
07:43:57 SQL> 
07:43:57 SQL> -- The default classification algorithm is Naive Bayes. So override
07:43:57 SQL> -- this choice to SVM using a settings table.
07:43:57 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:43:57 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:43:57 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:43:57 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:43:57 SQL> -- models.
07:43:57 SQL> --
07:43:57 SQL> 
07:43:57 SQL> -- Do this once and then comment it out.
07:43:57 SQL> -- That makes script go faster.
07:43:57 SQL> -- BEGIN
07:43:57 SQL> -- -- Populate settings table
07:43:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:57 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:43:57 SQL> --
07:43:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:57 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:43:57 SQL> --
07:43:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:57 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:43:57 SQL> --   COMMIT;
07:43:57 SQL> -- END;
07:43:57 SQL> -- /
07:43:57 SQL> 
07:43:57 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:43:57 SQL> 
07:43:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:43:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:43:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:43:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:43:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:43:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:43:57 SQL> 
07:43:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:43:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:43:57 SQL> 
07:43:57 SQL> --------------------------------
07:43:57 SQL> -- PREPARE BUILD (TRAINING) DATA
07:43:57 SQL> --
07:43:57 SQL> 
07:43:57 SQL> -- 1. Missing Value treatment for all Predictors and
07:43:57 SQL> -- 2. Outlier Treatment and
07:43:57 SQL> -- 3. Normalization are performed below.
07:43:57 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:43:57 SQL> --    normalized here.
07:43:57 SQL> 
07:43:57 SQL> BEGIN
07:43:57   2  	-- Perform missing value treatment for all predictors
07:43:57   3  	-- create miss tables
07:43:57   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:43:57   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:43:57   6  
07:43:57   7  	-- populate miss tables
07:43:57   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:43:57   9  	  miss_table_name => 'svmc_miss_num',
07:43:57  10  	  data_table_name => '&bldtable',
07:43:57  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:57  12  
07:43:57  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:43:57  14  	  miss_table_name => 'svmc_miss_cat',
07:43:57  15  	  data_table_name => '&bldtable',
07:43:57  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:57  17  
07:43:57  18  	-- xform input data to replace missing values
07:43:57  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:43:57  20  	  miss_table_name => 'svmc_miss_num',
07:43:57  21  	  data_table_name => '&bldtable',
07:43:57  22  	  xform_view_name => 'xformed_build_miss_num');
07:43:57  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:43:57  24  	  miss_table_name => 'svmc_miss_cat',
07:43:57  25  	  data_table_name => '&bldtable',
07:43:57  26  	  xform_view_name => 'xformed_build_miss_cat');
07:43:57  27  
07:43:57  28  	-- Perform outlier treatment.
07:43:57  29  	-- create clip table
07:43:57  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:43:57  31  
07:43:57  32  	-- populate clip table
07:43:57  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:43:57  34  	  clip_table_name => 'svmc_clip',
07:43:57  35  	  data_table_name => '&bldtable',
07:43:57  36  	  tail_frac	  => 0.025,
07:43:57  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:57  38  
07:43:57  39  	-- xform input data to winsorized data
07:43:57  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:43:57  41  	  clip_table_name => 'svmc_clip',
07:43:57  42  	  data_table_name => '&bldtable',
07:43:57  43  	  xform_view_name => 'svmc_winsor');
07:43:57  44  
07:43:57  45  	-- create normalization table
07:43:57  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:43:57  47  
07:43:57  48  	-- populate normalization table based on winsorized data
07:43:57  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:43:57  50  	  norm_table_name => 'svmc_norm',
07:43:57  51  	  data_table_name => 'svmc_winsor',
07:43:57  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:57  53  
07:43:57  54  	-- normalize the original data
07:43:57  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:43:57  56  	  norm_table_name => 'svmc_norm',
07:43:57  57  	  data_table_name => '&bldtable',
07:43:57  58  	  xform_view_name => 'svmc_build_prep');
07:43:57  59  END;
07:43:57  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
07:43:58 SQL> 
07:43:58 SQL> ---------------------
07:43:58 SQL> -- CREATE A NEW MODEL
07:43:58 SQL> --
07:43:58 SQL> -- Cleanup old model with the same name for repeat runs
07:43:58 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:43:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:58   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
07:43:59 SQL> 
07:43:59 SQL> -- Build a new SVM Model
07:43:59 SQL> BEGIN
07:43:59   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:43:59   3  	  model_name	      => '&model_name',
07:43:59   4  	  mining_function     => dbms_data_mining.classification,
07:43:59   5  	  data_table_name     => 'svmc_build_prep',
07:43:59   6  	  case_id_column_name => '&case_id',
07:43:59   7  	  target_column_name  => '&target',
07:43:59   8  	  settings_table_name => 'svmc_settings');
07:43:59   9  END;
07:43:59  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.60
07:44:05 SQL> 
07:44:05 SQL> -----------------------------------------------------------------------
07:44:05 SQL> --			       APPLY/score THE MODEL
07:44:05 SQL> -----------------------------------------------------------------------
07:44:05 SQL> 
07:44:05 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:05 SQL> -----------------------
07:44:05 SQL> -- PREPARE SCORING DATA
07:44:05 SQL> --
07:44:05 SQL> -- If the data for model creation has been prepared, then the data
07:44:05 SQL> -- to be scored using the model must be prepared in the same manner
07:44:05 SQL> -- in order to obtain meaningful results.
07:44:05 SQL> --
07:44:05 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:05 SQL> -- 2. Normalization
07:44:05 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:05 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:05 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:05 SQL> --
07:44:05 SQL> BEGIN
07:44:05   2  	-- Xform Test data to replace missing values
07:44:05   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:05   4  	  miss_table_name => 'svmc_miss_num',
07:44:05   5  	  data_table_name => '&scoretable',
07:44:05   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:05   7  
07:44:05   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:05   9  	  miss_table_name => 'svmc_miss_cat',
07:44:05  10  	  data_table_name => '&scoretable',
07:44:05  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:05  12  
07:44:05  13  	-- Normalize the data to be scored
07:44:05  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:05  15  	  norm_table_name => 'svmc_norm',
07:44:05  16  	  data_table_name => '&scoretable',
07:44:05  17  	  xform_view_name => 'svmc_apply_prep');
07:44:05  18  END;
07:44:05  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
07:44:05 SQL> 
07:44:05 SQL> -- Use same model_name used in score.sql
07:44:05 SQL> DEFINE model_name = 'forex14'
07:44:05 SQL> 
07:44:05 SQL> -- Maybe I already collected a score for this prdate.
07:44:05 SQL> -- DELETE it if I did:
07:44:05 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:44:05 SQL> 
07:44:05 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:44:05   2  SELECT
07:44:05   3  prdate
07:44:05   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:05   5  ,sysdate
07:44:05   6  ,SUBSTR(prdate,1,3)pair
07:44:05   7  ,SUBSTR(prdate,4,19)ydate
07:44:05   8  FROM svmc_apply_prep
07:44:05   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:44:05 SQL> @score1_5min_gattn.sql	2010-12-28 07:50:00
07:44:05 SQL> --
07:44:05 SQL> -- score1_5min_gattn.sql
07:44:05 SQL> --
07:44:05 SQL> 
07:44:05 SQL> CREATE OR REPLACE VIEW sme AS
07:44:05   2  SELECT
07:44:05   3  'jpy'||ydate prdate
07:44:05   4  ,NULL gattn
07:44:05   5  ,g00
07:44:05   6  ,g01
07:44:05   7  ,g02
07:44:05   8  ,g03
07:44:05   9  ,g04
07:44:05  10  ,g05
07:44:05  11  ,g06
07:44:05  12  ,g07
07:44:05  13  ,g08
07:44:05  14  FROM jpy_ms
07:44:05  15  WHERE ydate = '&1'||' '||'&2'
07:44:05  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'07:50:00'

View created.

Elapsed: 00:00:00.03
07:44:05 SQL> 
07:44:05 SQL> -- rpt
07:44:05 SQL> -- We should see just 1 row:
07:44:05 SQL> 
07:44:05 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:44:05 SQL> 
07:44:05 SQL> -- Build the model:
07:44:05 SQL> CREATE OR REPLACE VIEW bme AS
07:44:05   2  SELECT
07:44:05   3  'jpy'||ydate prdate
07:44:05   4  ,gattn
07:44:05   5  ,g00
07:44:05   6  ,g01
07:44:05   7  ,g02
07:44:05   8  ,g03
07:44:05   9  ,g04
07:44:05  10  ,g05
07:44:05  11  ,g06
07:44:05  12  ,g07
07:44:05  13  ,g08
07:44:05  14  FROM jpy_ms
07:44:05  15  WHERE gattn IN('nup','up')
07:44:05  16  -- Use only rows which are older than 1 day:
07:44:05  17  AND 1+ydate < '&1'||' '||'&2'
07:44:05  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'07:50:00'

View created.

Elapsed: 00:00:00.02
07:44:05 SQL> 
07:44:05 SQL> -- rpt
07:44:05 SQL> 
07:44:05 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9180
up	     9649

Elapsed: 00:00:00.06
07:44:05 SQL> 
07:44:05 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 07:45:00

Elapsed: 00:00:00.05
07:44:05 SQL> 
07:44:05 SQL> -- Now build model from bme and score sme
07:44:05 SQL> @score1gattn.sql
07:44:05 SQL> -- score1gattn.sql
07:44:05 SQL> 
07:44:05 SQL> -- Does the 1st SVM score
07:44:05 SQL> 
07:44:05 SQL> -- Fill up svmc_apply_prep
07:44:05 SQL> @score_gattn.sql
07:44:05 SQL> --
07:44:05 SQL> -- score_gattn.sql
07:44:05 SQL> --
07:44:05 SQL> 
07:44:05 SQL> -- usage: score_gattn.sql
07:44:05 SQL> 
07:44:05 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:05 SQL> 
07:44:05 SQL> DEFINE target	= 'gattn'
07:44:05 SQL> DEFINE model_name = 'forex14'
07:44:05 SQL> DEFINE bldtable	= 'bme'
07:44:05 SQL> DEFINE scoretable = 'sme'
07:44:05 SQL> DEFINE case_id	= 'prdate'
07:44:05 SQL> 
07:44:05 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:05 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:05 SQL> 
07:44:05 SQL> -- Builds an SVM model using pl/sql.
07:44:05 SQL> 
07:44:05 SQL> -----------------------------------------------------------------------
07:44:05 SQL> --			    BUILD THE MODEL
07:44:05 SQL> -----------------------------------------------------------------------
07:44:05 SQL> 
07:44:05 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:05 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:05 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:05 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:05 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:05 SQL> 
07:44:05 SQL> 
07:44:05 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:05 SQL> --
07:44:05 SQL> -- DROP	TABLE svmc_settings ;
07:44:05 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:05 SQL> -- DELETE svmc_settings;
07:44:05 SQL> 
07:44:05 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:05 SQL> -- this choice to SVM using a settings table.
07:44:05 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:05 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:05 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:05 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:05 SQL> -- models.
07:44:05 SQL> --
07:44:05 SQL> 
07:44:05 SQL> -- Do this once and then comment it out.
07:44:05 SQL> -- That makes script go faster.
07:44:05 SQL> -- BEGIN
07:44:05 SQL> -- -- Populate settings table
07:44:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:05 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:05 SQL> --
07:44:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:05 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:05 SQL> --
07:44:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:05 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:05 SQL> --   COMMIT;
07:44:05 SQL> -- END;
07:44:05 SQL> -- /
07:44:05 SQL> 
07:44:05 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:44:05 SQL> 
07:44:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:44:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:05 SQL> 
07:44:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:05 SQL> 
07:44:05 SQL> --------------------------------
07:44:05 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:05 SQL> --
07:44:05 SQL> 
07:44:05 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:05 SQL> -- 2. Outlier Treatment and
07:44:05 SQL> -- 3. Normalization are performed below.
07:44:05 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:05 SQL> --    normalized here.
07:44:05 SQL> 
07:44:05 SQL> BEGIN
07:44:05   2  	-- Perform missing value treatment for all predictors
07:44:05   3  	-- create miss tables
07:44:05   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:05   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:05   6  
07:44:05   7  	-- populate miss tables
07:44:05   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:05   9  	  miss_table_name => 'svmc_miss_num',
07:44:05  10  	  data_table_name => '&bldtable',
07:44:05  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:05  12  
07:44:05  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:05  14  	  miss_table_name => 'svmc_miss_cat',
07:44:05  15  	  data_table_name => '&bldtable',
07:44:05  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:05  17  
07:44:05  18  	-- xform input data to replace missing values
07:44:05  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:05  20  	  miss_table_name => 'svmc_miss_num',
07:44:05  21  	  data_table_name => '&bldtable',
07:44:05  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:05  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:05  24  	  miss_table_name => 'svmc_miss_cat',
07:44:05  25  	  data_table_name => '&bldtable',
07:44:05  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:05  27  
07:44:05  28  	-- Perform outlier treatment.
07:44:05  29  	-- create clip table
07:44:05  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:05  31  
07:44:05  32  	-- populate clip table
07:44:05  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:05  34  	  clip_table_name => 'svmc_clip',
07:44:05  35  	  data_table_name => '&bldtable',
07:44:05  36  	  tail_frac	  => 0.025,
07:44:05  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:05  38  
07:44:05  39  	-- xform input data to winsorized data
07:44:05  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:05  41  	  clip_table_name => 'svmc_clip',
07:44:05  42  	  data_table_name => '&bldtable',
07:44:05  43  	  xform_view_name => 'svmc_winsor');
07:44:05  44  
07:44:05  45  	-- create normalization table
07:44:05  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:05  47  
07:44:05  48  	-- populate normalization table based on winsorized data
07:44:05  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:05  50  	  norm_table_name => 'svmc_norm',
07:44:05  51  	  data_table_name => 'svmc_winsor',
07:44:05  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:05  53  
07:44:05  54  	-- normalize the original data
07:44:05  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:05  56  	  norm_table_name => 'svmc_norm',
07:44:05  57  	  data_table_name => '&bldtable',
07:44:05  58  	  xform_view_name => 'svmc_build_prep');
07:44:05  59  END;
07:44:05  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
07:44:06 SQL> 
07:44:06 SQL> ---------------------
07:44:06 SQL> -- CREATE A NEW MODEL
07:44:06 SQL> --
07:44:06 SQL> -- Cleanup old model with the same name for repeat runs
07:44:06 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:44:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:06   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.92
07:44:07 SQL> 
07:44:07 SQL> -- Build a new SVM Model
07:44:07 SQL> BEGIN
07:44:07   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:44:07   3  	  model_name	      => '&model_name',
07:44:07   4  	  mining_function     => dbms_data_mining.classification,
07:44:07   5  	  data_table_name     => 'svmc_build_prep',
07:44:07   6  	  case_id_column_name => '&case_id',
07:44:07   7  	  target_column_name  => '&target',
07:44:07   8  	  settings_table_name => 'svmc_settings');
07:44:07   9  END;
07:44:07  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.66
07:44:12 SQL> 
07:44:12 SQL> -----------------------------------------------------------------------
07:44:12 SQL> --			       APPLY/score THE MODEL
07:44:12 SQL> -----------------------------------------------------------------------
07:44:12 SQL> 
07:44:12 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:12 SQL> -----------------------
07:44:12 SQL> -- PREPARE SCORING DATA
07:44:12 SQL> --
07:44:12 SQL> -- If the data for model creation has been prepared, then the data
07:44:12 SQL> -- to be scored using the model must be prepared in the same manner
07:44:12 SQL> -- in order to obtain meaningful results.
07:44:12 SQL> --
07:44:12 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:12 SQL> -- 2. Normalization
07:44:12 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:12 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:12 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:12 SQL> --
07:44:12 SQL> BEGIN
07:44:12   2  	-- Xform Test data to replace missing values
07:44:12   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:12   4  	  miss_table_name => 'svmc_miss_num',
07:44:12   5  	  data_table_name => '&scoretable',
07:44:12   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:12   7  
07:44:12   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:12   9  	  miss_table_name => 'svmc_miss_cat',
07:44:12  10  	  data_table_name => '&scoretable',
07:44:12  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:12  12  
07:44:12  13  	-- Normalize the data to be scored
07:44:12  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:12  15  	  norm_table_name => 'svmc_norm',
07:44:12  16  	  data_table_name => '&scoretable',
07:44:12  17  	  xform_view_name => 'svmc_apply_prep');
07:44:12  18  END;
07:44:12  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
07:44:12 SQL> 
07:44:12 SQL> -- Use same model_name used in score.sql
07:44:12 SQL> DEFINE model_name = 'forex14'
07:44:12 SQL> 
07:44:12 SQL> -- Maybe I already collected a score for this prdate.
07:44:12 SQL> -- DELETE it if I did:
07:44:12 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:44:12 SQL> 
07:44:12 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:44:12   2  SELECT
07:44:12   3  prdate
07:44:12   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:12   5  ,sysdate
07:44:12   6  ,SUBSTR(prdate,1,3)pair
07:44:12   7  ,SUBSTR(prdate,4,19)ydate
07:44:12   8  FROM svmc_apply_prep
07:44:12   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:44:12 SQL> @score1_5min.sql	      2010-12-28 07:55:00
07:44:12 SQL> --
07:44:12 SQL> -- score1_5min.sql
07:44:12 SQL> --
07:44:12 SQL> 
07:44:12 SQL> CREATE OR REPLACE VIEW sme AS
07:44:12   2  SELECT
07:44:12   3  'jpy'||ydate prdate
07:44:12   4  ,NULL gatt
07:44:12   5  ,g00
07:44:12   6  ,g01
07:44:12   7  ,g02
07:44:12   8  ,g03
07:44:12   9  ,g04
07:44:12  10  ,g05
07:44:12  11  ,g06
07:44:12  12  ,g07
07:44:12  13  ,g08
07:44:12  14  FROM jpy_ms
07:44:12  15  WHERE ydate = '&1'||' '||'&2'
07:44:12  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'07:55:00'

View created.

Elapsed: 00:00:00.03
07:44:12 SQL> 
07:44:12 SQL> -- rpt
07:44:12 SQL> -- We should see just 1 row:
07:44:12 SQL> 
07:44:12 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:44:12 SQL> 
07:44:12 SQL> -- Build the model:
07:44:12 SQL> CREATE OR REPLACE VIEW bme AS
07:44:12   2  SELECT
07:44:12   3  'jpy'||ydate prdate
07:44:12   4  ,gatt
07:44:12   5  ,g00
07:44:12   6  ,g01
07:44:12   7  ,g02
07:44:12   8  ,g03
07:44:12   9  ,g04
07:44:12  10  ,g05
07:44:12  11  ,g06
07:44:12  12  ,g07
07:44:12  13  ,g08
07:44:12  14  FROM jpy_ms
07:44:12  15  WHERE gatt IN('nup','up')
07:44:12  16  -- Use only rows which are older than 1 day:
07:44:12  17  AND 1+ydate < '&1'||' '||'&2'
07:44:12  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'07:55:00'

View created.

Elapsed: 00:00:00.03
07:44:12 SQL> 
07:44:12 SQL> -- rpt
07:44:12 SQL> 
07:44:12 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8889

Elapsed: 00:00:00.06
07:44:12 SQL> 
07:44:12 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 07:50:00

Elapsed: 00:00:00.05
07:44:12 SQL> 
07:44:12 SQL> -- Now build model from bme and score sme
07:44:12 SQL> @score1.sql
07:44:12 SQL> -- score1.sql
07:44:12 SQL> 
07:44:12 SQL> -- Does the 1st SVM score
07:44:12 SQL> 
07:44:12 SQL> -- Fill up svmc_apply_prep
07:44:12 SQL> @score.sql
07:44:12 SQL> --
07:44:12 SQL> -- score.sql
07:44:12 SQL> --
07:44:12 SQL> 
07:44:12 SQL> -- usage: score.sql
07:44:12 SQL> 
07:44:12 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:12 SQL> 
07:44:12 SQL> DEFINE target	= 'gatt'
07:44:12 SQL> DEFINE model_name = 'forex14'
07:44:12 SQL> DEFINE bldtable	= 'bme'
07:44:12 SQL> DEFINE scoretable = 'sme'
07:44:12 SQL> DEFINE case_id	= 'prdate'
07:44:12 SQL> 
07:44:12 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:12 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:12 SQL> 
07:44:12 SQL> -- Builds an SVM model using pl/sql.
07:44:12 SQL> 
07:44:12 SQL> -----------------------------------------------------------------------
07:44:12 SQL> --			    BUILD THE MODEL
07:44:12 SQL> -----------------------------------------------------------------------
07:44:12 SQL> 
07:44:12 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:12 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:12 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:12 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:12 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:12 SQL> 
07:44:12 SQL> 
07:44:12 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:12 SQL> --
07:44:12 SQL> -- DROP	TABLE svmc_settings ;
07:44:12 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:12 SQL> -- DELETE svmc_settings;
07:44:12 SQL> 
07:44:12 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:12 SQL> -- this choice to SVM using a settings table.
07:44:12 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:12 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:12 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:12 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:12 SQL> -- models.
07:44:12 SQL> --
07:44:12 SQL> 
07:44:12 SQL> -- Do this once and then comment it out.
07:44:12 SQL> -- That makes script go faster.
07:44:12 SQL> -- BEGIN
07:44:12 SQL> -- -- Populate settings table
07:44:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:12 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:12 SQL> --
07:44:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:12 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:12 SQL> --
07:44:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:12 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:12 SQL> --   COMMIT;
07:44:12 SQL> -- END;
07:44:12 SQL> -- /
07:44:12 SQL> 
07:44:12 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.01
07:44:12 SQL> 
07:44:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:12 SQL> 
07:44:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:12 SQL> 
07:44:12 SQL> --------------------------------
07:44:12 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:12 SQL> --
07:44:12 SQL> 
07:44:12 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:12 SQL> -- 2. Outlier Treatment and
07:44:12 SQL> -- 3. Normalization are performed below.
07:44:12 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:12 SQL> --    normalized here.
07:44:12 SQL> 
07:44:12 SQL> BEGIN
07:44:12   2  	-- Perform missing value treatment for all predictors
07:44:12   3  	-- create miss tables
07:44:12   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:12   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:12   6  
07:44:12   7  	-- populate miss tables
07:44:12   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:12   9  	  miss_table_name => 'svmc_miss_num',
07:44:12  10  	  data_table_name => '&bldtable',
07:44:12  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:12  12  
07:44:12  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:12  14  	  miss_table_name => 'svmc_miss_cat',
07:44:12  15  	  data_table_name => '&bldtable',
07:44:12  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:12  17  
07:44:12  18  	-- xform input data to replace missing values
07:44:12  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:12  20  	  miss_table_name => 'svmc_miss_num',
07:44:12  21  	  data_table_name => '&bldtable',
07:44:12  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:12  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:12  24  	  miss_table_name => 'svmc_miss_cat',
07:44:12  25  	  data_table_name => '&bldtable',
07:44:12  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:12  27  
07:44:12  28  	-- Perform outlier treatment.
07:44:12  29  	-- create clip table
07:44:12  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:12  31  
07:44:12  32  	-- populate clip table
07:44:12  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:12  34  	  clip_table_name => 'svmc_clip',
07:44:12  35  	  data_table_name => '&bldtable',
07:44:12  36  	  tail_frac	  => 0.025,
07:44:12  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:12  38  
07:44:12  39  	-- xform input data to winsorized data
07:44:12  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:12  41  	  clip_table_name => 'svmc_clip',
07:44:12  42  	  data_table_name => '&bldtable',
07:44:12  43  	  xform_view_name => 'svmc_winsor');
07:44:12  44  
07:44:12  45  	-- create normalization table
07:44:12  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:12  47  
07:44:12  48  	-- populate normalization table based on winsorized data
07:44:12  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:12  50  	  norm_table_name => 'svmc_norm',
07:44:12  51  	  data_table_name => 'svmc_winsor',
07:44:12  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:12  53  
07:44:12  54  	-- normalize the original data
07:44:12  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:12  56  	  norm_table_name => 'svmc_norm',
07:44:12  57  	  data_table_name => '&bldtable',
07:44:12  58  	  xform_view_name => 'svmc_build_prep');
07:44:12  59  END;
07:44:12  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
07:44:13 SQL> 
07:44:13 SQL> ---------------------
07:44:13 SQL> -- CREATE A NEW MODEL
07:44:13 SQL> --
07:44:13 SQL> -- Cleanup old model with the same name for repeat runs
07:44:13 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:44:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:13   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
07:44:14 SQL> 
07:44:14 SQL> -- Build a new SVM Model
07:44:14 SQL> BEGIN
07:44:14   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:44:14   3  	  model_name	      => '&model_name',
07:44:14   4  	  mining_function     => dbms_data_mining.classification,
07:44:14   5  	  data_table_name     => 'svmc_build_prep',
07:44:14   6  	  case_id_column_name => '&case_id',
07:44:14   7  	  target_column_name  => '&target',
07:44:14   8  	  settings_table_name => 'svmc_settings');
07:44:14   9  END;
07:44:14  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.44
07:44:20 SQL> 
07:44:20 SQL> -----------------------------------------------------------------------
07:44:20 SQL> --			       APPLY/score THE MODEL
07:44:20 SQL> -----------------------------------------------------------------------
07:44:20 SQL> 
07:44:20 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:20 SQL> -----------------------
07:44:20 SQL> -- PREPARE SCORING DATA
07:44:20 SQL> --
07:44:20 SQL> -- If the data for model creation has been prepared, then the data
07:44:20 SQL> -- to be scored using the model must be prepared in the same manner
07:44:20 SQL> -- in order to obtain meaningful results.
07:44:20 SQL> --
07:44:20 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:20 SQL> -- 2. Normalization
07:44:20 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:20 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:20 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:20 SQL> --
07:44:20 SQL> BEGIN
07:44:20   2  	-- Xform Test data to replace missing values
07:44:20   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:20   4  	  miss_table_name => 'svmc_miss_num',
07:44:20   5  	  data_table_name => '&scoretable',
07:44:20   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:20   7  
07:44:20   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:20   9  	  miss_table_name => 'svmc_miss_cat',
07:44:20  10  	  data_table_name => '&scoretable',
07:44:20  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:20  12  
07:44:20  13  	-- Normalize the data to be scored
07:44:20  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:20  15  	  norm_table_name => 'svmc_norm',
07:44:20  16  	  data_table_name => '&scoretable',
07:44:20  17  	  xform_view_name => 'svmc_apply_prep');
07:44:20  18  END;
07:44:20  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
07:44:20 SQL> 
07:44:20 SQL> -- Use same model_name used in score.sql
07:44:20 SQL> DEFINE model_name = 'forex14'
07:44:20 SQL> 
07:44:20 SQL> -- Maybe I already collected a score for this prdate.
07:44:20 SQL> -- DELETE it if I did:
07:44:20 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:44:20 SQL> 
07:44:20 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:44:20   2  SELECT
07:44:20   3  prdate
07:44:20   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:20   5  ,sysdate
07:44:20   6  ,SUBSTR(prdate,1,3)pair
07:44:20   7  ,SUBSTR(prdate,4,19)ydate
07:44:20   8  FROM svmc_apply_prep
07:44:20   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:44:20 SQL> @score1_5min_gattn.sql	2010-12-28 07:55:00
07:44:20 SQL> --
07:44:20 SQL> -- score1_5min_gattn.sql
07:44:20 SQL> --
07:44:20 SQL> 
07:44:20 SQL> CREATE OR REPLACE VIEW sme AS
07:44:20   2  SELECT
07:44:20   3  'jpy'||ydate prdate
07:44:20   4  ,NULL gattn
07:44:20   5  ,g00
07:44:20   6  ,g01
07:44:20   7  ,g02
07:44:20   8  ,g03
07:44:20   9  ,g04
07:44:20  10  ,g05
07:44:20  11  ,g06
07:44:20  12  ,g07
07:44:20  13  ,g08
07:44:20  14  FROM jpy_ms
07:44:20  15  WHERE ydate = '&1'||' '||'&2'
07:44:20  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'07:55:00'

View created.

Elapsed: 00:00:00.04
07:44:20 SQL> 
07:44:20 SQL> -- rpt
07:44:20 SQL> -- We should see just 1 row:
07:44:20 SQL> 
07:44:20 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.00
07:44:20 SQL> 
07:44:20 SQL> -- Build the model:
07:44:20 SQL> CREATE OR REPLACE VIEW bme AS
07:44:20   2  SELECT
07:44:20   3  'jpy'||ydate prdate
07:44:20   4  ,gattn
07:44:20   5  ,g00
07:44:20   6  ,g01
07:44:20   7  ,g02
07:44:20   8  ,g03
07:44:20   9  ,g04
07:44:20  10  ,g05
07:44:20  11  ,g06
07:44:20  12  ,g07
07:44:20  13  ,g08
07:44:20  14  FROM jpy_ms
07:44:20  15  WHERE gattn IN('nup','up')
07:44:20  16  -- Use only rows which are older than 1 day:
07:44:20  17  AND 1+ydate < '&1'||' '||'&2'
07:44:20  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'07:55:00'

View created.

Elapsed: 00:00:00.03
07:44:20 SQL> 
07:44:20 SQL> -- rpt
07:44:20 SQL> 
07:44:20 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9181
up	     9649

Elapsed: 00:00:00.05
07:44:20 SQL> 
07:44:20 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 07:50:00

Elapsed: 00:00:00.05
07:44:20 SQL> 
07:44:20 SQL> -- Now build model from bme and score sme
07:44:20 SQL> @score1gattn.sql
07:44:20 SQL> -- score1gattn.sql
07:44:20 SQL> 
07:44:20 SQL> -- Does the 1st SVM score
07:44:20 SQL> 
07:44:20 SQL> -- Fill up svmc_apply_prep
07:44:20 SQL> @score_gattn.sql
07:44:20 SQL> --
07:44:20 SQL> -- score_gattn.sql
07:44:20 SQL> --
07:44:20 SQL> 
07:44:20 SQL> -- usage: score_gattn.sql
07:44:20 SQL> 
07:44:20 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:20 SQL> 
07:44:20 SQL> DEFINE target	= 'gattn'
07:44:20 SQL> DEFINE model_name = 'forex14'
07:44:20 SQL> DEFINE bldtable	= 'bme'
07:44:20 SQL> DEFINE scoretable = 'sme'
07:44:20 SQL> DEFINE case_id	= 'prdate'
07:44:20 SQL> 
07:44:20 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:20 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:20 SQL> 
07:44:20 SQL> -- Builds an SVM model using pl/sql.
07:44:20 SQL> 
07:44:20 SQL> -----------------------------------------------------------------------
07:44:20 SQL> --			    BUILD THE MODEL
07:44:20 SQL> -----------------------------------------------------------------------
07:44:20 SQL> 
07:44:20 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:20 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:20 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:20 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:20 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:20 SQL> 
07:44:20 SQL> 
07:44:20 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:20 SQL> --
07:44:20 SQL> -- DROP	TABLE svmc_settings ;
07:44:20 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:20 SQL> -- DELETE svmc_settings;
07:44:20 SQL> 
07:44:20 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:20 SQL> -- this choice to SVM using a settings table.
07:44:20 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:20 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:20 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:20 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:20 SQL> -- models.
07:44:20 SQL> --
07:44:20 SQL> 
07:44:20 SQL> -- Do this once and then comment it out.
07:44:20 SQL> -- That makes script go faster.
07:44:20 SQL> -- BEGIN
07:44:20 SQL> -- -- Populate settings table
07:44:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:20 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:20 SQL> --
07:44:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:20 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:20 SQL> --
07:44:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:20 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:20 SQL> --   COMMIT;
07:44:20 SQL> -- END;
07:44:20 SQL> -- /
07:44:20 SQL> 
07:44:20 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:44:20 SQL> 
07:44:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:44:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:44:20 SQL> 
07:44:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:20 SQL> 
07:44:20 SQL> --------------------------------
07:44:20 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:20 SQL> --
07:44:20 SQL> 
07:44:20 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:20 SQL> -- 2. Outlier Treatment and
07:44:20 SQL> -- 3. Normalization are performed below.
07:44:20 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:20 SQL> --    normalized here.
07:44:20 SQL> 
07:44:20 SQL> BEGIN
07:44:20   2  	-- Perform missing value treatment for all predictors
07:44:20   3  	-- create miss tables
07:44:20   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:20   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:20   6  
07:44:20   7  	-- populate miss tables
07:44:20   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:20   9  	  miss_table_name => 'svmc_miss_num',
07:44:20  10  	  data_table_name => '&bldtable',
07:44:20  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:20  12  
07:44:20  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:20  14  	  miss_table_name => 'svmc_miss_cat',
07:44:20  15  	  data_table_name => '&bldtable',
07:44:20  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:20  17  
07:44:20  18  	-- xform input data to replace missing values
07:44:20  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:20  20  	  miss_table_name => 'svmc_miss_num',
07:44:20  21  	  data_table_name => '&bldtable',
07:44:20  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:20  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:20  24  	  miss_table_name => 'svmc_miss_cat',
07:44:20  25  	  data_table_name => '&bldtable',
07:44:20  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:20  27  
07:44:20  28  	-- Perform outlier treatment.
07:44:20  29  	-- create clip table
07:44:20  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:20  31  
07:44:20  32  	-- populate clip table
07:44:20  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:20  34  	  clip_table_name => 'svmc_clip',
07:44:20  35  	  data_table_name => '&bldtable',
07:44:20  36  	  tail_frac	  => 0.025,
07:44:20  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:20  38  
07:44:20  39  	-- xform input data to winsorized data
07:44:20  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:20  41  	  clip_table_name => 'svmc_clip',
07:44:20  42  	  data_table_name => '&bldtable',
07:44:20  43  	  xform_view_name => 'svmc_winsor');
07:44:20  44  
07:44:20  45  	-- create normalization table
07:44:20  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:20  47  
07:44:20  48  	-- populate normalization table based on winsorized data
07:44:20  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:20  50  	  norm_table_name => 'svmc_norm',
07:44:20  51  	  data_table_name => 'svmc_winsor',
07:44:20  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:20  53  
07:44:20  54  	-- normalize the original data
07:44:20  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:20  56  	  norm_table_name => 'svmc_norm',
07:44:20  57  	  data_table_name => '&bldtable',
07:44:20  58  	  xform_view_name => 'svmc_build_prep');
07:44:20  59  END;
07:44:20  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
07:44:21 SQL> 
07:44:21 SQL> ---------------------
07:44:21 SQL> -- CREATE A NEW MODEL
07:44:21 SQL> --
07:44:21 SQL> -- Cleanup old model with the same name for repeat runs
07:44:21 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:44:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:21   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.08
07:44:22 SQL> 
07:44:22 SQL> -- Build a new SVM Model
07:44:22 SQL> BEGIN
07:44:22   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:44:22   3  	  model_name	      => '&model_name',
07:44:22   4  	  mining_function     => dbms_data_mining.classification,
07:44:22   5  	  data_table_name     => 'svmc_build_prep',
07:44:22   6  	  case_id_column_name => '&case_id',
07:44:22   7  	  target_column_name  => '&target',
07:44:22   8  	  settings_table_name => 'svmc_settings');
07:44:22   9  END;
07:44:22  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.61
07:44:27 SQL> 
07:44:27 SQL> -----------------------------------------------------------------------
07:44:27 SQL> --			       APPLY/score THE MODEL
07:44:27 SQL> -----------------------------------------------------------------------
07:44:27 SQL> 
07:44:27 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:44:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:27 SQL> -----------------------
07:44:27 SQL> -- PREPARE SCORING DATA
07:44:27 SQL> --
07:44:27 SQL> -- If the data for model creation has been prepared, then the data
07:44:27 SQL> -- to be scored using the model must be prepared in the same manner
07:44:27 SQL> -- in order to obtain meaningful results.
07:44:27 SQL> --
07:44:27 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:27 SQL> -- 2. Normalization
07:44:27 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:27 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:27 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:27 SQL> --
07:44:27 SQL> BEGIN
07:44:27   2  	-- Xform Test data to replace missing values
07:44:27   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:27   4  	  miss_table_name => 'svmc_miss_num',
07:44:27   5  	  data_table_name => '&scoretable',
07:44:27   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:27   7  
07:44:27   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:27   9  	  miss_table_name => 'svmc_miss_cat',
07:44:27  10  	  data_table_name => '&scoretable',
07:44:27  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:27  12  
07:44:27  13  	-- Normalize the data to be scored
07:44:27  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:27  15  	  norm_table_name => 'svmc_norm',
07:44:27  16  	  data_table_name => '&scoretable',
07:44:27  17  	  xform_view_name => 'svmc_apply_prep');
07:44:27  18  END;
07:44:27  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
07:44:27 SQL> 
07:44:27 SQL> -- Use same model_name used in score.sql
07:44:27 SQL> DEFINE model_name = 'forex14'
07:44:27 SQL> 
07:44:27 SQL> -- Maybe I already collected a score for this prdate.
07:44:27 SQL> -- DELETE it if I did:
07:44:27 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:44:27 SQL> 
07:44:27 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:44:27   2  SELECT
07:44:27   3  prdate
07:44:27   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:27   5  ,sysdate
07:44:27   6  ,SUBSTR(prdate,1,3)pair
07:44:27   7  ,SUBSTR(prdate,4,19)ydate
07:44:27   8  FROM svmc_apply_prep
07:44:27   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:44:27 SQL> @score1_5min.sql	      2010-12-28 08:00:00
07:44:27 SQL> --
07:44:27 SQL> -- score1_5min.sql
07:44:27 SQL> --
07:44:27 SQL> 
07:44:27 SQL> CREATE OR REPLACE VIEW sme AS
07:44:27   2  SELECT
07:44:27   3  'jpy'||ydate prdate
07:44:27   4  ,NULL gatt
07:44:27   5  ,g00
07:44:27   6  ,g01
07:44:27   7  ,g02
07:44:27   8  ,g03
07:44:27   9  ,g04
07:44:27  10  ,g05
07:44:27  11  ,g06
07:44:27  12  ,g07
07:44:27  13  ,g08
07:44:27  14  FROM jpy_ms
07:44:27  15  WHERE ydate = '&1'||' '||'&2'
07:44:27  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:00:00'

View created.

Elapsed: 00:00:00.03
07:44:27 SQL> 
07:44:27 SQL> -- rpt
07:44:27 SQL> -- We should see just 1 row:
07:44:27 SQL> 
07:44:27 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:44:27 SQL> 
07:44:27 SQL> -- Build the model:
07:44:27 SQL> CREATE OR REPLACE VIEW bme AS
07:44:27   2  SELECT
07:44:27   3  'jpy'||ydate prdate
07:44:27   4  ,gatt
07:44:27   5  ,g00
07:44:27   6  ,g01
07:44:27   7  ,g02
07:44:27   8  ,g03
07:44:27   9  ,g04
07:44:27  10  ,g05
07:44:27  11  ,g06
07:44:27  12  ,g07
07:44:27  13  ,g08
07:44:27  14  FROM jpy_ms
07:44:27  15  WHERE gatt IN('nup','up')
07:44:27  16  -- Use only rows which are older than 1 day:
07:44:27  17  AND 1+ydate < '&1'||' '||'&2'
07:44:27  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:00:00'

View created.

Elapsed: 00:00:00.03
07:44:27 SQL> 
07:44:27 SQL> -- rpt
07:44:27 SQL> 
07:44:27 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8890

Elapsed: 00:00:00.05
07:44:27 SQL> 
07:44:27 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 07:55:00

Elapsed: 00:00:00.04
07:44:27 SQL> 
07:44:27 SQL> -- Now build model from bme and score sme
07:44:27 SQL> @score1.sql
07:44:27 SQL> -- score1.sql
07:44:27 SQL> 
07:44:27 SQL> -- Does the 1st SVM score
07:44:27 SQL> 
07:44:27 SQL> -- Fill up svmc_apply_prep
07:44:27 SQL> @score.sql
07:44:27 SQL> --
07:44:27 SQL> -- score.sql
07:44:27 SQL> --
07:44:27 SQL> 
07:44:27 SQL> -- usage: score.sql
07:44:27 SQL> 
07:44:27 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:27 SQL> 
07:44:27 SQL> DEFINE target	= 'gatt'
07:44:27 SQL> DEFINE model_name = 'forex14'
07:44:27 SQL> DEFINE bldtable	= 'bme'
07:44:27 SQL> DEFINE scoretable = 'sme'
07:44:27 SQL> DEFINE case_id	= 'prdate'
07:44:27 SQL> 
07:44:27 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:27 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:27 SQL> 
07:44:27 SQL> -- Builds an SVM model using pl/sql.
07:44:27 SQL> 
07:44:27 SQL> -----------------------------------------------------------------------
07:44:27 SQL> --			    BUILD THE MODEL
07:44:27 SQL> -----------------------------------------------------------------------
07:44:27 SQL> 
07:44:27 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:27 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:27 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:27 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:27 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:27 SQL> 
07:44:27 SQL> 
07:44:27 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:27 SQL> --
07:44:27 SQL> -- DROP	TABLE svmc_settings ;
07:44:27 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:27 SQL> -- DELETE svmc_settings;
07:44:27 SQL> 
07:44:27 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:27 SQL> -- this choice to SVM using a settings table.
07:44:27 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:27 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:27 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:27 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:27 SQL> -- models.
07:44:27 SQL> --
07:44:27 SQL> 
07:44:27 SQL> -- Do this once and then comment it out.
07:44:27 SQL> -- That makes script go faster.
07:44:27 SQL> -- BEGIN
07:44:27 SQL> -- -- Populate settings table
07:44:27 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:27 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:27 SQL> --
07:44:27 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:27 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:27 SQL> --
07:44:27 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:27 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:27 SQL> --   COMMIT;
07:44:27 SQL> -- END;
07:44:27 SQL> -- /
07:44:27 SQL> 
07:44:27 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:44:27 SQL> 
07:44:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:44:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:27 SQL> 
07:44:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:28 SQL> 
07:44:28 SQL> --------------------------------
07:44:28 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:28 SQL> --
07:44:28 SQL> 
07:44:28 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:28 SQL> -- 2. Outlier Treatment and
07:44:28 SQL> -- 3. Normalization are performed below.
07:44:28 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:28 SQL> --    normalized here.
07:44:28 SQL> 
07:44:28 SQL> BEGIN
07:44:28   2  	-- Perform missing value treatment for all predictors
07:44:28   3  	-- create miss tables
07:44:28   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:28   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:28   6  
07:44:28   7  	-- populate miss tables
07:44:28   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:28   9  	  miss_table_name => 'svmc_miss_num',
07:44:28  10  	  data_table_name => '&bldtable',
07:44:28  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:28  12  
07:44:28  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:28  14  	  miss_table_name => 'svmc_miss_cat',
07:44:28  15  	  data_table_name => '&bldtable',
07:44:28  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:28  17  
07:44:28  18  	-- xform input data to replace missing values
07:44:28  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:28  20  	  miss_table_name => 'svmc_miss_num',
07:44:28  21  	  data_table_name => '&bldtable',
07:44:28  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:28  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:28  24  	  miss_table_name => 'svmc_miss_cat',
07:44:28  25  	  data_table_name => '&bldtable',
07:44:28  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:28  27  
07:44:28  28  	-- Perform outlier treatment.
07:44:28  29  	-- create clip table
07:44:28  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:28  31  
07:44:28  32  	-- populate clip table
07:44:28  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:28  34  	  clip_table_name => 'svmc_clip',
07:44:28  35  	  data_table_name => '&bldtable',
07:44:28  36  	  tail_frac	  => 0.025,
07:44:28  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:28  38  
07:44:28  39  	-- xform input data to winsorized data
07:44:28  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:28  41  	  clip_table_name => 'svmc_clip',
07:44:28  42  	  data_table_name => '&bldtable',
07:44:28  43  	  xform_view_name => 'svmc_winsor');
07:44:28  44  
07:44:28  45  	-- create normalization table
07:44:28  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:28  47  
07:44:28  48  	-- populate normalization table based on winsorized data
07:44:28  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:28  50  	  norm_table_name => 'svmc_norm',
07:44:28  51  	  data_table_name => 'svmc_winsor',
07:44:28  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:28  53  
07:44:28  54  	-- normalize the original data
07:44:28  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:28  56  	  norm_table_name => 'svmc_norm',
07:44:28  57  	  data_table_name => '&bldtable',
07:44:28  58  	  xform_view_name => 'svmc_build_prep');
07:44:28  59  END;
07:44:28  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
07:44:29 SQL> 
07:44:29 SQL> ---------------------
07:44:29 SQL> -- CREATE A NEW MODEL
07:44:29 SQL> --
07:44:29 SQL> -- Cleanup old model with the same name for repeat runs
07:44:29 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:44:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:29   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
07:44:30 SQL> 
07:44:30 SQL> -- Build a new SVM Model
07:44:30 SQL> BEGIN
07:44:30   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:44:30   3  	  model_name	      => '&model_name',
07:44:30   4  	  mining_function     => dbms_data_mining.classification,
07:44:30   5  	  data_table_name     => 'svmc_build_prep',
07:44:30   6  	  case_id_column_name => '&case_id',
07:44:30   7  	  target_column_name  => '&target',
07:44:30   8  	  settings_table_name => 'svmc_settings');
07:44:30   9  END;
07:44:30  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.69
07:44:35 SQL> 
07:44:35 SQL> -----------------------------------------------------------------------
07:44:35 SQL> --			       APPLY/score THE MODEL
07:44:35 SQL> -----------------------------------------------------------------------
07:44:35 SQL> 
07:44:35 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:35 SQL> -----------------------
07:44:35 SQL> -- PREPARE SCORING DATA
07:44:35 SQL> --
07:44:35 SQL> -- If the data for model creation has been prepared, then the data
07:44:35 SQL> -- to be scored using the model must be prepared in the same manner
07:44:35 SQL> -- in order to obtain meaningful results.
07:44:35 SQL> --
07:44:35 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:35 SQL> -- 2. Normalization
07:44:35 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:35 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:35 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:35 SQL> --
07:44:35 SQL> BEGIN
07:44:35   2  	-- Xform Test data to replace missing values
07:44:35   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:35   4  	  miss_table_name => 'svmc_miss_num',
07:44:35   5  	  data_table_name => '&scoretable',
07:44:35   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:35   7  
07:44:35   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:35   9  	  miss_table_name => 'svmc_miss_cat',
07:44:35  10  	  data_table_name => '&scoretable',
07:44:35  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:35  12  
07:44:35  13  	-- Normalize the data to be scored
07:44:35  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:35  15  	  norm_table_name => 'svmc_norm',
07:44:35  16  	  data_table_name => '&scoretable',
07:44:35  17  	  xform_view_name => 'svmc_apply_prep');
07:44:35  18  END;
07:44:35  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:44:35 SQL> 
07:44:35 SQL> -- Use same model_name used in score.sql
07:44:35 SQL> DEFINE model_name = 'forex14'
07:44:35 SQL> 
07:44:35 SQL> -- Maybe I already collected a score for this prdate.
07:44:35 SQL> -- DELETE it if I did:
07:44:35 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:44:35 SQL> 
07:44:35 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:44:35   2  SELECT
07:44:35   3  prdate
07:44:35   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:35   5  ,sysdate
07:44:35   6  ,SUBSTR(prdate,1,3)pair
07:44:35   7  ,SUBSTR(prdate,4,19)ydate
07:44:35   8  FROM svmc_apply_prep
07:44:35   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:44:35 SQL> @score1_5min_gattn.sql	2010-12-28 08:00:00
07:44:35 SQL> --
07:44:35 SQL> -- score1_5min_gattn.sql
07:44:35 SQL> --
07:44:35 SQL> 
07:44:35 SQL> CREATE OR REPLACE VIEW sme AS
07:44:35   2  SELECT
07:44:35   3  'jpy'||ydate prdate
07:44:35   4  ,NULL gattn
07:44:35   5  ,g00
07:44:35   6  ,g01
07:44:35   7  ,g02
07:44:35   8  ,g03
07:44:35   9  ,g04
07:44:35  10  ,g05
07:44:35  11  ,g06
07:44:35  12  ,g07
07:44:35  13  ,g08
07:44:35  14  FROM jpy_ms
07:44:35  15  WHERE ydate = '&1'||' '||'&2'
07:44:35  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:00:00'

View created.

Elapsed: 00:00:00.03
07:44:35 SQL> 
07:44:35 SQL> -- rpt
07:44:35 SQL> -- We should see just 1 row:
07:44:35 SQL> 
07:44:35 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:44:35 SQL> 
07:44:35 SQL> -- Build the model:
07:44:35 SQL> CREATE OR REPLACE VIEW bme AS
07:44:35   2  SELECT
07:44:35   3  'jpy'||ydate prdate
07:44:35   4  ,gattn
07:44:35   5  ,g00
07:44:35   6  ,g01
07:44:35   7  ,g02
07:44:35   8  ,g03
07:44:35   9  ,g04
07:44:35  10  ,g05
07:44:35  11  ,g06
07:44:35  12  ,g07
07:44:35  13  ,g08
07:44:35  14  FROM jpy_ms
07:44:35  15  WHERE gattn IN('nup','up')
07:44:35  16  -- Use only rows which are older than 1 day:
07:44:35  17  AND 1+ydate < '&1'||' '||'&2'
07:44:35  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:00:00'

View created.

Elapsed: 00:00:00.02
07:44:36 SQL> 
07:44:36 SQL> -- rpt
07:44:36 SQL> 
07:44:36 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9182
up	     9649

Elapsed: 00:00:00.06
07:44:36 SQL> 
07:44:36 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 07:55:00

Elapsed: 00:00:00.05
07:44:36 SQL> 
07:44:36 SQL> -- Now build model from bme and score sme
07:44:36 SQL> @score1gattn.sql
07:44:36 SQL> -- score1gattn.sql
07:44:36 SQL> 
07:44:36 SQL> -- Does the 1st SVM score
07:44:36 SQL> 
07:44:36 SQL> -- Fill up svmc_apply_prep
07:44:36 SQL> @score_gattn.sql
07:44:36 SQL> --
07:44:36 SQL> -- score_gattn.sql
07:44:36 SQL> --
07:44:36 SQL> 
07:44:36 SQL> -- usage: score_gattn.sql
07:44:36 SQL> 
07:44:36 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:36 SQL> 
07:44:36 SQL> DEFINE target	= 'gattn'
07:44:36 SQL> DEFINE model_name = 'forex14'
07:44:36 SQL> DEFINE bldtable	= 'bme'
07:44:36 SQL> DEFINE scoretable = 'sme'
07:44:36 SQL> DEFINE case_id	= 'prdate'
07:44:36 SQL> 
07:44:36 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:36 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:36 SQL> 
07:44:36 SQL> -- Builds an SVM model using pl/sql.
07:44:36 SQL> 
07:44:36 SQL> -----------------------------------------------------------------------
07:44:36 SQL> --			    BUILD THE MODEL
07:44:36 SQL> -----------------------------------------------------------------------
07:44:36 SQL> 
07:44:36 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:36 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:36 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:36 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:36 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.01
07:44:36 SQL> 
07:44:36 SQL> 
07:44:36 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:36 SQL> --
07:44:36 SQL> -- DROP	TABLE svmc_settings ;
07:44:36 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:36 SQL> -- DELETE svmc_settings;
07:44:36 SQL> 
07:44:36 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:36 SQL> -- this choice to SVM using a settings table.
07:44:36 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:36 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:36 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:36 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:36 SQL> -- models.
07:44:36 SQL> --
07:44:36 SQL> 
07:44:36 SQL> -- Do this once and then comment it out.
07:44:36 SQL> -- That makes script go faster.
07:44:36 SQL> -- BEGIN
07:44:36 SQL> -- -- Populate settings table
07:44:36 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:36 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:36 SQL> --
07:44:36 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:36 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:36 SQL> --
07:44:36 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:36 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:36 SQL> --   COMMIT;
07:44:36 SQL> -- END;
07:44:36 SQL> -- /
07:44:36 SQL> 
07:44:36 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:44:36 SQL> 
07:44:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:36 SQL> 
07:44:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:36 SQL> 
07:44:36 SQL> --------------------------------
07:44:36 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:36 SQL> --
07:44:36 SQL> 
07:44:36 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:36 SQL> -- 2. Outlier Treatment and
07:44:36 SQL> -- 3. Normalization are performed below.
07:44:36 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:36 SQL> --    normalized here.
07:44:36 SQL> 
07:44:36 SQL> BEGIN
07:44:36   2  	-- Perform missing value treatment for all predictors
07:44:36   3  	-- create miss tables
07:44:36   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:36   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:36   6  
07:44:36   7  	-- populate miss tables
07:44:36   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:36   9  	  miss_table_name => 'svmc_miss_num',
07:44:36  10  	  data_table_name => '&bldtable',
07:44:36  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:36  12  
07:44:36  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:36  14  	  miss_table_name => 'svmc_miss_cat',
07:44:36  15  	  data_table_name => '&bldtable',
07:44:36  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:36  17  
07:44:36  18  	-- xform input data to replace missing values
07:44:36  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:36  20  	  miss_table_name => 'svmc_miss_num',
07:44:36  21  	  data_table_name => '&bldtable',
07:44:36  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:36  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:36  24  	  miss_table_name => 'svmc_miss_cat',
07:44:36  25  	  data_table_name => '&bldtable',
07:44:36  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:36  27  
07:44:36  28  	-- Perform outlier treatment.
07:44:36  29  	-- create clip table
07:44:36  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:36  31  
07:44:36  32  	-- populate clip table
07:44:36  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:36  34  	  clip_table_name => 'svmc_clip',
07:44:36  35  	  data_table_name => '&bldtable',
07:44:36  36  	  tail_frac	  => 0.025,
07:44:36  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:36  38  
07:44:36  39  	-- xform input data to winsorized data
07:44:36  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:36  41  	  clip_table_name => 'svmc_clip',
07:44:36  42  	  data_table_name => '&bldtable',
07:44:36  43  	  xform_view_name => 'svmc_winsor');
07:44:36  44  
07:44:36  45  	-- create normalization table
07:44:36  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:36  47  
07:44:36  48  	-- populate normalization table based on winsorized data
07:44:36  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:36  50  	  norm_table_name => 'svmc_norm',
07:44:36  51  	  data_table_name => 'svmc_winsor',
07:44:36  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:36  53  
07:44:36  54  	-- normalize the original data
07:44:36  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:36  56  	  norm_table_name => 'svmc_norm',
07:44:36  57  	  data_table_name => '&bldtable',
07:44:36  58  	  xform_view_name => 'svmc_build_prep');
07:44:36  59  END;
07:44:36  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
07:44:37 SQL> 
07:44:37 SQL> ---------------------
07:44:37 SQL> -- CREATE A NEW MODEL
07:44:37 SQL> --
07:44:37 SQL> -- Cleanup old model with the same name for repeat runs
07:44:37 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:44:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:37   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
07:44:38 SQL> 
07:44:38 SQL> -- Build a new SVM Model
07:44:38 SQL> BEGIN
07:44:38   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:44:38   3  	  model_name	      => '&model_name',
07:44:38   4  	  mining_function     => dbms_data_mining.classification,
07:44:38   5  	  data_table_name     => 'svmc_build_prep',
07:44:38   6  	  case_id_column_name => '&case_id',
07:44:38   7  	  target_column_name  => '&target',
07:44:38   8  	  settings_table_name => 'svmc_settings');
07:44:38   9  END;
07:44:38  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.52
07:44:42 SQL> 
07:44:42 SQL> -----------------------------------------------------------------------
07:44:42 SQL> --			       APPLY/score THE MODEL
07:44:42 SQL> -----------------------------------------------------------------------
07:44:42 SQL> 
07:44:42 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:44:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:42 SQL> -----------------------
07:44:42 SQL> -- PREPARE SCORING DATA
07:44:42 SQL> --
07:44:42 SQL> -- If the data for model creation has been prepared, then the data
07:44:42 SQL> -- to be scored using the model must be prepared in the same manner
07:44:42 SQL> -- in order to obtain meaningful results.
07:44:42 SQL> --
07:44:42 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:42 SQL> -- 2. Normalization
07:44:42 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:42 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:42 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:42 SQL> --
07:44:42 SQL> BEGIN
07:44:42   2  	-- Xform Test data to replace missing values
07:44:42   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:42   4  	  miss_table_name => 'svmc_miss_num',
07:44:42   5  	  data_table_name => '&scoretable',
07:44:42   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:42   7  
07:44:42   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:42   9  	  miss_table_name => 'svmc_miss_cat',
07:44:42  10  	  data_table_name => '&scoretable',
07:44:42  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:42  12  
07:44:42  13  	-- Normalize the data to be scored
07:44:42  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:42  15  	  norm_table_name => 'svmc_norm',
07:44:42  16  	  data_table_name => '&scoretable',
07:44:42  17  	  xform_view_name => 'svmc_apply_prep');
07:44:42  18  END;
07:44:42  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:44:42 SQL> 
07:44:42 SQL> -- Use same model_name used in score.sql
07:44:42 SQL> DEFINE model_name = 'forex14'
07:44:42 SQL> 
07:44:42 SQL> -- Maybe I already collected a score for this prdate.
07:44:42 SQL> -- DELETE it if I did:
07:44:42 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:44:42 SQL> 
07:44:42 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:44:42   2  SELECT
07:44:42   3  prdate
07:44:42   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:42   5  ,sysdate
07:44:42   6  ,SUBSTR(prdate,1,3)pair
07:44:42   7  ,SUBSTR(prdate,4,19)ydate
07:44:42   8  FROM svmc_apply_prep
07:44:42   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:44:42 SQL> @score1_5min.sql	      2010-12-28 08:05:00
07:44:42 SQL> --
07:44:42 SQL> -- score1_5min.sql
07:44:42 SQL> --
07:44:42 SQL> 
07:44:42 SQL> CREATE OR REPLACE VIEW sme AS
07:44:42   2  SELECT
07:44:42   3  'jpy'||ydate prdate
07:44:42   4  ,NULL gatt
07:44:42   5  ,g00
07:44:42   6  ,g01
07:44:42   7  ,g02
07:44:42   8  ,g03
07:44:42   9  ,g04
07:44:42  10  ,g05
07:44:42  11  ,g06
07:44:42  12  ,g07
07:44:42  13  ,g08
07:44:42  14  FROM jpy_ms
07:44:42  15  WHERE ydate = '&1'||' '||'&2'
07:44:42  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:05:00'

View created.

Elapsed: 00:00:00.02
07:44:42 SQL> 
07:44:42 SQL> -- rpt
07:44:42 SQL> -- We should see just 1 row:
07:44:42 SQL> 
07:44:42 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:44:42 SQL> 
07:44:42 SQL> -- Build the model:
07:44:42 SQL> CREATE OR REPLACE VIEW bme AS
07:44:42   2  SELECT
07:44:42   3  'jpy'||ydate prdate
07:44:42   4  ,gatt
07:44:42   5  ,g00
07:44:42   6  ,g01
07:44:42   7  ,g02
07:44:42   8  ,g03
07:44:42   9  ,g04
07:44:42  10  ,g05
07:44:42  11  ,g06
07:44:42  12  ,g07
07:44:42  13  ,g08
07:44:42  14  FROM jpy_ms
07:44:42  15  WHERE gatt IN('nup','up')
07:44:42  16  -- Use only rows which are older than 1 day:
07:44:42  17  AND 1+ydate < '&1'||' '||'&2'
07:44:42  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:05:00'

View created.

Elapsed: 00:00:00.02
07:44:42 SQL> 
07:44:42 SQL> -- rpt
07:44:42 SQL> 
07:44:42 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8891

Elapsed: 00:00:00.05
07:44:43 SQL> 
07:44:43 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:00:00

Elapsed: 00:00:00.06
07:44:43 SQL> 
07:44:43 SQL> -- Now build model from bme and score sme
07:44:43 SQL> @score1.sql
07:44:43 SQL> -- score1.sql
07:44:43 SQL> 
07:44:43 SQL> -- Does the 1st SVM score
07:44:43 SQL> 
07:44:43 SQL> -- Fill up svmc_apply_prep
07:44:43 SQL> @score.sql
07:44:43 SQL> --
07:44:43 SQL> -- score.sql
07:44:43 SQL> --
07:44:43 SQL> 
07:44:43 SQL> -- usage: score.sql
07:44:43 SQL> 
07:44:43 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:43 SQL> 
07:44:43 SQL> DEFINE target	= 'gatt'
07:44:43 SQL> DEFINE model_name = 'forex14'
07:44:43 SQL> DEFINE bldtable	= 'bme'
07:44:43 SQL> DEFINE scoretable = 'sme'
07:44:43 SQL> DEFINE case_id	= 'prdate'
07:44:43 SQL> 
07:44:43 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:43 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:43 SQL> 
07:44:43 SQL> -- Builds an SVM model using pl/sql.
07:44:43 SQL> 
07:44:43 SQL> -----------------------------------------------------------------------
07:44:43 SQL> --			    BUILD THE MODEL
07:44:43 SQL> -----------------------------------------------------------------------
07:44:43 SQL> 
07:44:43 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:43 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:43 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:43 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:43 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:43 SQL> 
07:44:43 SQL> 
07:44:43 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:43 SQL> --
07:44:43 SQL> -- DROP	TABLE svmc_settings ;
07:44:43 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:43 SQL> -- DELETE svmc_settings;
07:44:43 SQL> 
07:44:43 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:43 SQL> -- this choice to SVM using a settings table.
07:44:43 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:43 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:43 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:43 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:43 SQL> -- models.
07:44:43 SQL> --
07:44:43 SQL> 
07:44:43 SQL> -- Do this once and then comment it out.
07:44:43 SQL> -- That makes script go faster.
07:44:43 SQL> -- BEGIN
07:44:43 SQL> -- -- Populate settings table
07:44:43 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:43 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:43 SQL> --
07:44:43 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:43 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:43 SQL> --
07:44:43 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:43 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:43 SQL> --   COMMIT;
07:44:43 SQL> -- END;
07:44:43 SQL> -- /
07:44:43 SQL> 
07:44:43 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:44:43 SQL> 
07:44:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:44:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:43 SQL> 
07:44:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:43 SQL> 
07:44:43 SQL> --------------------------------
07:44:43 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:43 SQL> --
07:44:43 SQL> 
07:44:43 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:43 SQL> -- 2. Outlier Treatment and
07:44:43 SQL> -- 3. Normalization are performed below.
07:44:43 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:43 SQL> --    normalized here.
07:44:43 SQL> 
07:44:43 SQL> BEGIN
07:44:43   2  	-- Perform missing value treatment for all predictors
07:44:43   3  	-- create miss tables
07:44:43   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:43   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:43   6  
07:44:43   7  	-- populate miss tables
07:44:43   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:43   9  	  miss_table_name => 'svmc_miss_num',
07:44:43  10  	  data_table_name => '&bldtable',
07:44:43  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:43  12  
07:44:43  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:43  14  	  miss_table_name => 'svmc_miss_cat',
07:44:43  15  	  data_table_name => '&bldtable',
07:44:43  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:43  17  
07:44:43  18  	-- xform input data to replace missing values
07:44:43  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:43  20  	  miss_table_name => 'svmc_miss_num',
07:44:43  21  	  data_table_name => '&bldtable',
07:44:43  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:43  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:43  24  	  miss_table_name => 'svmc_miss_cat',
07:44:43  25  	  data_table_name => '&bldtable',
07:44:43  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:43  27  
07:44:43  28  	-- Perform outlier treatment.
07:44:43  29  	-- create clip table
07:44:43  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:43  31  
07:44:43  32  	-- populate clip table
07:44:43  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:43  34  	  clip_table_name => 'svmc_clip',
07:44:43  35  	  data_table_name => '&bldtable',
07:44:43  36  	  tail_frac	  => 0.025,
07:44:43  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:43  38  
07:44:43  39  	-- xform input data to winsorized data
07:44:43  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:43  41  	  clip_table_name => 'svmc_clip',
07:44:43  42  	  data_table_name => '&bldtable',
07:44:43  43  	  xform_view_name => 'svmc_winsor');
07:44:43  44  
07:44:43  45  	-- create normalization table
07:44:43  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:43  47  
07:44:43  48  	-- populate normalization table based on winsorized data
07:44:43  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:43  50  	  norm_table_name => 'svmc_norm',
07:44:43  51  	  data_table_name => 'svmc_winsor',
07:44:43  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:43  53  
07:44:43  54  	-- normalize the original data
07:44:43  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:43  56  	  norm_table_name => 'svmc_norm',
07:44:43  57  	  data_table_name => '&bldtable',
07:44:43  58  	  xform_view_name => 'svmc_build_prep');
07:44:43  59  END;
07:44:43  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
07:44:44 SQL> 
07:44:44 SQL> ---------------------
07:44:44 SQL> -- CREATE A NEW MODEL
07:44:44 SQL> --
07:44:44 SQL> -- Cleanup old model with the same name for repeat runs
07:44:44 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:44:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:44   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.08
07:44:45 SQL> 
07:44:45 SQL> -- Build a new SVM Model
07:44:45 SQL> BEGIN
07:44:45   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:44:45   3  	  model_name	      => '&model_name',
07:44:45   4  	  mining_function     => dbms_data_mining.classification,
07:44:45   5  	  data_table_name     => 'svmc_build_prep',
07:44:45   6  	  case_id_column_name => '&case_id',
07:44:45   7  	  target_column_name  => '&target',
07:44:45   8  	  settings_table_name => 'svmc_settings');
07:44:45   9  END;
07:44:45  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.75
07:44:51 SQL> 
07:44:51 SQL> -----------------------------------------------------------------------
07:44:51 SQL> --			       APPLY/score THE MODEL
07:44:51 SQL> -----------------------------------------------------------------------
07:44:51 SQL> 
07:44:51 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:44:51 SQL> -----------------------
07:44:51 SQL> -- PREPARE SCORING DATA
07:44:51 SQL> --
07:44:51 SQL> -- If the data for model creation has been prepared, then the data
07:44:51 SQL> -- to be scored using the model must be prepared in the same manner
07:44:51 SQL> -- in order to obtain meaningful results.
07:44:51 SQL> --
07:44:51 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:51 SQL> -- 2. Normalization
07:44:51 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:51 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:51 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:51 SQL> --
07:44:51 SQL> BEGIN
07:44:51   2  	-- Xform Test data to replace missing values
07:44:51   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:51   4  	  miss_table_name => 'svmc_miss_num',
07:44:51   5  	  data_table_name => '&scoretable',
07:44:51   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:51   7  
07:44:51   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:51   9  	  miss_table_name => 'svmc_miss_cat',
07:44:51  10  	  data_table_name => '&scoretable',
07:44:51  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:51  12  
07:44:51  13  	-- Normalize the data to be scored
07:44:51  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:51  15  	  norm_table_name => 'svmc_norm',
07:44:51  16  	  data_table_name => '&scoretable',
07:44:51  17  	  xform_view_name => 'svmc_apply_prep');
07:44:51  18  END;
07:44:51  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
07:44:51 SQL> 
07:44:51 SQL> -- Use same model_name used in score.sql
07:44:51 SQL> DEFINE model_name = 'forex14'
07:44:51 SQL> 
07:44:51 SQL> -- Maybe I already collected a score for this prdate.
07:44:51 SQL> -- DELETE it if I did:
07:44:51 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:44:51 SQL> 
07:44:51 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:44:51   2  SELECT
07:44:51   3  prdate
07:44:51   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:51   5  ,sysdate
07:44:51   6  ,SUBSTR(prdate,1,3)pair
07:44:51   7  ,SUBSTR(prdate,4,19)ydate
07:44:51   8  FROM svmc_apply_prep
07:44:51   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:44:51 SQL> @score1_5min_gattn.sql	2010-12-28 08:05:00
07:44:51 SQL> --
07:44:51 SQL> -- score1_5min_gattn.sql
07:44:51 SQL> --
07:44:51 SQL> 
07:44:51 SQL> CREATE OR REPLACE VIEW sme AS
07:44:51   2  SELECT
07:44:51   3  'jpy'||ydate prdate
07:44:51   4  ,NULL gattn
07:44:51   5  ,g00
07:44:51   6  ,g01
07:44:51   7  ,g02
07:44:51   8  ,g03
07:44:51   9  ,g04
07:44:51  10  ,g05
07:44:51  11  ,g06
07:44:51  12  ,g07
07:44:51  13  ,g08
07:44:51  14  FROM jpy_ms
07:44:51  15  WHERE ydate = '&1'||' '||'&2'
07:44:51  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:05:00'

View created.

Elapsed: 00:00:00.03
07:44:51 SQL> 
07:44:51 SQL> -- rpt
07:44:51 SQL> -- We should see just 1 row:
07:44:51 SQL> 
07:44:51 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:44:51 SQL> 
07:44:51 SQL> -- Build the model:
07:44:51 SQL> CREATE OR REPLACE VIEW bme AS
07:44:51   2  SELECT
07:44:51   3  'jpy'||ydate prdate
07:44:51   4  ,gattn
07:44:51   5  ,g00
07:44:51   6  ,g01
07:44:51   7  ,g02
07:44:51   8  ,g03
07:44:51   9  ,g04
07:44:51  10  ,g05
07:44:51  11  ,g06
07:44:51  12  ,g07
07:44:51  13  ,g08
07:44:51  14  FROM jpy_ms
07:44:51  15  WHERE gattn IN('nup','up')
07:44:51  16  -- Use only rows which are older than 1 day:
07:44:51  17  AND 1+ydate < '&1'||' '||'&2'
07:44:51  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:05:00'

View created.

Elapsed: 00:00:00.04
07:44:51 SQL> 
07:44:51 SQL> -- rpt
07:44:51 SQL> 
07:44:51 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9183
up	     9649

Elapsed: 00:00:00.06
07:44:51 SQL> 
07:44:51 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:00:00

Elapsed: 00:00:00.05
07:44:51 SQL> 
07:44:51 SQL> -- Now build model from bme and score sme
07:44:51 SQL> @score1gattn.sql
07:44:51 SQL> -- score1gattn.sql
07:44:51 SQL> 
07:44:51 SQL> -- Does the 1st SVM score
07:44:51 SQL> 
07:44:51 SQL> -- Fill up svmc_apply_prep
07:44:51 SQL> @score_gattn.sql
07:44:51 SQL> --
07:44:51 SQL> -- score_gattn.sql
07:44:51 SQL> --
07:44:51 SQL> 
07:44:51 SQL> -- usage: score_gattn.sql
07:44:51 SQL> 
07:44:51 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:51 SQL> 
07:44:51 SQL> DEFINE target	= 'gattn'
07:44:51 SQL> DEFINE model_name = 'forex14'
07:44:51 SQL> DEFINE bldtable	= 'bme'
07:44:51 SQL> DEFINE scoretable = 'sme'
07:44:51 SQL> DEFINE case_id	= 'prdate'
07:44:51 SQL> 
07:44:51 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:51 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:51 SQL> 
07:44:51 SQL> -- Builds an SVM model using pl/sql.
07:44:51 SQL> 
07:44:51 SQL> -----------------------------------------------------------------------
07:44:51 SQL> --			    BUILD THE MODEL
07:44:51 SQL> -----------------------------------------------------------------------
07:44:51 SQL> 
07:44:51 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:51 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:51 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:51 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.01
07:44:51 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:51 SQL> 
07:44:51 SQL> 
07:44:51 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:51 SQL> --
07:44:51 SQL> -- DROP	TABLE svmc_settings ;
07:44:51 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:51 SQL> -- DELETE svmc_settings;
07:44:51 SQL> 
07:44:51 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:51 SQL> -- this choice to SVM using a settings table.
07:44:51 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:51 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:51 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:51 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:51 SQL> -- models.
07:44:51 SQL> --
07:44:51 SQL> 
07:44:51 SQL> -- Do this once and then comment it out.
07:44:51 SQL> -- That makes script go faster.
07:44:51 SQL> -- BEGIN
07:44:51 SQL> -- -- Populate settings table
07:44:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:51 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:51 SQL> --
07:44:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:51 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:51 SQL> --
07:44:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:51 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:51 SQL> --   COMMIT;
07:44:51 SQL> -- END;
07:44:51 SQL> -- /
07:44:51 SQL> 
07:44:51 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:44:51 SQL> 
07:44:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:44:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:44:51 SQL> 
07:44:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:51 SQL> 
07:44:51 SQL> --------------------------------
07:44:51 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:51 SQL> --
07:44:51 SQL> 
07:44:51 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:51 SQL> -- 2. Outlier Treatment and
07:44:51 SQL> -- 3. Normalization are performed below.
07:44:51 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:51 SQL> --    normalized here.
07:44:51 SQL> 
07:44:51 SQL> BEGIN
07:44:51   2  	-- Perform missing value treatment for all predictors
07:44:51   3  	-- create miss tables
07:44:51   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:51   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:51   6  
07:44:51   7  	-- populate miss tables
07:44:51   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:51   9  	  miss_table_name => 'svmc_miss_num',
07:44:51  10  	  data_table_name => '&bldtable',
07:44:51  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:51  12  
07:44:51  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:51  14  	  miss_table_name => 'svmc_miss_cat',
07:44:51  15  	  data_table_name => '&bldtable',
07:44:51  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:51  17  
07:44:51  18  	-- xform input data to replace missing values
07:44:51  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:51  20  	  miss_table_name => 'svmc_miss_num',
07:44:51  21  	  data_table_name => '&bldtable',
07:44:51  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:51  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:51  24  	  miss_table_name => 'svmc_miss_cat',
07:44:51  25  	  data_table_name => '&bldtable',
07:44:51  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:51  27  
07:44:51  28  	-- Perform outlier treatment.
07:44:51  29  	-- create clip table
07:44:51  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:51  31  
07:44:51  32  	-- populate clip table
07:44:51  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:51  34  	  clip_table_name => 'svmc_clip',
07:44:51  35  	  data_table_name => '&bldtable',
07:44:51  36  	  tail_frac	  => 0.025,
07:44:51  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:51  38  
07:44:51  39  	-- xform input data to winsorized data
07:44:51  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:51  41  	  clip_table_name => 'svmc_clip',
07:44:51  42  	  data_table_name => '&bldtable',
07:44:51  43  	  xform_view_name => 'svmc_winsor');
07:44:51  44  
07:44:51  45  	-- create normalization table
07:44:51  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:51  47  
07:44:51  48  	-- populate normalization table based on winsorized data
07:44:51  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:51  50  	  norm_table_name => 'svmc_norm',
07:44:51  51  	  data_table_name => 'svmc_winsor',
07:44:51  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:51  53  
07:44:51  54  	-- normalize the original data
07:44:51  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:51  56  	  norm_table_name => 'svmc_norm',
07:44:51  57  	  data_table_name => '&bldtable',
07:44:51  58  	  xform_view_name => 'svmc_build_prep');
07:44:51  59  END;
07:44:51  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
07:44:52 SQL> 
07:44:52 SQL> ---------------------
07:44:52 SQL> -- CREATE A NEW MODEL
07:44:52 SQL> --
07:44:52 SQL> -- Cleanup old model with the same name for repeat runs
07:44:52 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:44:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:52   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.94
07:44:53 SQL> 
07:44:53 SQL> -- Build a new SVM Model
07:44:53 SQL> BEGIN
07:44:53   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:44:53   3  	  model_name	      => '&model_name',
07:44:53   4  	  mining_function     => dbms_data_mining.classification,
07:44:53   5  	  data_table_name     => 'svmc_build_prep',
07:44:53   6  	  case_id_column_name => '&case_id',
07:44:53   7  	  target_column_name  => '&target',
07:44:53   8  	  settings_table_name => 'svmc_settings');
07:44:53   9  END;
07:44:53  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.68
07:44:58 SQL> 
07:44:58 SQL> -----------------------------------------------------------------------
07:44:58 SQL> --			       APPLY/score THE MODEL
07:44:58 SQL> -----------------------------------------------------------------------
07:44:58 SQL> 
07:44:58 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:58 SQL> -----------------------
07:44:58 SQL> -- PREPARE SCORING DATA
07:44:58 SQL> --
07:44:58 SQL> -- If the data for model creation has been prepared, then the data
07:44:58 SQL> -- to be scored using the model must be prepared in the same manner
07:44:58 SQL> -- in order to obtain meaningful results.
07:44:58 SQL> --
07:44:58 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:58 SQL> -- 2. Normalization
07:44:58 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:58 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:58 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:58 SQL> --
07:44:58 SQL> BEGIN
07:44:58   2  	-- Xform Test data to replace missing values
07:44:58   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:58   4  	  miss_table_name => 'svmc_miss_num',
07:44:58   5  	  data_table_name => '&scoretable',
07:44:58   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:58   7  
07:44:58   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:58   9  	  miss_table_name => 'svmc_miss_cat',
07:44:58  10  	  data_table_name => '&scoretable',
07:44:58  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:58  12  
07:44:58  13  	-- Normalize the data to be scored
07:44:58  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:58  15  	  norm_table_name => 'svmc_norm',
07:44:58  16  	  data_table_name => '&scoretable',
07:44:58  17  	  xform_view_name => 'svmc_apply_prep');
07:44:58  18  END;
07:44:58  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:44:58 SQL> 
07:44:58 SQL> -- Use same model_name used in score.sql
07:44:58 SQL> DEFINE model_name = 'forex14'
07:44:58 SQL> 
07:44:58 SQL> -- Maybe I already collected a score for this prdate.
07:44:58 SQL> -- DELETE it if I did:
07:44:58 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:44:58 SQL> 
07:44:58 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:44:58   2  SELECT
07:44:58   3  prdate
07:44:58   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:58   5  ,sysdate
07:44:58   6  ,SUBSTR(prdate,1,3)pair
07:44:58   7  ,SUBSTR(prdate,4,19)ydate
07:44:58   8  FROM svmc_apply_prep
07:44:58   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:44:58 SQL> @score1_5min.sql	      2010-12-28 08:10:00
07:44:58 SQL> --
07:44:58 SQL> -- score1_5min.sql
07:44:58 SQL> --
07:44:58 SQL> 
07:44:58 SQL> CREATE OR REPLACE VIEW sme AS
07:44:58   2  SELECT
07:44:58   3  'jpy'||ydate prdate
07:44:58   4  ,NULL gatt
07:44:58   5  ,g00
07:44:58   6  ,g01
07:44:58   7  ,g02
07:44:58   8  ,g03
07:44:58   9  ,g04
07:44:58  10  ,g05
07:44:58  11  ,g06
07:44:58  12  ,g07
07:44:58  13  ,g08
07:44:58  14  FROM jpy_ms
07:44:58  15  WHERE ydate = '&1'||' '||'&2'
07:44:58  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:10:00'

View created.

Elapsed: 00:00:00.05
07:44:58 SQL> 
07:44:58 SQL> -- rpt
07:44:58 SQL> -- We should see just 1 row:
07:44:58 SQL> 
07:44:58 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:44:58 SQL> 
07:44:58 SQL> -- Build the model:
07:44:58 SQL> CREATE OR REPLACE VIEW bme AS
07:44:58   2  SELECT
07:44:58   3  'jpy'||ydate prdate
07:44:58   4  ,gatt
07:44:58   5  ,g00
07:44:58   6  ,g01
07:44:58   7  ,g02
07:44:58   8  ,g03
07:44:58   9  ,g04
07:44:58  10  ,g05
07:44:58  11  ,g06
07:44:58  12  ,g07
07:44:58  13  ,g08
07:44:58  14  FROM jpy_ms
07:44:58  15  WHERE gatt IN('nup','up')
07:44:58  16  -- Use only rows which are older than 1 day:
07:44:58  17  AND 1+ydate < '&1'||' '||'&2'
07:44:58  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:10:00'

View created.

Elapsed: 00:00:00.04
07:44:58 SQL> 
07:44:58 SQL> -- rpt
07:44:58 SQL> 
07:44:58 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8892

Elapsed: 00:00:00.06
07:44:58 SQL> 
07:44:58 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:05:00

Elapsed: 00:00:00.04
07:44:58 SQL> 
07:44:58 SQL> -- Now build model from bme and score sme
07:44:58 SQL> @score1.sql
07:44:58 SQL> -- score1.sql
07:44:58 SQL> 
07:44:58 SQL> -- Does the 1st SVM score
07:44:58 SQL> 
07:44:58 SQL> -- Fill up svmc_apply_prep
07:44:58 SQL> @score.sql
07:44:58 SQL> --
07:44:58 SQL> -- score.sql
07:44:58 SQL> --
07:44:58 SQL> 
07:44:58 SQL> -- usage: score.sql
07:44:58 SQL> 
07:44:58 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:58 SQL> 
07:44:58 SQL> DEFINE target	= 'gatt'
07:44:58 SQL> DEFINE model_name = 'forex14'
07:44:58 SQL> DEFINE bldtable	= 'bme'
07:44:58 SQL> DEFINE scoretable = 'sme'
07:44:58 SQL> DEFINE case_id	= 'prdate'
07:44:58 SQL> 
07:44:58 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:58 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:58 SQL> 
07:44:58 SQL> -- Builds an SVM model using pl/sql.
07:44:58 SQL> 
07:44:58 SQL> -----------------------------------------------------------------------
07:44:58 SQL> --			    BUILD THE MODEL
07:44:58 SQL> -----------------------------------------------------------------------
07:44:58 SQL> 
07:44:58 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:58 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:58 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:58 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:58 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:44:58 SQL> 
07:44:58 SQL> 
07:44:58 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:58 SQL> --
07:44:58 SQL> -- DROP	TABLE svmc_settings ;
07:44:58 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:58 SQL> -- DELETE svmc_settings;
07:44:58 SQL> 
07:44:58 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:58 SQL> -- this choice to SVM using a settings table.
07:44:58 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:58 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:58 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:58 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:58 SQL> -- models.
07:44:58 SQL> --
07:44:58 SQL> 
07:44:58 SQL> -- Do this once and then comment it out.
07:44:58 SQL> -- That makes script go faster.
07:44:58 SQL> -- BEGIN
07:44:58 SQL> -- -- Populate settings table
07:44:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:58 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:58 SQL> --
07:44:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:58 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:58 SQL> --
07:44:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:58 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:58 SQL> --   COMMIT;
07:44:58 SQL> -- END;
07:44:58 SQL> -- /
07:44:58 SQL> 
07:44:58 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:44:58 SQL> 
07:44:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:44:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:44:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:44:58 SQL> 
07:44:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:44:58 SQL> 
07:44:58 SQL> --------------------------------
07:44:58 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:58 SQL> --
07:44:58 SQL> 
07:44:58 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:58 SQL> -- 2. Outlier Treatment and
07:44:58 SQL> -- 3. Normalization are performed below.
07:44:58 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:58 SQL> --    normalized here.
07:44:58 SQL> 
07:44:58 SQL> BEGIN
07:44:58   2  	-- Perform missing value treatment for all predictors
07:44:58   3  	-- create miss tables
07:44:58   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:58   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:58   6  
07:44:58   7  	-- populate miss tables
07:44:58   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:58   9  	  miss_table_name => 'svmc_miss_num',
07:44:58  10  	  data_table_name => '&bldtable',
07:44:58  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:58  12  
07:44:58  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:58  14  	  miss_table_name => 'svmc_miss_cat',
07:44:58  15  	  data_table_name => '&bldtable',
07:44:58  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:58  17  
07:44:58  18  	-- xform input data to replace missing values
07:44:58  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:58  20  	  miss_table_name => 'svmc_miss_num',
07:44:58  21  	  data_table_name => '&bldtable',
07:44:58  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:58  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:58  24  	  miss_table_name => 'svmc_miss_cat',
07:44:58  25  	  data_table_name => '&bldtable',
07:44:58  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:58  27  
07:44:58  28  	-- Perform outlier treatment.
07:44:58  29  	-- create clip table
07:44:58  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:58  31  
07:44:58  32  	-- populate clip table
07:44:58  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:58  34  	  clip_table_name => 'svmc_clip',
07:44:58  35  	  data_table_name => '&bldtable',
07:44:58  36  	  tail_frac	  => 0.025,
07:44:58  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:58  38  
07:44:58  39  	-- xform input data to winsorized data
07:44:58  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:58  41  	  clip_table_name => 'svmc_clip',
07:44:58  42  	  data_table_name => '&bldtable',
07:44:58  43  	  xform_view_name => 'svmc_winsor');
07:44:58  44  
07:44:58  45  	-- create normalization table
07:44:58  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:58  47  
07:44:58  48  	-- populate normalization table based on winsorized data
07:44:58  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:58  50  	  norm_table_name => 'svmc_norm',
07:44:58  51  	  data_table_name => 'svmc_winsor',
07:44:58  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:58  53  
07:44:58  54  	-- normalize the original data
07:44:58  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:58  56  	  norm_table_name => 'svmc_norm',
07:44:58  57  	  data_table_name => '&bldtable',
07:44:58  58  	  xform_view_name => 'svmc_build_prep');
07:44:58  59  END;
07:44:58  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.19
07:44:59 SQL> 
07:44:59 SQL> ---------------------
07:44:59 SQL> -- CREATE A NEW MODEL
07:44:59 SQL> --
07:44:59 SQL> -- Cleanup old model with the same name for repeat runs
07:44:59 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:44:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:59   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
07:45:00 SQL> 
07:45:00 SQL> -- Build a new SVM Model
07:45:00 SQL> BEGIN
07:45:00   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:00   3  	  model_name	      => '&model_name',
07:45:00   4  	  mining_function     => dbms_data_mining.classification,
07:45:00   5  	  data_table_name     => 'svmc_build_prep',
07:45:00   6  	  case_id_column_name => '&case_id',
07:45:00   7  	  target_column_name  => '&target',
07:45:00   8  	  settings_table_name => 'svmc_settings');
07:45:00   9  END;
07:45:00  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:06.28
07:45:07 SQL> 
07:45:07 SQL> -----------------------------------------------------------------------
07:45:07 SQL> --			       APPLY/score THE MODEL
07:45:07 SQL> -----------------------------------------------------------------------
07:45:07 SQL> 
07:45:07 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:45:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:45:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:45:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:45:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:07 SQL> -----------------------
07:45:07 SQL> -- PREPARE SCORING DATA
07:45:07 SQL> --
07:45:07 SQL> -- If the data for model creation has been prepared, then the data
07:45:07 SQL> -- to be scored using the model must be prepared in the same manner
07:45:07 SQL> -- in order to obtain meaningful results.
07:45:07 SQL> --
07:45:07 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:07 SQL> -- 2. Normalization
07:45:07 SQL> -- No outlier treatment will be performed during test and apply. The
07:45:07 SQL> -- normalization step is sufficient, since the normalization parameters
07:45:07 SQL> -- already capture the effects of outlier treatment done with build data.
07:45:07 SQL> --
07:45:07 SQL> BEGIN
07:45:07   2  	-- Xform Test data to replace missing values
07:45:07   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:07   4  	  miss_table_name => 'svmc_miss_num',
07:45:07   5  	  data_table_name => '&scoretable',
07:45:07   6  	  xform_view_name => 'xformed_apply_miss_num');
07:45:07   7  
07:45:07   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:07   9  	  miss_table_name => 'svmc_miss_cat',
07:45:07  10  	  data_table_name => '&scoretable',
07:45:07  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:45:07  12  
07:45:07  13  	-- Normalize the data to be scored
07:45:07  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:07  15  	  norm_table_name => 'svmc_norm',
07:45:07  16  	  data_table_name => '&scoretable',
07:45:07  17  	  xform_view_name => 'svmc_apply_prep');
07:45:07  18  END;
07:45:07  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:45:07 SQL> 
07:45:07 SQL> -- Use same model_name used in score.sql
07:45:07 SQL> DEFINE model_name = 'forex14'
07:45:07 SQL> 
07:45:07 SQL> -- Maybe I already collected a score for this prdate.
07:45:07 SQL> -- DELETE it if I did:
07:45:07 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:45:07 SQL> 
07:45:07 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:45:07   2  SELECT
07:45:07   3  prdate
07:45:07   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:45:07   5  ,sysdate
07:45:07   6  ,SUBSTR(prdate,1,3)pair
07:45:07   7  ,SUBSTR(prdate,4,19)ydate
07:45:07   8  FROM svmc_apply_prep
07:45:07   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:45:07 SQL> @score1_5min_gattn.sql	2010-12-28 08:10:00
07:45:07 SQL> --
07:45:07 SQL> -- score1_5min_gattn.sql
07:45:07 SQL> --
07:45:07 SQL> 
07:45:07 SQL> CREATE OR REPLACE VIEW sme AS
07:45:07   2  SELECT
07:45:07   3  'jpy'||ydate prdate
07:45:07   4  ,NULL gattn
07:45:07   5  ,g00
07:45:07   6  ,g01
07:45:07   7  ,g02
07:45:07   8  ,g03
07:45:07   9  ,g04
07:45:07  10  ,g05
07:45:07  11  ,g06
07:45:07  12  ,g07
07:45:07  13  ,g08
07:45:07  14  FROM jpy_ms
07:45:07  15  WHERE ydate = '&1'||' '||'&2'
07:45:07  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:10:00'

View created.

Elapsed: 00:00:00.03
07:45:07 SQL> 
07:45:07 SQL> -- rpt
07:45:07 SQL> -- We should see just 1 row:
07:45:07 SQL> 
07:45:07 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:45:07 SQL> 
07:45:07 SQL> -- Build the model:
07:45:07 SQL> CREATE OR REPLACE VIEW bme AS
07:45:07   2  SELECT
07:45:07   3  'jpy'||ydate prdate
07:45:07   4  ,gattn
07:45:07   5  ,g00
07:45:07   6  ,g01
07:45:07   7  ,g02
07:45:07   8  ,g03
07:45:07   9  ,g04
07:45:07  10  ,g05
07:45:07  11  ,g06
07:45:07  12  ,g07
07:45:07  13  ,g08
07:45:07  14  FROM jpy_ms
07:45:07  15  WHERE gattn IN('nup','up')
07:45:07  16  -- Use only rows which are older than 1 day:
07:45:07  17  AND 1+ydate < '&1'||' '||'&2'
07:45:07  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:10:00'

View created.

Elapsed: 00:00:00.02
07:45:07 SQL> 
07:45:07 SQL> -- rpt
07:45:07 SQL> 
07:45:07 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9184
up	     9649

Elapsed: 00:00:00.06
07:45:07 SQL> 
07:45:07 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:05:00

Elapsed: 00:00:00.05
07:45:07 SQL> 
07:45:07 SQL> -- Now build model from bme and score sme
07:45:07 SQL> @score1gattn.sql
07:45:07 SQL> -- score1gattn.sql
07:45:07 SQL> 
07:45:07 SQL> -- Does the 1st SVM score
07:45:07 SQL> 
07:45:07 SQL> -- Fill up svmc_apply_prep
07:45:07 SQL> @score_gattn.sql
07:45:07 SQL> --
07:45:07 SQL> -- score_gattn.sql
07:45:07 SQL> --
07:45:07 SQL> 
07:45:07 SQL> -- usage: score_gattn.sql
07:45:07 SQL> 
07:45:07 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:45:07 SQL> 
07:45:07 SQL> DEFINE target	= 'gattn'
07:45:07 SQL> DEFINE model_name = 'forex14'
07:45:07 SQL> DEFINE bldtable	= 'bme'
07:45:07 SQL> DEFINE scoretable = 'sme'
07:45:07 SQL> DEFINE case_id	= 'prdate'
07:45:07 SQL> 
07:45:07 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:45:07 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:45:07 SQL> 
07:45:07 SQL> -- Builds an SVM model using pl/sql.
07:45:07 SQL> 
07:45:07 SQL> -----------------------------------------------------------------------
07:45:07 SQL> --			    BUILD THE MODEL
07:45:07 SQL> -----------------------------------------------------------------------
07:45:07 SQL> 
07:45:07 SQL> -- Cleanup old build data preparation objects for repeat runs
07:45:07 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:07 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:45:07 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:07 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:07 SQL> 
07:45:07 SQL> 
07:45:07 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:45:07 SQL> --
07:45:07 SQL> -- DROP	TABLE svmc_settings ;
07:45:07 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:45:07 SQL> -- DELETE svmc_settings;
07:45:07 SQL> 
07:45:07 SQL> -- The default classification algorithm is Naive Bayes. So override
07:45:07 SQL> -- this choice to SVM using a settings table.
07:45:07 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:45:07 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:45:07 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:45:07 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:45:07 SQL> -- models.
07:45:07 SQL> --
07:45:07 SQL> 
07:45:07 SQL> -- Do this once and then comment it out.
07:45:07 SQL> -- That makes script go faster.
07:45:07 SQL> -- BEGIN
07:45:07 SQL> -- -- Populate settings table
07:45:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:07 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:45:07 SQL> --
07:45:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:07 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:45:07 SQL> --
07:45:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:07 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:45:07 SQL> --   COMMIT;
07:45:07 SQL> -- END;
07:45:07 SQL> -- /
07:45:07 SQL> 
07:45:07 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:45:07 SQL> 
07:45:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:45:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:45:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:45:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:07 SQL> 
07:45:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:45:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:07 SQL> 
07:45:07 SQL> --------------------------------
07:45:07 SQL> -- PREPARE BUILD (TRAINING) DATA
07:45:07 SQL> --
07:45:07 SQL> 
07:45:07 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:07 SQL> -- 2. Outlier Treatment and
07:45:07 SQL> -- 3. Normalization are performed below.
07:45:07 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:45:07 SQL> --    normalized here.
07:45:07 SQL> 
07:45:07 SQL> BEGIN
07:45:07   2  	-- Perform missing value treatment for all predictors
07:45:07   3  	-- create miss tables
07:45:07   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:45:07   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:45:07   6  
07:45:07   7  	-- populate miss tables
07:45:07   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:45:07   9  	  miss_table_name => 'svmc_miss_num',
07:45:07  10  	  data_table_name => '&bldtable',
07:45:07  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:07  12  
07:45:07  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:45:07  14  	  miss_table_name => 'svmc_miss_cat',
07:45:07  15  	  data_table_name => '&bldtable',
07:45:07  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:07  17  
07:45:07  18  	-- xform input data to replace missing values
07:45:07  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:07  20  	  miss_table_name => 'svmc_miss_num',
07:45:07  21  	  data_table_name => '&bldtable',
07:45:07  22  	  xform_view_name => 'xformed_build_miss_num');
07:45:07  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:07  24  	  miss_table_name => 'svmc_miss_cat',
07:45:07  25  	  data_table_name => '&bldtable',
07:45:07  26  	  xform_view_name => 'xformed_build_miss_cat');
07:45:07  27  
07:45:07  28  	-- Perform outlier treatment.
07:45:07  29  	-- create clip table
07:45:07  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:45:07  31  
07:45:07  32  	-- populate clip table
07:45:07  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:45:07  34  	  clip_table_name => 'svmc_clip',
07:45:07  35  	  data_table_name => '&bldtable',
07:45:07  36  	  tail_frac	  => 0.025,
07:45:07  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:07  38  
07:45:07  39  	-- xform input data to winsorized data
07:45:07  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:45:07  41  	  clip_table_name => 'svmc_clip',
07:45:07  42  	  data_table_name => '&bldtable',
07:45:07  43  	  xform_view_name => 'svmc_winsor');
07:45:07  44  
07:45:07  45  	-- create normalization table
07:45:07  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:45:07  47  
07:45:07  48  	-- populate normalization table based on winsorized data
07:45:07  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:45:07  50  	  norm_table_name => 'svmc_norm',
07:45:07  51  	  data_table_name => 'svmc_winsor',
07:45:07  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:07  53  
07:45:07  54  	-- normalize the original data
07:45:07  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:07  56  	  norm_table_name => 'svmc_norm',
07:45:07  57  	  data_table_name => '&bldtable',
07:45:07  58  	  xform_view_name => 'svmc_build_prep');
07:45:07  59  END;
07:45:07  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
07:45:08 SQL> 
07:45:08 SQL> ---------------------
07:45:08 SQL> -- CREATE A NEW MODEL
07:45:08 SQL> --
07:45:08 SQL> -- Cleanup old model with the same name for repeat runs
07:45:08 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:45:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:08   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
07:45:09 SQL> 
07:45:09 SQL> -- Build a new SVM Model
07:45:09 SQL> BEGIN
07:45:09   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:09   3  	  model_name	      => '&model_name',
07:45:09   4  	  mining_function     => dbms_data_mining.classification,
07:45:09   5  	  data_table_name     => 'svmc_build_prep',
07:45:09   6  	  case_id_column_name => '&case_id',
07:45:09   7  	  target_column_name  => '&target',
07:45:09   8  	  settings_table_name => 'svmc_settings');
07:45:09   9  END;
07:45:09  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.82
07:45:14 SQL> 
07:45:14 SQL> -----------------------------------------------------------------------
07:45:14 SQL> --			       APPLY/score THE MODEL
07:45:14 SQL> -----------------------------------------------------------------------
07:45:14 SQL> 
07:45:14 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:45:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:45:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:45:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:45:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:14 SQL> -----------------------
07:45:14 SQL> -- PREPARE SCORING DATA
07:45:14 SQL> --
07:45:14 SQL> -- If the data for model creation has been prepared, then the data
07:45:14 SQL> -- to be scored using the model must be prepared in the same manner
07:45:14 SQL> -- in order to obtain meaningful results.
07:45:14 SQL> --
07:45:14 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:14 SQL> -- 2. Normalization
07:45:14 SQL> -- No outlier treatment will be performed during test and apply. The
07:45:14 SQL> -- normalization step is sufficient, since the normalization parameters
07:45:14 SQL> -- already capture the effects of outlier treatment done with build data.
07:45:14 SQL> --
07:45:14 SQL> BEGIN
07:45:14   2  	-- Xform Test data to replace missing values
07:45:14   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:14   4  	  miss_table_name => 'svmc_miss_num',
07:45:14   5  	  data_table_name => '&scoretable',
07:45:14   6  	  xform_view_name => 'xformed_apply_miss_num');
07:45:14   7  
07:45:14   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:14   9  	  miss_table_name => 'svmc_miss_cat',
07:45:14  10  	  data_table_name => '&scoretable',
07:45:14  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:45:14  12  
07:45:14  13  	-- Normalize the data to be scored
07:45:14  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:14  15  	  norm_table_name => 'svmc_norm',
07:45:14  16  	  data_table_name => '&scoretable',
07:45:14  17  	  xform_view_name => 'svmc_apply_prep');
07:45:14  18  END;
07:45:14  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
07:45:14 SQL> 
07:45:14 SQL> -- Use same model_name used in score.sql
07:45:14 SQL> DEFINE model_name = 'forex14'
07:45:14 SQL> 
07:45:14 SQL> -- Maybe I already collected a score for this prdate.
07:45:14 SQL> -- DELETE it if I did:
07:45:14 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:45:14 SQL> 
07:45:14 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:45:14   2  SELECT
07:45:14   3  prdate
07:45:14   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:45:14   5  ,sysdate
07:45:14   6  ,SUBSTR(prdate,1,3)pair
07:45:14   7  ,SUBSTR(prdate,4,19)ydate
07:45:14   8  FROM svmc_apply_prep
07:45:14   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:45:14 SQL> @score1_5min.sql	      2010-12-28 08:15:00
07:45:14 SQL> --
07:45:14 SQL> -- score1_5min.sql
07:45:14 SQL> --
07:45:14 SQL> 
07:45:14 SQL> CREATE OR REPLACE VIEW sme AS
07:45:14   2  SELECT
07:45:14   3  'jpy'||ydate prdate
07:45:14   4  ,NULL gatt
07:45:14   5  ,g00
07:45:14   6  ,g01
07:45:14   7  ,g02
07:45:14   8  ,g03
07:45:14   9  ,g04
07:45:14  10  ,g05
07:45:14  11  ,g06
07:45:14  12  ,g07
07:45:14  13  ,g08
07:45:14  14  FROM jpy_ms
07:45:14  15  WHERE ydate = '&1'||' '||'&2'
07:45:14  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:15:00'

View created.

Elapsed: 00:00:00.03
07:45:14 SQL> 
07:45:14 SQL> -- rpt
07:45:14 SQL> -- We should see just 1 row:
07:45:14 SQL> 
07:45:14 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:45:14 SQL> 
07:45:14 SQL> -- Build the model:
07:45:14 SQL> CREATE OR REPLACE VIEW bme AS
07:45:14   2  SELECT
07:45:14   3  'jpy'||ydate prdate
07:45:14   4  ,gatt
07:45:14   5  ,g00
07:45:14   6  ,g01
07:45:14   7  ,g02
07:45:14   8  ,g03
07:45:14   9  ,g04
07:45:14  10  ,g05
07:45:14  11  ,g06
07:45:14  12  ,g07
07:45:14  13  ,g08
07:45:14  14  FROM jpy_ms
07:45:14  15  WHERE gatt IN('nup','up')
07:45:14  16  -- Use only rows which are older than 1 day:
07:45:14  17  AND 1+ydate < '&1'||' '||'&2'
07:45:14  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:15:00'

View created.

Elapsed: 00:00:00.05
07:45:14 SQL> 
07:45:14 SQL> -- rpt
07:45:14 SQL> 
07:45:14 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8893

Elapsed: 00:00:00.06
07:45:14 SQL> 
07:45:14 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:10:00

Elapsed: 00:00:00.05
07:45:14 SQL> 
07:45:14 SQL> -- Now build model from bme and score sme
07:45:14 SQL> @score1.sql
07:45:14 SQL> -- score1.sql
07:45:14 SQL> 
07:45:14 SQL> -- Does the 1st SVM score
07:45:14 SQL> 
07:45:14 SQL> -- Fill up svmc_apply_prep
07:45:14 SQL> @score.sql
07:45:14 SQL> --
07:45:14 SQL> -- score.sql
07:45:14 SQL> --
07:45:14 SQL> 
07:45:14 SQL> -- usage: score.sql
07:45:14 SQL> 
07:45:14 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:45:14 SQL> 
07:45:14 SQL> DEFINE target	= 'gatt'
07:45:14 SQL> DEFINE model_name = 'forex14'
07:45:14 SQL> DEFINE bldtable	= 'bme'
07:45:14 SQL> DEFINE scoretable = 'sme'
07:45:14 SQL> DEFINE case_id	= 'prdate'
07:45:14 SQL> 
07:45:14 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:45:14 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:45:14 SQL> 
07:45:14 SQL> -- Builds an SVM model using pl/sql.
07:45:14 SQL> 
07:45:14 SQL> -----------------------------------------------------------------------
07:45:14 SQL> --			    BUILD THE MODEL
07:45:14 SQL> -----------------------------------------------------------------------
07:45:14 SQL> 
07:45:14 SQL> -- Cleanup old build data preparation objects for repeat runs
07:45:14 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:14 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:45:14 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:14 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:14 SQL> 
07:45:14 SQL> 
07:45:14 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:45:14 SQL> --
07:45:14 SQL> -- DROP	TABLE svmc_settings ;
07:45:14 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:45:14 SQL> -- DELETE svmc_settings;
07:45:14 SQL> 
07:45:14 SQL> -- The default classification algorithm is Naive Bayes. So override
07:45:14 SQL> -- this choice to SVM using a settings table.
07:45:14 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:45:14 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:45:14 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:45:14 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:45:14 SQL> -- models.
07:45:14 SQL> --
07:45:14 SQL> 
07:45:14 SQL> -- Do this once and then comment it out.
07:45:14 SQL> -- That makes script go faster.
07:45:14 SQL> -- BEGIN
07:45:14 SQL> -- -- Populate settings table
07:45:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:14 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:45:14 SQL> --
07:45:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:14 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:45:14 SQL> --
07:45:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:14 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:45:14 SQL> --   COMMIT;
07:45:14 SQL> -- END;
07:45:14 SQL> -- /
07:45:14 SQL> 
07:45:14 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.01
07:45:14 SQL> 
07:45:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:45:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:45:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:45:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:45:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:15 SQL> 
07:45:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:45:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:15 SQL> 
07:45:15 SQL> --------------------------------
07:45:15 SQL> -- PREPARE BUILD (TRAINING) DATA
07:45:15 SQL> --
07:45:15 SQL> 
07:45:15 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:15 SQL> -- 2. Outlier Treatment and
07:45:15 SQL> -- 3. Normalization are performed below.
07:45:15 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:45:15 SQL> --    normalized here.
07:45:15 SQL> 
07:45:15 SQL> BEGIN
07:45:15   2  	-- Perform missing value treatment for all predictors
07:45:15   3  	-- create miss tables
07:45:15   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:45:15   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:45:15   6  
07:45:15   7  	-- populate miss tables
07:45:15   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:45:15   9  	  miss_table_name => 'svmc_miss_num',
07:45:15  10  	  data_table_name => '&bldtable',
07:45:15  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:15  12  
07:45:15  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:45:15  14  	  miss_table_name => 'svmc_miss_cat',
07:45:15  15  	  data_table_name => '&bldtable',
07:45:15  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:15  17  
07:45:15  18  	-- xform input data to replace missing values
07:45:15  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:15  20  	  miss_table_name => 'svmc_miss_num',
07:45:15  21  	  data_table_name => '&bldtable',
07:45:15  22  	  xform_view_name => 'xformed_build_miss_num');
07:45:15  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:15  24  	  miss_table_name => 'svmc_miss_cat',
07:45:15  25  	  data_table_name => '&bldtable',
07:45:15  26  	  xform_view_name => 'xformed_build_miss_cat');
07:45:15  27  
07:45:15  28  	-- Perform outlier treatment.
07:45:15  29  	-- create clip table
07:45:15  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:45:15  31  
07:45:15  32  	-- populate clip table
07:45:15  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:45:15  34  	  clip_table_name => 'svmc_clip',
07:45:15  35  	  data_table_name => '&bldtable',
07:45:15  36  	  tail_frac	  => 0.025,
07:45:15  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:15  38  
07:45:15  39  	-- xform input data to winsorized data
07:45:15  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:45:15  41  	  clip_table_name => 'svmc_clip',
07:45:15  42  	  data_table_name => '&bldtable',
07:45:15  43  	  xform_view_name => 'svmc_winsor');
07:45:15  44  
07:45:15  45  	-- create normalization table
07:45:15  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:45:15  47  
07:45:15  48  	-- populate normalization table based on winsorized data
07:45:15  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:45:15  50  	  norm_table_name => 'svmc_norm',
07:45:15  51  	  data_table_name => 'svmc_winsor',
07:45:15  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:15  53  
07:45:15  54  	-- normalize the original data
07:45:15  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:15  56  	  norm_table_name => 'svmc_norm',
07:45:15  57  	  data_table_name => '&bldtable',
07:45:15  58  	  xform_view_name => 'svmc_build_prep');
07:45:15  59  END;
07:45:15  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
07:45:16 SQL> 
07:45:16 SQL> ---------------------
07:45:16 SQL> -- CREATE A NEW MODEL
07:45:16 SQL> --
07:45:16 SQL> -- Cleanup old model with the same name for repeat runs
07:45:16 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:45:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:16   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
07:45:17 SQL> 
07:45:17 SQL> -- Build a new SVM Model
07:45:17 SQL> BEGIN
07:45:17   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:17   3  	  model_name	      => '&model_name',
07:45:17   4  	  mining_function     => dbms_data_mining.classification,
07:45:17   5  	  data_table_name     => 'svmc_build_prep',
07:45:17   6  	  case_id_column_name => '&case_id',
07:45:17   7  	  target_column_name  => '&target',
07:45:17   8  	  settings_table_name => 'svmc_settings');
07:45:17   9  END;
07:45:17  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.55
07:45:22 SQL> 
07:45:22 SQL> -----------------------------------------------------------------------
07:45:22 SQL> --			       APPLY/score THE MODEL
07:45:22 SQL> -----------------------------------------------------------------------
07:45:22 SQL> 
07:45:22 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:45:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:45:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:45:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:45:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:45:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:22 SQL> -----------------------
07:45:22 SQL> -- PREPARE SCORING DATA
07:45:22 SQL> --
07:45:22 SQL> -- If the data for model creation has been prepared, then the data
07:45:22 SQL> -- to be scored using the model must be prepared in the same manner
07:45:22 SQL> -- in order to obtain meaningful results.
07:45:22 SQL> --
07:45:22 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:22 SQL> -- 2. Normalization
07:45:22 SQL> -- No outlier treatment will be performed during test and apply. The
07:45:22 SQL> -- normalization step is sufficient, since the normalization parameters
07:45:22 SQL> -- already capture the effects of outlier treatment done with build data.
07:45:22 SQL> --
07:45:22 SQL> BEGIN
07:45:22   2  	-- Xform Test data to replace missing values
07:45:22   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:22   4  	  miss_table_name => 'svmc_miss_num',
07:45:22   5  	  data_table_name => '&scoretable',
07:45:22   6  	  xform_view_name => 'xformed_apply_miss_num');
07:45:22   7  
07:45:22   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:22   9  	  miss_table_name => 'svmc_miss_cat',
07:45:22  10  	  data_table_name => '&scoretable',
07:45:22  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:45:22  12  
07:45:22  13  	-- Normalize the data to be scored
07:45:22  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:22  15  	  norm_table_name => 'svmc_norm',
07:45:22  16  	  data_table_name => '&scoretable',
07:45:22  17  	  xform_view_name => 'svmc_apply_prep');
07:45:22  18  END;
07:45:22  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:45:22 SQL> 
07:45:22 SQL> -- Use same model_name used in score.sql
07:45:22 SQL> DEFINE model_name = 'forex14'
07:45:22 SQL> 
07:45:22 SQL> -- Maybe I already collected a score for this prdate.
07:45:22 SQL> -- DELETE it if I did:
07:45:22 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
07:45:22 SQL> 
07:45:22 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:45:22   2  SELECT
07:45:22   3  prdate
07:45:22   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:45:22   5  ,sysdate
07:45:22   6  ,SUBSTR(prdate,1,3)pair
07:45:22   7  ,SUBSTR(prdate,4,19)ydate
07:45:22   8  FROM svmc_apply_prep
07:45:22   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:45:22 SQL> @score1_5min_gattn.sql	2010-12-28 08:15:00
07:45:22 SQL> --
07:45:22 SQL> -- score1_5min_gattn.sql
07:45:22 SQL> --
07:45:22 SQL> 
07:45:22 SQL> CREATE OR REPLACE VIEW sme AS
07:45:22   2  SELECT
07:45:22   3  'jpy'||ydate prdate
07:45:22   4  ,NULL gattn
07:45:22   5  ,g00
07:45:22   6  ,g01
07:45:22   7  ,g02
07:45:22   8  ,g03
07:45:22   9  ,g04
07:45:22  10  ,g05
07:45:22  11  ,g06
07:45:22  12  ,g07
07:45:22  13  ,g08
07:45:22  14  FROM jpy_ms
07:45:22  15  WHERE ydate = '&1'||' '||'&2'
07:45:22  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:15:00'

View created.

Elapsed: 00:00:00.04
07:45:22 SQL> 
07:45:22 SQL> -- rpt
07:45:22 SQL> -- We should see just 1 row:
07:45:22 SQL> 
07:45:22 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:45:22 SQL> 
07:45:22 SQL> -- Build the model:
07:45:22 SQL> CREATE OR REPLACE VIEW bme AS
07:45:22   2  SELECT
07:45:22   3  'jpy'||ydate prdate
07:45:22   4  ,gattn
07:45:22   5  ,g00
07:45:22   6  ,g01
07:45:22   7  ,g02
07:45:22   8  ,g03
07:45:22   9  ,g04
07:45:22  10  ,g05
07:45:22  11  ,g06
07:45:22  12  ,g07
07:45:22  13  ,g08
07:45:22  14  FROM jpy_ms
07:45:22  15  WHERE gattn IN('nup','up')
07:45:22  16  -- Use only rows which are older than 1 day:
07:45:22  17  AND 1+ydate < '&1'||' '||'&2'
07:45:22  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:15:00'

View created.

Elapsed: 00:00:00.03
07:45:22 SQL> 
07:45:22 SQL> -- rpt
07:45:22 SQL> 
07:45:22 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9185
up	     9649

Elapsed: 00:00:00.06
07:45:23 SQL> 
07:45:23 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:10:00

Elapsed: 00:00:00.05
07:45:23 SQL> 
07:45:23 SQL> -- Now build model from bme and score sme
07:45:23 SQL> @score1gattn.sql
07:45:23 SQL> -- score1gattn.sql
07:45:23 SQL> 
07:45:23 SQL> -- Does the 1st SVM score
07:45:23 SQL> 
07:45:23 SQL> -- Fill up svmc_apply_prep
07:45:23 SQL> @score_gattn.sql
07:45:23 SQL> --
07:45:23 SQL> -- score_gattn.sql
07:45:23 SQL> --
07:45:23 SQL> 
07:45:23 SQL> -- usage: score_gattn.sql
07:45:23 SQL> 
07:45:23 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:45:23 SQL> 
07:45:23 SQL> DEFINE target	= 'gattn'
07:45:23 SQL> DEFINE model_name = 'forex14'
07:45:23 SQL> DEFINE bldtable	= 'bme'
07:45:23 SQL> DEFINE scoretable = 'sme'
07:45:23 SQL> DEFINE case_id	= 'prdate'
07:45:23 SQL> 
07:45:23 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:45:23 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:45:23 SQL> 
07:45:23 SQL> -- Builds an SVM model using pl/sql.
07:45:23 SQL> 
07:45:23 SQL> -----------------------------------------------------------------------
07:45:23 SQL> --			    BUILD THE MODEL
07:45:23 SQL> -----------------------------------------------------------------------
07:45:23 SQL> 
07:45:23 SQL> -- Cleanup old build data preparation objects for repeat runs
07:45:23 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:23 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:45:23 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:23 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:23 SQL> 
07:45:23 SQL> 
07:45:23 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:45:23 SQL> --
07:45:23 SQL> -- DROP	TABLE svmc_settings ;
07:45:23 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:45:23 SQL> -- DELETE svmc_settings;
07:45:23 SQL> 
07:45:23 SQL> -- The default classification algorithm is Naive Bayes. So override
07:45:23 SQL> -- this choice to SVM using a settings table.
07:45:23 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:45:23 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:45:23 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:45:23 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:45:23 SQL> -- models.
07:45:23 SQL> --
07:45:23 SQL> 
07:45:23 SQL> -- Do this once and then comment it out.
07:45:23 SQL> -- That makes script go faster.
07:45:23 SQL> -- BEGIN
07:45:23 SQL> -- -- Populate settings table
07:45:23 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:23 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:45:23 SQL> --
07:45:23 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:23 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:45:23 SQL> --
07:45:23 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:23 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:45:23 SQL> --   COMMIT;
07:45:23 SQL> -- END;
07:45:23 SQL> -- /
07:45:23 SQL> 
07:45:23 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:45:23 SQL> 
07:45:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:45:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:45:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:45:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:45:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:45:23 SQL> 
07:45:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:45:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:23 SQL> 
07:45:23 SQL> --------------------------------
07:45:23 SQL> -- PREPARE BUILD (TRAINING) DATA
07:45:23 SQL> --
07:45:23 SQL> 
07:45:23 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:23 SQL> -- 2. Outlier Treatment and
07:45:23 SQL> -- 3. Normalization are performed below.
07:45:23 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:45:23 SQL> --    normalized here.
07:45:23 SQL> 
07:45:23 SQL> BEGIN
07:45:23   2  	-- Perform missing value treatment for all predictors
07:45:23   3  	-- create miss tables
07:45:23   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:45:23   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:45:23   6  
07:45:23   7  	-- populate miss tables
07:45:23   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:45:23   9  	  miss_table_name => 'svmc_miss_num',
07:45:23  10  	  data_table_name => '&bldtable',
07:45:23  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:23  12  
07:45:23  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:45:23  14  	  miss_table_name => 'svmc_miss_cat',
07:45:23  15  	  data_table_name => '&bldtable',
07:45:23  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:23  17  
07:45:23  18  	-- xform input data to replace missing values
07:45:23  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:23  20  	  miss_table_name => 'svmc_miss_num',
07:45:23  21  	  data_table_name => '&bldtable',
07:45:23  22  	  xform_view_name => 'xformed_build_miss_num');
07:45:23  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:23  24  	  miss_table_name => 'svmc_miss_cat',
07:45:23  25  	  data_table_name => '&bldtable',
07:45:23  26  	  xform_view_name => 'xformed_build_miss_cat');
07:45:23  27  
07:45:23  28  	-- Perform outlier treatment.
07:45:23  29  	-- create clip table
07:45:23  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:45:23  31  
07:45:23  32  	-- populate clip table
07:45:23  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:45:23  34  	  clip_table_name => 'svmc_clip',
07:45:23  35  	  data_table_name => '&bldtable',
07:45:23  36  	  tail_frac	  => 0.025,
07:45:23  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:23  38  
07:45:23  39  	-- xform input data to winsorized data
07:45:23  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:45:23  41  	  clip_table_name => 'svmc_clip',
07:45:23  42  	  data_table_name => '&bldtable',
07:45:23  43  	  xform_view_name => 'svmc_winsor');
07:45:23  44  
07:45:23  45  	-- create normalization table
07:45:23  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:45:23  47  
07:45:23  48  	-- populate normalization table based on winsorized data
07:45:23  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:45:23  50  	  norm_table_name => 'svmc_norm',
07:45:23  51  	  data_table_name => 'svmc_winsor',
07:45:23  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:23  53  
07:45:23  54  	-- normalize the original data
07:45:23  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:23  56  	  norm_table_name => 'svmc_norm',
07:45:23  57  	  data_table_name => '&bldtable',
07:45:23  58  	  xform_view_name => 'svmc_build_prep');
07:45:23  59  END;
07:45:23  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
07:45:24 SQL> 
07:45:24 SQL> ---------------------
07:45:24 SQL> -- CREATE A NEW MODEL
07:45:24 SQL> --
07:45:24 SQL> -- Cleanup old model with the same name for repeat runs
07:45:24 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:45:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:24   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.12
07:45:25 SQL> 
07:45:25 SQL> -- Build a new SVM Model
07:45:25 SQL> BEGIN
07:45:25   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:25   3  	  model_name	      => '&model_name',
07:45:25   4  	  mining_function     => dbms_data_mining.classification,
07:45:25   5  	  data_table_name     => 'svmc_build_prep',
07:45:25   6  	  case_id_column_name => '&case_id',
07:45:25   7  	  target_column_name  => '&target',
07:45:25   8  	  settings_table_name => 'svmc_settings');
07:45:25   9  END;
07:45:25  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.72
07:45:30 SQL> 
07:45:30 SQL> -----------------------------------------------------------------------
07:45:30 SQL> --			       APPLY/score THE MODEL
07:45:30 SQL> -----------------------------------------------------------------------
07:45:30 SQL> 
07:45:30 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:45:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:45:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:45:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:45:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:30 SQL> -----------------------
07:45:30 SQL> -- PREPARE SCORING DATA
07:45:30 SQL> --
07:45:30 SQL> -- If the data for model creation has been prepared, then the data
07:45:30 SQL> -- to be scored using the model must be prepared in the same manner
07:45:30 SQL> -- in order to obtain meaningful results.
07:45:30 SQL> --
07:45:30 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:30 SQL> -- 2. Normalization
07:45:30 SQL> -- No outlier treatment will be performed during test and apply. The
07:45:30 SQL> -- normalization step is sufficient, since the normalization parameters
07:45:30 SQL> -- already capture the effects of outlier treatment done with build data.
07:45:30 SQL> --
07:45:30 SQL> BEGIN
07:45:30   2  	-- Xform Test data to replace missing values
07:45:30   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:30   4  	  miss_table_name => 'svmc_miss_num',
07:45:30   5  	  data_table_name => '&scoretable',
07:45:30   6  	  xform_view_name => 'xformed_apply_miss_num');
07:45:30   7  
07:45:30   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:30   9  	  miss_table_name => 'svmc_miss_cat',
07:45:30  10  	  data_table_name => '&scoretable',
07:45:30  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:45:30  12  
07:45:30  13  	-- Normalize the data to be scored
07:45:30  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:30  15  	  norm_table_name => 'svmc_norm',
07:45:30  16  	  data_table_name => '&scoretable',
07:45:30  17  	  xform_view_name => 'svmc_apply_prep');
07:45:30  18  END;
07:45:30  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
07:45:30 SQL> 
07:45:30 SQL> -- Use same model_name used in score.sql
07:45:30 SQL> DEFINE model_name = 'forex14'
07:45:30 SQL> 
07:45:30 SQL> -- Maybe I already collected a score for this prdate.
07:45:30 SQL> -- DELETE it if I did:
07:45:30 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:45:30 SQL> 
07:45:30 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:45:30   2  SELECT
07:45:30   3  prdate
07:45:30   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:45:30   5  ,sysdate
07:45:30   6  ,SUBSTR(prdate,1,3)pair
07:45:30   7  ,SUBSTR(prdate,4,19)ydate
07:45:30   8  FROM svmc_apply_prep
07:45:30   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:45:30 SQL> @score1_5min.sql	      2010-12-28 08:20:00
07:45:30 SQL> --
07:45:30 SQL> -- score1_5min.sql
07:45:30 SQL> --
07:45:30 SQL> 
07:45:30 SQL> CREATE OR REPLACE VIEW sme AS
07:45:30   2  SELECT
07:45:30   3  'jpy'||ydate prdate
07:45:30   4  ,NULL gatt
07:45:30   5  ,g00
07:45:30   6  ,g01
07:45:30   7  ,g02
07:45:30   8  ,g03
07:45:30   9  ,g04
07:45:30  10  ,g05
07:45:30  11  ,g06
07:45:30  12  ,g07
07:45:30  13  ,g08
07:45:30  14  FROM jpy_ms
07:45:30  15  WHERE ydate = '&1'||' '||'&2'
07:45:30  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:20:00'

View created.

Elapsed: 00:00:00.03
07:45:30 SQL> 
07:45:30 SQL> -- rpt
07:45:30 SQL> -- We should see just 1 row:
07:45:30 SQL> 
07:45:30 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:45:30 SQL> 
07:45:30 SQL> -- Build the model:
07:45:30 SQL> CREATE OR REPLACE VIEW bme AS
07:45:30   2  SELECT
07:45:30   3  'jpy'||ydate prdate
07:45:30   4  ,gatt
07:45:30   5  ,g00
07:45:30   6  ,g01
07:45:30   7  ,g02
07:45:30   8  ,g03
07:45:30   9  ,g04
07:45:30  10  ,g05
07:45:30  11  ,g06
07:45:30  12  ,g07
07:45:30  13  ,g08
07:45:30  14  FROM jpy_ms
07:45:30  15  WHERE gatt IN('nup','up')
07:45:30  16  -- Use only rows which are older than 1 day:
07:45:30  17  AND 1+ydate < '&1'||' '||'&2'
07:45:30  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:20:00'

View created.

Elapsed: 00:00:00.02
07:45:30 SQL> 
07:45:30 SQL> -- rpt
07:45:30 SQL> 
07:45:30 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8894

Elapsed: 00:00:00.06
07:45:30 SQL> 
07:45:30 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:15:00

Elapsed: 00:00:00.05
07:45:30 SQL> 
07:45:30 SQL> -- Now build model from bme and score sme
07:45:30 SQL> @score1.sql
07:45:30 SQL> -- score1.sql
07:45:30 SQL> 
07:45:30 SQL> -- Does the 1st SVM score
07:45:30 SQL> 
07:45:30 SQL> -- Fill up svmc_apply_prep
07:45:30 SQL> @score.sql
07:45:30 SQL> --
07:45:30 SQL> -- score.sql
07:45:30 SQL> --
07:45:30 SQL> 
07:45:30 SQL> -- usage: score.sql
07:45:30 SQL> 
07:45:30 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:45:30 SQL> 
07:45:30 SQL> DEFINE target	= 'gatt'
07:45:30 SQL> DEFINE model_name = 'forex14'
07:45:30 SQL> DEFINE bldtable	= 'bme'
07:45:30 SQL> DEFINE scoretable = 'sme'
07:45:30 SQL> DEFINE case_id	= 'prdate'
07:45:30 SQL> 
07:45:30 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:45:30 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:45:30 SQL> 
07:45:30 SQL> -- Builds an SVM model using pl/sql.
07:45:30 SQL> 
07:45:30 SQL> -----------------------------------------------------------------------
07:45:30 SQL> --			    BUILD THE MODEL
07:45:30 SQL> -----------------------------------------------------------------------
07:45:30 SQL> 
07:45:30 SQL> -- Cleanup old build data preparation objects for repeat runs
07:45:30 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:30 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:45:30 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:30 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:30 SQL> 
07:45:30 SQL> 
07:45:30 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:45:30 SQL> --
07:45:30 SQL> -- DROP	TABLE svmc_settings ;
07:45:30 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:45:30 SQL> -- DELETE svmc_settings;
07:45:30 SQL> 
07:45:30 SQL> -- The default classification algorithm is Naive Bayes. So override
07:45:30 SQL> -- this choice to SVM using a settings table.
07:45:30 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:45:30 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:45:30 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:45:30 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:45:30 SQL> -- models.
07:45:30 SQL> --
07:45:30 SQL> 
07:45:30 SQL> -- Do this once and then comment it out.
07:45:30 SQL> -- That makes script go faster.
07:45:30 SQL> -- BEGIN
07:45:30 SQL> -- -- Populate settings table
07:45:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:30 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:45:30 SQL> --
07:45:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:30 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:45:30 SQL> --
07:45:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:30 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:45:30 SQL> --   COMMIT;
07:45:30 SQL> -- END;
07:45:30 SQL> -- /
07:45:30 SQL> 
07:45:30 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.01
07:45:30 SQL> 
07:45:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:45:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:45:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:45:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:30 SQL> 
07:45:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:45:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:30 SQL> 
07:45:30 SQL> --------------------------------
07:45:30 SQL> -- PREPARE BUILD (TRAINING) DATA
07:45:30 SQL> --
07:45:30 SQL> 
07:45:30 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:30 SQL> -- 2. Outlier Treatment and
07:45:30 SQL> -- 3. Normalization are performed below.
07:45:30 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:45:30 SQL> --    normalized here.
07:45:30 SQL> 
07:45:30 SQL> BEGIN
07:45:30   2  	-- Perform missing value treatment for all predictors
07:45:30   3  	-- create miss tables
07:45:30   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:45:30   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:45:30   6  
07:45:30   7  	-- populate miss tables
07:45:30   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:45:30   9  	  miss_table_name => 'svmc_miss_num',
07:45:30  10  	  data_table_name => '&bldtable',
07:45:30  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:30  12  
07:45:30  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:45:30  14  	  miss_table_name => 'svmc_miss_cat',
07:45:30  15  	  data_table_name => '&bldtable',
07:45:30  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:30  17  
07:45:30  18  	-- xform input data to replace missing values
07:45:30  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:30  20  	  miss_table_name => 'svmc_miss_num',
07:45:30  21  	  data_table_name => '&bldtable',
07:45:30  22  	  xform_view_name => 'xformed_build_miss_num');
07:45:30  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:30  24  	  miss_table_name => 'svmc_miss_cat',
07:45:30  25  	  data_table_name => '&bldtable',
07:45:30  26  	  xform_view_name => 'xformed_build_miss_cat');
07:45:30  27  
07:45:30  28  	-- Perform outlier treatment.
07:45:30  29  	-- create clip table
07:45:30  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:45:30  31  
07:45:30  32  	-- populate clip table
07:45:30  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:45:30  34  	  clip_table_name => 'svmc_clip',
07:45:30  35  	  data_table_name => '&bldtable',
07:45:30  36  	  tail_frac	  => 0.025,
07:45:30  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:30  38  
07:45:30  39  	-- xform input data to winsorized data
07:45:30  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:45:30  41  	  clip_table_name => 'svmc_clip',
07:45:30  42  	  data_table_name => '&bldtable',
07:45:30  43  	  xform_view_name => 'svmc_winsor');
07:45:30  44  
07:45:30  45  	-- create normalization table
07:45:30  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:45:30  47  
07:45:30  48  	-- populate normalization table based on winsorized data
07:45:30  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:45:30  50  	  norm_table_name => 'svmc_norm',
07:45:30  51  	  data_table_name => 'svmc_winsor',
07:45:30  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:30  53  
07:45:30  54  	-- normalize the original data
07:45:30  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:30  56  	  norm_table_name => 'svmc_norm',
07:45:30  57  	  data_table_name => '&bldtable',
07:45:30  58  	  xform_view_name => 'svmc_build_prep');
07:45:30  59  END;
07:45:30  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
07:45:31 SQL> 
07:45:31 SQL> ---------------------
07:45:31 SQL> -- CREATE A NEW MODEL
07:45:31 SQL> --
07:45:31 SQL> -- Cleanup old model with the same name for repeat runs
07:45:31 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:45:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:31   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
07:45:32 SQL> 
07:45:32 SQL> -- Build a new SVM Model
07:45:32 SQL> BEGIN
07:45:32   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:32   3  	  model_name	      => '&model_name',
07:45:32   4  	  mining_function     => dbms_data_mining.classification,
07:45:32   5  	  data_table_name     => 'svmc_build_prep',
07:45:32   6  	  case_id_column_name => '&case_id',
07:45:32   7  	  target_column_name  => '&target',
07:45:32   8  	  settings_table_name => 'svmc_settings');
07:45:32   9  END;
07:45:32  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.67
07:45:38 SQL> 
07:45:38 SQL> -----------------------------------------------------------------------
07:45:38 SQL> --			       APPLY/score THE MODEL
07:45:38 SQL> -----------------------------------------------------------------------
07:45:38 SQL> 
07:45:38 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:38 SQL> -----------------------
07:45:38 SQL> -- PREPARE SCORING DATA
07:45:38 SQL> --
07:45:38 SQL> -- If the data for model creation has been prepared, then the data
07:45:38 SQL> -- to be scored using the model must be prepared in the same manner
07:45:38 SQL> -- in order to obtain meaningful results.
07:45:38 SQL> --
07:45:38 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:38 SQL> -- 2. Normalization
07:45:38 SQL> -- No outlier treatment will be performed during test and apply. The
07:45:38 SQL> -- normalization step is sufficient, since the normalization parameters
07:45:38 SQL> -- already capture the effects of outlier treatment done with build data.
07:45:38 SQL> --
07:45:38 SQL> BEGIN
07:45:38   2  	-- Xform Test data to replace missing values
07:45:38   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:38   4  	  miss_table_name => 'svmc_miss_num',
07:45:38   5  	  data_table_name => '&scoretable',
07:45:38   6  	  xform_view_name => 'xformed_apply_miss_num');
07:45:38   7  
07:45:38   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:38   9  	  miss_table_name => 'svmc_miss_cat',
07:45:38  10  	  data_table_name => '&scoretable',
07:45:38  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:45:38  12  
07:45:38  13  	-- Normalize the data to be scored
07:45:38  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:38  15  	  norm_table_name => 'svmc_norm',
07:45:38  16  	  data_table_name => '&scoretable',
07:45:38  17  	  xform_view_name => 'svmc_apply_prep');
07:45:38  18  END;
07:45:38  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:45:38 SQL> 
07:45:38 SQL> -- Use same model_name used in score.sql
07:45:38 SQL> DEFINE model_name = 'forex14'
07:45:38 SQL> 
07:45:38 SQL> -- Maybe I already collected a score for this prdate.
07:45:38 SQL> -- DELETE it if I did:
07:45:38 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:45:38 SQL> 
07:45:38 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:45:38   2  SELECT
07:45:38   3  prdate
07:45:38   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:45:38   5  ,sysdate
07:45:38   6  ,SUBSTR(prdate,1,3)pair
07:45:38   7  ,SUBSTR(prdate,4,19)ydate
07:45:38   8  FROM svmc_apply_prep
07:45:38   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:45:38 SQL> @score1_5min_gattn.sql	2010-12-28 08:20:00
07:45:38 SQL> --
07:45:38 SQL> -- score1_5min_gattn.sql
07:45:38 SQL> --
07:45:38 SQL> 
07:45:38 SQL> CREATE OR REPLACE VIEW sme AS
07:45:38   2  SELECT
07:45:38   3  'jpy'||ydate prdate
07:45:38   4  ,NULL gattn
07:45:38   5  ,g00
07:45:38   6  ,g01
07:45:38   7  ,g02
07:45:38   8  ,g03
07:45:38   9  ,g04
07:45:38  10  ,g05
07:45:38  11  ,g06
07:45:38  12  ,g07
07:45:38  13  ,g08
07:45:38  14  FROM jpy_ms
07:45:38  15  WHERE ydate = '&1'||' '||'&2'
07:45:38  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:20:00'

View created.

Elapsed: 00:00:00.03
07:45:38 SQL> 
07:45:38 SQL> -- rpt
07:45:38 SQL> -- We should see just 1 row:
07:45:38 SQL> 
07:45:38 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:45:38 SQL> 
07:45:38 SQL> -- Build the model:
07:45:38 SQL> CREATE OR REPLACE VIEW bme AS
07:45:38   2  SELECT
07:45:38   3  'jpy'||ydate prdate
07:45:38   4  ,gattn
07:45:38   5  ,g00
07:45:38   6  ,g01
07:45:38   7  ,g02
07:45:38   8  ,g03
07:45:38   9  ,g04
07:45:38  10  ,g05
07:45:38  11  ,g06
07:45:38  12  ,g07
07:45:38  13  ,g08
07:45:38  14  FROM jpy_ms
07:45:38  15  WHERE gattn IN('nup','up')
07:45:38  16  -- Use only rows which are older than 1 day:
07:45:38  17  AND 1+ydate < '&1'||' '||'&2'
07:45:38  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:20:00'

View created.

Elapsed: 00:00:00.03
07:45:38 SQL> 
07:45:38 SQL> -- rpt
07:45:38 SQL> 
07:45:38 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9186
up	     9649

Elapsed: 00:00:00.06
07:45:38 SQL> 
07:45:38 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:15:00

Elapsed: 00:00:00.04
07:45:38 SQL> 
07:45:38 SQL> -- Now build model from bme and score sme
07:45:38 SQL> @score1gattn.sql
07:45:38 SQL> -- score1gattn.sql
07:45:38 SQL> 
07:45:38 SQL> -- Does the 1st SVM score
07:45:38 SQL> 
07:45:38 SQL> -- Fill up svmc_apply_prep
07:45:38 SQL> @score_gattn.sql
07:45:38 SQL> --
07:45:38 SQL> -- score_gattn.sql
07:45:38 SQL> --
07:45:38 SQL> 
07:45:38 SQL> -- usage: score_gattn.sql
07:45:38 SQL> 
07:45:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:45:38 SQL> 
07:45:38 SQL> DEFINE target	= 'gattn'
07:45:38 SQL> DEFINE model_name = 'forex14'
07:45:38 SQL> DEFINE bldtable	= 'bme'
07:45:38 SQL> DEFINE scoretable = 'sme'
07:45:38 SQL> DEFINE case_id	= 'prdate'
07:45:38 SQL> 
07:45:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:45:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:45:38 SQL> 
07:45:38 SQL> -- Builds an SVM model using pl/sql.
07:45:38 SQL> 
07:45:38 SQL> -----------------------------------------------------------------------
07:45:38 SQL> --			    BUILD THE MODEL
07:45:38 SQL> -----------------------------------------------------------------------
07:45:38 SQL> 
07:45:38 SQL> -- Cleanup old build data preparation objects for repeat runs
07:45:38 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:45:38 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:38 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:38 SQL> 
07:45:38 SQL> 
07:45:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:45:38 SQL> --
07:45:38 SQL> -- DROP	TABLE svmc_settings ;
07:45:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:45:38 SQL> -- DELETE svmc_settings;
07:45:38 SQL> 
07:45:38 SQL> -- The default classification algorithm is Naive Bayes. So override
07:45:38 SQL> -- this choice to SVM using a settings table.
07:45:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:45:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:45:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:45:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:45:38 SQL> -- models.
07:45:38 SQL> --
07:45:38 SQL> 
07:45:38 SQL> -- Do this once and then comment it out.
07:45:38 SQL> -- That makes script go faster.
07:45:38 SQL> -- BEGIN
07:45:38 SQL> -- -- Populate settings table
07:45:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:45:38 SQL> --
07:45:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:45:38 SQL> --
07:45:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:45:38 SQL> --   COMMIT;
07:45:38 SQL> -- END;
07:45:38 SQL> -- /
07:45:38 SQL> 
07:45:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:45:38 SQL> 
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:38 SQL> 
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:38 SQL> 
07:45:38 SQL> --------------------------------
07:45:38 SQL> -- PREPARE BUILD (TRAINING) DATA
07:45:38 SQL> --
07:45:38 SQL> 
07:45:38 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:38 SQL> -- 2. Outlier Treatment and
07:45:38 SQL> -- 3. Normalization are performed below.
07:45:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:45:38 SQL> --    normalized here.
07:45:38 SQL> 
07:45:38 SQL> BEGIN
07:45:38   2  	-- Perform missing value treatment for all predictors
07:45:38   3  	-- create miss tables
07:45:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:45:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:45:38   6  
07:45:38   7  	-- populate miss tables
07:45:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:45:38   9  	  miss_table_name => 'svmc_miss_num',
07:45:38  10  	  data_table_name => '&bldtable',
07:45:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:38  12  
07:45:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:45:38  14  	  miss_table_name => 'svmc_miss_cat',
07:45:38  15  	  data_table_name => '&bldtable',
07:45:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:38  17  
07:45:38  18  	-- xform input data to replace missing values
07:45:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:38  20  	  miss_table_name => 'svmc_miss_num',
07:45:38  21  	  data_table_name => '&bldtable',
07:45:38  22  	  xform_view_name => 'xformed_build_miss_num');
07:45:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:38  24  	  miss_table_name => 'svmc_miss_cat',
07:45:38  25  	  data_table_name => '&bldtable',
07:45:38  26  	  xform_view_name => 'xformed_build_miss_cat');
07:45:38  27  
07:45:38  28  	-- Perform outlier treatment.
07:45:38  29  	-- create clip table
07:45:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:45:38  31  
07:45:38  32  	-- populate clip table
07:45:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:45:38  34  	  clip_table_name => 'svmc_clip',
07:45:38  35  	  data_table_name => '&bldtable',
07:45:38  36  	  tail_frac	  => 0.025,
07:45:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:38  38  
07:45:38  39  	-- xform input data to winsorized data
07:45:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:45:38  41  	  clip_table_name => 'svmc_clip',
07:45:38  42  	  data_table_name => '&bldtable',
07:45:38  43  	  xform_view_name => 'svmc_winsor');
07:45:38  44  
07:45:38  45  	-- create normalization table
07:45:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:45:38  47  
07:45:38  48  	-- populate normalization table based on winsorized data
07:45:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:45:38  50  	  norm_table_name => 'svmc_norm',
07:45:38  51  	  data_table_name => 'svmc_winsor',
07:45:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:38  53  
07:45:38  54  	-- normalize the original data
07:45:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:38  56  	  norm_table_name => 'svmc_norm',
07:45:38  57  	  data_table_name => '&bldtable',
07:45:38  58  	  xform_view_name => 'svmc_build_prep');
07:45:38  59  END;
07:45:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
07:45:39 SQL> 
07:45:39 SQL> ---------------------
07:45:39 SQL> -- CREATE A NEW MODEL
07:45:39 SQL> --
07:45:39 SQL> -- Cleanup old model with the same name for repeat runs
07:45:39 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:45:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:39   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.16
07:45:40 SQL> 
07:45:40 SQL> -- Build a new SVM Model
07:45:40 SQL> BEGIN
07:45:40   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:40   3  	  model_name	      => '&model_name',
07:45:40   4  	  mining_function     => dbms_data_mining.classification,
07:45:40   5  	  data_table_name     => 'svmc_build_prep',
07:45:40   6  	  case_id_column_name => '&case_id',
07:45:40   7  	  target_column_name  => '&target',
07:45:40   8  	  settings_table_name => 'svmc_settings');
07:45:40   9  END;
07:45:40  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.51
07:45:46 SQL> 
07:45:46 SQL> -----------------------------------------------------------------------
07:45:46 SQL> --			       APPLY/score THE MODEL
07:45:46 SQL> -----------------------------------------------------------------------
07:45:46 SQL> 
07:45:46 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:46 SQL> -----------------------
07:45:46 SQL> -- PREPARE SCORING DATA
07:45:46 SQL> --
07:45:46 SQL> -- If the data for model creation has been prepared, then the data
07:45:46 SQL> -- to be scored using the model must be prepared in the same manner
07:45:46 SQL> -- in order to obtain meaningful results.
07:45:46 SQL> --
07:45:46 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:46 SQL> -- 2. Normalization
07:45:46 SQL> -- No outlier treatment will be performed during test and apply. The
07:45:46 SQL> -- normalization step is sufficient, since the normalization parameters
07:45:46 SQL> -- already capture the effects of outlier treatment done with build data.
07:45:46 SQL> --
07:45:46 SQL> BEGIN
07:45:46   2  	-- Xform Test data to replace missing values
07:45:46   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:46   4  	  miss_table_name => 'svmc_miss_num',
07:45:46   5  	  data_table_name => '&scoretable',
07:45:46   6  	  xform_view_name => 'xformed_apply_miss_num');
07:45:46   7  
07:45:46   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:46   9  	  miss_table_name => 'svmc_miss_cat',
07:45:46  10  	  data_table_name => '&scoretable',
07:45:46  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:45:46  12  
07:45:46  13  	-- Normalize the data to be scored
07:45:46  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:46  15  	  norm_table_name => 'svmc_norm',
07:45:46  16  	  data_table_name => '&scoretable',
07:45:46  17  	  xform_view_name => 'svmc_apply_prep');
07:45:46  18  END;
07:45:46  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:45:46 SQL> 
07:45:46 SQL> -- Use same model_name used in score.sql
07:45:46 SQL> DEFINE model_name = 'forex14'
07:45:46 SQL> 
07:45:46 SQL> -- Maybe I already collected a score for this prdate.
07:45:46 SQL> -- DELETE it if I did:
07:45:46 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:45:46 SQL> 
07:45:46 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:45:46   2  SELECT
07:45:46   3  prdate
07:45:46   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:45:46   5  ,sysdate
07:45:46   6  ,SUBSTR(prdate,1,3)pair
07:45:46   7  ,SUBSTR(prdate,4,19)ydate
07:45:46   8  FROM svmc_apply_prep
07:45:46   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:45:46 SQL> @score1_5min.sql	      2010-12-28 08:25:00
07:45:46 SQL> --
07:45:46 SQL> -- score1_5min.sql
07:45:46 SQL> --
07:45:46 SQL> 
07:45:46 SQL> CREATE OR REPLACE VIEW sme AS
07:45:46   2  SELECT
07:45:46   3  'jpy'||ydate prdate
07:45:46   4  ,NULL gatt
07:45:46   5  ,g00
07:45:46   6  ,g01
07:45:46   7  ,g02
07:45:46   8  ,g03
07:45:46   9  ,g04
07:45:46  10  ,g05
07:45:46  11  ,g06
07:45:46  12  ,g07
07:45:46  13  ,g08
07:45:46  14  FROM jpy_ms
07:45:46  15  WHERE ydate = '&1'||' '||'&2'
07:45:46  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:25:00'

View created.

Elapsed: 00:00:00.03
07:45:46 SQL> 
07:45:46 SQL> -- rpt
07:45:46 SQL> -- We should see just 1 row:
07:45:46 SQL> 
07:45:46 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:45:46 SQL> 
07:45:46 SQL> -- Build the model:
07:45:46 SQL> CREATE OR REPLACE VIEW bme AS
07:45:46   2  SELECT
07:45:46   3  'jpy'||ydate prdate
07:45:46   4  ,gatt
07:45:46   5  ,g00
07:45:46   6  ,g01
07:45:46   7  ,g02
07:45:46   8  ,g03
07:45:46   9  ,g04
07:45:46  10  ,g05
07:45:46  11  ,g06
07:45:46  12  ,g07
07:45:46  13  ,g08
07:45:46  14  FROM jpy_ms
07:45:46  15  WHERE gatt IN('nup','up')
07:45:46  16  -- Use only rows which are older than 1 day:
07:45:46  17  AND 1+ydate < '&1'||' '||'&2'
07:45:46  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:25:00'

View created.

Elapsed: 00:00:00.03
07:45:46 SQL> 
07:45:46 SQL> -- rpt
07:45:46 SQL> 
07:45:46 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8895

Elapsed: 00:00:00.06
07:45:46 SQL> 
07:45:46 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:20:00

Elapsed: 00:00:00.05
07:45:46 SQL> 
07:45:46 SQL> -- Now build model from bme and score sme
07:45:46 SQL> @score1.sql
07:45:46 SQL> -- score1.sql
07:45:46 SQL> 
07:45:46 SQL> -- Does the 1st SVM score
07:45:46 SQL> 
07:45:46 SQL> -- Fill up svmc_apply_prep
07:45:46 SQL> @score.sql
07:45:46 SQL> --
07:45:46 SQL> -- score.sql
07:45:46 SQL> --
07:45:46 SQL> 
07:45:46 SQL> -- usage: score.sql
07:45:46 SQL> 
07:45:46 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:45:46 SQL> 
07:45:46 SQL> DEFINE target	= 'gatt'
07:45:46 SQL> DEFINE model_name = 'forex14'
07:45:46 SQL> DEFINE bldtable	= 'bme'
07:45:46 SQL> DEFINE scoretable = 'sme'
07:45:46 SQL> DEFINE case_id	= 'prdate'
07:45:46 SQL> 
07:45:46 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:45:46 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:45:46 SQL> 
07:45:46 SQL> -- Builds an SVM model using pl/sql.
07:45:46 SQL> 
07:45:46 SQL> -----------------------------------------------------------------------
07:45:46 SQL> --			    BUILD THE MODEL
07:45:46 SQL> -----------------------------------------------------------------------
07:45:46 SQL> 
07:45:46 SQL> -- Cleanup old build data preparation objects for repeat runs
07:45:46 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:46 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
07:45:46 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:46 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:46 SQL> 
07:45:46 SQL> 
07:45:46 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:45:46 SQL> --
07:45:46 SQL> -- DROP	TABLE svmc_settings ;
07:45:46 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:45:46 SQL> -- DELETE svmc_settings;
07:45:46 SQL> 
07:45:46 SQL> -- The default classification algorithm is Naive Bayes. So override
07:45:46 SQL> -- this choice to SVM using a settings table.
07:45:46 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:45:46 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:45:46 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:45:46 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:45:46 SQL> -- models.
07:45:46 SQL> --
07:45:46 SQL> 
07:45:46 SQL> -- Do this once and then comment it out.
07:45:46 SQL> -- That makes script go faster.
07:45:46 SQL> -- BEGIN
07:45:46 SQL> -- -- Populate settings table
07:45:46 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:46 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:45:46 SQL> --
07:45:46 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:46 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:45:46 SQL> --
07:45:46 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:46 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:45:46 SQL> --   COMMIT;
07:45:46 SQL> -- END;
07:45:46 SQL> -- /
07:45:46 SQL> 
07:45:46 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:45:46 SQL> 
07:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:46 SQL> 
07:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:46 SQL> 
07:45:46 SQL> --------------------------------
07:45:46 SQL> -- PREPARE BUILD (TRAINING) DATA
07:45:46 SQL> --
07:45:46 SQL> 
07:45:46 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:46 SQL> -- 2. Outlier Treatment and
07:45:46 SQL> -- 3. Normalization are performed below.
07:45:46 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:45:46 SQL> --    normalized here.
07:45:46 SQL> 
07:45:46 SQL> BEGIN
07:45:46   2  	-- Perform missing value treatment for all predictors
07:45:46   3  	-- create miss tables
07:45:46   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:45:46   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:45:46   6  
07:45:46   7  	-- populate miss tables
07:45:46   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:45:46   9  	  miss_table_name => 'svmc_miss_num',
07:45:46  10  	  data_table_name => '&bldtable',
07:45:46  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:46  12  
07:45:46  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:45:46  14  	  miss_table_name => 'svmc_miss_cat',
07:45:46  15  	  data_table_name => '&bldtable',
07:45:46  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:46  17  
07:45:46  18  	-- xform input data to replace missing values
07:45:46  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:46  20  	  miss_table_name => 'svmc_miss_num',
07:45:46  21  	  data_table_name => '&bldtable',
07:45:46  22  	  xform_view_name => 'xformed_build_miss_num');
07:45:46  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:46  24  	  miss_table_name => 'svmc_miss_cat',
07:45:46  25  	  data_table_name => '&bldtable',
07:45:46  26  	  xform_view_name => 'xformed_build_miss_cat');
07:45:46  27  
07:45:46  28  	-- Perform outlier treatment.
07:45:46  29  	-- create clip table
07:45:46  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:45:46  31  
07:45:46  32  	-- populate clip table
07:45:46  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:45:46  34  	  clip_table_name => 'svmc_clip',
07:45:46  35  	  data_table_name => '&bldtable',
07:45:46  36  	  tail_frac	  => 0.025,
07:45:46  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:46  38  
07:45:46  39  	-- xform input data to winsorized data
07:45:46  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:45:46  41  	  clip_table_name => 'svmc_clip',
07:45:46  42  	  data_table_name => '&bldtable',
07:45:46  43  	  xform_view_name => 'svmc_winsor');
07:45:46  44  
07:45:46  45  	-- create normalization table
07:45:46  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:45:46  47  
07:45:46  48  	-- populate normalization table based on winsorized data
07:45:46  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:45:46  50  	  norm_table_name => 'svmc_norm',
07:45:46  51  	  data_table_name => 'svmc_winsor',
07:45:46  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:46  53  
07:45:46  54  	-- normalize the original data
07:45:46  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:46  56  	  norm_table_name => 'svmc_norm',
07:45:46  57  	  data_table_name => '&bldtable',
07:45:46  58  	  xform_view_name => 'svmc_build_prep');
07:45:46  59  END;
07:45:46  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
07:45:47 SQL> 
07:45:47 SQL> ---------------------
07:45:47 SQL> -- CREATE A NEW MODEL
07:45:47 SQL> --
07:45:47 SQL> -- Cleanup old model with the same name for repeat runs
07:45:47 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:45:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:47   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
07:45:48 SQL> 
07:45:48 SQL> -- Build a new SVM Model
07:45:48 SQL> BEGIN
07:45:48   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:48   3  	  model_name	      => '&model_name',
07:45:48   4  	  mining_function     => dbms_data_mining.classification,
07:45:48   5  	  data_table_name     => 'svmc_build_prep',
07:45:48   6  	  case_id_column_name => '&case_id',
07:45:48   7  	  target_column_name  => '&target',
07:45:48   8  	  settings_table_name => 'svmc_settings');
07:45:48   9  END;
07:45:48  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.60
07:45:54 SQL> 
07:45:54 SQL> -----------------------------------------------------------------------
07:45:54 SQL> --			       APPLY/score THE MODEL
07:45:54 SQL> -----------------------------------------------------------------------
07:45:54 SQL> 
07:45:54 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:45:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:45:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:45:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:45:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:45:54 SQL> -----------------------
07:45:54 SQL> -- PREPARE SCORING DATA
07:45:54 SQL> --
07:45:54 SQL> -- If the data for model creation has been prepared, then the data
07:45:54 SQL> -- to be scored using the model must be prepared in the same manner
07:45:54 SQL> -- in order to obtain meaningful results.
07:45:54 SQL> --
07:45:54 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:54 SQL> -- 2. Normalization
07:45:54 SQL> -- No outlier treatment will be performed during test and apply. The
07:45:54 SQL> -- normalization step is sufficient, since the normalization parameters
07:45:54 SQL> -- already capture the effects of outlier treatment done with build data.
07:45:54 SQL> --
07:45:54 SQL> BEGIN
07:45:54   2  	-- Xform Test data to replace missing values
07:45:54   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:54   4  	  miss_table_name => 'svmc_miss_num',
07:45:54   5  	  data_table_name => '&scoretable',
07:45:54   6  	  xform_view_name => 'xformed_apply_miss_num');
07:45:54   7  
07:45:54   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:54   9  	  miss_table_name => 'svmc_miss_cat',
07:45:54  10  	  data_table_name => '&scoretable',
07:45:54  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:45:54  12  
07:45:54  13  	-- Normalize the data to be scored
07:45:54  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:54  15  	  norm_table_name => 'svmc_norm',
07:45:54  16  	  data_table_name => '&scoretable',
07:45:54  17  	  xform_view_name => 'svmc_apply_prep');
07:45:54  18  END;
07:45:54  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:45:54 SQL> 
07:45:54 SQL> -- Use same model_name used in score.sql
07:45:54 SQL> DEFINE model_name = 'forex14'
07:45:54 SQL> 
07:45:54 SQL> -- Maybe I already collected a score for this prdate.
07:45:54 SQL> -- DELETE it if I did:
07:45:54 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:45:54 SQL> 
07:45:54 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:45:54   2  SELECT
07:45:54   3  prdate
07:45:54   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:45:54   5  ,sysdate
07:45:54   6  ,SUBSTR(prdate,1,3)pair
07:45:54   7  ,SUBSTR(prdate,4,19)ydate
07:45:54   8  FROM svmc_apply_prep
07:45:54   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:45:54 SQL> @score1_5min_gattn.sql	2010-12-28 08:25:00
07:45:54 SQL> --
07:45:54 SQL> -- score1_5min_gattn.sql
07:45:54 SQL> --
07:45:54 SQL> 
07:45:54 SQL> CREATE OR REPLACE VIEW sme AS
07:45:54   2  SELECT
07:45:54   3  'jpy'||ydate prdate
07:45:54   4  ,NULL gattn
07:45:54   5  ,g00
07:45:54   6  ,g01
07:45:54   7  ,g02
07:45:54   8  ,g03
07:45:54   9  ,g04
07:45:54  10  ,g05
07:45:54  11  ,g06
07:45:54  12  ,g07
07:45:54  13  ,g08
07:45:54  14  FROM jpy_ms
07:45:54  15  WHERE ydate = '&1'||' '||'&2'
07:45:54  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:25:00'

View created.

Elapsed: 00:00:00.03
07:45:54 SQL> 
07:45:54 SQL> -- rpt
07:45:54 SQL> -- We should see just 1 row:
07:45:54 SQL> 
07:45:54 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:45:54 SQL> 
07:45:54 SQL> -- Build the model:
07:45:54 SQL> CREATE OR REPLACE VIEW bme AS
07:45:54   2  SELECT
07:45:54   3  'jpy'||ydate prdate
07:45:54   4  ,gattn
07:45:54   5  ,g00
07:45:54   6  ,g01
07:45:54   7  ,g02
07:45:54   8  ,g03
07:45:54   9  ,g04
07:45:54  10  ,g05
07:45:54  11  ,g06
07:45:54  12  ,g07
07:45:54  13  ,g08
07:45:54  14  FROM jpy_ms
07:45:54  15  WHERE gattn IN('nup','up')
07:45:54  16  -- Use only rows which are older than 1 day:
07:45:54  17  AND 1+ydate < '&1'||' '||'&2'
07:45:54  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:25:00'

View created.

Elapsed: 00:00:00.04
07:45:54 SQL> 
07:45:54 SQL> -- rpt
07:45:54 SQL> 
07:45:54 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9187
up	     9649

Elapsed: 00:00:00.06
07:45:54 SQL> 
07:45:54 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:20:00

Elapsed: 00:00:00.05
07:45:54 SQL> 
07:45:54 SQL> -- Now build model from bme and score sme
07:45:54 SQL> @score1gattn.sql
07:45:54 SQL> -- score1gattn.sql
07:45:54 SQL> 
07:45:54 SQL> -- Does the 1st SVM score
07:45:54 SQL> 
07:45:54 SQL> -- Fill up svmc_apply_prep
07:45:54 SQL> @score_gattn.sql
07:45:54 SQL> --
07:45:54 SQL> -- score_gattn.sql
07:45:54 SQL> --
07:45:54 SQL> 
07:45:54 SQL> -- usage: score_gattn.sql
07:45:54 SQL> 
07:45:54 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:45:54 SQL> 
07:45:54 SQL> DEFINE target	= 'gattn'
07:45:54 SQL> DEFINE model_name = 'forex14'
07:45:54 SQL> DEFINE bldtable	= 'bme'
07:45:54 SQL> DEFINE scoretable = 'sme'
07:45:54 SQL> DEFINE case_id	= 'prdate'
07:45:54 SQL> 
07:45:54 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:45:54 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:45:54 SQL> 
07:45:54 SQL> -- Builds an SVM model using pl/sql.
07:45:54 SQL> 
07:45:54 SQL> -----------------------------------------------------------------------
07:45:54 SQL> --			    BUILD THE MODEL
07:45:54 SQL> -----------------------------------------------------------------------
07:45:54 SQL> 
07:45:54 SQL> -- Cleanup old build data preparation objects for repeat runs
07:45:54 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:54 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:45:54 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:54 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:45:54 SQL> 
07:45:54 SQL> 
07:45:54 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:45:54 SQL> --
07:45:54 SQL> -- DROP	TABLE svmc_settings ;
07:45:54 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:45:54 SQL> -- DELETE svmc_settings;
07:45:54 SQL> 
07:45:54 SQL> -- The default classification algorithm is Naive Bayes. So override
07:45:54 SQL> -- this choice to SVM using a settings table.
07:45:54 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:45:54 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:45:54 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:45:54 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:45:54 SQL> -- models.
07:45:54 SQL> --
07:45:54 SQL> 
07:45:54 SQL> -- Do this once and then comment it out.
07:45:54 SQL> -- That makes script go faster.
07:45:54 SQL> -- BEGIN
07:45:54 SQL> -- -- Populate settings table
07:45:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:54 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:45:54 SQL> --
07:45:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:54 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:45:54 SQL> --
07:45:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:54 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:45:54 SQL> --   COMMIT;
07:45:54 SQL> -- END;
07:45:54 SQL> -- /
07:45:54 SQL> 
07:45:54 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:45:54 SQL> 
07:45:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:45:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:45:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:45:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:45:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:45:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:45:55 SQL> 
07:45:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:45:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:45:55 SQL> 
07:45:55 SQL> --------------------------------
07:45:55 SQL> -- PREPARE BUILD (TRAINING) DATA
07:45:55 SQL> --
07:45:55 SQL> 
07:45:55 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:55 SQL> -- 2. Outlier Treatment and
07:45:55 SQL> -- 3. Normalization are performed below.
07:45:55 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:45:55 SQL> --    normalized here.
07:45:55 SQL> 
07:45:55 SQL> BEGIN
07:45:55   2  	-- Perform missing value treatment for all predictors
07:45:55   3  	-- create miss tables
07:45:55   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:45:55   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:45:55   6  
07:45:55   7  	-- populate miss tables
07:45:55   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:45:55   9  	  miss_table_name => 'svmc_miss_num',
07:45:55  10  	  data_table_name => '&bldtable',
07:45:55  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:55  12  
07:45:55  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:45:55  14  	  miss_table_name => 'svmc_miss_cat',
07:45:55  15  	  data_table_name => '&bldtable',
07:45:55  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:55  17  
07:45:55  18  	-- xform input data to replace missing values
07:45:55  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:55  20  	  miss_table_name => 'svmc_miss_num',
07:45:55  21  	  data_table_name => '&bldtable',
07:45:55  22  	  xform_view_name => 'xformed_build_miss_num');
07:45:55  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:55  24  	  miss_table_name => 'svmc_miss_cat',
07:45:55  25  	  data_table_name => '&bldtable',
07:45:55  26  	  xform_view_name => 'xformed_build_miss_cat');
07:45:55  27  
07:45:55  28  	-- Perform outlier treatment.
07:45:55  29  	-- create clip table
07:45:55  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:45:55  31  
07:45:55  32  	-- populate clip table
07:45:55  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:45:55  34  	  clip_table_name => 'svmc_clip',
07:45:55  35  	  data_table_name => '&bldtable',
07:45:55  36  	  tail_frac	  => 0.025,
07:45:55  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:55  38  
07:45:55  39  	-- xform input data to winsorized data
07:45:55  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:45:55  41  	  clip_table_name => 'svmc_clip',
07:45:55  42  	  data_table_name => '&bldtable',
07:45:55  43  	  xform_view_name => 'svmc_winsor');
07:45:55  44  
07:45:55  45  	-- create normalization table
07:45:55  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:45:55  47  
07:45:55  48  	-- populate normalization table based on winsorized data
07:45:55  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:45:55  50  	  norm_table_name => 'svmc_norm',
07:45:55  51  	  data_table_name => 'svmc_winsor',
07:45:55  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:55  53  
07:45:55  54  	-- normalize the original data
07:45:55  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:55  56  	  norm_table_name => 'svmc_norm',
07:45:55  57  	  data_table_name => '&bldtable',
07:45:55  58  	  xform_view_name => 'svmc_build_prep');
07:45:55  59  END;
07:45:55  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
07:45:56 SQL> 
07:45:56 SQL> ---------------------
07:45:56 SQL> -- CREATE A NEW MODEL
07:45:56 SQL> --
07:45:56 SQL> -- Cleanup old model with the same name for repeat runs
07:45:56 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:45:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:56   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.96
07:45:57 SQL> 
07:45:57 SQL> -- Build a new SVM Model
07:45:57 SQL> BEGIN
07:45:57   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:57   3  	  model_name	      => '&model_name',
07:45:57   4  	  mining_function     => dbms_data_mining.classification,
07:45:57   5  	  data_table_name     => 'svmc_build_prep',
07:45:57   6  	  case_id_column_name => '&case_id',
07:45:57   7  	  target_column_name  => '&target',
07:45:57   8  	  settings_table_name => 'svmc_settings');
07:45:57   9  END;
07:45:57  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.86
07:46:01 SQL> 
07:46:01 SQL> -----------------------------------------------------------------------
07:46:01 SQL> --			       APPLY/score THE MODEL
07:46:01 SQL> -----------------------------------------------------------------------
07:46:01 SQL> 
07:46:01 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:46:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:46:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:46:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:46:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:46:01 SQL> -----------------------
07:46:01 SQL> -- PREPARE SCORING DATA
07:46:01 SQL> --
07:46:01 SQL> -- If the data for model creation has been prepared, then the data
07:46:01 SQL> -- to be scored using the model must be prepared in the same manner
07:46:01 SQL> -- in order to obtain meaningful results.
07:46:01 SQL> --
07:46:01 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:01 SQL> -- 2. Normalization
07:46:01 SQL> -- No outlier treatment will be performed during test and apply. The
07:46:01 SQL> -- normalization step is sufficient, since the normalization parameters
07:46:01 SQL> -- already capture the effects of outlier treatment done with build data.
07:46:01 SQL> --
07:46:01 SQL> BEGIN
07:46:01   2  	-- Xform Test data to replace missing values
07:46:01   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:01   4  	  miss_table_name => 'svmc_miss_num',
07:46:01   5  	  data_table_name => '&scoretable',
07:46:01   6  	  xform_view_name => 'xformed_apply_miss_num');
07:46:01   7  
07:46:01   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:01   9  	  miss_table_name => 'svmc_miss_cat',
07:46:01  10  	  data_table_name => '&scoretable',
07:46:01  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:46:01  12  
07:46:01  13  	-- Normalize the data to be scored
07:46:01  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:01  15  	  norm_table_name => 'svmc_norm',
07:46:01  16  	  data_table_name => '&scoretable',
07:46:01  17  	  xform_view_name => 'svmc_apply_prep');
07:46:01  18  END;
07:46:01  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:46:02 SQL> 
07:46:02 SQL> -- Use same model_name used in score.sql
07:46:02 SQL> DEFINE model_name = 'forex14'
07:46:02 SQL> 
07:46:02 SQL> -- Maybe I already collected a score for this prdate.
07:46:02 SQL> -- DELETE it if I did:
07:46:02 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:46:02 SQL> 
07:46:02 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:46:02   2  SELECT
07:46:02   3  prdate
07:46:02   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:46:02   5  ,sysdate
07:46:02   6  ,SUBSTR(prdate,1,3)pair
07:46:02   7  ,SUBSTR(prdate,4,19)ydate
07:46:02   8  FROM svmc_apply_prep
07:46:02   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:46:02 SQL> @score1_5min.sql	      2010-12-28 08:30:00
07:46:02 SQL> --
07:46:02 SQL> -- score1_5min.sql
07:46:02 SQL> --
07:46:02 SQL> 
07:46:02 SQL> CREATE OR REPLACE VIEW sme AS
07:46:02   2  SELECT
07:46:02   3  'jpy'||ydate prdate
07:46:02   4  ,NULL gatt
07:46:02   5  ,g00
07:46:02   6  ,g01
07:46:02   7  ,g02
07:46:02   8  ,g03
07:46:02   9  ,g04
07:46:02  10  ,g05
07:46:02  11  ,g06
07:46:02  12  ,g07
07:46:02  13  ,g08
07:46:02  14  FROM jpy_ms
07:46:02  15  WHERE ydate = '&1'||' '||'&2'
07:46:02  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:30:00'

View created.

Elapsed: 00:00:00.02
07:46:02 SQL> 
07:46:02 SQL> -- rpt
07:46:02 SQL> -- We should see just 1 row:
07:46:02 SQL> 
07:46:02 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:46:02 SQL> 
07:46:02 SQL> -- Build the model:
07:46:02 SQL> CREATE OR REPLACE VIEW bme AS
07:46:02   2  SELECT
07:46:02   3  'jpy'||ydate prdate
07:46:02   4  ,gatt
07:46:02   5  ,g00
07:46:02   6  ,g01
07:46:02   7  ,g02
07:46:02   8  ,g03
07:46:02   9  ,g04
07:46:02  10  ,g05
07:46:02  11  ,g06
07:46:02  12  ,g07
07:46:02  13  ,g08
07:46:02  14  FROM jpy_ms
07:46:02  15  WHERE gatt IN('nup','up')
07:46:02  16  -- Use only rows which are older than 1 day:
07:46:02  17  AND 1+ydate < '&1'||' '||'&2'
07:46:02  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:30:00'

View created.

Elapsed: 00:00:00.03
07:46:02 SQL> 
07:46:02 SQL> -- rpt
07:46:02 SQL> 
07:46:02 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8896

Elapsed: 00:00:00.05
07:46:02 SQL> 
07:46:02 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:25:00

Elapsed: 00:00:00.05
07:46:02 SQL> 
07:46:02 SQL> -- Now build model from bme and score sme
07:46:02 SQL> @score1.sql
07:46:02 SQL> -- score1.sql
07:46:02 SQL> 
07:46:02 SQL> -- Does the 1st SVM score
07:46:02 SQL> 
07:46:02 SQL> -- Fill up svmc_apply_prep
07:46:02 SQL> @score.sql
07:46:02 SQL> --
07:46:02 SQL> -- score.sql
07:46:02 SQL> --
07:46:02 SQL> 
07:46:02 SQL> -- usage: score.sql
07:46:02 SQL> 
07:46:02 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:46:02 SQL> 
07:46:02 SQL> DEFINE target	= 'gatt'
07:46:02 SQL> DEFINE model_name = 'forex14'
07:46:02 SQL> DEFINE bldtable	= 'bme'
07:46:02 SQL> DEFINE scoretable = 'sme'
07:46:02 SQL> DEFINE case_id	= 'prdate'
07:46:02 SQL> 
07:46:02 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:46:02 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:46:02 SQL> 
07:46:02 SQL> -- Builds an SVM model using pl/sql.
07:46:02 SQL> 
07:46:02 SQL> -----------------------------------------------------------------------
07:46:02 SQL> --			    BUILD THE MODEL
07:46:02 SQL> -----------------------------------------------------------------------
07:46:02 SQL> 
07:46:02 SQL> -- Cleanup old build data preparation objects for repeat runs
07:46:02 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:02 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:46:02 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:02 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:02 SQL> 
07:46:02 SQL> 
07:46:02 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:46:02 SQL> --
07:46:02 SQL> -- DROP	TABLE svmc_settings ;
07:46:02 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:46:02 SQL> -- DELETE svmc_settings;
07:46:02 SQL> 
07:46:02 SQL> -- The default classification algorithm is Naive Bayes. So override
07:46:02 SQL> -- this choice to SVM using a settings table.
07:46:02 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:46:02 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:46:02 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:46:02 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:46:02 SQL> -- models.
07:46:02 SQL> --
07:46:02 SQL> 
07:46:02 SQL> -- Do this once and then comment it out.
07:46:02 SQL> -- That makes script go faster.
07:46:02 SQL> -- BEGIN
07:46:02 SQL> -- -- Populate settings table
07:46:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:02 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:46:02 SQL> --
07:46:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:02 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:46:02 SQL> --
07:46:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:02 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:46:02 SQL> --   COMMIT;
07:46:02 SQL> -- END;
07:46:02 SQL> -- /
07:46:02 SQL> 
07:46:02 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:46:02 SQL> 
07:46:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:46:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:46:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:46:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:46:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:46:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:46:02 SQL> 
07:46:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:46:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:02 SQL> 
07:46:02 SQL> --------------------------------
07:46:02 SQL> -- PREPARE BUILD (TRAINING) DATA
07:46:02 SQL> --
07:46:02 SQL> 
07:46:02 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:02 SQL> -- 2. Outlier Treatment and
07:46:02 SQL> -- 3. Normalization are performed below.
07:46:02 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:46:02 SQL> --    normalized here.
07:46:02 SQL> 
07:46:02 SQL> BEGIN
07:46:02   2  	-- Perform missing value treatment for all predictors
07:46:02   3  	-- create miss tables
07:46:02   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:46:02   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:46:02   6  
07:46:02   7  	-- populate miss tables
07:46:02   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:46:02   9  	  miss_table_name => 'svmc_miss_num',
07:46:02  10  	  data_table_name => '&bldtable',
07:46:02  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:02  12  
07:46:02  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:46:02  14  	  miss_table_name => 'svmc_miss_cat',
07:46:02  15  	  data_table_name => '&bldtable',
07:46:02  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:02  17  
07:46:02  18  	-- xform input data to replace missing values
07:46:02  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:02  20  	  miss_table_name => 'svmc_miss_num',
07:46:02  21  	  data_table_name => '&bldtable',
07:46:02  22  	  xform_view_name => 'xformed_build_miss_num');
07:46:02  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:02  24  	  miss_table_name => 'svmc_miss_cat',
07:46:02  25  	  data_table_name => '&bldtable',
07:46:02  26  	  xform_view_name => 'xformed_build_miss_cat');
07:46:02  27  
07:46:02  28  	-- Perform outlier treatment.
07:46:02  29  	-- create clip table
07:46:02  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:46:02  31  
07:46:02  32  	-- populate clip table
07:46:02  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:46:02  34  	  clip_table_name => 'svmc_clip',
07:46:02  35  	  data_table_name => '&bldtable',
07:46:02  36  	  tail_frac	  => 0.025,
07:46:02  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:02  38  
07:46:02  39  	-- xform input data to winsorized data
07:46:02  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:46:02  41  	  clip_table_name => 'svmc_clip',
07:46:02  42  	  data_table_name => '&bldtable',
07:46:02  43  	  xform_view_name => 'svmc_winsor');
07:46:02  44  
07:46:02  45  	-- create normalization table
07:46:02  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:46:02  47  
07:46:02  48  	-- populate normalization table based on winsorized data
07:46:02  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:46:02  50  	  norm_table_name => 'svmc_norm',
07:46:02  51  	  data_table_name => 'svmc_winsor',
07:46:02  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:02  53  
07:46:02  54  	-- normalize the original data
07:46:02  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:02  56  	  norm_table_name => 'svmc_norm',
07:46:02  57  	  data_table_name => '&bldtable',
07:46:02  58  	  xform_view_name => 'svmc_build_prep');
07:46:02  59  END;
07:46:02  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
07:46:03 SQL> 
07:46:03 SQL> ---------------------
07:46:03 SQL> -- CREATE A NEW MODEL
07:46:03 SQL> --
07:46:03 SQL> -- Cleanup old model with the same name for repeat runs
07:46:03 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:46:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:03   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
07:46:04 SQL> 
07:46:04 SQL> -- Build a new SVM Model
07:46:04 SQL> BEGIN
07:46:04   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:46:04   3  	  model_name	      => '&model_name',
07:46:04   4  	  mining_function     => dbms_data_mining.classification,
07:46:04   5  	  data_table_name     => 'svmc_build_prep',
07:46:04   6  	  case_id_column_name => '&case_id',
07:46:04   7  	  target_column_name  => '&target',
07:46:04   8  	  settings_table_name => 'svmc_settings');
07:46:04   9  END;
07:46:04  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.56
07:46:09 SQL> 
07:46:09 SQL> -----------------------------------------------------------------------
07:46:09 SQL> --			       APPLY/score THE MODEL
07:46:09 SQL> -----------------------------------------------------------------------
07:46:09 SQL> 
07:46:09 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:46:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:46:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:46:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:46:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:46:10 SQL> -----------------------
07:46:10 SQL> -- PREPARE SCORING DATA
07:46:10 SQL> --
07:46:10 SQL> -- If the data for model creation has been prepared, then the data
07:46:10 SQL> -- to be scored using the model must be prepared in the same manner
07:46:10 SQL> -- in order to obtain meaningful results.
07:46:10 SQL> --
07:46:10 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:10 SQL> -- 2. Normalization
07:46:10 SQL> -- No outlier treatment will be performed during test and apply. The
07:46:10 SQL> -- normalization step is sufficient, since the normalization parameters
07:46:10 SQL> -- already capture the effects of outlier treatment done with build data.
07:46:10 SQL> --
07:46:10 SQL> BEGIN
07:46:10   2  	-- Xform Test data to replace missing values
07:46:10   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:10   4  	  miss_table_name => 'svmc_miss_num',
07:46:10   5  	  data_table_name => '&scoretable',
07:46:10   6  	  xform_view_name => 'xformed_apply_miss_num');
07:46:10   7  
07:46:10   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:10   9  	  miss_table_name => 'svmc_miss_cat',
07:46:10  10  	  data_table_name => '&scoretable',
07:46:10  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:46:10  12  
07:46:10  13  	-- Normalize the data to be scored
07:46:10  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:10  15  	  norm_table_name => 'svmc_norm',
07:46:10  16  	  data_table_name => '&scoretable',
07:46:10  17  	  xform_view_name => 'svmc_apply_prep');
07:46:10  18  END;
07:46:10  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
07:46:10 SQL> 
07:46:10 SQL> -- Use same model_name used in score.sql
07:46:10 SQL> DEFINE model_name = 'forex14'
07:46:10 SQL> 
07:46:10 SQL> -- Maybe I already collected a score for this prdate.
07:46:10 SQL> -- DELETE it if I did:
07:46:10 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:46:10 SQL> 
07:46:10 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:46:10   2  SELECT
07:46:10   3  prdate
07:46:10   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:46:10   5  ,sysdate
07:46:10   6  ,SUBSTR(prdate,1,3)pair
07:46:10   7  ,SUBSTR(prdate,4,19)ydate
07:46:10   8  FROM svmc_apply_prep
07:46:10   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:46:10 SQL> @score1_5min_gattn.sql	2010-12-28 08:30:00
07:46:10 SQL> --
07:46:10 SQL> -- score1_5min_gattn.sql
07:46:10 SQL> --
07:46:10 SQL> 
07:46:10 SQL> CREATE OR REPLACE VIEW sme AS
07:46:10   2  SELECT
07:46:10   3  'jpy'||ydate prdate
07:46:10   4  ,NULL gattn
07:46:10   5  ,g00
07:46:10   6  ,g01
07:46:10   7  ,g02
07:46:10   8  ,g03
07:46:10   9  ,g04
07:46:10  10  ,g05
07:46:10  11  ,g06
07:46:10  12  ,g07
07:46:10  13  ,g08
07:46:10  14  FROM jpy_ms
07:46:10  15  WHERE ydate = '&1'||' '||'&2'
07:46:10  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:30:00'

View created.

Elapsed: 00:00:00.03
07:46:10 SQL> 
07:46:10 SQL> -- rpt
07:46:10 SQL> -- We should see just 1 row:
07:46:10 SQL> 
07:46:10 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:46:10 SQL> 
07:46:10 SQL> -- Build the model:
07:46:10 SQL> CREATE OR REPLACE VIEW bme AS
07:46:10   2  SELECT
07:46:10   3  'jpy'||ydate prdate
07:46:10   4  ,gattn
07:46:10   5  ,g00
07:46:10   6  ,g01
07:46:10   7  ,g02
07:46:10   8  ,g03
07:46:10   9  ,g04
07:46:10  10  ,g05
07:46:10  11  ,g06
07:46:10  12  ,g07
07:46:10  13  ,g08
07:46:10  14  FROM jpy_ms
07:46:10  15  WHERE gattn IN('nup','up')
07:46:10  16  -- Use only rows which are older than 1 day:
07:46:10  17  AND 1+ydate < '&1'||' '||'&2'
07:46:10  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:30:00'

View created.

Elapsed: 00:00:00.04
07:46:10 SQL> 
07:46:10 SQL> -- rpt
07:46:10 SQL> 
07:46:10 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9188
up	     9649

Elapsed: 00:00:00.06
07:46:10 SQL> 
07:46:10 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:25:00

Elapsed: 00:00:00.05
07:46:10 SQL> 
07:46:10 SQL> -- Now build model from bme and score sme
07:46:10 SQL> @score1gattn.sql
07:46:10 SQL> -- score1gattn.sql
07:46:10 SQL> 
07:46:10 SQL> -- Does the 1st SVM score
07:46:10 SQL> 
07:46:10 SQL> -- Fill up svmc_apply_prep
07:46:10 SQL> @score_gattn.sql
07:46:10 SQL> --
07:46:10 SQL> -- score_gattn.sql
07:46:10 SQL> --
07:46:10 SQL> 
07:46:10 SQL> -- usage: score_gattn.sql
07:46:10 SQL> 
07:46:10 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:46:10 SQL> 
07:46:10 SQL> DEFINE target	= 'gattn'
07:46:10 SQL> DEFINE model_name = 'forex14'
07:46:10 SQL> DEFINE bldtable	= 'bme'
07:46:10 SQL> DEFINE scoretable = 'sme'
07:46:10 SQL> DEFINE case_id	= 'prdate'
07:46:10 SQL> 
07:46:10 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:46:10 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:46:10 SQL> 
07:46:10 SQL> -- Builds an SVM model using pl/sql.
07:46:10 SQL> 
07:46:10 SQL> -----------------------------------------------------------------------
07:46:10 SQL> --			    BUILD THE MODEL
07:46:10 SQL> -----------------------------------------------------------------------
07:46:10 SQL> 
07:46:10 SQL> -- Cleanup old build data preparation objects for repeat runs
07:46:10 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:10 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:46:10 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:10 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:10 SQL> 
07:46:10 SQL> 
07:46:10 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:46:10 SQL> --
07:46:10 SQL> -- DROP	TABLE svmc_settings ;
07:46:10 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:46:10 SQL> -- DELETE svmc_settings;
07:46:10 SQL> 
07:46:10 SQL> -- The default classification algorithm is Naive Bayes. So override
07:46:10 SQL> -- this choice to SVM using a settings table.
07:46:10 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:46:10 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:46:10 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:46:10 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:46:10 SQL> -- models.
07:46:10 SQL> --
07:46:10 SQL> 
07:46:10 SQL> -- Do this once and then comment it out.
07:46:10 SQL> -- That makes script go faster.
07:46:10 SQL> -- BEGIN
07:46:10 SQL> -- -- Populate settings table
07:46:10 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:10 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:46:10 SQL> --
07:46:10 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:10 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:46:10 SQL> --
07:46:10 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:10 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:46:10 SQL> --   COMMIT;
07:46:10 SQL> -- END;
07:46:10 SQL> -- /
07:46:10 SQL> 
07:46:10 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:46:10 SQL> 
07:46:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:46:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:46:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:46:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:46:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:46:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:46:10 SQL> 
07:46:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:46:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:10 SQL> 
07:46:10 SQL> --------------------------------
07:46:10 SQL> -- PREPARE BUILD (TRAINING) DATA
07:46:10 SQL> --
07:46:10 SQL> 
07:46:10 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:10 SQL> -- 2. Outlier Treatment and
07:46:10 SQL> -- 3. Normalization are performed below.
07:46:10 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:46:10 SQL> --    normalized here.
07:46:10 SQL> 
07:46:10 SQL> BEGIN
07:46:10   2  	-- Perform missing value treatment for all predictors
07:46:10   3  	-- create miss tables
07:46:10   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:46:10   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:46:10   6  
07:46:10   7  	-- populate miss tables
07:46:10   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:46:10   9  	  miss_table_name => 'svmc_miss_num',
07:46:10  10  	  data_table_name => '&bldtable',
07:46:10  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:10  12  
07:46:10  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:46:10  14  	  miss_table_name => 'svmc_miss_cat',
07:46:10  15  	  data_table_name => '&bldtable',
07:46:10  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:10  17  
07:46:10  18  	-- xform input data to replace missing values
07:46:10  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:10  20  	  miss_table_name => 'svmc_miss_num',
07:46:10  21  	  data_table_name => '&bldtable',
07:46:10  22  	  xform_view_name => 'xformed_build_miss_num');
07:46:10  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:10  24  	  miss_table_name => 'svmc_miss_cat',
07:46:10  25  	  data_table_name => '&bldtable',
07:46:10  26  	  xform_view_name => 'xformed_build_miss_cat');
07:46:10  27  
07:46:10  28  	-- Perform outlier treatment.
07:46:10  29  	-- create clip table
07:46:10  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:46:10  31  
07:46:10  32  	-- populate clip table
07:46:10  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:46:10  34  	  clip_table_name => 'svmc_clip',
07:46:10  35  	  data_table_name => '&bldtable',
07:46:10  36  	  tail_frac	  => 0.025,
07:46:10  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:10  38  
07:46:10  39  	-- xform input data to winsorized data
07:46:10  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:46:10  41  	  clip_table_name => 'svmc_clip',
07:46:10  42  	  data_table_name => '&bldtable',
07:46:10  43  	  xform_view_name => 'svmc_winsor');
07:46:10  44  
07:46:10  45  	-- create normalization table
07:46:10  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:46:10  47  
07:46:10  48  	-- populate normalization table based on winsorized data
07:46:10  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:46:10  50  	  norm_table_name => 'svmc_norm',
07:46:10  51  	  data_table_name => 'svmc_winsor',
07:46:10  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:10  53  
07:46:10  54  	-- normalize the original data
07:46:10  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:10  56  	  norm_table_name => 'svmc_norm',
07:46:10  57  	  data_table_name => '&bldtable',
07:46:10  58  	  xform_view_name => 'svmc_build_prep');
07:46:10  59  END;
07:46:10  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
07:46:11 SQL> 
07:46:11 SQL> ---------------------
07:46:11 SQL> -- CREATE A NEW MODEL
07:46:11 SQL> --
07:46:11 SQL> -- Cleanup old model with the same name for repeat runs
07:46:11 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:46:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:11   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.94
07:46:12 SQL> 
07:46:12 SQL> -- Build a new SVM Model
07:46:12 SQL> BEGIN
07:46:12   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:46:12   3  	  model_name	      => '&model_name',
07:46:12   4  	  mining_function     => dbms_data_mining.classification,
07:46:12   5  	  data_table_name     => 'svmc_build_prep',
07:46:12   6  	  case_id_column_name => '&case_id',
07:46:12   7  	  target_column_name  => '&target',
07:46:12   8  	  settings_table_name => 'svmc_settings');
07:46:12   9  END;
07:46:12  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.87
07:46:17 SQL> 
07:46:17 SQL> -----------------------------------------------------------------------
07:46:17 SQL> --			       APPLY/score THE MODEL
07:46:17 SQL> -----------------------------------------------------------------------
07:46:17 SQL> 
07:46:17 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:46:17 SQL> -----------------------
07:46:17 SQL> -- PREPARE SCORING DATA
07:46:17 SQL> --
07:46:17 SQL> -- If the data for model creation has been prepared, then the data
07:46:17 SQL> -- to be scored using the model must be prepared in the same manner
07:46:17 SQL> -- in order to obtain meaningful results.
07:46:17 SQL> --
07:46:17 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:17 SQL> -- 2. Normalization
07:46:17 SQL> -- No outlier treatment will be performed during test and apply. The
07:46:17 SQL> -- normalization step is sufficient, since the normalization parameters
07:46:17 SQL> -- already capture the effects of outlier treatment done with build data.
07:46:17 SQL> --
07:46:17 SQL> BEGIN
07:46:17   2  	-- Xform Test data to replace missing values
07:46:17   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:17   4  	  miss_table_name => 'svmc_miss_num',
07:46:17   5  	  data_table_name => '&scoretable',
07:46:17   6  	  xform_view_name => 'xformed_apply_miss_num');
07:46:17   7  
07:46:17   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:17   9  	  miss_table_name => 'svmc_miss_cat',
07:46:17  10  	  data_table_name => '&scoretable',
07:46:17  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:46:17  12  
07:46:17  13  	-- Normalize the data to be scored
07:46:17  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:17  15  	  norm_table_name => 'svmc_norm',
07:46:17  16  	  data_table_name => '&scoretable',
07:46:17  17  	  xform_view_name => 'svmc_apply_prep');
07:46:17  18  END;
07:46:17  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
07:46:17 SQL> 
07:46:17 SQL> -- Use same model_name used in score.sql
07:46:17 SQL> DEFINE model_name = 'forex14'
07:46:17 SQL> 
07:46:17 SQL> -- Maybe I already collected a score for this prdate.
07:46:17 SQL> -- DELETE it if I did:
07:46:17 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:46:17 SQL> 
07:46:17 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:46:17   2  SELECT
07:46:17   3  prdate
07:46:17   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:46:17   5  ,sysdate
07:46:17   6  ,SUBSTR(prdate,1,3)pair
07:46:17   7  ,SUBSTR(prdate,4,19)ydate
07:46:17   8  FROM svmc_apply_prep
07:46:17   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:46:17 SQL> @score1_5min.sql	      2010-12-28 08:35:00
07:46:17 SQL> --
07:46:17 SQL> -- score1_5min.sql
07:46:17 SQL> --
07:46:17 SQL> 
07:46:17 SQL> CREATE OR REPLACE VIEW sme AS
07:46:17   2  SELECT
07:46:17   3  'jpy'||ydate prdate
07:46:17   4  ,NULL gatt
07:46:17   5  ,g00
07:46:17   6  ,g01
07:46:17   7  ,g02
07:46:17   8  ,g03
07:46:17   9  ,g04
07:46:17  10  ,g05
07:46:17  11  ,g06
07:46:17  12  ,g07
07:46:17  13  ,g08
07:46:17  14  FROM jpy_ms
07:46:17  15  WHERE ydate = '&1'||' '||'&2'
07:46:17  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:35:00'

View created.

Elapsed: 00:00:00.03
07:46:17 SQL> 
07:46:17 SQL> -- rpt
07:46:17 SQL> -- We should see just 1 row:
07:46:17 SQL> 
07:46:17 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:46:17 SQL> 
07:46:17 SQL> -- Build the model:
07:46:17 SQL> CREATE OR REPLACE VIEW bme AS
07:46:17   2  SELECT
07:46:17   3  'jpy'||ydate prdate
07:46:17   4  ,gatt
07:46:17   5  ,g00
07:46:17   6  ,g01
07:46:17   7  ,g02
07:46:17   8  ,g03
07:46:17   9  ,g04
07:46:17  10  ,g05
07:46:17  11  ,g06
07:46:17  12  ,g07
07:46:17  13  ,g08
07:46:17  14  FROM jpy_ms
07:46:17  15  WHERE gatt IN('nup','up')
07:46:17  16  -- Use only rows which are older than 1 day:
07:46:17  17  AND 1+ydate < '&1'||' '||'&2'
07:46:17  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:35:00'

View created.

Elapsed: 00:00:00.16
07:46:17 SQL> 
07:46:17 SQL> -- rpt
07:46:17 SQL> 
07:46:17 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8897

Elapsed: 00:00:00.05
07:46:17 SQL> 
07:46:17 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:30:00

Elapsed: 00:00:00.05
07:46:17 SQL> 
07:46:17 SQL> -- Now build model from bme and score sme
07:46:17 SQL> @score1.sql
07:46:17 SQL> -- score1.sql
07:46:17 SQL> 
07:46:17 SQL> -- Does the 1st SVM score
07:46:17 SQL> 
07:46:17 SQL> -- Fill up svmc_apply_prep
07:46:17 SQL> @score.sql
07:46:17 SQL> --
07:46:17 SQL> -- score.sql
07:46:17 SQL> --
07:46:17 SQL> 
07:46:17 SQL> -- usage: score.sql
07:46:17 SQL> 
07:46:17 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:46:17 SQL> 
07:46:17 SQL> DEFINE target	= 'gatt'
07:46:17 SQL> DEFINE model_name = 'forex14'
07:46:17 SQL> DEFINE bldtable	= 'bme'
07:46:17 SQL> DEFINE scoretable = 'sme'
07:46:17 SQL> DEFINE case_id	= 'prdate'
07:46:17 SQL> 
07:46:17 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:46:17 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:46:17 SQL> 
07:46:17 SQL> -- Builds an SVM model using pl/sql.
07:46:17 SQL> 
07:46:17 SQL> -----------------------------------------------------------------------
07:46:17 SQL> --			    BUILD THE MODEL
07:46:17 SQL> -----------------------------------------------------------------------
07:46:17 SQL> 
07:46:17 SQL> -- Cleanup old build data preparation objects for repeat runs
07:46:17 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:17 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:46:17 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:17 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:17 SQL> 
07:46:17 SQL> 
07:46:17 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:46:17 SQL> --
07:46:17 SQL> -- DROP	TABLE svmc_settings ;
07:46:17 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:46:17 SQL> -- DELETE svmc_settings;
07:46:17 SQL> 
07:46:17 SQL> -- The default classification algorithm is Naive Bayes. So override
07:46:17 SQL> -- this choice to SVM using a settings table.
07:46:17 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:46:17 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:46:17 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:46:17 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:46:17 SQL> -- models.
07:46:17 SQL> --
07:46:17 SQL> 
07:46:17 SQL> -- Do this once and then comment it out.
07:46:17 SQL> -- That makes script go faster.
07:46:17 SQL> -- BEGIN
07:46:17 SQL> -- -- Populate settings table
07:46:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:17 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:46:17 SQL> --
07:46:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:17 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:46:17 SQL> --
07:46:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:17 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:46:17 SQL> --   COMMIT;
07:46:17 SQL> -- END;
07:46:17 SQL> -- /
07:46:17 SQL> 
07:46:17 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:46:17 SQL> 
07:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:46:17 SQL> 
07:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:17 SQL> 
07:46:17 SQL> --------------------------------
07:46:17 SQL> -- PREPARE BUILD (TRAINING) DATA
07:46:17 SQL> --
07:46:17 SQL> 
07:46:17 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:17 SQL> -- 2. Outlier Treatment and
07:46:17 SQL> -- 3. Normalization are performed below.
07:46:17 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:46:17 SQL> --    normalized here.
07:46:17 SQL> 
07:46:17 SQL> BEGIN
07:46:17   2  	-- Perform missing value treatment for all predictors
07:46:17   3  	-- create miss tables
07:46:17   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:46:17   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:46:17   6  
07:46:17   7  	-- populate miss tables
07:46:17   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:46:17   9  	  miss_table_name => 'svmc_miss_num',
07:46:17  10  	  data_table_name => '&bldtable',
07:46:17  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:17  12  
07:46:17  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:46:17  14  	  miss_table_name => 'svmc_miss_cat',
07:46:17  15  	  data_table_name => '&bldtable',
07:46:17  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:17  17  
07:46:17  18  	-- xform input data to replace missing values
07:46:17  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:17  20  	  miss_table_name => 'svmc_miss_num',
07:46:17  21  	  data_table_name => '&bldtable',
07:46:17  22  	  xform_view_name => 'xformed_build_miss_num');
07:46:17  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:17  24  	  miss_table_name => 'svmc_miss_cat',
07:46:17  25  	  data_table_name => '&bldtable',
07:46:17  26  	  xform_view_name => 'xformed_build_miss_cat');
07:46:17  27  
07:46:17  28  	-- Perform outlier treatment.
07:46:17  29  	-- create clip table
07:46:17  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:46:17  31  
07:46:17  32  	-- populate clip table
07:46:17  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:46:17  34  	  clip_table_name => 'svmc_clip',
07:46:17  35  	  data_table_name => '&bldtable',
07:46:17  36  	  tail_frac	  => 0.025,
07:46:17  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:17  38  
07:46:17  39  	-- xform input data to winsorized data
07:46:17  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:46:17  41  	  clip_table_name => 'svmc_clip',
07:46:17  42  	  data_table_name => '&bldtable',
07:46:17  43  	  xform_view_name => 'svmc_winsor');
07:46:17  44  
07:46:17  45  	-- create normalization table
07:46:17  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:46:17  47  
07:46:17  48  	-- populate normalization table based on winsorized data
07:46:17  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:46:17  50  	  norm_table_name => 'svmc_norm',
07:46:17  51  	  data_table_name => 'svmc_winsor',
07:46:17  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:17  53  
07:46:17  54  	-- normalize the original data
07:46:17  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:17  56  	  norm_table_name => 'svmc_norm',
07:46:17  57  	  data_table_name => '&bldtable',
07:46:17  58  	  xform_view_name => 'svmc_build_prep');
07:46:17  59  END;
07:46:17  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
07:46:18 SQL> 
07:46:18 SQL> ---------------------
07:46:18 SQL> -- CREATE A NEW MODEL
07:46:18 SQL> --
07:46:18 SQL> -- Cleanup old model with the same name for repeat runs
07:46:18 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:46:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:18   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
07:46:19 SQL> 
07:46:19 SQL> -- Build a new SVM Model
07:46:19 SQL> BEGIN
07:46:19   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:46:19   3  	  model_name	      => '&model_name',
07:46:19   4  	  mining_function     => dbms_data_mining.classification,
07:46:19   5  	  data_table_name     => 'svmc_build_prep',
07:46:19   6  	  case_id_column_name => '&case_id',
07:46:19   7  	  target_column_name  => '&target',
07:46:19   8  	  settings_table_name => 'svmc_settings');
07:46:19   9  END;
07:46:19  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.79
07:46:25 SQL> 
07:46:25 SQL> -----------------------------------------------------------------------
07:46:25 SQL> --			       APPLY/score THE MODEL
07:46:25 SQL> -----------------------------------------------------------------------
07:46:25 SQL> 
07:46:25 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:46:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:46:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:46:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:46:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:46:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:46:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:25 SQL> -----------------------
07:46:25 SQL> -- PREPARE SCORING DATA
07:46:25 SQL> --
07:46:25 SQL> -- If the data for model creation has been prepared, then the data
07:46:25 SQL> -- to be scored using the model must be prepared in the same manner
07:46:25 SQL> -- in order to obtain meaningful results.
07:46:25 SQL> --
07:46:25 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:25 SQL> -- 2. Normalization
07:46:25 SQL> -- No outlier treatment will be performed during test and apply. The
07:46:25 SQL> -- normalization step is sufficient, since the normalization parameters
07:46:25 SQL> -- already capture the effects of outlier treatment done with build data.
07:46:25 SQL> --
07:46:25 SQL> BEGIN
07:46:25   2  	-- Xform Test data to replace missing values
07:46:25   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:25   4  	  miss_table_name => 'svmc_miss_num',
07:46:25   5  	  data_table_name => '&scoretable',
07:46:25   6  	  xform_view_name => 'xformed_apply_miss_num');
07:46:25   7  
07:46:25   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:25   9  	  miss_table_name => 'svmc_miss_cat',
07:46:25  10  	  data_table_name => '&scoretable',
07:46:25  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:46:25  12  
07:46:25  13  	-- Normalize the data to be scored
07:46:25  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:25  15  	  norm_table_name => 'svmc_norm',
07:46:25  16  	  data_table_name => '&scoretable',
07:46:25  17  	  xform_view_name => 'svmc_apply_prep');
07:46:25  18  END;
07:46:25  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:46:25 SQL> 
07:46:25 SQL> -- Use same model_name used in score.sql
07:46:25 SQL> DEFINE model_name = 'forex14'
07:46:25 SQL> 
07:46:25 SQL> -- Maybe I already collected a score for this prdate.
07:46:25 SQL> -- DELETE it if I did:
07:46:25 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:46:25 SQL> 
07:46:25 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:46:25   2  SELECT
07:46:25   3  prdate
07:46:25   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:46:25   5  ,sysdate
07:46:25   6  ,SUBSTR(prdate,1,3)pair
07:46:25   7  ,SUBSTR(prdate,4,19)ydate
07:46:25   8  FROM svmc_apply_prep
07:46:25   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.04
07:46:25 SQL> @score1_5min_gattn.sql	2010-12-28 08:35:00
07:46:25 SQL> --
07:46:25 SQL> -- score1_5min_gattn.sql
07:46:25 SQL> --
07:46:25 SQL> 
07:46:25 SQL> CREATE OR REPLACE VIEW sme AS
07:46:25   2  SELECT
07:46:25   3  'jpy'||ydate prdate
07:46:25   4  ,NULL gattn
07:46:25   5  ,g00
07:46:25   6  ,g01
07:46:25   7  ,g02
07:46:25   8  ,g03
07:46:25   9  ,g04
07:46:25  10  ,g05
07:46:25  11  ,g06
07:46:25  12  ,g07
07:46:25  13  ,g08
07:46:25  14  FROM jpy_ms
07:46:25  15  WHERE ydate = '&1'||' '||'&2'
07:46:25  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:35:00'

View created.

Elapsed: 00:00:00.03
07:46:25 SQL> 
07:46:25 SQL> -- rpt
07:46:25 SQL> -- We should see just 1 row:
07:46:25 SQL> 
07:46:25 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:46:26 SQL> 
07:46:26 SQL> -- Build the model:
07:46:26 SQL> CREATE OR REPLACE VIEW bme AS
07:46:26   2  SELECT
07:46:26   3  'jpy'||ydate prdate
07:46:26   4  ,gattn
07:46:26   5  ,g00
07:46:26   6  ,g01
07:46:26   7  ,g02
07:46:26   8  ,g03
07:46:26   9  ,g04
07:46:26  10  ,g05
07:46:26  11  ,g06
07:46:26  12  ,g07
07:46:26  13  ,g08
07:46:26  14  FROM jpy_ms
07:46:26  15  WHERE gattn IN('nup','up')
07:46:26  16  -- Use only rows which are older than 1 day:
07:46:26  17  AND 1+ydate < '&1'||' '||'&2'
07:46:26  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:35:00'

View created.

Elapsed: 00:00:00.04
07:46:26 SQL> 
07:46:26 SQL> -- rpt
07:46:26 SQL> 
07:46:26 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9189
up	     9649

Elapsed: 00:00:00.06
07:46:26 SQL> 
07:46:26 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:30:00

Elapsed: 00:00:00.04
07:46:26 SQL> 
07:46:26 SQL> -- Now build model from bme and score sme
07:46:26 SQL> @score1gattn.sql
07:46:26 SQL> -- score1gattn.sql
07:46:26 SQL> 
07:46:26 SQL> -- Does the 1st SVM score
07:46:26 SQL> 
07:46:26 SQL> -- Fill up svmc_apply_prep
07:46:26 SQL> @score_gattn.sql
07:46:26 SQL> --
07:46:26 SQL> -- score_gattn.sql
07:46:26 SQL> --
07:46:26 SQL> 
07:46:26 SQL> -- usage: score_gattn.sql
07:46:26 SQL> 
07:46:26 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:46:26 SQL> 
07:46:26 SQL> DEFINE target	= 'gattn'
07:46:26 SQL> DEFINE model_name = 'forex14'
07:46:26 SQL> DEFINE bldtable	= 'bme'
07:46:26 SQL> DEFINE scoretable = 'sme'
07:46:26 SQL> DEFINE case_id	= 'prdate'
07:46:26 SQL> 
07:46:26 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:46:26 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:46:26 SQL> 
07:46:26 SQL> -- Builds an SVM model using pl/sql.
07:46:26 SQL> 
07:46:26 SQL> -----------------------------------------------------------------------
07:46:26 SQL> --			    BUILD THE MODEL
07:46:26 SQL> -----------------------------------------------------------------------
07:46:26 SQL> 
07:46:26 SQL> -- Cleanup old build data preparation objects for repeat runs
07:46:26 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:26 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:46:26 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:26 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:26 SQL> 
07:46:26 SQL> 
07:46:26 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:46:26 SQL> --
07:46:26 SQL> -- DROP	TABLE svmc_settings ;
07:46:26 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:46:26 SQL> -- DELETE svmc_settings;
07:46:26 SQL> 
07:46:26 SQL> -- The default classification algorithm is Naive Bayes. So override
07:46:26 SQL> -- this choice to SVM using a settings table.
07:46:26 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:46:26 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:46:26 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:46:26 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:46:26 SQL> -- models.
07:46:26 SQL> --
07:46:26 SQL> 
07:46:26 SQL> -- Do this once and then comment it out.
07:46:26 SQL> -- That makes script go faster.
07:46:26 SQL> -- BEGIN
07:46:26 SQL> -- -- Populate settings table
07:46:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:26 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:46:26 SQL> --
07:46:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:26 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:46:26 SQL> --
07:46:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:26 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:46:26 SQL> --   COMMIT;
07:46:26 SQL> -- END;
07:46:26 SQL> -- /
07:46:26 SQL> 
07:46:26 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:46:26 SQL> 
07:46:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:46:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:46:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:46:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
07:46:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:46:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:46:26 SQL> 
07:46:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:46:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:26 SQL> 
07:46:26 SQL> --------------------------------
07:46:26 SQL> -- PREPARE BUILD (TRAINING) DATA
07:46:26 SQL> --
07:46:26 SQL> 
07:46:26 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:26 SQL> -- 2. Outlier Treatment and
07:46:26 SQL> -- 3. Normalization are performed below.
07:46:26 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:46:26 SQL> --    normalized here.
07:46:26 SQL> 
07:46:26 SQL> BEGIN
07:46:26   2  	-- Perform missing value treatment for all predictors
07:46:26   3  	-- create miss tables
07:46:26   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:46:26   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:46:26   6  
07:46:26   7  	-- populate miss tables
07:46:26   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:46:26   9  	  miss_table_name => 'svmc_miss_num',
07:46:26  10  	  data_table_name => '&bldtable',
07:46:26  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:26  12  
07:46:26  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:46:26  14  	  miss_table_name => 'svmc_miss_cat',
07:46:26  15  	  data_table_name => '&bldtable',
07:46:26  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:26  17  
07:46:26  18  	-- xform input data to replace missing values
07:46:26  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:26  20  	  miss_table_name => 'svmc_miss_num',
07:46:26  21  	  data_table_name => '&bldtable',
07:46:26  22  	  xform_view_name => 'xformed_build_miss_num');
07:46:26  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:26  24  	  miss_table_name => 'svmc_miss_cat',
07:46:26  25  	  data_table_name => '&bldtable',
07:46:26  26  	  xform_view_name => 'xformed_build_miss_cat');
07:46:26  27  
07:46:26  28  	-- Perform outlier treatment.
07:46:26  29  	-- create clip table
07:46:26  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:46:26  31  
07:46:26  32  	-- populate clip table
07:46:26  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:46:26  34  	  clip_table_name => 'svmc_clip',
07:46:26  35  	  data_table_name => '&bldtable',
07:46:26  36  	  tail_frac	  => 0.025,
07:46:26  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:26  38  
07:46:26  39  	-- xform input data to winsorized data
07:46:26  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:46:26  41  	  clip_table_name => 'svmc_clip',
07:46:26  42  	  data_table_name => '&bldtable',
07:46:26  43  	  xform_view_name => 'svmc_winsor');
07:46:26  44  
07:46:26  45  	-- create normalization table
07:46:26  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:46:26  47  
07:46:26  48  	-- populate normalization table based on winsorized data
07:46:26  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:46:26  50  	  norm_table_name => 'svmc_norm',
07:46:26  51  	  data_table_name => 'svmc_winsor',
07:46:26  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:26  53  
07:46:26  54  	-- normalize the original data
07:46:26  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:26  56  	  norm_table_name => 'svmc_norm',
07:46:26  57  	  data_table_name => '&bldtable',
07:46:26  58  	  xform_view_name => 'svmc_build_prep');
07:46:26  59  END;
07:46:26  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.05
07:46:27 SQL> 
07:46:27 SQL> ---------------------
07:46:27 SQL> -- CREATE A NEW MODEL
07:46:27 SQL> --
07:46:27 SQL> -- Cleanup old model with the same name for repeat runs
07:46:27 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:46:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:27   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
07:46:28 SQL> 
07:46:28 SQL> -- Build a new SVM Model
07:46:28 SQL> BEGIN
07:46:28   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:46:28   3  	  model_name	      => '&model_name',
07:46:28   4  	  mining_function     => dbms_data_mining.classification,
07:46:28   5  	  data_table_name     => 'svmc_build_prep',
07:46:28   6  	  case_id_column_name => '&case_id',
07:46:28   7  	  target_column_name  => '&target',
07:46:28   8  	  settings_table_name => 'svmc_settings');
07:46:28   9  END;
07:46:28  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.41
07:46:33 SQL> 
07:46:33 SQL> -----------------------------------------------------------------------
07:46:33 SQL> --			       APPLY/score THE MODEL
07:46:33 SQL> -----------------------------------------------------------------------
07:46:33 SQL> 
07:46:33 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:46:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:46:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
07:46:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:46:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
07:46:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:46:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.23
07:46:34 SQL> -----------------------
07:46:34 SQL> -- PREPARE SCORING DATA
07:46:34 SQL> --
07:46:34 SQL> -- If the data for model creation has been prepared, then the data
07:46:34 SQL> -- to be scored using the model must be prepared in the same manner
07:46:34 SQL> -- in order to obtain meaningful results.
07:46:34 SQL> --
07:46:34 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:34 SQL> -- 2. Normalization
07:46:34 SQL> -- No outlier treatment will be performed during test and apply. The
07:46:34 SQL> -- normalization step is sufficient, since the normalization parameters
07:46:34 SQL> -- already capture the effects of outlier treatment done with build data.
07:46:34 SQL> --
07:46:34 SQL> BEGIN
07:46:34   2  	-- Xform Test data to replace missing values
07:46:34   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:34   4  	  miss_table_name => 'svmc_miss_num',
07:46:34   5  	  data_table_name => '&scoretable',
07:46:34   6  	  xform_view_name => 'xformed_apply_miss_num');
07:46:34   7  
07:46:34   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:34   9  	  miss_table_name => 'svmc_miss_cat',
07:46:34  10  	  data_table_name => '&scoretable',
07:46:34  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:46:34  12  
07:46:34  13  	-- Normalize the data to be scored
07:46:34  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:34  15  	  norm_table_name => 'svmc_norm',
07:46:34  16  	  data_table_name => '&scoretable',
07:46:34  17  	  xform_view_name => 'svmc_apply_prep');
07:46:34  18  END;
07:46:34  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.22
07:46:34 SQL> 
07:46:34 SQL> -- Use same model_name used in score.sql
07:46:34 SQL> DEFINE model_name = 'forex14'
07:46:34 SQL> 
07:46:34 SQL> -- Maybe I already collected a score for this prdate.
07:46:34 SQL> -- DELETE it if I did:
07:46:34 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:46:34 SQL> 
07:46:34 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:46:34   2  SELECT
07:46:34   3  prdate
07:46:34   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:46:34   5  ,sysdate
07:46:34   6  ,SUBSTR(prdate,1,3)pair
07:46:34   7  ,SUBSTR(prdate,4,19)ydate
07:46:34   8  FROM svmc_apply_prep
07:46:34   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.06
07:46:34 SQL> @score1_5min.sql	      2010-12-28 08:40:00
07:46:34 SQL> --
07:46:34 SQL> -- score1_5min.sql
07:46:34 SQL> --
07:46:34 SQL> 
07:46:34 SQL> CREATE OR REPLACE VIEW sme AS
07:46:34   2  SELECT
07:46:34   3  'jpy'||ydate prdate
07:46:34   4  ,NULL gatt
07:46:34   5  ,g00
07:46:34   6  ,g01
07:46:34   7  ,g02
07:46:34   8  ,g03
07:46:34   9  ,g04
07:46:34  10  ,g05
07:46:34  11  ,g06
07:46:34  12  ,g07
07:46:34  13  ,g08
07:46:34  14  FROM jpy_ms
07:46:34  15  WHERE ydate = '&1'||' '||'&2'
07:46:34  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:40:00'

View created.

Elapsed: 00:00:00.04
07:46:34 SQL> 
07:46:34 SQL> -- rpt
07:46:34 SQL> -- We should see just 1 row:
07:46:34 SQL> 
07:46:34 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:46:34 SQL> 
07:46:34 SQL> -- Build the model:
07:46:34 SQL> CREATE OR REPLACE VIEW bme AS
07:46:34   2  SELECT
07:46:34   3  'jpy'||ydate prdate
07:46:34   4  ,gatt
07:46:34   5  ,g00
07:46:34   6  ,g01
07:46:34   7  ,g02
07:46:34   8  ,g03
07:46:34   9  ,g04
07:46:34  10  ,g05
07:46:34  11  ,g06
07:46:34  12  ,g07
07:46:34  13  ,g08
07:46:34  14  FROM jpy_ms
07:46:34  15  WHERE gatt IN('nup','up')
07:46:34  16  -- Use only rows which are older than 1 day:
07:46:34  17  AND 1+ydate < '&1'||' '||'&2'
07:46:34  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:40:00'

View created.

Elapsed: 00:00:00.17
07:46:34 SQL> 
07:46:34 SQL> -- rpt
07:46:34 SQL> 
07:46:34 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8898

Elapsed: 00:00:00.06
07:46:34 SQL> 
07:46:34 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:35:00

Elapsed: 00:00:00.05
07:46:34 SQL> 
07:46:34 SQL> -- Now build model from bme and score sme
07:46:34 SQL> @score1.sql
07:46:34 SQL> -- score1.sql
07:46:34 SQL> 
07:46:34 SQL> -- Does the 1st SVM score
07:46:34 SQL> 
07:46:34 SQL> -- Fill up svmc_apply_prep
07:46:34 SQL> @score.sql
07:46:34 SQL> --
07:46:34 SQL> -- score.sql
07:46:34 SQL> --
07:46:34 SQL> 
07:46:34 SQL> -- usage: score.sql
07:46:34 SQL> 
07:46:34 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:46:34 SQL> 
07:46:34 SQL> DEFINE target	= 'gatt'
07:46:34 SQL> DEFINE model_name = 'forex14'
07:46:34 SQL> DEFINE bldtable	= 'bme'
07:46:34 SQL> DEFINE scoretable = 'sme'
07:46:34 SQL> DEFINE case_id	= 'prdate'
07:46:34 SQL> 
07:46:34 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:46:34 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:46:34 SQL> 
07:46:34 SQL> -- Builds an SVM model using pl/sql.
07:46:34 SQL> 
07:46:34 SQL> -----------------------------------------------------------------------
07:46:34 SQL> --			    BUILD THE MODEL
07:46:34 SQL> -----------------------------------------------------------------------
07:46:34 SQL> 
07:46:34 SQL> -- Cleanup old build data preparation objects for repeat runs
07:46:34 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.01
07:46:34 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:46:34 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:34 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:34 SQL> 
07:46:34 SQL> 
07:46:34 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:46:34 SQL> --
07:46:34 SQL> -- DROP	TABLE svmc_settings ;
07:46:34 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:46:34 SQL> -- DELETE svmc_settings;
07:46:34 SQL> 
07:46:34 SQL> -- The default classification algorithm is Naive Bayes. So override
07:46:34 SQL> -- this choice to SVM using a settings table.
07:46:34 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:46:34 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:46:34 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:46:34 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:46:34 SQL> -- models.
07:46:34 SQL> --
07:46:34 SQL> 
07:46:34 SQL> -- Do this once and then comment it out.
07:46:34 SQL> -- That makes script go faster.
07:46:34 SQL> -- BEGIN
07:46:34 SQL> -- -- Populate settings table
07:46:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:34 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:46:34 SQL> --
07:46:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:34 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:46:34 SQL> --
07:46:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:34 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:46:34 SQL> --   COMMIT;
07:46:34 SQL> -- END;
07:46:34 SQL> -- /
07:46:34 SQL> 
07:46:34 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:46:34 SQL> 
07:46:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:46:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
07:46:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:46:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:46:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:46:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:46:35 SQL> 
07:46:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:46:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:46:35 SQL> 
07:46:35 SQL> --------------------------------
07:46:35 SQL> -- PREPARE BUILD (TRAINING) DATA
07:46:35 SQL> --
07:46:35 SQL> 
07:46:35 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:35 SQL> -- 2. Outlier Treatment and
07:46:35 SQL> -- 3. Normalization are performed below.
07:46:35 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:46:35 SQL> --    normalized here.
07:46:35 SQL> 
07:46:35 SQL> BEGIN
07:46:35   2  	-- Perform missing value treatment for all predictors
07:46:35   3  	-- create miss tables
07:46:35   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:46:35   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:46:35   6  
07:46:35   7  	-- populate miss tables
07:46:35   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:46:35   9  	  miss_table_name => 'svmc_miss_num',
07:46:35  10  	  data_table_name => '&bldtable',
07:46:35  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:35  12  
07:46:35  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:46:35  14  	  miss_table_name => 'svmc_miss_cat',
07:46:35  15  	  data_table_name => '&bldtable',
07:46:35  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:35  17  
07:46:35  18  	-- xform input data to replace missing values
07:46:35  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:35  20  	  miss_table_name => 'svmc_miss_num',
07:46:35  21  	  data_table_name => '&bldtable',
07:46:35  22  	  xform_view_name => 'xformed_build_miss_num');
07:46:35  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:35  24  	  miss_table_name => 'svmc_miss_cat',
07:46:35  25  	  data_table_name => '&bldtable',
07:46:35  26  	  xform_view_name => 'xformed_build_miss_cat');
07:46:35  27  
07:46:35  28  	-- Perform outlier treatment.
07:46:35  29  	-- create clip table
07:46:35  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:46:35  31  
07:46:35  32  	-- populate clip table
07:46:35  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:46:35  34  	  clip_table_name => 'svmc_clip',
07:46:35  35  	  data_table_name => '&bldtable',
07:46:35  36  	  tail_frac	  => 0.025,
07:46:35  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:35  38  
07:46:35  39  	-- xform input data to winsorized data
07:46:35  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:46:35  41  	  clip_table_name => 'svmc_clip',
07:46:35  42  	  data_table_name => '&bldtable',
07:46:35  43  	  xform_view_name => 'svmc_winsor');
07:46:35  44  
07:46:35  45  	-- create normalization table
07:46:35  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:46:35  47  
07:46:35  48  	-- populate normalization table based on winsorized data
07:46:35  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:46:35  50  	  norm_table_name => 'svmc_norm',
07:46:35  51  	  data_table_name => 'svmc_winsor',
07:46:35  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:35  53  
07:46:35  54  	-- normalize the original data
07:46:35  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:35  56  	  norm_table_name => 'svmc_norm',
07:46:35  57  	  data_table_name => '&bldtable',
07:46:35  58  	  xform_view_name => 'svmc_build_prep');
07:46:35  59  END;
07:46:35  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.30
07:46:36 SQL> 
07:46:36 SQL> ---------------------
07:46:36 SQL> -- CREATE A NEW MODEL
07:46:36 SQL> --
07:46:36 SQL> -- Cleanup old model with the same name for repeat runs
07:46:36 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:46:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:36   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.41
07:46:38 SQL> 
07:46:38 SQL> -- Build a new SVM Model
07:46:38 SQL> BEGIN
07:46:38   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:46:38   3  	  model_name	      => '&model_name',
07:46:38   4  	  mining_function     => dbms_data_mining.classification,
07:46:38   5  	  data_table_name     => 'svmc_build_prep',
07:46:38   6  	  case_id_column_name => '&case_id',
07:46:38   7  	  target_column_name  => '&target',
07:46:38   8  	  settings_table_name => 'svmc_settings');
07:46:38   9  END;
07:46:38  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:06.77
07:46:44 SQL> 
07:46:44 SQL> -----------------------------------------------------------------------
07:46:44 SQL> --			       APPLY/score THE MODEL
07:46:44 SQL> -----------------------------------------------------------------------
07:46:44 SQL> 
07:46:44 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:46:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:46:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:46:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:46:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:46:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:46:44 SQL> -----------------------
07:46:44 SQL> -- PREPARE SCORING DATA
07:46:44 SQL> --
07:46:44 SQL> -- If the data for model creation has been prepared, then the data
07:46:44 SQL> -- to be scored using the model must be prepared in the same manner
07:46:44 SQL> -- in order to obtain meaningful results.
07:46:44 SQL> --
07:46:44 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:44 SQL> -- 2. Normalization
07:46:44 SQL> -- No outlier treatment will be performed during test and apply. The
07:46:44 SQL> -- normalization step is sufficient, since the normalization parameters
07:46:44 SQL> -- already capture the effects of outlier treatment done with build data.
07:46:44 SQL> --
07:46:44 SQL> BEGIN
07:46:44   2  	-- Xform Test data to replace missing values
07:46:44   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:44   4  	  miss_table_name => 'svmc_miss_num',
07:46:44   5  	  data_table_name => '&scoretable',
07:46:44   6  	  xform_view_name => 'xformed_apply_miss_num');
07:46:44   7  
07:46:44   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:44   9  	  miss_table_name => 'svmc_miss_cat',
07:46:44  10  	  data_table_name => '&scoretable',
07:46:44  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:46:44  12  
07:46:44  13  	-- Normalize the data to be scored
07:46:44  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:44  15  	  norm_table_name => 'svmc_norm',
07:46:44  16  	  data_table_name => '&scoretable',
07:46:44  17  	  xform_view_name => 'svmc_apply_prep');
07:46:44  18  END;
07:46:44  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
07:46:45 SQL> 
07:46:45 SQL> -- Use same model_name used in score.sql
07:46:45 SQL> DEFINE model_name = 'forex14'
07:46:45 SQL> 
07:46:45 SQL> -- Maybe I already collected a score for this prdate.
07:46:45 SQL> -- DELETE it if I did:
07:46:45 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:46:45 SQL> 
07:46:45 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:46:45   2  SELECT
07:46:45   3  prdate
07:46:45   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:46:45   5  ,sysdate
07:46:45   6  ,SUBSTR(prdate,1,3)pair
07:46:45   7  ,SUBSTR(prdate,4,19)ydate
07:46:45   8  FROM svmc_apply_prep
07:46:45   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.06
07:46:45 SQL> @score1_5min_gattn.sql	2010-12-28 08:40:00
07:46:45 SQL> --
07:46:45 SQL> -- score1_5min_gattn.sql
07:46:45 SQL> --
07:46:45 SQL> 
07:46:45 SQL> CREATE OR REPLACE VIEW sme AS
07:46:45   2  SELECT
07:46:45   3  'jpy'||ydate prdate
07:46:45   4  ,NULL gattn
07:46:45   5  ,g00
07:46:45   6  ,g01
07:46:45   7  ,g02
07:46:45   8  ,g03
07:46:45   9  ,g04
07:46:45  10  ,g05
07:46:45  11  ,g06
07:46:45  12  ,g07
07:46:45  13  ,g08
07:46:45  14  FROM jpy_ms
07:46:45  15  WHERE ydate = '&1'||' '||'&2'
07:46:45  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:40:00'

View created.

Elapsed: 00:00:00.06
07:46:45 SQL> 
07:46:45 SQL> -- rpt
07:46:45 SQL> -- We should see just 1 row:
07:46:45 SQL> 
07:46:45 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:46:45 SQL> 
07:46:45 SQL> -- Build the model:
07:46:45 SQL> CREATE OR REPLACE VIEW bme AS
07:46:45   2  SELECT
07:46:45   3  'jpy'||ydate prdate
07:46:45   4  ,gattn
07:46:45   5  ,g00
07:46:45   6  ,g01
07:46:45   7  ,g02
07:46:45   8  ,g03
07:46:45   9  ,g04
07:46:45  10  ,g05
07:46:45  11  ,g06
07:46:45  12  ,g07
07:46:45  13  ,g08
07:46:45  14  FROM jpy_ms
07:46:45  15  WHERE gattn IN('nup','up')
07:46:45  16  -- Use only rows which are older than 1 day:
07:46:45  17  AND 1+ydate < '&1'||' '||'&2'
07:46:45  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:40:00'

View created.

Elapsed: 00:00:00.03
07:46:45 SQL> 
07:46:45 SQL> -- rpt
07:46:45 SQL> 
07:46:45 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9190
up	     9649

Elapsed: 00:00:00.07
07:46:45 SQL> 
07:46:45 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:35:00

Elapsed: 00:00:00.06
07:46:45 SQL> 
07:46:45 SQL> -- Now build model from bme and score sme
07:46:45 SQL> @score1gattn.sql
07:46:45 SQL> -- score1gattn.sql
07:46:45 SQL> 
07:46:45 SQL> -- Does the 1st SVM score
07:46:45 SQL> 
07:46:45 SQL> -- Fill up svmc_apply_prep
07:46:45 SQL> @score_gattn.sql
07:46:45 SQL> --
07:46:45 SQL> -- score_gattn.sql
07:46:45 SQL> --
07:46:45 SQL> 
07:46:45 SQL> -- usage: score_gattn.sql
07:46:45 SQL> 
07:46:45 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:46:45 SQL> 
07:46:45 SQL> DEFINE target	= 'gattn'
07:46:45 SQL> DEFINE model_name = 'forex14'
07:46:45 SQL> DEFINE bldtable	= 'bme'
07:46:45 SQL> DEFINE scoretable = 'sme'
07:46:45 SQL> DEFINE case_id	= 'prdate'
07:46:45 SQL> 
07:46:45 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:46:45 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:46:45 SQL> 
07:46:45 SQL> -- Builds an SVM model using pl/sql.
07:46:45 SQL> 
07:46:45 SQL> -----------------------------------------------------------------------
07:46:45 SQL> --			    BUILD THE MODEL
07:46:45 SQL> -----------------------------------------------------------------------
07:46:45 SQL> 
07:46:45 SQL> -- Cleanup old build data preparation objects for repeat runs
07:46:45 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:45 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:46:45 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:45 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:45 SQL> 
07:46:45 SQL> 
07:46:45 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:46:45 SQL> --
07:46:45 SQL> -- DROP	TABLE svmc_settings ;
07:46:45 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:46:45 SQL> -- DELETE svmc_settings;
07:46:45 SQL> 
07:46:45 SQL> -- The default classification algorithm is Naive Bayes. So override
07:46:45 SQL> -- this choice to SVM using a settings table.
07:46:45 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:46:45 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:46:45 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:46:45 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:46:45 SQL> -- models.
07:46:45 SQL> --
07:46:45 SQL> 
07:46:45 SQL> -- Do this once and then comment it out.
07:46:45 SQL> -- That makes script go faster.
07:46:45 SQL> -- BEGIN
07:46:45 SQL> -- -- Populate settings table
07:46:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:45 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:46:45 SQL> --
07:46:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:45 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:46:45 SQL> --
07:46:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:45 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:46:45 SQL> --   COMMIT;
07:46:45 SQL> -- END;
07:46:45 SQL> -- /
07:46:45 SQL> 
07:46:45 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:46:45 SQL> 
07:46:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:46:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:46:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:46:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:46:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:46:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:46:45 SQL> 
07:46:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:46:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:45 SQL> 
07:46:45 SQL> --------------------------------
07:46:45 SQL> -- PREPARE BUILD (TRAINING) DATA
07:46:45 SQL> --
07:46:45 SQL> 
07:46:45 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:45 SQL> -- 2. Outlier Treatment and
07:46:45 SQL> -- 3. Normalization are performed below.
07:46:45 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:46:45 SQL> --    normalized here.
07:46:45 SQL> 
07:46:45 SQL> BEGIN
07:46:45   2  	-- Perform missing value treatment for all predictors
07:46:45   3  	-- create miss tables
07:46:45   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:46:45   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:46:45   6  
07:46:45   7  	-- populate miss tables
07:46:45   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:46:45   9  	  miss_table_name => 'svmc_miss_num',
07:46:45  10  	  data_table_name => '&bldtable',
07:46:45  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:45  12  
07:46:45  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:46:45  14  	  miss_table_name => 'svmc_miss_cat',
07:46:45  15  	  data_table_name => '&bldtable',
07:46:45  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:45  17  
07:46:45  18  	-- xform input data to replace missing values
07:46:45  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:45  20  	  miss_table_name => 'svmc_miss_num',
07:46:45  21  	  data_table_name => '&bldtable',
07:46:45  22  	  xform_view_name => 'xformed_build_miss_num');
07:46:45  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:45  24  	  miss_table_name => 'svmc_miss_cat',
07:46:45  25  	  data_table_name => '&bldtable',
07:46:45  26  	  xform_view_name => 'xformed_build_miss_cat');
07:46:45  27  
07:46:45  28  	-- Perform outlier treatment.
07:46:45  29  	-- create clip table
07:46:45  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:46:45  31  
07:46:45  32  	-- populate clip table
07:46:45  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:46:45  34  	  clip_table_name => 'svmc_clip',
07:46:45  35  	  data_table_name => '&bldtable',
07:46:45  36  	  tail_frac	  => 0.025,
07:46:45  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:45  38  
07:46:45  39  	-- xform input data to winsorized data
07:46:45  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:46:45  41  	  clip_table_name => 'svmc_clip',
07:46:45  42  	  data_table_name => '&bldtable',
07:46:45  43  	  xform_view_name => 'svmc_winsor');
07:46:45  44  
07:46:45  45  	-- create normalization table
07:46:45  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:46:45  47  
07:46:45  48  	-- populate normalization table based on winsorized data
07:46:45  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:46:45  50  	  norm_table_name => 'svmc_norm',
07:46:45  51  	  data_table_name => 'svmc_winsor',
07:46:45  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:45  53  
07:46:45  54  	-- normalize the original data
07:46:45  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:45  56  	  norm_table_name => 'svmc_norm',
07:46:45  57  	  data_table_name => '&bldtable',
07:46:45  58  	  xform_view_name => 'svmc_build_prep');
07:46:45  59  END;
07:46:45  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
07:46:46 SQL> 
07:46:46 SQL> ---------------------
07:46:46 SQL> -- CREATE A NEW MODEL
07:46:46 SQL> --
07:46:46 SQL> -- Cleanup old model with the same name for repeat runs
07:46:46 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:46:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:46   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
07:46:47 SQL> 
07:46:47 SQL> -- Build a new SVM Model
07:46:47 SQL> BEGIN
07:46:47   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:46:47   3  	  model_name	      => '&model_name',
07:46:47   4  	  mining_function     => dbms_data_mining.classification,
07:46:47   5  	  data_table_name     => 'svmc_build_prep',
07:46:47   6  	  case_id_column_name => '&case_id',
07:46:47   7  	  target_column_name  => '&target',
07:46:47   8  	  settings_table_name => 'svmc_settings');
07:46:47   9  END;
07:46:47  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.73
07:46:53 SQL> 
07:46:53 SQL> -----------------------------------------------------------------------
07:46:53 SQL> --			       APPLY/score THE MODEL
07:46:53 SQL> -----------------------------------------------------------------------
07:46:53 SQL> 
07:46:53 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:46:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:46:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:46:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:46:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:46:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:46:53 SQL> -----------------------
07:46:53 SQL> -- PREPARE SCORING DATA
07:46:53 SQL> --
07:46:53 SQL> -- If the data for model creation has been prepared, then the data
07:46:53 SQL> -- to be scored using the model must be prepared in the same manner
07:46:53 SQL> -- in order to obtain meaningful results.
07:46:53 SQL> --
07:46:53 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:53 SQL> -- 2. Normalization
07:46:53 SQL> -- No outlier treatment will be performed during test and apply. The
07:46:53 SQL> -- normalization step is sufficient, since the normalization parameters
07:46:53 SQL> -- already capture the effects of outlier treatment done with build data.
07:46:53 SQL> --
07:46:53 SQL> BEGIN
07:46:53   2  	-- Xform Test data to replace missing values
07:46:53   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:53   4  	  miss_table_name => 'svmc_miss_num',
07:46:53   5  	  data_table_name => '&scoretable',
07:46:53   6  	  xform_view_name => 'xformed_apply_miss_num');
07:46:53   7  
07:46:53   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:53   9  	  miss_table_name => 'svmc_miss_cat',
07:46:53  10  	  data_table_name => '&scoretable',
07:46:53  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:46:53  12  
07:46:53  13  	-- Normalize the data to be scored
07:46:53  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:53  15  	  norm_table_name => 'svmc_norm',
07:46:53  16  	  data_table_name => '&scoretable',
07:46:53  17  	  xform_view_name => 'svmc_apply_prep');
07:46:53  18  END;
07:46:53  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
07:46:53 SQL> 
07:46:53 SQL> -- Use same model_name used in score.sql
07:46:53 SQL> DEFINE model_name = 'forex14'
07:46:53 SQL> 
07:46:53 SQL> -- Maybe I already collected a score for this prdate.
07:46:53 SQL> -- DELETE it if I did:
07:46:53 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:46:53 SQL> 
07:46:53 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:46:53   2  SELECT
07:46:53   3  prdate
07:46:53   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:46:53   5  ,sysdate
07:46:53   6  ,SUBSTR(prdate,1,3)pair
07:46:53   7  ,SUBSTR(prdate,4,19)ydate
07:46:53   8  FROM svmc_apply_prep
07:46:53   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:46:53 SQL> @score1_5min.sql	      2010-12-28 08:45:00
07:46:53 SQL> --
07:46:53 SQL> -- score1_5min.sql
07:46:53 SQL> --
07:46:53 SQL> 
07:46:53 SQL> CREATE OR REPLACE VIEW sme AS
07:46:53   2  SELECT
07:46:53   3  'jpy'||ydate prdate
07:46:53   4  ,NULL gatt
07:46:53   5  ,g00
07:46:53   6  ,g01
07:46:53   7  ,g02
07:46:53   8  ,g03
07:46:53   9  ,g04
07:46:53  10  ,g05
07:46:53  11  ,g06
07:46:53  12  ,g07
07:46:53  13  ,g08
07:46:53  14  FROM jpy_ms
07:46:53  15  WHERE ydate = '&1'||' '||'&2'
07:46:53  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:45:00'

View created.

Elapsed: 00:00:00.07
07:46:53 SQL> 
07:46:53 SQL> -- rpt
07:46:53 SQL> -- We should see just 1 row:
07:46:53 SQL> 
07:46:53 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:46:53 SQL> 
07:46:53 SQL> -- Build the model:
07:46:53 SQL> CREATE OR REPLACE VIEW bme AS
07:46:53   2  SELECT
07:46:53   3  'jpy'||ydate prdate
07:46:53   4  ,gatt
07:46:53   5  ,g00
07:46:53   6  ,g01
07:46:53   7  ,g02
07:46:53   8  ,g03
07:46:53   9  ,g04
07:46:53  10  ,g05
07:46:53  11  ,g06
07:46:53  12  ,g07
07:46:53  13  ,g08
07:46:53  14  FROM jpy_ms
07:46:53  15  WHERE gatt IN('nup','up')
07:46:53  16  -- Use only rows which are older than 1 day:
07:46:53  17  AND 1+ydate < '&1'||' '||'&2'
07:46:53  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:45:00'

View created.

Elapsed: 00:00:00.06
07:46:53 SQL> 
07:46:53 SQL> -- rpt
07:46:53 SQL> 
07:46:53 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8899

Elapsed: 00:00:00.07
07:46:54 SQL> 
07:46:54 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:40:00

Elapsed: 00:00:00.06
07:46:54 SQL> 
07:46:54 SQL> -- Now build model from bme and score sme
07:46:54 SQL> @score1.sql
07:46:54 SQL> -- score1.sql
07:46:54 SQL> 
07:46:54 SQL> -- Does the 1st SVM score
07:46:54 SQL> 
07:46:54 SQL> -- Fill up svmc_apply_prep
07:46:54 SQL> @score.sql
07:46:54 SQL> --
07:46:54 SQL> -- score.sql
07:46:54 SQL> --
07:46:54 SQL> 
07:46:54 SQL> -- usage: score.sql
07:46:54 SQL> 
07:46:54 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:46:54 SQL> 
07:46:54 SQL> DEFINE target	= 'gatt'
07:46:54 SQL> DEFINE model_name = 'forex14'
07:46:54 SQL> DEFINE bldtable	= 'bme'
07:46:54 SQL> DEFINE scoretable = 'sme'
07:46:54 SQL> DEFINE case_id	= 'prdate'
07:46:54 SQL> 
07:46:54 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:46:54 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:46:54 SQL> 
07:46:54 SQL> -- Builds an SVM model using pl/sql.
07:46:54 SQL> 
07:46:54 SQL> -----------------------------------------------------------------------
07:46:54 SQL> --			    BUILD THE MODEL
07:46:54 SQL> -----------------------------------------------------------------------
07:46:54 SQL> 
07:46:54 SQL> -- Cleanup old build data preparation objects for repeat runs
07:46:54 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:54 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:46:54 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:46:54 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.01
07:46:54 SQL> 
07:46:54 SQL> 
07:46:54 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:46:54 SQL> --
07:46:54 SQL> -- DROP	TABLE svmc_settings ;
07:46:54 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:46:54 SQL> -- DELETE svmc_settings;
07:46:54 SQL> 
07:46:54 SQL> -- The default classification algorithm is Naive Bayes. So override
07:46:54 SQL> -- this choice to SVM using a settings table.
07:46:54 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:46:54 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:46:54 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:46:54 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:46:54 SQL> -- models.
07:46:54 SQL> --
07:46:54 SQL> 
07:46:54 SQL> -- Do this once and then comment it out.
07:46:54 SQL> -- That makes script go faster.
07:46:54 SQL> -- BEGIN
07:46:54 SQL> -- -- Populate settings table
07:46:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:54 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:46:54 SQL> --
07:46:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:54 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:46:54 SQL> --
07:46:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:46:54 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:46:54 SQL> --   COMMIT;
07:46:54 SQL> -- END;
07:46:54 SQL> -- /
07:46:54 SQL> 
07:46:54 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:46:54 SQL> 
07:46:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:46:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:46:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:46:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:46:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:46:54 SQL> 
07:46:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:46:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:46:54 SQL> 
07:46:54 SQL> --------------------------------
07:46:54 SQL> -- PREPARE BUILD (TRAINING) DATA
07:46:54 SQL> --
07:46:54 SQL> 
07:46:54 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:54 SQL> -- 2. Outlier Treatment and
07:46:54 SQL> -- 3. Normalization are performed below.
07:46:54 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:46:54 SQL> --    normalized here.
07:46:54 SQL> 
07:46:54 SQL> BEGIN
07:46:54   2  	-- Perform missing value treatment for all predictors
07:46:54   3  	-- create miss tables
07:46:54   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:46:54   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:46:54   6  
07:46:54   7  	-- populate miss tables
07:46:54   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:46:54   9  	  miss_table_name => 'svmc_miss_num',
07:46:54  10  	  data_table_name => '&bldtable',
07:46:54  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:54  12  
07:46:54  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:46:54  14  	  miss_table_name => 'svmc_miss_cat',
07:46:54  15  	  data_table_name => '&bldtable',
07:46:54  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:54  17  
07:46:54  18  	-- xform input data to replace missing values
07:46:54  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:54  20  	  miss_table_name => 'svmc_miss_num',
07:46:54  21  	  data_table_name => '&bldtable',
07:46:54  22  	  xform_view_name => 'xformed_build_miss_num');
07:46:54  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:54  24  	  miss_table_name => 'svmc_miss_cat',
07:46:54  25  	  data_table_name => '&bldtable',
07:46:54  26  	  xform_view_name => 'xformed_build_miss_cat');
07:46:54  27  
07:46:54  28  	-- Perform outlier treatment.
07:46:54  29  	-- create clip table
07:46:54  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:46:54  31  
07:46:54  32  	-- populate clip table
07:46:54  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:46:54  34  	  clip_table_name => 'svmc_clip',
07:46:54  35  	  data_table_name => '&bldtable',
07:46:54  36  	  tail_frac	  => 0.025,
07:46:54  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:54  38  
07:46:54  39  	-- xform input data to winsorized data
07:46:54  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:46:54  41  	  clip_table_name => 'svmc_clip',
07:46:54  42  	  data_table_name => '&bldtable',
07:46:54  43  	  xform_view_name => 'svmc_winsor');
07:46:54  44  
07:46:54  45  	-- create normalization table
07:46:54  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:46:54  47  
07:46:54  48  	-- populate normalization table based on winsorized data
07:46:54  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:46:54  50  	  norm_table_name => 'svmc_norm',
07:46:54  51  	  data_table_name => 'svmc_winsor',
07:46:54  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:46:54  53  
07:46:54  54  	-- normalize the original data
07:46:54  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:54  56  	  norm_table_name => 'svmc_norm',
07:46:54  57  	  data_table_name => '&bldtable',
07:46:54  58  	  xform_view_name => 'svmc_build_prep');
07:46:54  59  END;
07:46:54  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.37
07:46:55 SQL> 
07:46:55 SQL> ---------------------
07:46:55 SQL> -- CREATE A NEW MODEL
07:46:55 SQL> --
07:46:55 SQL> -- Cleanup old model with the same name for repeat runs
07:46:55 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:46:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:55   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.34
07:46:56 SQL> 
07:46:56 SQL> -- Build a new SVM Model
07:46:56 SQL> BEGIN
07:46:56   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:46:56   3  	  model_name	      => '&model_name',
07:46:56   4  	  mining_function     => dbms_data_mining.classification,
07:46:56   5  	  data_table_name     => 'svmc_build_prep',
07:46:56   6  	  case_id_column_name => '&case_id',
07:46:56   7  	  target_column_name  => '&target',
07:46:56   8  	  settings_table_name => 'svmc_settings');
07:46:56   9  END;
07:46:56  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:07.91
07:47:04 SQL> 
07:47:04 SQL> -----------------------------------------------------------------------
07:47:04 SQL> --			       APPLY/score THE MODEL
07:47:04 SQL> -----------------------------------------------------------------------
07:47:04 SQL> 
07:47:04 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:47:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:47:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:47:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:47:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:47:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:47:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:47:04 SQL> -----------------------
07:47:04 SQL> -- PREPARE SCORING DATA
07:47:04 SQL> --
07:47:04 SQL> -- If the data for model creation has been prepared, then the data
07:47:04 SQL> -- to be scored using the model must be prepared in the same manner
07:47:04 SQL> -- in order to obtain meaningful results.
07:47:04 SQL> --
07:47:04 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:04 SQL> -- 2. Normalization
07:47:04 SQL> -- No outlier treatment will be performed during test and apply. The
07:47:04 SQL> -- normalization step is sufficient, since the normalization parameters
07:47:04 SQL> -- already capture the effects of outlier treatment done with build data.
07:47:04 SQL> --
07:47:04 SQL> BEGIN
07:47:04   2  	-- Xform Test data to replace missing values
07:47:04   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:04   4  	  miss_table_name => 'svmc_miss_num',
07:47:04   5  	  data_table_name => '&scoretable',
07:47:04   6  	  xform_view_name => 'xformed_apply_miss_num');
07:47:04   7  
07:47:04   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:04   9  	  miss_table_name => 'svmc_miss_cat',
07:47:04  10  	  data_table_name => '&scoretable',
07:47:04  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:47:04  12  
07:47:04  13  	-- Normalize the data to be scored
07:47:04  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:04  15  	  norm_table_name => 'svmc_norm',
07:47:04  16  	  data_table_name => '&scoretable',
07:47:04  17  	  xform_view_name => 'svmc_apply_prep');
07:47:04  18  END;
07:47:04  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.22
07:47:05 SQL> 
07:47:05 SQL> -- Use same model_name used in score.sql
07:47:05 SQL> DEFINE model_name = 'forex14'
07:47:05 SQL> 
07:47:05 SQL> -- Maybe I already collected a score for this prdate.
07:47:05 SQL> -- DELETE it if I did:
07:47:05 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:47:05 SQL> 
07:47:05 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:47:05   2  SELECT
07:47:05   3  prdate
07:47:05   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:47:05   5  ,sysdate
07:47:05   6  ,SUBSTR(prdate,1,3)pair
07:47:05   7  ,SUBSTR(prdate,4,19)ydate
07:47:05   8  FROM svmc_apply_prep
07:47:05   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:47:05 SQL> @score1_5min_gattn.sql	2010-12-28 08:45:00
07:47:05 SQL> --
07:47:05 SQL> -- score1_5min_gattn.sql
07:47:05 SQL> --
07:47:05 SQL> 
07:47:05 SQL> CREATE OR REPLACE VIEW sme AS
07:47:05   2  SELECT
07:47:05   3  'jpy'||ydate prdate
07:47:05   4  ,NULL gattn
07:47:05   5  ,g00
07:47:05   6  ,g01
07:47:05   7  ,g02
07:47:05   8  ,g03
07:47:05   9  ,g04
07:47:05  10  ,g05
07:47:05  11  ,g06
07:47:05  12  ,g07
07:47:05  13  ,g08
07:47:05  14  FROM jpy_ms
07:47:05  15  WHERE ydate = '&1'||' '||'&2'
07:47:05  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:45:00'

View created.

Elapsed: 00:00:00.09
07:47:05 SQL> 
07:47:05 SQL> -- rpt
07:47:05 SQL> -- We should see just 1 row:
07:47:05 SQL> 
07:47:05 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:47:05 SQL> 
07:47:05 SQL> -- Build the model:
07:47:05 SQL> CREATE OR REPLACE VIEW bme AS
07:47:05   2  SELECT
07:47:05   3  'jpy'||ydate prdate
07:47:05   4  ,gattn
07:47:05   5  ,g00
07:47:05   6  ,g01
07:47:05   7  ,g02
07:47:05   8  ,g03
07:47:05   9  ,g04
07:47:05  10  ,g05
07:47:05  11  ,g06
07:47:05  12  ,g07
07:47:05  13  ,g08
07:47:05  14  FROM jpy_ms
07:47:05  15  WHERE gattn IN('nup','up')
07:47:05  16  -- Use only rows which are older than 1 day:
07:47:05  17  AND 1+ydate < '&1'||' '||'&2'
07:47:05  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:45:00'

View created.

Elapsed: 00:00:00.11
07:47:05 SQL> 
07:47:05 SQL> -- rpt
07:47:05 SQL> 
07:47:05 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9191
up	     9649

Elapsed: 00:00:00.06
07:47:05 SQL> 
07:47:05 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:40:00

Elapsed: 00:00:00.05
07:47:05 SQL> 
07:47:05 SQL> -- Now build model from bme and score sme
07:47:05 SQL> @score1gattn.sql
07:47:05 SQL> -- score1gattn.sql
07:47:05 SQL> 
07:47:05 SQL> -- Does the 1st SVM score
07:47:05 SQL> 
07:47:05 SQL> -- Fill up svmc_apply_prep
07:47:05 SQL> @score_gattn.sql
07:47:05 SQL> --
07:47:05 SQL> -- score_gattn.sql
07:47:05 SQL> --
07:47:05 SQL> 
07:47:05 SQL> -- usage: score_gattn.sql
07:47:05 SQL> 
07:47:05 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:47:05 SQL> 
07:47:05 SQL> DEFINE target	= 'gattn'
07:47:05 SQL> DEFINE model_name = 'forex14'
07:47:05 SQL> DEFINE bldtable	= 'bme'
07:47:05 SQL> DEFINE scoretable = 'sme'
07:47:05 SQL> DEFINE case_id	= 'prdate'
07:47:05 SQL> 
07:47:05 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:47:05 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:47:05 SQL> 
07:47:05 SQL> -- Builds an SVM model using pl/sql.
07:47:05 SQL> 
07:47:05 SQL> -----------------------------------------------------------------------
07:47:05 SQL> --			    BUILD THE MODEL
07:47:05 SQL> -----------------------------------------------------------------------
07:47:05 SQL> 
07:47:05 SQL> -- Cleanup old build data preparation objects for repeat runs
07:47:05 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:05 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:47:05 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:05 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:05 SQL> 
07:47:05 SQL> 
07:47:05 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:47:05 SQL> --
07:47:05 SQL> -- DROP	TABLE svmc_settings ;
07:47:05 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:47:05 SQL> -- DELETE svmc_settings;
07:47:05 SQL> 
07:47:05 SQL> -- The default classification algorithm is Naive Bayes. So override
07:47:05 SQL> -- this choice to SVM using a settings table.
07:47:05 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:47:05 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:47:05 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:47:05 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:47:05 SQL> -- models.
07:47:05 SQL> --
07:47:05 SQL> 
07:47:05 SQL> -- Do this once and then comment it out.
07:47:05 SQL> -- That makes script go faster.
07:47:05 SQL> -- BEGIN
07:47:05 SQL> -- -- Populate settings table
07:47:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:05 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:47:05 SQL> --
07:47:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:05 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:47:05 SQL> --
07:47:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:05 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:47:05 SQL> --   COMMIT;
07:47:05 SQL> -- END;
07:47:05 SQL> -- /
07:47:05 SQL> 
07:47:05 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:47:05 SQL> 
07:47:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:47:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:47:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:47:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:47:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:47:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:47:05 SQL> 
07:47:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:47:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:47:05 SQL> 
07:47:05 SQL> --------------------------------
07:47:05 SQL> -- PREPARE BUILD (TRAINING) DATA
07:47:05 SQL> --
07:47:05 SQL> 
07:47:05 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:05 SQL> -- 2. Outlier Treatment and
07:47:05 SQL> -- 3. Normalization are performed below.
07:47:05 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:47:05 SQL> --    normalized here.
07:47:05 SQL> 
07:47:05 SQL> BEGIN
07:47:05   2  	-- Perform missing value treatment for all predictors
07:47:05   3  	-- create miss tables
07:47:05   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:47:05   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:47:05   6  
07:47:05   7  	-- populate miss tables
07:47:05   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:47:05   9  	  miss_table_name => 'svmc_miss_num',
07:47:05  10  	  data_table_name => '&bldtable',
07:47:05  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:05  12  
07:47:05  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:47:05  14  	  miss_table_name => 'svmc_miss_cat',
07:47:05  15  	  data_table_name => '&bldtable',
07:47:05  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:05  17  
07:47:05  18  	-- xform input data to replace missing values
07:47:05  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:05  20  	  miss_table_name => 'svmc_miss_num',
07:47:05  21  	  data_table_name => '&bldtable',
07:47:05  22  	  xform_view_name => 'xformed_build_miss_num');
07:47:05  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:05  24  	  miss_table_name => 'svmc_miss_cat',
07:47:05  25  	  data_table_name => '&bldtable',
07:47:05  26  	  xform_view_name => 'xformed_build_miss_cat');
07:47:05  27  
07:47:05  28  	-- Perform outlier treatment.
07:47:05  29  	-- create clip table
07:47:05  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:47:05  31  
07:47:05  32  	-- populate clip table
07:47:05  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:47:05  34  	  clip_table_name => 'svmc_clip',
07:47:05  35  	  data_table_name => '&bldtable',
07:47:05  36  	  tail_frac	  => 0.025,
07:47:05  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:05  38  
07:47:05  39  	-- xform input data to winsorized data
07:47:05  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:47:05  41  	  clip_table_name => 'svmc_clip',
07:47:05  42  	  data_table_name => '&bldtable',
07:47:05  43  	  xform_view_name => 'svmc_winsor');
07:47:05  44  
07:47:05  45  	-- create normalization table
07:47:05  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:47:05  47  
07:47:05  48  	-- populate normalization table based on winsorized data
07:47:05  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:47:05  50  	  norm_table_name => 'svmc_norm',
07:47:05  51  	  data_table_name => 'svmc_winsor',
07:47:05  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:05  53  
07:47:05  54  	-- normalize the original data
07:47:05  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:05  56  	  norm_table_name => 'svmc_norm',
07:47:05  57  	  data_table_name => '&bldtable',
07:47:05  58  	  xform_view_name => 'svmc_build_prep');
07:47:05  59  END;
07:47:05  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.29
07:47:07 SQL> 
07:47:07 SQL> ---------------------
07:47:07 SQL> -- CREATE A NEW MODEL
07:47:07 SQL> --
07:47:07 SQL> -- Cleanup old model with the same name for repeat runs
07:47:07 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:47:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:07   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.08
07:47:09 SQL> 
07:47:09 SQL> -- Build a new SVM Model
07:47:09 SQL> BEGIN
07:47:09   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:47:09   3  	  model_name	      => '&model_name',
07:47:09   4  	  mining_function     => dbms_data_mining.classification,
07:47:09   5  	  data_table_name     => 'svmc_build_prep',
07:47:09   6  	  case_id_column_name => '&case_id',
07:47:09   7  	  target_column_name  => '&target',
07:47:09   8  	  settings_table_name => 'svmc_settings');
07:47:09   9  END;
07:47:09  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.92
07:47:15 SQL> 
07:47:15 SQL> -----------------------------------------------------------------------
07:47:15 SQL> --			       APPLY/score THE MODEL
07:47:15 SQL> -----------------------------------------------------------------------
07:47:15 SQL> 
07:47:15 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:47:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:47:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:47:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:47:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:47:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:47:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:47:15 SQL> -----------------------
07:47:15 SQL> -- PREPARE SCORING DATA
07:47:15 SQL> --
07:47:15 SQL> -- If the data for model creation has been prepared, then the data
07:47:15 SQL> -- to be scored using the model must be prepared in the same manner
07:47:15 SQL> -- in order to obtain meaningful results.
07:47:15 SQL> --
07:47:15 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:15 SQL> -- 2. Normalization
07:47:15 SQL> -- No outlier treatment will be performed during test and apply. The
07:47:15 SQL> -- normalization step is sufficient, since the normalization parameters
07:47:15 SQL> -- already capture the effects of outlier treatment done with build data.
07:47:15 SQL> --
07:47:15 SQL> BEGIN
07:47:15   2  	-- Xform Test data to replace missing values
07:47:15   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:15   4  	  miss_table_name => 'svmc_miss_num',
07:47:15   5  	  data_table_name => '&scoretable',
07:47:15   6  	  xform_view_name => 'xformed_apply_miss_num');
07:47:15   7  
07:47:15   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:15   9  	  miss_table_name => 'svmc_miss_cat',
07:47:15  10  	  data_table_name => '&scoretable',
07:47:15  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:47:15  12  
07:47:15  13  	-- Normalize the data to be scored
07:47:15  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:15  15  	  norm_table_name => 'svmc_norm',
07:47:15  16  	  data_table_name => '&scoretable',
07:47:15  17  	  xform_view_name => 'svmc_apply_prep');
07:47:15  18  END;
07:47:15  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
07:47:15 SQL> 
07:47:15 SQL> -- Use same model_name used in score.sql
07:47:15 SQL> DEFINE model_name = 'forex14'
07:47:15 SQL> 
07:47:15 SQL> -- Maybe I already collected a score for this prdate.
07:47:15 SQL> -- DELETE it if I did:
07:47:15 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:47:15 SQL> 
07:47:15 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:47:15   2  SELECT
07:47:15   3  prdate
07:47:15   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:47:15   5  ,sysdate
07:47:15   6  ,SUBSTR(prdate,1,3)pair
07:47:15   7  ,SUBSTR(prdate,4,19)ydate
07:47:15   8  FROM svmc_apply_prep
07:47:15   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:47:15 SQL> @score1_5min.sql	      2010-12-28 08:50:00
07:47:15 SQL> --
07:47:15 SQL> -- score1_5min.sql
07:47:15 SQL> --
07:47:15 SQL> 
07:47:15 SQL> CREATE OR REPLACE VIEW sme AS
07:47:15   2  SELECT
07:47:15   3  'jpy'||ydate prdate
07:47:15   4  ,NULL gatt
07:47:15   5  ,g00
07:47:15   6  ,g01
07:47:15   7  ,g02
07:47:15   8  ,g03
07:47:15   9  ,g04
07:47:15  10  ,g05
07:47:15  11  ,g06
07:47:15  12  ,g07
07:47:15  13  ,g08
07:47:15  14  FROM jpy_ms
07:47:15  15  WHERE ydate = '&1'||' '||'&2'
07:47:15  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:50:00'

View created.

Elapsed: 00:00:00.04
07:47:15 SQL> 
07:47:15 SQL> -- rpt
07:47:15 SQL> -- We should see just 1 row:
07:47:15 SQL> 
07:47:15 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:47:15 SQL> 
07:47:15 SQL> -- Build the model:
07:47:15 SQL> CREATE OR REPLACE VIEW bme AS
07:47:15   2  SELECT
07:47:15   3  'jpy'||ydate prdate
07:47:15   4  ,gatt
07:47:15   5  ,g00
07:47:15   6  ,g01
07:47:15   7  ,g02
07:47:15   8  ,g03
07:47:15   9  ,g04
07:47:15  10  ,g05
07:47:15  11  ,g06
07:47:15  12  ,g07
07:47:15  13  ,g08
07:47:15  14  FROM jpy_ms
07:47:15  15  WHERE gatt IN('nup','up')
07:47:15  16  -- Use only rows which are older than 1 day:
07:47:15  17  AND 1+ydate < '&1'||' '||'&2'
07:47:15  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:50:00'

View created.

Elapsed: 00:00:00.04
07:47:15 SQL> 
07:47:15 SQL> -- rpt
07:47:15 SQL> 
07:47:15 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8900

Elapsed: 00:00:00.07
07:47:15 SQL> 
07:47:15 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:45:00

Elapsed: 00:00:00.05
07:47:15 SQL> 
07:47:15 SQL> -- Now build model from bme and score sme
07:47:15 SQL> @score1.sql
07:47:15 SQL> -- score1.sql
07:47:15 SQL> 
07:47:15 SQL> -- Does the 1st SVM score
07:47:15 SQL> 
07:47:15 SQL> -- Fill up svmc_apply_prep
07:47:15 SQL> @score.sql
07:47:15 SQL> --
07:47:15 SQL> -- score.sql
07:47:15 SQL> --
07:47:15 SQL> 
07:47:15 SQL> -- usage: score.sql
07:47:15 SQL> 
07:47:15 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:47:15 SQL> 
07:47:15 SQL> DEFINE target	= 'gatt'
07:47:15 SQL> DEFINE model_name = 'forex14'
07:47:15 SQL> DEFINE bldtable	= 'bme'
07:47:15 SQL> DEFINE scoretable = 'sme'
07:47:15 SQL> DEFINE case_id	= 'prdate'
07:47:15 SQL> 
07:47:15 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:47:15 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:47:15 SQL> 
07:47:15 SQL> -- Builds an SVM model using pl/sql.
07:47:15 SQL> 
07:47:15 SQL> -----------------------------------------------------------------------
07:47:15 SQL> --			    BUILD THE MODEL
07:47:15 SQL> -----------------------------------------------------------------------
07:47:15 SQL> 
07:47:15 SQL> -- Cleanup old build data preparation objects for repeat runs
07:47:15 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:15 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:47:15 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:15 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:15 SQL> 
07:47:15 SQL> 
07:47:15 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:47:15 SQL> --
07:47:15 SQL> -- DROP	TABLE svmc_settings ;
07:47:15 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:47:15 SQL> -- DELETE svmc_settings;
07:47:15 SQL> 
07:47:15 SQL> -- The default classification algorithm is Naive Bayes. So override
07:47:15 SQL> -- this choice to SVM using a settings table.
07:47:15 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:47:15 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:47:15 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:47:15 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:47:15 SQL> -- models.
07:47:15 SQL> --
07:47:15 SQL> 
07:47:15 SQL> -- Do this once and then comment it out.
07:47:15 SQL> -- That makes script go faster.
07:47:15 SQL> -- BEGIN
07:47:15 SQL> -- -- Populate settings table
07:47:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:15 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:47:15 SQL> --
07:47:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:15 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:47:15 SQL> --
07:47:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:15 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:47:15 SQL> --   COMMIT;
07:47:15 SQL> -- END;
07:47:15 SQL> -- /
07:47:15 SQL> 
07:47:15 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.01
07:47:15 SQL> 
07:47:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:47:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:47:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:47:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:47:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:47:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:47:16 SQL> 
07:47:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:47:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:47:16 SQL> 
07:47:16 SQL> --------------------------------
07:47:16 SQL> -- PREPARE BUILD (TRAINING) DATA
07:47:16 SQL> --
07:47:16 SQL> 
07:47:16 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:16 SQL> -- 2. Outlier Treatment and
07:47:16 SQL> -- 3. Normalization are performed below.
07:47:16 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:47:16 SQL> --    normalized here.
07:47:16 SQL> 
07:47:16 SQL> BEGIN
07:47:16   2  	-- Perform missing value treatment for all predictors
07:47:16   3  	-- create miss tables
07:47:16   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:47:16   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:47:16   6  
07:47:16   7  	-- populate miss tables
07:47:16   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:47:16   9  	  miss_table_name => 'svmc_miss_num',
07:47:16  10  	  data_table_name => '&bldtable',
07:47:16  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:16  12  
07:47:16  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:47:16  14  	  miss_table_name => 'svmc_miss_cat',
07:47:16  15  	  data_table_name => '&bldtable',
07:47:16  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:16  17  
07:47:16  18  	-- xform input data to replace missing values
07:47:16  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:16  20  	  miss_table_name => 'svmc_miss_num',
07:47:16  21  	  data_table_name => '&bldtable',
07:47:16  22  	  xform_view_name => 'xformed_build_miss_num');
07:47:16  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:16  24  	  miss_table_name => 'svmc_miss_cat',
07:47:16  25  	  data_table_name => '&bldtable',
07:47:16  26  	  xform_view_name => 'xformed_build_miss_cat');
07:47:16  27  
07:47:16  28  	-- Perform outlier treatment.
07:47:16  29  	-- create clip table
07:47:16  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:47:16  31  
07:47:16  32  	-- populate clip table
07:47:16  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:47:16  34  	  clip_table_name => 'svmc_clip',
07:47:16  35  	  data_table_name => '&bldtable',
07:47:16  36  	  tail_frac	  => 0.025,
07:47:16  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:16  38  
07:47:16  39  	-- xform input data to winsorized data
07:47:16  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:47:16  41  	  clip_table_name => 'svmc_clip',
07:47:16  42  	  data_table_name => '&bldtable',
07:47:16  43  	  xform_view_name => 'svmc_winsor');
07:47:16  44  
07:47:16  45  	-- create normalization table
07:47:16  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:47:16  47  
07:47:16  48  	-- populate normalization table based on winsorized data
07:47:16  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:47:16  50  	  norm_table_name => 'svmc_norm',
07:47:16  51  	  data_table_name => 'svmc_winsor',
07:47:16  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:16  53  
07:47:16  54  	-- normalize the original data
07:47:16  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:16  56  	  norm_table_name => 'svmc_norm',
07:47:16  57  	  data_table_name => '&bldtable',
07:47:16  58  	  xform_view_name => 'svmc_build_prep');
07:47:16  59  END;
07:47:16  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.21
07:47:17 SQL> 
07:47:17 SQL> ---------------------
07:47:17 SQL> -- CREATE A NEW MODEL
07:47:17 SQL> --
07:47:17 SQL> -- Cleanup old model with the same name for repeat runs
07:47:17 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:47:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:17   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.07
07:47:18 SQL> 
07:47:18 SQL> -- Build a new SVM Model
07:47:18 SQL> BEGIN
07:47:18   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:47:18   3  	  model_name	      => '&model_name',
07:47:18   4  	  mining_function     => dbms_data_mining.classification,
07:47:18   5  	  data_table_name     => 'svmc_build_prep',
07:47:18   6  	  case_id_column_name => '&case_id',
07:47:18   7  	  target_column_name  => '&target',
07:47:18   8  	  settings_table_name => 'svmc_settings');
07:47:18   9  END;
07:47:18  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:07.22
07:47:25 SQL> 
07:47:25 SQL> -----------------------------------------------------------------------
07:47:25 SQL> --			       APPLY/score THE MODEL
07:47:25 SQL> -----------------------------------------------------------------------
07:47:25 SQL> 
07:47:25 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:47:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:47:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:47:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:47:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:47:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:47:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:47:25 SQL> -----------------------
07:47:25 SQL> -- PREPARE SCORING DATA
07:47:25 SQL> --
07:47:25 SQL> -- If the data for model creation has been prepared, then the data
07:47:25 SQL> -- to be scored using the model must be prepared in the same manner
07:47:25 SQL> -- in order to obtain meaningful results.
07:47:25 SQL> --
07:47:25 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:25 SQL> -- 2. Normalization
07:47:25 SQL> -- No outlier treatment will be performed during test and apply. The
07:47:25 SQL> -- normalization step is sufficient, since the normalization parameters
07:47:25 SQL> -- already capture the effects of outlier treatment done with build data.
07:47:25 SQL> --
07:47:25 SQL> BEGIN
07:47:25   2  	-- Xform Test data to replace missing values
07:47:25   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:25   4  	  miss_table_name => 'svmc_miss_num',
07:47:25   5  	  data_table_name => '&scoretable',
07:47:25   6  	  xform_view_name => 'xformed_apply_miss_num');
07:47:25   7  
07:47:25   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:25   9  	  miss_table_name => 'svmc_miss_cat',
07:47:25  10  	  data_table_name => '&scoretable',
07:47:25  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:47:25  12  
07:47:25  13  	-- Normalize the data to be scored
07:47:25  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:25  15  	  norm_table_name => 'svmc_norm',
07:47:25  16  	  data_table_name => '&scoretable',
07:47:25  17  	  xform_view_name => 'svmc_apply_prep');
07:47:25  18  END;
07:47:25  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
07:47:25 SQL> 
07:47:25 SQL> -- Use same model_name used in score.sql
07:47:25 SQL> DEFINE model_name = 'forex14'
07:47:25 SQL> 
07:47:25 SQL> -- Maybe I already collected a score for this prdate.
07:47:25 SQL> -- DELETE it if I did:
07:47:25 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:47:25 SQL> 
07:47:25 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:47:25   2  SELECT
07:47:25   3  prdate
07:47:25   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:47:25   5  ,sysdate
07:47:25   6  ,SUBSTR(prdate,1,3)pair
07:47:25   7  ,SUBSTR(prdate,4,19)ydate
07:47:25   8  FROM svmc_apply_prep
07:47:25   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:47:26 SQL> @score1_5min_gattn.sql	2010-12-28 08:50:00
07:47:26 SQL> --
07:47:26 SQL> -- score1_5min_gattn.sql
07:47:26 SQL> --
07:47:26 SQL> 
07:47:26 SQL> CREATE OR REPLACE VIEW sme AS
07:47:26   2  SELECT
07:47:26   3  'jpy'||ydate prdate
07:47:26   4  ,NULL gattn
07:47:26   5  ,g00
07:47:26   6  ,g01
07:47:26   7  ,g02
07:47:26   8  ,g03
07:47:26   9  ,g04
07:47:26  10  ,g05
07:47:26  11  ,g06
07:47:26  12  ,g07
07:47:26  13  ,g08
07:47:26  14  FROM jpy_ms
07:47:26  15  WHERE ydate = '&1'||' '||'&2'
07:47:26  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:50:00'

View created.

Elapsed: 00:00:00.08
07:47:26 SQL> 
07:47:26 SQL> -- rpt
07:47:26 SQL> -- We should see just 1 row:
07:47:26 SQL> 
07:47:26 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:47:26 SQL> 
07:47:26 SQL> -- Build the model:
07:47:26 SQL> CREATE OR REPLACE VIEW bme AS
07:47:26   2  SELECT
07:47:26   3  'jpy'||ydate prdate
07:47:26   4  ,gattn
07:47:26   5  ,g00
07:47:26   6  ,g01
07:47:26   7  ,g02
07:47:26   8  ,g03
07:47:26   9  ,g04
07:47:26  10  ,g05
07:47:26  11  ,g06
07:47:26  12  ,g07
07:47:26  13  ,g08
07:47:26  14  FROM jpy_ms
07:47:26  15  WHERE gattn IN('nup','up')
07:47:26  16  -- Use only rows which are older than 1 day:
07:47:26  17  AND 1+ydate < '&1'||' '||'&2'
07:47:26  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:50:00'

View created.

Elapsed: 00:00:00.06
07:47:26 SQL> 
07:47:26 SQL> -- rpt
07:47:26 SQL> 
07:47:26 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9192
up	     9649

Elapsed: 00:00:00.06
07:47:26 SQL> 
07:47:26 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:45:00

Elapsed: 00:00:00.05
07:47:26 SQL> 
07:47:26 SQL> -- Now build model from bme and score sme
07:47:26 SQL> @score1gattn.sql
07:47:26 SQL> -- score1gattn.sql
07:47:26 SQL> 
07:47:26 SQL> -- Does the 1st SVM score
07:47:26 SQL> 
07:47:26 SQL> -- Fill up svmc_apply_prep
07:47:26 SQL> @score_gattn.sql
07:47:26 SQL> --
07:47:26 SQL> -- score_gattn.sql
07:47:26 SQL> --
07:47:26 SQL> 
07:47:26 SQL> -- usage: score_gattn.sql
07:47:26 SQL> 
07:47:26 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:47:26 SQL> 
07:47:26 SQL> DEFINE target	= 'gattn'
07:47:26 SQL> DEFINE model_name = 'forex14'
07:47:26 SQL> DEFINE bldtable	= 'bme'
07:47:26 SQL> DEFINE scoretable = 'sme'
07:47:26 SQL> DEFINE case_id	= 'prdate'
07:47:26 SQL> 
07:47:26 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:47:26 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:47:26 SQL> 
07:47:26 SQL> -- Builds an SVM model using pl/sql.
07:47:26 SQL> 
07:47:26 SQL> -----------------------------------------------------------------------
07:47:26 SQL> --			    BUILD THE MODEL
07:47:26 SQL> -----------------------------------------------------------------------
07:47:26 SQL> 
07:47:26 SQL> -- Cleanup old build data preparation objects for repeat runs
07:47:26 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:26 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:47:26 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:26 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:26 SQL> 
07:47:26 SQL> 
07:47:26 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:47:26 SQL> --
07:47:26 SQL> -- DROP	TABLE svmc_settings ;
07:47:26 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:47:26 SQL> -- DELETE svmc_settings;
07:47:26 SQL> 
07:47:26 SQL> -- The default classification algorithm is Naive Bayes. So override
07:47:26 SQL> -- this choice to SVM using a settings table.
07:47:26 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:47:26 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:47:26 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:47:26 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:47:26 SQL> -- models.
07:47:26 SQL> --
07:47:26 SQL> 
07:47:26 SQL> -- Do this once and then comment it out.
07:47:26 SQL> -- That makes script go faster.
07:47:26 SQL> -- BEGIN
07:47:26 SQL> -- -- Populate settings table
07:47:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:26 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:47:26 SQL> --
07:47:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:26 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:47:26 SQL> --
07:47:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:26 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:47:26 SQL> --   COMMIT;
07:47:26 SQL> -- END;
07:47:26 SQL> -- /
07:47:26 SQL> 
07:47:26 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.01
07:47:26 SQL> 
07:47:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:47:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:47:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:47:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:47:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:47:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
07:47:26 SQL> 
07:47:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:47:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:47:26 SQL> 
07:47:26 SQL> --------------------------------
07:47:26 SQL> -- PREPARE BUILD (TRAINING) DATA
07:47:26 SQL> --
07:47:26 SQL> 
07:47:26 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:26 SQL> -- 2. Outlier Treatment and
07:47:26 SQL> -- 3. Normalization are performed below.
07:47:26 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:47:26 SQL> --    normalized here.
07:47:26 SQL> 
07:47:26 SQL> BEGIN
07:47:26   2  	-- Perform missing value treatment for all predictors
07:47:26   3  	-- create miss tables
07:47:26   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:47:26   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:47:26   6  
07:47:26   7  	-- populate miss tables
07:47:26   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:47:26   9  	  miss_table_name => 'svmc_miss_num',
07:47:26  10  	  data_table_name => '&bldtable',
07:47:26  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:26  12  
07:47:26  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:47:26  14  	  miss_table_name => 'svmc_miss_cat',
07:47:26  15  	  data_table_name => '&bldtable',
07:47:26  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:26  17  
07:47:26  18  	-- xform input data to replace missing values
07:47:26  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:26  20  	  miss_table_name => 'svmc_miss_num',
07:47:26  21  	  data_table_name => '&bldtable',
07:47:26  22  	  xform_view_name => 'xformed_build_miss_num');
07:47:26  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:26  24  	  miss_table_name => 'svmc_miss_cat',
07:47:26  25  	  data_table_name => '&bldtable',
07:47:26  26  	  xform_view_name => 'xformed_build_miss_cat');
07:47:26  27  
07:47:26  28  	-- Perform outlier treatment.
07:47:26  29  	-- create clip table
07:47:26  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:47:26  31  
07:47:26  32  	-- populate clip table
07:47:26  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:47:26  34  	  clip_table_name => 'svmc_clip',
07:47:26  35  	  data_table_name => '&bldtable',
07:47:26  36  	  tail_frac	  => 0.025,
07:47:26  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:26  38  
07:47:26  39  	-- xform input data to winsorized data
07:47:26  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:47:26  41  	  clip_table_name => 'svmc_clip',
07:47:26  42  	  data_table_name => '&bldtable',
07:47:26  43  	  xform_view_name => 'svmc_winsor');
07:47:26  44  
07:47:26  45  	-- create normalization table
07:47:26  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:47:26  47  
07:47:26  48  	-- populate normalization table based on winsorized data
07:47:26  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:47:26  50  	  norm_table_name => 'svmc_norm',
07:47:26  51  	  data_table_name => 'svmc_winsor',
07:47:26  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:26  53  
07:47:26  54  	-- normalize the original data
07:47:26  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:26  56  	  norm_table_name => 'svmc_norm',
07:47:26  57  	  data_table_name => '&bldtable',
07:47:26  58  	  xform_view_name => 'svmc_build_prep');
07:47:26  59  END;
07:47:26  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
07:47:27 SQL> 
07:47:27 SQL> ---------------------
07:47:27 SQL> -- CREATE A NEW MODEL
07:47:27 SQL> --
07:47:27 SQL> -- Cleanup old model with the same name for repeat runs
07:47:27 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:47:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:27   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.95
07:47:29 SQL> 
07:47:29 SQL> -- Build a new SVM Model
07:47:29 SQL> BEGIN
07:47:29   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:47:29   3  	  model_name	      => '&model_name',
07:47:29   4  	  mining_function     => dbms_data_mining.classification,
07:47:29   5  	  data_table_name     => 'svmc_build_prep',
07:47:29   6  	  case_id_column_name => '&case_id',
07:47:29   7  	  target_column_name  => '&target',
07:47:29   8  	  settings_table_name => 'svmc_settings');
07:47:29   9  END;
07:47:29  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:07.25
07:47:37 SQL> 
07:47:37 SQL> -----------------------------------------------------------------------
07:47:37 SQL> --			       APPLY/score THE MODEL
07:47:37 SQL> -----------------------------------------------------------------------
07:47:37 SQL> 
07:47:37 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:47:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:47:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:47:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:47:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:47:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:47:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:47:37 SQL> -----------------------
07:47:37 SQL> -- PREPARE SCORING DATA
07:47:37 SQL> --
07:47:37 SQL> -- If the data for model creation has been prepared, then the data
07:47:37 SQL> -- to be scored using the model must be prepared in the same manner
07:47:37 SQL> -- in order to obtain meaningful results.
07:47:37 SQL> --
07:47:37 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:37 SQL> -- 2. Normalization
07:47:37 SQL> -- No outlier treatment will be performed during test and apply. The
07:47:37 SQL> -- normalization step is sufficient, since the normalization parameters
07:47:37 SQL> -- already capture the effects of outlier treatment done with build data.
07:47:37 SQL> --
07:47:37 SQL> BEGIN
07:47:37   2  	-- Xform Test data to replace missing values
07:47:37   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:37   4  	  miss_table_name => 'svmc_miss_num',
07:47:37   5  	  data_table_name => '&scoretable',
07:47:37   6  	  xform_view_name => 'xformed_apply_miss_num');
07:47:37   7  
07:47:37   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:37   9  	  miss_table_name => 'svmc_miss_cat',
07:47:37  10  	  data_table_name => '&scoretable',
07:47:37  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:47:37  12  
07:47:37  13  	-- Normalize the data to be scored
07:47:37  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:37  15  	  norm_table_name => 'svmc_norm',
07:47:37  16  	  data_table_name => '&scoretable',
07:47:37  17  	  xform_view_name => 'svmc_apply_prep');
07:47:37  18  END;
07:47:37  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
07:47:37 SQL> 
07:47:37 SQL> -- Use same model_name used in score.sql
07:47:37 SQL> DEFINE model_name = 'forex14'
07:47:37 SQL> 
07:47:37 SQL> -- Maybe I already collected a score for this prdate.
07:47:37 SQL> -- DELETE it if I did:
07:47:37 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:47:37 SQL> 
07:47:37 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:47:37   2  SELECT
07:47:37   3  prdate
07:47:37   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:47:37   5  ,sysdate
07:47:37   6  ,SUBSTR(prdate,1,3)pair
07:47:37   7  ,SUBSTR(prdate,4,19)ydate
07:47:37   8  FROM svmc_apply_prep
07:47:37   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:47:37 SQL> @score1_5min.sql	      2010-12-28 08:55:00
07:47:37 SQL> --
07:47:37 SQL> -- score1_5min.sql
07:47:37 SQL> --
07:47:37 SQL> 
07:47:37 SQL> CREATE OR REPLACE VIEW sme AS
07:47:37   2  SELECT
07:47:37   3  'jpy'||ydate prdate
07:47:37   4  ,NULL gatt
07:47:37   5  ,g00
07:47:37   6  ,g01
07:47:37   7  ,g02
07:47:37   8  ,g03
07:47:37   9  ,g04
07:47:37  10  ,g05
07:47:37  11  ,g06
07:47:37  12  ,g07
07:47:37  13  ,g08
07:47:37  14  FROM jpy_ms
07:47:37  15  WHERE ydate = '&1'||' '||'&2'
07:47:37  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:55:00'

View created.

Elapsed: 00:00:00.05
07:47:37 SQL> 
07:47:37 SQL> -- rpt
07:47:37 SQL> -- We should see just 1 row:
07:47:37 SQL> 
07:47:37 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:47:37 SQL> 
07:47:37 SQL> -- Build the model:
07:47:37 SQL> CREATE OR REPLACE VIEW bme AS
07:47:37   2  SELECT
07:47:37   3  'jpy'||ydate prdate
07:47:37   4  ,gatt
07:47:37   5  ,g00
07:47:37   6  ,g01
07:47:37   7  ,g02
07:47:37   8  ,g03
07:47:37   9  ,g04
07:47:37  10  ,g05
07:47:37  11  ,g06
07:47:37  12  ,g07
07:47:37  13  ,g08
07:47:37  14  FROM jpy_ms
07:47:37  15  WHERE gatt IN('nup','up')
07:47:37  16  -- Use only rows which are older than 1 day:
07:47:37  17  AND 1+ydate < '&1'||' '||'&2'
07:47:37  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:55:00'

View created.

Elapsed: 00:00:00.04
07:47:37 SQL> 
07:47:37 SQL> -- rpt
07:47:37 SQL> 
07:47:37 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8901

Elapsed: 00:00:00.07
07:47:37 SQL> 
07:47:37 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:50:00

Elapsed: 00:00:00.06
07:47:37 SQL> 
07:47:37 SQL> -- Now build model from bme and score sme
07:47:37 SQL> @score1.sql
07:47:37 SQL> -- score1.sql
07:47:37 SQL> 
07:47:37 SQL> -- Does the 1st SVM score
07:47:37 SQL> 
07:47:37 SQL> -- Fill up svmc_apply_prep
07:47:37 SQL> @score.sql
07:47:37 SQL> --
07:47:37 SQL> -- score.sql
07:47:37 SQL> --
07:47:37 SQL> 
07:47:37 SQL> -- usage: score.sql
07:47:37 SQL> 
07:47:37 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:47:37 SQL> 
07:47:37 SQL> DEFINE target	= 'gatt'
07:47:37 SQL> DEFINE model_name = 'forex14'
07:47:37 SQL> DEFINE bldtable	= 'bme'
07:47:37 SQL> DEFINE scoretable = 'sme'
07:47:37 SQL> DEFINE case_id	= 'prdate'
07:47:37 SQL> 
07:47:37 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:47:37 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:47:37 SQL> 
07:47:37 SQL> -- Builds an SVM model using pl/sql.
07:47:37 SQL> 
07:47:37 SQL> -----------------------------------------------------------------------
07:47:37 SQL> --			    BUILD THE MODEL
07:47:37 SQL> -----------------------------------------------------------------------
07:47:37 SQL> 
07:47:37 SQL> -- Cleanup old build data preparation objects for repeat runs
07:47:37 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:37 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:47:37 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:37 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:37 SQL> 
07:47:37 SQL> 
07:47:37 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:47:37 SQL> --
07:47:37 SQL> -- DROP	TABLE svmc_settings ;
07:47:37 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:47:37 SQL> -- DELETE svmc_settings;
07:47:37 SQL> 
07:47:37 SQL> -- The default classification algorithm is Naive Bayes. So override
07:47:37 SQL> -- this choice to SVM using a settings table.
07:47:37 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:47:37 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:47:37 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:47:37 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:47:37 SQL> -- models.
07:47:37 SQL> --
07:47:37 SQL> 
07:47:37 SQL> -- Do this once and then comment it out.
07:47:37 SQL> -- That makes script go faster.
07:47:37 SQL> -- BEGIN
07:47:37 SQL> -- -- Populate settings table
07:47:37 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:37 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:47:37 SQL> --
07:47:37 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:37 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:47:37 SQL> --
07:47:37 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:37 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:47:37 SQL> --   COMMIT;
07:47:37 SQL> -- END;
07:47:37 SQL> -- /
07:47:37 SQL> 
07:47:37 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:47:37 SQL> 
07:47:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:47:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
07:47:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:47:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:47:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:47:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:47:37 SQL> 
07:47:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:47:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:47:38 SQL> 
07:47:38 SQL> --------------------------------
07:47:38 SQL> -- PREPARE BUILD (TRAINING) DATA
07:47:38 SQL> --
07:47:38 SQL> 
07:47:38 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:38 SQL> -- 2. Outlier Treatment and
07:47:38 SQL> -- 3. Normalization are performed below.
07:47:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:47:38 SQL> --    normalized here.
07:47:38 SQL> 
07:47:38 SQL> BEGIN
07:47:38   2  	-- Perform missing value treatment for all predictors
07:47:38   3  	-- create miss tables
07:47:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:47:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:47:38   6  
07:47:38   7  	-- populate miss tables
07:47:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:47:38   9  	  miss_table_name => 'svmc_miss_num',
07:47:38  10  	  data_table_name => '&bldtable',
07:47:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:38  12  
07:47:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:47:38  14  	  miss_table_name => 'svmc_miss_cat',
07:47:38  15  	  data_table_name => '&bldtable',
07:47:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:38  17  
07:47:38  18  	-- xform input data to replace missing values
07:47:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:38  20  	  miss_table_name => 'svmc_miss_num',
07:47:38  21  	  data_table_name => '&bldtable',
07:47:38  22  	  xform_view_name => 'xformed_build_miss_num');
07:47:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:38  24  	  miss_table_name => 'svmc_miss_cat',
07:47:38  25  	  data_table_name => '&bldtable',
07:47:38  26  	  xform_view_name => 'xformed_build_miss_cat');
07:47:38  27  
07:47:38  28  	-- Perform outlier treatment.
07:47:38  29  	-- create clip table
07:47:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:47:38  31  
07:47:38  32  	-- populate clip table
07:47:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:47:38  34  	  clip_table_name => 'svmc_clip',
07:47:38  35  	  data_table_name => '&bldtable',
07:47:38  36  	  tail_frac	  => 0.025,
07:47:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:38  38  
07:47:38  39  	-- xform input data to winsorized data
07:47:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:47:38  41  	  clip_table_name => 'svmc_clip',
07:47:38  42  	  data_table_name => '&bldtable',
07:47:38  43  	  xform_view_name => 'svmc_winsor');
07:47:38  44  
07:47:38  45  	-- create normalization table
07:47:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:47:38  47  
07:47:38  48  	-- populate normalization table based on winsorized data
07:47:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:47:38  50  	  norm_table_name => 'svmc_norm',
07:47:38  51  	  data_table_name => 'svmc_winsor',
07:47:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:38  53  
07:47:38  54  	-- normalize the original data
07:47:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:38  56  	  norm_table_name => 'svmc_norm',
07:47:38  57  	  data_table_name => '&bldtable',
07:47:38  58  	  xform_view_name => 'svmc_build_prep');
07:47:38  59  END;
07:47:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.17
07:47:39 SQL> 
07:47:39 SQL> ---------------------
07:47:39 SQL> -- CREATE A NEW MODEL
07:47:39 SQL> --
07:47:39 SQL> -- Cleanup old model with the same name for repeat runs
07:47:39 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:47:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:39   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.30
07:47:40 SQL> 
07:47:40 SQL> -- Build a new SVM Model
07:47:40 SQL> BEGIN
07:47:40   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:47:40   3  	  model_name	      => '&model_name',
07:47:40   4  	  mining_function     => dbms_data_mining.classification,
07:47:40   5  	  data_table_name     => 'svmc_build_prep',
07:47:40   6  	  case_id_column_name => '&case_id',
07:47:40   7  	  target_column_name  => '&target',
07:47:40   8  	  settings_table_name => 'svmc_settings');
07:47:40   9  END;
07:47:40  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:07.30
07:47:47 SQL> 
07:47:47 SQL> -----------------------------------------------------------------------
07:47:47 SQL> --			       APPLY/score THE MODEL
07:47:47 SQL> -----------------------------------------------------------------------
07:47:47 SQL> 
07:47:47 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:47:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:47:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:47:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:47:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:47:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:47:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:47:47 SQL> -----------------------
07:47:47 SQL> -- PREPARE SCORING DATA
07:47:47 SQL> --
07:47:47 SQL> -- If the data for model creation has been prepared, then the data
07:47:47 SQL> -- to be scored using the model must be prepared in the same manner
07:47:47 SQL> -- in order to obtain meaningful results.
07:47:47 SQL> --
07:47:47 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:47 SQL> -- 2. Normalization
07:47:47 SQL> -- No outlier treatment will be performed during test and apply. The
07:47:47 SQL> -- normalization step is sufficient, since the normalization parameters
07:47:47 SQL> -- already capture the effects of outlier treatment done with build data.
07:47:47 SQL> --
07:47:47 SQL> BEGIN
07:47:47   2  	-- Xform Test data to replace missing values
07:47:47   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:47   4  	  miss_table_name => 'svmc_miss_num',
07:47:47   5  	  data_table_name => '&scoretable',
07:47:47   6  	  xform_view_name => 'xformed_apply_miss_num');
07:47:47   7  
07:47:47   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:47   9  	  miss_table_name => 'svmc_miss_cat',
07:47:47  10  	  data_table_name => '&scoretable',
07:47:47  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:47:47  12  
07:47:47  13  	-- Normalize the data to be scored
07:47:47  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:47  15  	  norm_table_name => 'svmc_norm',
07:47:47  16  	  data_table_name => '&scoretable',
07:47:47  17  	  xform_view_name => 'svmc_apply_prep');
07:47:47  18  END;
07:47:47  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
07:47:48 SQL> 
07:47:48 SQL> -- Use same model_name used in score.sql
07:47:48 SQL> DEFINE model_name = 'forex14'
07:47:48 SQL> 
07:47:48 SQL> -- Maybe I already collected a score for this prdate.
07:47:48 SQL> -- DELETE it if I did:
07:47:48 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:47:48 SQL> 
07:47:48 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:47:48   2  SELECT
07:47:48   3  prdate
07:47:48   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:47:48   5  ,sysdate
07:47:48   6  ,SUBSTR(prdate,1,3)pair
07:47:48   7  ,SUBSTR(prdate,4,19)ydate
07:47:48   8  FROM svmc_apply_prep
07:47:48   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:47:48 SQL> @score1_5min_gattn.sql	2010-12-28 08:55:00
07:47:48 SQL> --
07:47:48 SQL> -- score1_5min_gattn.sql
07:47:48 SQL> --
07:47:48 SQL> 
07:47:48 SQL> CREATE OR REPLACE VIEW sme AS
07:47:48   2  SELECT
07:47:48   3  'jpy'||ydate prdate
07:47:48   4  ,NULL gattn
07:47:48   5  ,g00
07:47:48   6  ,g01
07:47:48   7  ,g02
07:47:48   8  ,g03
07:47:48   9  ,g04
07:47:48  10  ,g05
07:47:48  11  ,g06
07:47:48  12  ,g07
07:47:48  13  ,g08
07:47:48  14  FROM jpy_ms
07:47:48  15  WHERE ydate = '&1'||' '||'&2'
07:47:48  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'08:55:00'

View created.

Elapsed: 00:00:00.03
07:47:48 SQL> 
07:47:48 SQL> -- rpt
07:47:48 SQL> -- We should see just 1 row:
07:47:48 SQL> 
07:47:48 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.00
07:47:48 SQL> 
07:47:48 SQL> -- Build the model:
07:47:48 SQL> CREATE OR REPLACE VIEW bme AS
07:47:48   2  SELECT
07:47:48   3  'jpy'||ydate prdate
07:47:48   4  ,gattn
07:47:48   5  ,g00
07:47:48   6  ,g01
07:47:48   7  ,g02
07:47:48   8  ,g03
07:47:48   9  ,g04
07:47:48  10  ,g05
07:47:48  11  ,g06
07:47:48  12  ,g07
07:47:48  13  ,g08
07:47:48  14  FROM jpy_ms
07:47:48  15  WHERE gattn IN('nup','up')
07:47:48  16  -- Use only rows which are older than 1 day:
07:47:48  17  AND 1+ydate < '&1'||' '||'&2'
07:47:48  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'08:55:00'

View created.

Elapsed: 00:00:00.04
07:47:48 SQL> 
07:47:48 SQL> -- rpt
07:47:48 SQL> 
07:47:48 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9193
up	     9649

Elapsed: 00:00:00.06
07:47:48 SQL> 
07:47:48 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:50:00

Elapsed: 00:00:00.05
07:47:48 SQL> 
07:47:48 SQL> -- Now build model from bme and score sme
07:47:48 SQL> @score1gattn.sql
07:47:48 SQL> -- score1gattn.sql
07:47:48 SQL> 
07:47:48 SQL> -- Does the 1st SVM score
07:47:48 SQL> 
07:47:48 SQL> -- Fill up svmc_apply_prep
07:47:48 SQL> @score_gattn.sql
07:47:48 SQL> --
07:47:48 SQL> -- score_gattn.sql
07:47:48 SQL> --
07:47:48 SQL> 
07:47:48 SQL> -- usage: score_gattn.sql
07:47:48 SQL> 
07:47:48 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:47:48 SQL> 
07:47:48 SQL> DEFINE target	= 'gattn'
07:47:48 SQL> DEFINE model_name = 'forex14'
07:47:48 SQL> DEFINE bldtable	= 'bme'
07:47:48 SQL> DEFINE scoretable = 'sme'
07:47:48 SQL> DEFINE case_id	= 'prdate'
07:47:48 SQL> 
07:47:48 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:47:48 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:47:48 SQL> 
07:47:48 SQL> -- Builds an SVM model using pl/sql.
07:47:48 SQL> 
07:47:48 SQL> -----------------------------------------------------------------------
07:47:48 SQL> --			    BUILD THE MODEL
07:47:48 SQL> -----------------------------------------------------------------------
07:47:48 SQL> 
07:47:48 SQL> -- Cleanup old build data preparation objects for repeat runs
07:47:48 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:48 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:47:48 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:48 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:48 SQL> 
07:47:48 SQL> 
07:47:48 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:47:48 SQL> --
07:47:48 SQL> -- DROP	TABLE svmc_settings ;
07:47:48 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:47:48 SQL> -- DELETE svmc_settings;
07:47:48 SQL> 
07:47:48 SQL> -- The default classification algorithm is Naive Bayes. So override
07:47:48 SQL> -- this choice to SVM using a settings table.
07:47:48 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:47:48 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:47:48 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:47:48 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:47:48 SQL> -- models.
07:47:48 SQL> --
07:47:48 SQL> 
07:47:48 SQL> -- Do this once and then comment it out.
07:47:48 SQL> -- That makes script go faster.
07:47:48 SQL> -- BEGIN
07:47:48 SQL> -- -- Populate settings table
07:47:48 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:48 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:47:48 SQL> --
07:47:48 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:48 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:47:48 SQL> --
07:47:48 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:48 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:47:48 SQL> --   COMMIT;
07:47:48 SQL> -- END;
07:47:48 SQL> -- /
07:47:48 SQL> 
07:47:48 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:47:48 SQL> 
07:47:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:47:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:47:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:47:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
07:47:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:47:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:47:48 SQL> 
07:47:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:47:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:47:48 SQL> 
07:47:48 SQL> --------------------------------
07:47:48 SQL> -- PREPARE BUILD (TRAINING) DATA
07:47:48 SQL> --
07:47:48 SQL> 
07:47:48 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:48 SQL> -- 2. Outlier Treatment and
07:47:48 SQL> -- 3. Normalization are performed below.
07:47:48 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:47:48 SQL> --    normalized here.
07:47:48 SQL> 
07:47:48 SQL> BEGIN
07:47:48   2  	-- Perform missing value treatment for all predictors
07:47:48   3  	-- create miss tables
07:47:48   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:47:48   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:47:48   6  
07:47:48   7  	-- populate miss tables
07:47:48   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:47:48   9  	  miss_table_name => 'svmc_miss_num',
07:47:48  10  	  data_table_name => '&bldtable',
07:47:48  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:48  12  
07:47:48  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:47:48  14  	  miss_table_name => 'svmc_miss_cat',
07:47:48  15  	  data_table_name => '&bldtable',
07:47:48  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:48  17  
07:47:48  18  	-- xform input data to replace missing values
07:47:48  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:48  20  	  miss_table_name => 'svmc_miss_num',
07:47:48  21  	  data_table_name => '&bldtable',
07:47:48  22  	  xform_view_name => 'xformed_build_miss_num');
07:47:48  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:48  24  	  miss_table_name => 'svmc_miss_cat',
07:47:48  25  	  data_table_name => '&bldtable',
07:47:48  26  	  xform_view_name => 'xformed_build_miss_cat');
07:47:48  27  
07:47:48  28  	-- Perform outlier treatment.
07:47:48  29  	-- create clip table
07:47:48  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:47:48  31  
07:47:48  32  	-- populate clip table
07:47:48  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:47:48  34  	  clip_table_name => 'svmc_clip',
07:47:48  35  	  data_table_name => '&bldtable',
07:47:48  36  	  tail_frac	  => 0.025,
07:47:48  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:48  38  
07:47:48  39  	-- xform input data to winsorized data
07:47:48  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:47:48  41  	  clip_table_name => 'svmc_clip',
07:47:48  42  	  data_table_name => '&bldtable',
07:47:48  43  	  xform_view_name => 'svmc_winsor');
07:47:48  44  
07:47:48  45  	-- create normalization table
07:47:48  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:47:48  47  
07:47:48  48  	-- populate normalization table based on winsorized data
07:47:48  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:47:48  50  	  norm_table_name => 'svmc_norm',
07:47:48  51  	  data_table_name => 'svmc_winsor',
07:47:48  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:48  53  
07:47:48  54  	-- normalize the original data
07:47:48  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:48  56  	  norm_table_name => 'svmc_norm',
07:47:48  57  	  data_table_name => '&bldtable',
07:47:48  58  	  xform_view_name => 'svmc_build_prep');
07:47:48  59  END;
07:47:48  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.24
07:47:50 SQL> 
07:47:50 SQL> ---------------------
07:47:50 SQL> -- CREATE A NEW MODEL
07:47:50 SQL> --
07:47:50 SQL> -- Cleanup old model with the same name for repeat runs
07:47:50 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:47:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:50   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.77
07:47:51 SQL> 
07:47:51 SQL> -- Build a new SVM Model
07:47:51 SQL> BEGIN
07:47:51   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:47:51   3  	  model_name	      => '&model_name',
07:47:51   4  	  mining_function     => dbms_data_mining.classification,
07:47:51   5  	  data_table_name     => 'svmc_build_prep',
07:47:51   6  	  case_id_column_name => '&case_id',
07:47:51   7  	  target_column_name  => '&target',
07:47:51   8  	  settings_table_name => 'svmc_settings');
07:47:51   9  END;
07:47:51  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:06.04
07:47:57 SQL> 
07:47:57 SQL> -----------------------------------------------------------------------
07:47:57 SQL> --			       APPLY/score THE MODEL
07:47:57 SQL> -----------------------------------------------------------------------
07:47:57 SQL> 
07:47:57 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:47:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:47:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:47:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:47:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:47:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:47:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:47:58 SQL> -----------------------
07:47:58 SQL> -- PREPARE SCORING DATA
07:47:58 SQL> --
07:47:58 SQL> -- If the data for model creation has been prepared, then the data
07:47:58 SQL> -- to be scored using the model must be prepared in the same manner
07:47:58 SQL> -- in order to obtain meaningful results.
07:47:58 SQL> --
07:47:58 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:58 SQL> -- 2. Normalization
07:47:58 SQL> -- No outlier treatment will be performed during test and apply. The
07:47:58 SQL> -- normalization step is sufficient, since the normalization parameters
07:47:58 SQL> -- already capture the effects of outlier treatment done with build data.
07:47:58 SQL> --
07:47:58 SQL> BEGIN
07:47:58   2  	-- Xform Test data to replace missing values
07:47:58   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:58   4  	  miss_table_name => 'svmc_miss_num',
07:47:58   5  	  data_table_name => '&scoretable',
07:47:58   6  	  xform_view_name => 'xformed_apply_miss_num');
07:47:58   7  
07:47:58   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:58   9  	  miss_table_name => 'svmc_miss_cat',
07:47:58  10  	  data_table_name => '&scoretable',
07:47:58  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:47:58  12  
07:47:58  13  	-- Normalize the data to be scored
07:47:58  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:58  15  	  norm_table_name => 'svmc_norm',
07:47:58  16  	  data_table_name => '&scoretable',
07:47:58  17  	  xform_view_name => 'svmc_apply_prep');
07:47:58  18  END;
07:47:58  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
07:47:58 SQL> 
07:47:58 SQL> -- Use same model_name used in score.sql
07:47:58 SQL> DEFINE model_name = 'forex14'
07:47:58 SQL> 
07:47:58 SQL> -- Maybe I already collected a score for this prdate.
07:47:58 SQL> -- DELETE it if I did:
07:47:58 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:47:58 SQL> 
07:47:58 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:47:58   2  SELECT
07:47:58   3  prdate
07:47:58   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:47:58   5  ,sysdate
07:47:58   6  ,SUBSTR(prdate,1,3)pair
07:47:58   7  ,SUBSTR(prdate,4,19)ydate
07:47:58   8  FROM svmc_apply_prep
07:47:58   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:47:58 SQL> @score1_5min.sql	      2010-12-28 09:00:00
07:47:58 SQL> --
07:47:58 SQL> -- score1_5min.sql
07:47:58 SQL> --
07:47:58 SQL> 
07:47:58 SQL> CREATE OR REPLACE VIEW sme AS
07:47:58   2  SELECT
07:47:58   3  'jpy'||ydate prdate
07:47:58   4  ,NULL gatt
07:47:58   5  ,g00
07:47:58   6  ,g01
07:47:58   7  ,g02
07:47:58   8  ,g03
07:47:58   9  ,g04
07:47:58  10  ,g05
07:47:58  11  ,g06
07:47:58  12  ,g07
07:47:58  13  ,g08
07:47:58  14  FROM jpy_ms
07:47:58  15  WHERE ydate = '&1'||' '||'&2'
07:47:58  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'09:00:00'

View created.

Elapsed: 00:00:00.09
07:47:58 SQL> 
07:47:58 SQL> -- rpt
07:47:58 SQL> -- We should see just 1 row:
07:47:58 SQL> 
07:47:58 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:47:58 SQL> 
07:47:58 SQL> -- Build the model:
07:47:58 SQL> CREATE OR REPLACE VIEW bme AS
07:47:58   2  SELECT
07:47:58   3  'jpy'||ydate prdate
07:47:58   4  ,gatt
07:47:58   5  ,g00
07:47:58   6  ,g01
07:47:58   7  ,g02
07:47:58   8  ,g03
07:47:58   9  ,g04
07:47:58  10  ,g05
07:47:58  11  ,g06
07:47:58  12  ,g07
07:47:58  13  ,g08
07:47:58  14  FROM jpy_ms
07:47:58  15  WHERE gatt IN('nup','up')
07:47:58  16  -- Use only rows which are older than 1 day:
07:47:58  17  AND 1+ydate < '&1'||' '||'&2'
07:47:58  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'09:00:00'

View created.

Elapsed: 00:00:00.09
07:47:58 SQL> 
07:47:58 SQL> -- rpt
07:47:58 SQL> 
07:47:58 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8902

Elapsed: 00:00:00.06
07:47:58 SQL> 
07:47:58 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:55:00

Elapsed: 00:00:00.05
07:47:58 SQL> 
07:47:58 SQL> -- Now build model from bme and score sme
07:47:58 SQL> @score1.sql
07:47:58 SQL> -- score1.sql
07:47:58 SQL> 
07:47:58 SQL> -- Does the 1st SVM score
07:47:58 SQL> 
07:47:58 SQL> -- Fill up svmc_apply_prep
07:47:58 SQL> @score.sql
07:47:58 SQL> --
07:47:58 SQL> -- score.sql
07:47:58 SQL> --
07:47:58 SQL> 
07:47:58 SQL> -- usage: score.sql
07:47:58 SQL> 
07:47:58 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:47:58 SQL> 
07:47:58 SQL> DEFINE target	= 'gatt'
07:47:58 SQL> DEFINE model_name = 'forex14'
07:47:58 SQL> DEFINE bldtable	= 'bme'
07:47:58 SQL> DEFINE scoretable = 'sme'
07:47:58 SQL> DEFINE case_id	= 'prdate'
07:47:58 SQL> 
07:47:58 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:47:58 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:47:58 SQL> 
07:47:58 SQL> -- Builds an SVM model using pl/sql.
07:47:58 SQL> 
07:47:58 SQL> -----------------------------------------------------------------------
07:47:58 SQL> --			    BUILD THE MODEL
07:47:58 SQL> -----------------------------------------------------------------------
07:47:58 SQL> 
07:47:58 SQL> -- Cleanup old build data preparation objects for repeat runs
07:47:58 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:58 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:47:58 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.01
07:47:58 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:47:58 SQL> 
07:47:58 SQL> 
07:47:58 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:47:58 SQL> --
07:47:58 SQL> -- DROP	TABLE svmc_settings ;
07:47:58 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:47:58 SQL> -- DELETE svmc_settings;
07:47:58 SQL> 
07:47:58 SQL> -- The default classification algorithm is Naive Bayes. So override
07:47:58 SQL> -- this choice to SVM using a settings table.
07:47:58 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:47:58 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:47:58 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:47:58 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:47:58 SQL> -- models.
07:47:58 SQL> --
07:47:58 SQL> 
07:47:58 SQL> -- Do this once and then comment it out.
07:47:58 SQL> -- That makes script go faster.
07:47:58 SQL> -- BEGIN
07:47:58 SQL> -- -- Populate settings table
07:47:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:58 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:47:58 SQL> --
07:47:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:58 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:47:58 SQL> --
07:47:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:47:58 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:47:58 SQL> --   COMMIT;
07:47:58 SQL> -- END;
07:47:58 SQL> -- /
07:47:58 SQL> 
07:47:58 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:47:58 SQL> 
07:47:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:47:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:47:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:47:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:47:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:47:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:47:58 SQL> 
07:47:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:47:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:47:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:47:58 SQL> 
07:47:58 SQL> --------------------------------
07:47:58 SQL> -- PREPARE BUILD (TRAINING) DATA
07:47:58 SQL> --
07:47:58 SQL> 
07:47:58 SQL> -- 1. Missing Value treatment for all Predictors and
07:47:58 SQL> -- 2. Outlier Treatment and
07:47:58 SQL> -- 3. Normalization are performed below.
07:47:58 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:47:58 SQL> --    normalized here.
07:47:58 SQL> 
07:47:58 SQL> BEGIN
07:47:58   2  	-- Perform missing value treatment for all predictors
07:47:58   3  	-- create miss tables
07:47:58   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:47:58   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:47:58   6  
07:47:58   7  	-- populate miss tables
07:47:58   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:47:58   9  	  miss_table_name => 'svmc_miss_num',
07:47:58  10  	  data_table_name => '&bldtable',
07:47:58  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:58  12  
07:47:58  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:47:58  14  	  miss_table_name => 'svmc_miss_cat',
07:47:58  15  	  data_table_name => '&bldtable',
07:47:58  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:58  17  
07:47:58  18  	-- xform input data to replace missing values
07:47:58  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:47:58  20  	  miss_table_name => 'svmc_miss_num',
07:47:58  21  	  data_table_name => '&bldtable',
07:47:58  22  	  xform_view_name => 'xformed_build_miss_num');
07:47:58  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:47:58  24  	  miss_table_name => 'svmc_miss_cat',
07:47:58  25  	  data_table_name => '&bldtable',
07:47:58  26  	  xform_view_name => 'xformed_build_miss_cat');
07:47:58  27  
07:47:58  28  	-- Perform outlier treatment.
07:47:58  29  	-- create clip table
07:47:58  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:47:58  31  
07:47:58  32  	-- populate clip table
07:47:58  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:47:58  34  	  clip_table_name => 'svmc_clip',
07:47:58  35  	  data_table_name => '&bldtable',
07:47:58  36  	  tail_frac	  => 0.025,
07:47:58  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:58  38  
07:47:58  39  	-- xform input data to winsorized data
07:47:58  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:47:58  41  	  clip_table_name => 'svmc_clip',
07:47:58  42  	  data_table_name => '&bldtable',
07:47:58  43  	  xform_view_name => 'svmc_winsor');
07:47:58  44  
07:47:58  45  	-- create normalization table
07:47:58  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:47:58  47  
07:47:58  48  	-- populate normalization table based on winsorized data
07:47:58  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:47:58  50  	  norm_table_name => 'svmc_norm',
07:47:58  51  	  data_table_name => 'svmc_winsor',
07:47:58  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:47:58  53  
07:47:58  54  	-- normalize the original data
07:47:58  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:47:58  56  	  norm_table_name => 'svmc_norm',
07:47:58  57  	  data_table_name => '&bldtable',
07:47:58  58  	  xform_view_name => 'svmc_build_prep');
07:47:58  59  END;
07:47:58  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.37
07:48:00 SQL> 
07:48:00 SQL> ---------------------
07:48:00 SQL> -- CREATE A NEW MODEL
07:48:00 SQL> --
07:48:00 SQL> -- Cleanup old model with the same name for repeat runs
07:48:00 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:48:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:00   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.88
07:48:02 SQL> 
07:48:02 SQL> -- Build a new SVM Model
07:48:02 SQL> BEGIN
07:48:02   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:48:02   3  	  model_name	      => '&model_name',
07:48:02   4  	  mining_function     => dbms_data_mining.classification,
07:48:02   5  	  data_table_name     => 'svmc_build_prep',
07:48:02   6  	  case_id_column_name => '&case_id',
07:48:02   7  	  target_column_name  => '&target',
07:48:02   8  	  settings_table_name => 'svmc_settings');
07:48:02   9  END;
07:48:02  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:07.55
07:48:09 SQL> 
07:48:09 SQL> -----------------------------------------------------------------------
07:48:09 SQL> --			       APPLY/score THE MODEL
07:48:09 SQL> -----------------------------------------------------------------------
07:48:09 SQL> 
07:48:09 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:48:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:48:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:48:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:48:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:48:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:48:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:48:09 SQL> -----------------------
07:48:09 SQL> -- PREPARE SCORING DATA
07:48:09 SQL> --
07:48:09 SQL> -- If the data for model creation has been prepared, then the data
07:48:09 SQL> -- to be scored using the model must be prepared in the same manner
07:48:09 SQL> -- in order to obtain meaningful results.
07:48:09 SQL> --
07:48:09 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:09 SQL> -- 2. Normalization
07:48:09 SQL> -- No outlier treatment will be performed during test and apply. The
07:48:09 SQL> -- normalization step is sufficient, since the normalization parameters
07:48:09 SQL> -- already capture the effects of outlier treatment done with build data.
07:48:09 SQL> --
07:48:09 SQL> BEGIN
07:48:09   2  	-- Xform Test data to replace missing values
07:48:09   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:09   4  	  miss_table_name => 'svmc_miss_num',
07:48:09   5  	  data_table_name => '&scoretable',
07:48:09   6  	  xform_view_name => 'xformed_apply_miss_num');
07:48:09   7  
07:48:09   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:09   9  	  miss_table_name => 'svmc_miss_cat',
07:48:09  10  	  data_table_name => '&scoretable',
07:48:09  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:48:09  12  
07:48:09  13  	-- Normalize the data to be scored
07:48:09  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:09  15  	  norm_table_name => 'svmc_norm',
07:48:09  16  	  data_table_name => '&scoretable',
07:48:09  17  	  xform_view_name => 'svmc_apply_prep');
07:48:09  18  END;
07:48:09  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
07:48:10 SQL> 
07:48:10 SQL> -- Use same model_name used in score.sql
07:48:10 SQL> DEFINE model_name = 'forex14'
07:48:10 SQL> 
07:48:10 SQL> -- Maybe I already collected a score for this prdate.
07:48:10 SQL> -- DELETE it if I did:
07:48:10 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:48:10 SQL> 
07:48:10 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:48:10   2  SELECT
07:48:10   3  prdate
07:48:10   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:48:10   5  ,sysdate
07:48:10   6  ,SUBSTR(prdate,1,3)pair
07:48:10   7  ,SUBSTR(prdate,4,19)ydate
07:48:10   8  FROM svmc_apply_prep
07:48:10   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:48:10 SQL> @score1_5min_gattn.sql	2010-12-28 09:00:00
07:48:10 SQL> --
07:48:10 SQL> -- score1_5min_gattn.sql
07:48:10 SQL> --
07:48:10 SQL> 
07:48:10 SQL> CREATE OR REPLACE VIEW sme AS
07:48:10   2  SELECT
07:48:10   3  'jpy'||ydate prdate
07:48:10   4  ,NULL gattn
07:48:10   5  ,g00
07:48:10   6  ,g01
07:48:10   7  ,g02
07:48:10   8  ,g03
07:48:10   9  ,g04
07:48:10  10  ,g05
07:48:10  11  ,g06
07:48:10  12  ,g07
07:48:10  13  ,g08
07:48:10  14  FROM jpy_ms
07:48:10  15  WHERE ydate = '&1'||' '||'&2'
07:48:10  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'09:00:00'

View created.

Elapsed: 00:00:00.08
07:48:10 SQL> 
07:48:10 SQL> -- rpt
07:48:10 SQL> -- We should see just 1 row:
07:48:10 SQL> 
07:48:10 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:48:10 SQL> 
07:48:10 SQL> -- Build the model:
07:48:10 SQL> CREATE OR REPLACE VIEW bme AS
07:48:10   2  SELECT
07:48:10   3  'jpy'||ydate prdate
07:48:10   4  ,gattn
07:48:10   5  ,g00
07:48:10   6  ,g01
07:48:10   7  ,g02
07:48:10   8  ,g03
07:48:10   9  ,g04
07:48:10  10  ,g05
07:48:10  11  ,g06
07:48:10  12  ,g07
07:48:10  13  ,g08
07:48:10  14  FROM jpy_ms
07:48:10  15  WHERE gattn IN('nup','up')
07:48:10  16  -- Use only rows which are older than 1 day:
07:48:10  17  AND 1+ydate < '&1'||' '||'&2'
07:48:10  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'09:00:00'

View created.

Elapsed: 00:00:00.13
07:48:10 SQL> 
07:48:10 SQL> -- rpt
07:48:10 SQL> 
07:48:10 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9194
up	     9649

Elapsed: 00:00:00.06
07:48:10 SQL> 
07:48:10 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 08:55:00

Elapsed: 00:00:00.05
07:48:10 SQL> 
07:48:10 SQL> -- Now build model from bme and score sme
07:48:10 SQL> @score1gattn.sql
07:48:10 SQL> -- score1gattn.sql
07:48:10 SQL> 
07:48:10 SQL> -- Does the 1st SVM score
07:48:10 SQL> 
07:48:10 SQL> -- Fill up svmc_apply_prep
07:48:10 SQL> @score_gattn.sql
07:48:10 SQL> --
07:48:10 SQL> -- score_gattn.sql
07:48:10 SQL> --
07:48:10 SQL> 
07:48:10 SQL> -- usage: score_gattn.sql
07:48:10 SQL> 
07:48:10 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:48:10 SQL> 
07:48:10 SQL> DEFINE target	= 'gattn'
07:48:10 SQL> DEFINE model_name = 'forex14'
07:48:10 SQL> DEFINE bldtable	= 'bme'
07:48:10 SQL> DEFINE scoretable = 'sme'
07:48:10 SQL> DEFINE case_id	= 'prdate'
07:48:10 SQL> 
07:48:10 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:48:10 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:48:10 SQL> 
07:48:10 SQL> -- Builds an SVM model using pl/sql.
07:48:10 SQL> 
07:48:10 SQL> -----------------------------------------------------------------------
07:48:10 SQL> --			    BUILD THE MODEL
07:48:10 SQL> -----------------------------------------------------------------------
07:48:10 SQL> 
07:48:10 SQL> -- Cleanup old build data preparation objects for repeat runs
07:48:10 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:10 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:48:10 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:10 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:10 SQL> 
07:48:10 SQL> 
07:48:10 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:48:10 SQL> --
07:48:10 SQL> -- DROP	TABLE svmc_settings ;
07:48:10 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:48:10 SQL> -- DELETE svmc_settings;
07:48:10 SQL> 
07:48:10 SQL> -- The default classification algorithm is Naive Bayes. So override
07:48:10 SQL> -- this choice to SVM using a settings table.
07:48:10 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:48:10 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:48:10 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:48:10 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:48:10 SQL> -- models.
07:48:10 SQL> --
07:48:10 SQL> 
07:48:10 SQL> -- Do this once and then comment it out.
07:48:10 SQL> -- That makes script go faster.
07:48:10 SQL> -- BEGIN
07:48:10 SQL> -- -- Populate settings table
07:48:10 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:10 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:48:10 SQL> --
07:48:10 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:10 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:48:10 SQL> --
07:48:10 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:10 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:48:10 SQL> --   COMMIT;
07:48:10 SQL> -- END;
07:48:10 SQL> -- /
07:48:10 SQL> 
07:48:10 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:48:10 SQL> 
07:48:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:48:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:48:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:48:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
07:48:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:48:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:48:10 SQL> 
07:48:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:48:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:48:10 SQL> 
07:48:10 SQL> --------------------------------
07:48:10 SQL> -- PREPARE BUILD (TRAINING) DATA
07:48:10 SQL> --
07:48:10 SQL> 
07:48:10 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:10 SQL> -- 2. Outlier Treatment and
07:48:10 SQL> -- 3. Normalization are performed below.
07:48:10 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:48:10 SQL> --    normalized here.
07:48:10 SQL> 
07:48:10 SQL> BEGIN
07:48:10   2  	-- Perform missing value treatment for all predictors
07:48:10   3  	-- create miss tables
07:48:10   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:48:10   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:48:10   6  
07:48:10   7  	-- populate miss tables
07:48:10   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:48:10   9  	  miss_table_name => 'svmc_miss_num',
07:48:10  10  	  data_table_name => '&bldtable',
07:48:10  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:10  12  
07:48:10  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:48:10  14  	  miss_table_name => 'svmc_miss_cat',
07:48:10  15  	  data_table_name => '&bldtable',
07:48:10  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:10  17  
07:48:10  18  	-- xform input data to replace missing values
07:48:10  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:10  20  	  miss_table_name => 'svmc_miss_num',
07:48:10  21  	  data_table_name => '&bldtable',
07:48:10  22  	  xform_view_name => 'xformed_build_miss_num');
07:48:10  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:10  24  	  miss_table_name => 'svmc_miss_cat',
07:48:10  25  	  data_table_name => '&bldtable',
07:48:10  26  	  xform_view_name => 'xformed_build_miss_cat');
07:48:10  27  
07:48:10  28  	-- Perform outlier treatment.
07:48:10  29  	-- create clip table
07:48:10  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:48:10  31  
07:48:10  32  	-- populate clip table
07:48:10  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:48:10  34  	  clip_table_name => 'svmc_clip',
07:48:10  35  	  data_table_name => '&bldtable',
07:48:10  36  	  tail_frac	  => 0.025,
07:48:10  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:10  38  
07:48:10  39  	-- xform input data to winsorized data
07:48:10  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:48:10  41  	  clip_table_name => 'svmc_clip',
07:48:10  42  	  data_table_name => '&bldtable',
07:48:10  43  	  xform_view_name => 'svmc_winsor');
07:48:10  44  
07:48:10  45  	-- create normalization table
07:48:10  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:48:10  47  
07:48:10  48  	-- populate normalization table based on winsorized data
07:48:10  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:48:10  50  	  norm_table_name => 'svmc_norm',
07:48:10  51  	  data_table_name => 'svmc_winsor',
07:48:10  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:10  53  
07:48:10  54  	-- normalize the original data
07:48:10  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:10  56  	  norm_table_name => 'svmc_norm',
07:48:10  57  	  data_table_name => '&bldtable',
07:48:10  58  	  xform_view_name => 'svmc_build_prep');
07:48:10  59  END;
07:48:10  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.33
07:48:12 SQL> 
07:48:12 SQL> ---------------------
07:48:12 SQL> -- CREATE A NEW MODEL
07:48:12 SQL> --
07:48:12 SQL> -- Cleanup old model with the same name for repeat runs
07:48:12 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:48:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:12   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.52
07:48:13 SQL> 
07:48:13 SQL> -- Build a new SVM Model
07:48:13 SQL> BEGIN
07:48:13   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:48:13   3  	  model_name	      => '&model_name',
07:48:13   4  	  mining_function     => dbms_data_mining.classification,
07:48:13   5  	  data_table_name     => 'svmc_build_prep',
07:48:13   6  	  case_id_column_name => '&case_id',
07:48:13   7  	  target_column_name  => '&target',
07:48:13   8  	  settings_table_name => 'svmc_settings');
07:48:13   9  END;
07:48:13  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:06.36
07:48:20 SQL> 
07:48:20 SQL> -----------------------------------------------------------------------
07:48:20 SQL> --			       APPLY/score THE MODEL
07:48:20 SQL> -----------------------------------------------------------------------
07:48:20 SQL> 
07:48:20 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:48:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:48:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:48:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:48:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:48:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:48:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:48:20 SQL> -----------------------
07:48:20 SQL> -- PREPARE SCORING DATA
07:48:20 SQL> --
07:48:20 SQL> -- If the data for model creation has been prepared, then the data
07:48:20 SQL> -- to be scored using the model must be prepared in the same manner
07:48:20 SQL> -- in order to obtain meaningful results.
07:48:20 SQL> --
07:48:20 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:20 SQL> -- 2. Normalization
07:48:20 SQL> -- No outlier treatment will be performed during test and apply. The
07:48:20 SQL> -- normalization step is sufficient, since the normalization parameters
07:48:20 SQL> -- already capture the effects of outlier treatment done with build data.
07:48:20 SQL> --
07:48:20 SQL> BEGIN
07:48:20   2  	-- Xform Test data to replace missing values
07:48:20   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:20   4  	  miss_table_name => 'svmc_miss_num',
07:48:20   5  	  data_table_name => '&scoretable',
07:48:20   6  	  xform_view_name => 'xformed_apply_miss_num');
07:48:20   7  
07:48:20   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:20   9  	  miss_table_name => 'svmc_miss_cat',
07:48:20  10  	  data_table_name => '&scoretable',
07:48:20  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:48:20  12  
07:48:20  13  	-- Normalize the data to be scored
07:48:20  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:20  15  	  norm_table_name => 'svmc_norm',
07:48:20  16  	  data_table_name => '&scoretable',
07:48:20  17  	  xform_view_name => 'svmc_apply_prep');
07:48:20  18  END;
07:48:20  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:48:20 SQL> 
07:48:20 SQL> -- Use same model_name used in score.sql
07:48:20 SQL> DEFINE model_name = 'forex14'
07:48:20 SQL> 
07:48:20 SQL> -- Maybe I already collected a score for this prdate.
07:48:20 SQL> -- DELETE it if I did:
07:48:20 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.01
07:48:20 SQL> 
07:48:20 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:48:20   2  SELECT
07:48:20   3  prdate
07:48:20   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:48:20   5  ,sysdate
07:48:20   6  ,SUBSTR(prdate,1,3)pair
07:48:20   7  ,SUBSTR(prdate,4,19)ydate
07:48:20   8  FROM svmc_apply_prep
07:48:20   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:48:20 SQL> @score1_5min.sql	      2010-12-28 09:05:00
07:48:20 SQL> --
07:48:20 SQL> -- score1_5min.sql
07:48:20 SQL> --
07:48:20 SQL> 
07:48:20 SQL> CREATE OR REPLACE VIEW sme AS
07:48:20   2  SELECT
07:48:20   3  'jpy'||ydate prdate
07:48:20   4  ,NULL gatt
07:48:20   5  ,g00
07:48:20   6  ,g01
07:48:20   7  ,g02
07:48:20   8  ,g03
07:48:20   9  ,g04
07:48:20  10  ,g05
07:48:20  11  ,g06
07:48:20  12  ,g07
07:48:20  13  ,g08
07:48:20  14  FROM jpy_ms
07:48:20  15  WHERE ydate = '&1'||' '||'&2'
07:48:20  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'09:05:00'

View created.

Elapsed: 00:00:00.04
07:48:20 SQL> 
07:48:20 SQL> -- rpt
07:48:20 SQL> -- We should see just 1 row:
07:48:20 SQL> 
07:48:20 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:48:20 SQL> 
07:48:20 SQL> -- Build the model:
07:48:20 SQL> CREATE OR REPLACE VIEW bme AS
07:48:20   2  SELECT
07:48:20   3  'jpy'||ydate prdate
07:48:20   4  ,gatt
07:48:20   5  ,g00
07:48:20   6  ,g01
07:48:20   7  ,g02
07:48:20   8  ,g03
07:48:20   9  ,g04
07:48:20  10  ,g05
07:48:20  11  ,g06
07:48:20  12  ,g07
07:48:20  13  ,g08
07:48:20  14  FROM jpy_ms
07:48:20  15  WHERE gatt IN('nup','up')
07:48:20  16  -- Use only rows which are older than 1 day:
07:48:20  17  AND 1+ydate < '&1'||' '||'&2'
07:48:20  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'09:05:00'

View created.

Elapsed: 00:00:00.09
07:48:20 SQL> 
07:48:20 SQL> -- rpt
07:48:20 SQL> 
07:48:20 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8903

Elapsed: 00:00:00.06
07:48:20 SQL> 
07:48:20 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 09:00:00

Elapsed: 00:00:00.05
07:48:20 SQL> 
07:48:20 SQL> -- Now build model from bme and score sme
07:48:20 SQL> @score1.sql
07:48:20 SQL> -- score1.sql
07:48:20 SQL> 
07:48:20 SQL> -- Does the 1st SVM score
07:48:20 SQL> 
07:48:20 SQL> -- Fill up svmc_apply_prep
07:48:20 SQL> @score.sql
07:48:20 SQL> --
07:48:20 SQL> -- score.sql
07:48:20 SQL> --
07:48:20 SQL> 
07:48:20 SQL> -- usage: score.sql
07:48:20 SQL> 
07:48:20 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:48:20 SQL> 
07:48:20 SQL> DEFINE target	= 'gatt'
07:48:20 SQL> DEFINE model_name = 'forex14'
07:48:20 SQL> DEFINE bldtable	= 'bme'
07:48:20 SQL> DEFINE scoretable = 'sme'
07:48:20 SQL> DEFINE case_id	= 'prdate'
07:48:20 SQL> 
07:48:20 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:48:20 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:48:20 SQL> 
07:48:20 SQL> -- Builds an SVM model using pl/sql.
07:48:20 SQL> 
07:48:20 SQL> -----------------------------------------------------------------------
07:48:20 SQL> --			    BUILD THE MODEL
07:48:20 SQL> -----------------------------------------------------------------------
07:48:20 SQL> 
07:48:20 SQL> -- Cleanup old build data preparation objects for repeat runs
07:48:20 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:20 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:48:20 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:20 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:20 SQL> 
07:48:20 SQL> 
07:48:20 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:48:20 SQL> --
07:48:20 SQL> -- DROP	TABLE svmc_settings ;
07:48:20 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:48:20 SQL> -- DELETE svmc_settings;
07:48:20 SQL> 
07:48:20 SQL> -- The default classification algorithm is Naive Bayes. So override
07:48:20 SQL> -- this choice to SVM using a settings table.
07:48:20 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:48:20 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:48:20 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:48:20 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:48:20 SQL> -- models.
07:48:20 SQL> --
07:48:20 SQL> 
07:48:20 SQL> -- Do this once and then comment it out.
07:48:20 SQL> -- That makes script go faster.
07:48:20 SQL> -- BEGIN
07:48:20 SQL> -- -- Populate settings table
07:48:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:20 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:48:20 SQL> --
07:48:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:20 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:48:20 SQL> --
07:48:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:20 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:48:20 SQL> --   COMMIT;
07:48:20 SQL> -- END;
07:48:20 SQL> -- /
07:48:20 SQL> 
07:48:20 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.01
07:48:20 SQL> 
07:48:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:48:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:48:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:48:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:48:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:48:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:48:20 SQL> 
07:48:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:48:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:48:20 SQL> 
07:48:20 SQL> --------------------------------
07:48:20 SQL> -- PREPARE BUILD (TRAINING) DATA
07:48:20 SQL> --
07:48:20 SQL> 
07:48:20 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:20 SQL> -- 2. Outlier Treatment and
07:48:20 SQL> -- 3. Normalization are performed below.
07:48:20 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:48:20 SQL> --    normalized here.
07:48:20 SQL> 
07:48:20 SQL> BEGIN
07:48:20   2  	-- Perform missing value treatment for all predictors
07:48:20   3  	-- create miss tables
07:48:20   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:48:20   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:48:20   6  
07:48:20   7  	-- populate miss tables
07:48:20   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:48:20   9  	  miss_table_name => 'svmc_miss_num',
07:48:20  10  	  data_table_name => '&bldtable',
07:48:20  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:20  12  
07:48:20  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:48:20  14  	  miss_table_name => 'svmc_miss_cat',
07:48:20  15  	  data_table_name => '&bldtable',
07:48:20  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:20  17  
07:48:20  18  	-- xform input data to replace missing values
07:48:20  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:20  20  	  miss_table_name => 'svmc_miss_num',
07:48:20  21  	  data_table_name => '&bldtable',
07:48:20  22  	  xform_view_name => 'xformed_build_miss_num');
07:48:20  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:20  24  	  miss_table_name => 'svmc_miss_cat',
07:48:20  25  	  data_table_name => '&bldtable',
07:48:20  26  	  xform_view_name => 'xformed_build_miss_cat');
07:48:20  27  
07:48:20  28  	-- Perform outlier treatment.
07:48:20  29  	-- create clip table
07:48:20  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:48:20  31  
07:48:20  32  	-- populate clip table
07:48:20  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:48:20  34  	  clip_table_name => 'svmc_clip',
07:48:20  35  	  data_table_name => '&bldtable',
07:48:20  36  	  tail_frac	  => 0.025,
07:48:20  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:20  38  
07:48:20  39  	-- xform input data to winsorized data
07:48:20  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:48:20  41  	  clip_table_name => 'svmc_clip',
07:48:20  42  	  data_table_name => '&bldtable',
07:48:20  43  	  xform_view_name => 'svmc_winsor');
07:48:20  44  
07:48:20  45  	-- create normalization table
07:48:20  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:48:20  47  
07:48:20  48  	-- populate normalization table based on winsorized data
07:48:20  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:48:20  50  	  norm_table_name => 'svmc_norm',
07:48:20  51  	  data_table_name => 'svmc_winsor',
07:48:20  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:20  53  
07:48:20  54  	-- normalize the original data
07:48:20  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:20  56  	  norm_table_name => 'svmc_norm',
07:48:20  57  	  data_table_name => '&bldtable',
07:48:20  58  	  xform_view_name => 'svmc_build_prep');
07:48:20  59  END;
07:48:20  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.33
07:48:22 SQL> 
07:48:22 SQL> ---------------------
07:48:22 SQL> -- CREATE A NEW MODEL
07:48:22 SQL> --
07:48:22 SQL> -- Cleanup old model with the same name for repeat runs
07:48:22 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:48:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:22   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.05
07:48:23 SQL> 
07:48:23 SQL> -- Build a new SVM Model
07:48:23 SQL> BEGIN
07:48:23   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:48:23   3  	  model_name	      => '&model_name',
07:48:23   4  	  mining_function     => dbms_data_mining.classification,
07:48:23   5  	  data_table_name     => 'svmc_build_prep',
07:48:23   6  	  case_id_column_name => '&case_id',
07:48:23   7  	  target_column_name  => '&target',
07:48:23   8  	  settings_table_name => 'svmc_settings');
07:48:23   9  END;
07:48:23  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:07.05
07:48:30 SQL> 
07:48:30 SQL> -----------------------------------------------------------------------
07:48:30 SQL> --			       APPLY/score THE MODEL
07:48:30 SQL> -----------------------------------------------------------------------
07:48:30 SQL> 
07:48:30 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:48:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:48:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:48:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:48:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:48:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:48:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:48:30 SQL> -----------------------
07:48:30 SQL> -- PREPARE SCORING DATA
07:48:30 SQL> --
07:48:30 SQL> -- If the data for model creation has been prepared, then the data
07:48:30 SQL> -- to be scored using the model must be prepared in the same manner
07:48:30 SQL> -- in order to obtain meaningful results.
07:48:30 SQL> --
07:48:30 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:30 SQL> -- 2. Normalization
07:48:30 SQL> -- No outlier treatment will be performed during test and apply. The
07:48:30 SQL> -- normalization step is sufficient, since the normalization parameters
07:48:30 SQL> -- already capture the effects of outlier treatment done with build data.
07:48:30 SQL> --
07:48:30 SQL> BEGIN
07:48:30   2  	-- Xform Test data to replace missing values
07:48:30   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:30   4  	  miss_table_name => 'svmc_miss_num',
07:48:30   5  	  data_table_name => '&scoretable',
07:48:30   6  	  xform_view_name => 'xformed_apply_miss_num');
07:48:30   7  
07:48:30   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:30   9  	  miss_table_name => 'svmc_miss_cat',
07:48:30  10  	  data_table_name => '&scoretable',
07:48:30  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:48:30  12  
07:48:30  13  	-- Normalize the data to be scored
07:48:30  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:30  15  	  norm_table_name => 'svmc_norm',
07:48:30  16  	  data_table_name => '&scoretable',
07:48:30  17  	  xform_view_name => 'svmc_apply_prep');
07:48:30  18  END;
07:48:30  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
07:48:30 SQL> 
07:48:30 SQL> -- Use same model_name used in score.sql
07:48:30 SQL> DEFINE model_name = 'forex14'
07:48:30 SQL> 
07:48:30 SQL> -- Maybe I already collected a score for this prdate.
07:48:30 SQL> -- DELETE it if I did:
07:48:30 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:48:30 SQL> 
07:48:30 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:48:30   2  SELECT
07:48:30   3  prdate
07:48:30   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:48:30   5  ,sysdate
07:48:30   6  ,SUBSTR(prdate,1,3)pair
07:48:30   7  ,SUBSTR(prdate,4,19)ydate
07:48:30   8  FROM svmc_apply_prep
07:48:30   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:48:30 SQL> @score1_5min_gattn.sql	2010-12-28 09:05:00
07:48:30 SQL> --
07:48:30 SQL> -- score1_5min_gattn.sql
07:48:30 SQL> --
07:48:30 SQL> 
07:48:30 SQL> CREATE OR REPLACE VIEW sme AS
07:48:30   2  SELECT
07:48:30   3  'jpy'||ydate prdate
07:48:30   4  ,NULL gattn
07:48:30   5  ,g00
07:48:30   6  ,g01
07:48:30   7  ,g02
07:48:30   8  ,g03
07:48:30   9  ,g04
07:48:30  10  ,g05
07:48:30  11  ,g06
07:48:30  12  ,g07
07:48:30  13  ,g08
07:48:30  14  FROM jpy_ms
07:48:30  15  WHERE ydate = '&1'||' '||'&2'
07:48:30  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'09:05:00'

View created.

Elapsed: 00:00:00.07
07:48:30 SQL> 
07:48:30 SQL> -- rpt
07:48:30 SQL> -- We should see just 1 row:
07:48:30 SQL> 
07:48:30 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:48:30 SQL> 
07:48:30 SQL> -- Build the model:
07:48:30 SQL> CREATE OR REPLACE VIEW bme AS
07:48:30   2  SELECT
07:48:30   3  'jpy'||ydate prdate
07:48:30   4  ,gattn
07:48:30   5  ,g00
07:48:30   6  ,g01
07:48:30   7  ,g02
07:48:30   8  ,g03
07:48:30   9  ,g04
07:48:30  10  ,g05
07:48:30  11  ,g06
07:48:30  12  ,g07
07:48:30  13  ,g08
07:48:30  14  FROM jpy_ms
07:48:30  15  WHERE gattn IN('nup','up')
07:48:30  16  -- Use only rows which are older than 1 day:
07:48:30  17  AND 1+ydate < '&1'||' '||'&2'
07:48:30  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'09:05:00'

View created.

Elapsed: 00:00:00.05
07:48:30 SQL> 
07:48:30 SQL> -- rpt
07:48:30 SQL> 
07:48:30 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9195
up	     9649

Elapsed: 00:00:00.07
07:48:30 SQL> 
07:48:30 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 09:00:00

Elapsed: 00:00:00.05
07:48:30 SQL> 
07:48:30 SQL> -- Now build model from bme and score sme
07:48:30 SQL> @score1gattn.sql
07:48:30 SQL> -- score1gattn.sql
07:48:30 SQL> 
07:48:30 SQL> -- Does the 1st SVM score
07:48:30 SQL> 
07:48:30 SQL> -- Fill up svmc_apply_prep
07:48:30 SQL> @score_gattn.sql
07:48:30 SQL> --
07:48:30 SQL> -- score_gattn.sql
07:48:30 SQL> --
07:48:30 SQL> 
07:48:30 SQL> -- usage: score_gattn.sql
07:48:30 SQL> 
07:48:30 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:48:30 SQL> 
07:48:30 SQL> DEFINE target	= 'gattn'
07:48:30 SQL> DEFINE model_name = 'forex14'
07:48:30 SQL> DEFINE bldtable	= 'bme'
07:48:30 SQL> DEFINE scoretable = 'sme'
07:48:30 SQL> DEFINE case_id	= 'prdate'
07:48:30 SQL> 
07:48:30 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:48:30 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:48:30 SQL> 
07:48:30 SQL> -- Builds an SVM model using pl/sql.
07:48:30 SQL> 
07:48:30 SQL> -----------------------------------------------------------------------
07:48:30 SQL> --			    BUILD THE MODEL
07:48:30 SQL> -----------------------------------------------------------------------
07:48:30 SQL> 
07:48:30 SQL> -- Cleanup old build data preparation objects for repeat runs
07:48:30 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:30 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
07:48:30 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:30 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:30 SQL> 
07:48:30 SQL> 
07:48:30 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:48:30 SQL> --
07:48:30 SQL> -- DROP	TABLE svmc_settings ;
07:48:30 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:48:30 SQL> -- DELETE svmc_settings;
07:48:30 SQL> 
07:48:30 SQL> -- The default classification algorithm is Naive Bayes. So override
07:48:30 SQL> -- this choice to SVM using a settings table.
07:48:30 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:48:30 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:48:30 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:48:30 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:48:30 SQL> -- models.
07:48:30 SQL> --
07:48:30 SQL> 
07:48:30 SQL> -- Do this once and then comment it out.
07:48:30 SQL> -- That makes script go faster.
07:48:30 SQL> -- BEGIN
07:48:30 SQL> -- -- Populate settings table
07:48:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:30 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:48:30 SQL> --
07:48:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:30 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:48:30 SQL> --
07:48:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:30 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:48:30 SQL> --   COMMIT;
07:48:30 SQL> -- END;
07:48:30 SQL> -- /
07:48:30 SQL> 
07:48:30 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:48:30 SQL> 
07:48:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:48:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.25
07:48:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:48:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.29
07:48:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:48:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:48:31 SQL> 
07:48:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:48:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:48:31 SQL> 
07:48:31 SQL> --------------------------------
07:48:31 SQL> -- PREPARE BUILD (TRAINING) DATA
07:48:31 SQL> --
07:48:31 SQL> 
07:48:31 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:31 SQL> -- 2. Outlier Treatment and
07:48:31 SQL> -- 3. Normalization are performed below.
07:48:31 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:48:31 SQL> --    normalized here.
07:48:31 SQL> 
07:48:31 SQL> BEGIN
07:48:31   2  	-- Perform missing value treatment for all predictors
07:48:31   3  	-- create miss tables
07:48:31   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:48:31   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:48:31   6  
07:48:31   7  	-- populate miss tables
07:48:31   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:48:31   9  	  miss_table_name => 'svmc_miss_num',
07:48:31  10  	  data_table_name => '&bldtable',
07:48:31  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:31  12  
07:48:31  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:48:31  14  	  miss_table_name => 'svmc_miss_cat',
07:48:31  15  	  data_table_name => '&bldtable',
07:48:31  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:31  17  
07:48:31  18  	-- xform input data to replace missing values
07:48:31  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:31  20  	  miss_table_name => 'svmc_miss_num',
07:48:31  21  	  data_table_name => '&bldtable',
07:48:31  22  	  xform_view_name => 'xformed_build_miss_num');
07:48:31  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:31  24  	  miss_table_name => 'svmc_miss_cat',
07:48:31  25  	  data_table_name => '&bldtable',
07:48:31  26  	  xform_view_name => 'xformed_build_miss_cat');
07:48:31  27  
07:48:31  28  	-- Perform outlier treatment.
07:48:31  29  	-- create clip table
07:48:31  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:48:31  31  
07:48:31  32  	-- populate clip table
07:48:31  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:48:31  34  	  clip_table_name => 'svmc_clip',
07:48:31  35  	  data_table_name => '&bldtable',
07:48:31  36  	  tail_frac	  => 0.025,
07:48:31  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:31  38  
07:48:31  39  	-- xform input data to winsorized data
07:48:31  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:48:31  41  	  clip_table_name => 'svmc_clip',
07:48:31  42  	  data_table_name => '&bldtable',
07:48:31  43  	  xform_view_name => 'svmc_winsor');
07:48:31  44  
07:48:31  45  	-- create normalization table
07:48:31  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:48:31  47  
07:48:31  48  	-- populate normalization table based on winsorized data
07:48:31  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:48:31  50  	  norm_table_name => 'svmc_norm',
07:48:31  51  	  data_table_name => 'svmc_winsor',
07:48:31  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:31  53  
07:48:31  54  	-- normalize the original data
07:48:31  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:31  56  	  norm_table_name => 'svmc_norm',
07:48:31  57  	  data_table_name => '&bldtable',
07:48:31  58  	  xform_view_name => 'svmc_build_prep');
07:48:31  59  END;
07:48:31  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.44
07:48:33 SQL> 
07:48:33 SQL> ---------------------
07:48:33 SQL> -- CREATE A NEW MODEL
07:48:33 SQL> --
07:48:33 SQL> -- Cleanup old model with the same name for repeat runs
07:48:33 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:48:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:33   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.40
07:48:34 SQL> 
07:48:34 SQL> -- Build a new SVM Model
07:48:34 SQL> BEGIN
07:48:34   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:48:34   3  	  model_name	      => '&model_name',
07:48:34   4  	  mining_function     => dbms_data_mining.classification,
07:48:34   5  	  data_table_name     => 'svmc_build_prep',
07:48:34   6  	  case_id_column_name => '&case_id',
07:48:34   7  	  target_column_name  => '&target',
07:48:34   8  	  settings_table_name => 'svmc_settings');
07:48:34   9  END;
07:48:34  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:06.37
07:48:40 SQL> 
07:48:40 SQL> -----------------------------------------------------------------------
07:48:40 SQL> --			       APPLY/score THE MODEL
07:48:40 SQL> -----------------------------------------------------------------------
07:48:40 SQL> 
07:48:40 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:48:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:48:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:48:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:48:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:48:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:48:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:48:41 SQL> -----------------------
07:48:41 SQL> -- PREPARE SCORING DATA
07:48:41 SQL> --
07:48:41 SQL> -- If the data for model creation has been prepared, then the data
07:48:41 SQL> -- to be scored using the model must be prepared in the same manner
07:48:41 SQL> -- in order to obtain meaningful results.
07:48:41 SQL> --
07:48:41 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:41 SQL> -- 2. Normalization
07:48:41 SQL> -- No outlier treatment will be performed during test and apply. The
07:48:41 SQL> -- normalization step is sufficient, since the normalization parameters
07:48:41 SQL> -- already capture the effects of outlier treatment done with build data.
07:48:41 SQL> --
07:48:41 SQL> BEGIN
07:48:41   2  	-- Xform Test data to replace missing values
07:48:41   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:41   4  	  miss_table_name => 'svmc_miss_num',
07:48:41   5  	  data_table_name => '&scoretable',
07:48:41   6  	  xform_view_name => 'xformed_apply_miss_num');
07:48:41   7  
07:48:41   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:41   9  	  miss_table_name => 'svmc_miss_cat',
07:48:41  10  	  data_table_name => '&scoretable',
07:48:41  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:48:41  12  
07:48:41  13  	-- Normalize the data to be scored
07:48:41  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:41  15  	  norm_table_name => 'svmc_norm',
07:48:41  16  	  data_table_name => '&scoretable',
07:48:41  17  	  xform_view_name => 'svmc_apply_prep');
07:48:41  18  END;
07:48:41  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
07:48:41 SQL> 
07:48:41 SQL> -- Use same model_name used in score.sql
07:48:41 SQL> DEFINE model_name = 'forex14'
07:48:41 SQL> 
07:48:41 SQL> -- Maybe I already collected a score for this prdate.
07:48:41 SQL> -- DELETE it if I did:
07:48:41 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:48:41 SQL> 
07:48:41 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:48:41   2  SELECT
07:48:41   3  prdate
07:48:41   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:48:41   5  ,sysdate
07:48:41   6  ,SUBSTR(prdate,1,3)pair
07:48:41   7  ,SUBSTR(prdate,4,19)ydate
07:48:41   8  FROM svmc_apply_prep
07:48:41   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:48:41 SQL> @score1_5min.sql	      2010-12-28 09:10:00
07:48:41 SQL> --
07:48:41 SQL> -- score1_5min.sql
07:48:41 SQL> --
07:48:41 SQL> 
07:48:41 SQL> CREATE OR REPLACE VIEW sme AS
07:48:41   2  SELECT
07:48:41   3  'jpy'||ydate prdate
07:48:41   4  ,NULL gatt
07:48:41   5  ,g00
07:48:41   6  ,g01
07:48:41   7  ,g02
07:48:41   8  ,g03
07:48:41   9  ,g04
07:48:41  10  ,g05
07:48:41  11  ,g06
07:48:41  12  ,g07
07:48:41  13  ,g08
07:48:41  14  FROM jpy_ms
07:48:41  15  WHERE ydate = '&1'||' '||'&2'
07:48:41  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'09:10:00'

View created.

Elapsed: 00:00:00.04
07:48:41 SQL> 
07:48:41 SQL> -- rpt
07:48:41 SQL> -- We should see just 1 row:
07:48:41 SQL> 
07:48:41 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:48:41 SQL> 
07:48:41 SQL> -- Build the model:
07:48:41 SQL> CREATE OR REPLACE VIEW bme AS
07:48:41   2  SELECT
07:48:41   3  'jpy'||ydate prdate
07:48:41   4  ,gatt
07:48:41   5  ,g00
07:48:41   6  ,g01
07:48:41   7  ,g02
07:48:41   8  ,g03
07:48:41   9  ,g04
07:48:41  10  ,g05
07:48:41  11  ,g06
07:48:41  12  ,g07
07:48:41  13  ,g08
07:48:41  14  FROM jpy_ms
07:48:41  15  WHERE gatt IN('nup','up')
07:48:41  16  -- Use only rows which are older than 1 day:
07:48:41  17  AND 1+ydate < '&1'||' '||'&2'
07:48:41  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'09:10:00'

View created.

Elapsed: 00:00:00.04
07:48:41 SQL> 
07:48:41 SQL> -- rpt
07:48:41 SQL> 
07:48:41 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8904

Elapsed: 00:00:00.07
07:48:41 SQL> 
07:48:41 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 09:05:00

Elapsed: 00:00:00.05
07:48:41 SQL> 
07:48:41 SQL> -- Now build model from bme and score sme
07:48:41 SQL> @score1.sql
07:48:41 SQL> -- score1.sql
07:48:41 SQL> 
07:48:41 SQL> -- Does the 1st SVM score
07:48:41 SQL> 
07:48:41 SQL> -- Fill up svmc_apply_prep
07:48:41 SQL> @score.sql
07:48:41 SQL> --
07:48:41 SQL> -- score.sql
07:48:41 SQL> --
07:48:41 SQL> 
07:48:41 SQL> -- usage: score.sql
07:48:41 SQL> 
07:48:41 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:48:41 SQL> 
07:48:41 SQL> DEFINE target	= 'gatt'
07:48:41 SQL> DEFINE model_name = 'forex14'
07:48:41 SQL> DEFINE bldtable	= 'bme'
07:48:41 SQL> DEFINE scoretable = 'sme'
07:48:41 SQL> DEFINE case_id	= 'prdate'
07:48:41 SQL> 
07:48:41 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:48:41 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:48:41 SQL> 
07:48:41 SQL> -- Builds an SVM model using pl/sql.
07:48:41 SQL> 
07:48:41 SQL> -----------------------------------------------------------------------
07:48:41 SQL> --			    BUILD THE MODEL
07:48:41 SQL> -----------------------------------------------------------------------
07:48:41 SQL> 
07:48:41 SQL> -- Cleanup old build data preparation objects for repeat runs
07:48:41 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:41 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
07:48:41 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:41 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:41 SQL> 
07:48:41 SQL> 
07:48:41 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:48:41 SQL> --
07:48:41 SQL> -- DROP	TABLE svmc_settings ;
07:48:41 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:48:41 SQL> -- DELETE svmc_settings;
07:48:41 SQL> 
07:48:41 SQL> -- The default classification algorithm is Naive Bayes. So override
07:48:41 SQL> -- this choice to SVM using a settings table.
07:48:41 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:48:41 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:48:41 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:48:41 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:48:41 SQL> -- models.
07:48:41 SQL> --
07:48:41 SQL> 
07:48:41 SQL> -- Do this once and then comment it out.
07:48:41 SQL> -- That makes script go faster.
07:48:41 SQL> -- BEGIN
07:48:41 SQL> -- -- Populate settings table
07:48:41 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:41 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:48:41 SQL> --
07:48:41 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:41 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:48:41 SQL> --
07:48:41 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:41 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:48:41 SQL> --   COMMIT;
07:48:41 SQL> -- END;
07:48:41 SQL> -- /
07:48:41 SQL> 
07:48:41 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:48:41 SQL> 
07:48:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:48:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:48:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:48:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:48:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:48:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
07:48:41 SQL> 
07:48:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:48:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:48:41 SQL> 
07:48:41 SQL> --------------------------------
07:48:41 SQL> -- PREPARE BUILD (TRAINING) DATA
07:48:41 SQL> --
07:48:41 SQL> 
07:48:41 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:41 SQL> -- 2. Outlier Treatment and
07:48:41 SQL> -- 3. Normalization are performed below.
07:48:41 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:48:41 SQL> --    normalized here.
07:48:41 SQL> 
07:48:41 SQL> BEGIN
07:48:41   2  	-- Perform missing value treatment for all predictors
07:48:41   3  	-- create miss tables
07:48:41   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:48:41   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:48:41   6  
07:48:41   7  	-- populate miss tables
07:48:41   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:48:41   9  	  miss_table_name => 'svmc_miss_num',
07:48:41  10  	  data_table_name => '&bldtable',
07:48:41  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:41  12  
07:48:41  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:48:41  14  	  miss_table_name => 'svmc_miss_cat',
07:48:41  15  	  data_table_name => '&bldtable',
07:48:41  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:41  17  
07:48:41  18  	-- xform input data to replace missing values
07:48:41  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:41  20  	  miss_table_name => 'svmc_miss_num',
07:48:41  21  	  data_table_name => '&bldtable',
07:48:41  22  	  xform_view_name => 'xformed_build_miss_num');
07:48:41  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:41  24  	  miss_table_name => 'svmc_miss_cat',
07:48:41  25  	  data_table_name => '&bldtable',
07:48:41  26  	  xform_view_name => 'xformed_build_miss_cat');
07:48:41  27  
07:48:41  28  	-- Perform outlier treatment.
07:48:41  29  	-- create clip table
07:48:41  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:48:41  31  
07:48:41  32  	-- populate clip table
07:48:41  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:48:41  34  	  clip_table_name => 'svmc_clip',
07:48:41  35  	  data_table_name => '&bldtable',
07:48:41  36  	  tail_frac	  => 0.025,
07:48:41  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:41  38  
07:48:41  39  	-- xform input data to winsorized data
07:48:41  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:48:41  41  	  clip_table_name => 'svmc_clip',
07:48:41  42  	  data_table_name => '&bldtable',
07:48:41  43  	  xform_view_name => 'svmc_winsor');
07:48:41  44  
07:48:41  45  	-- create normalization table
07:48:41  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:48:41  47  
07:48:41  48  	-- populate normalization table based on winsorized data
07:48:41  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:48:41  50  	  norm_table_name => 'svmc_norm',
07:48:41  51  	  data_table_name => 'svmc_winsor',
07:48:41  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:41  53  
07:48:41  54  	-- normalize the original data
07:48:41  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:41  56  	  norm_table_name => 'svmc_norm',
07:48:41  57  	  data_table_name => '&bldtable',
07:48:41  58  	  xform_view_name => 'svmc_build_prep');
07:48:41  59  END;
07:48:41  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.43
07:48:43 SQL> 
07:48:43 SQL> ---------------------
07:48:43 SQL> -- CREATE A NEW MODEL
07:48:43 SQL> --
07:48:43 SQL> -- Cleanup old model with the same name for repeat runs
07:48:43 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:48:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:43   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.55
07:48:45 SQL> 
07:48:45 SQL> -- Build a new SVM Model
07:48:45 SQL> BEGIN
07:48:45   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:48:45   3  	  model_name	      => '&model_name',
07:48:45   4  	  mining_function     => dbms_data_mining.classification,
07:48:45   5  	  data_table_name     => 'svmc_build_prep',
07:48:45   6  	  case_id_column_name => '&case_id',
07:48:45   7  	  target_column_name  => '&target',
07:48:45   8  	  settings_table_name => 'svmc_settings');
07:48:45   9  END;
07:48:45  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:08.06
07:48:53 SQL> 
07:48:53 SQL> -----------------------------------------------------------------------
07:48:53 SQL> --			       APPLY/score THE MODEL
07:48:53 SQL> -----------------------------------------------------------------------
07:48:53 SQL> 
07:48:53 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:48:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:48:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:48:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:48:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:48:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:48:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:48:54 SQL> -----------------------
07:48:54 SQL> -- PREPARE SCORING DATA
07:48:54 SQL> --
07:48:54 SQL> -- If the data for model creation has been prepared, then the data
07:48:54 SQL> -- to be scored using the model must be prepared in the same manner
07:48:54 SQL> -- in order to obtain meaningful results.
07:48:54 SQL> --
07:48:54 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:54 SQL> -- 2. Normalization
07:48:54 SQL> -- No outlier treatment will be performed during test and apply. The
07:48:54 SQL> -- normalization step is sufficient, since the normalization parameters
07:48:54 SQL> -- already capture the effects of outlier treatment done with build data.
07:48:54 SQL> --
07:48:54 SQL> BEGIN
07:48:54   2  	-- Xform Test data to replace missing values
07:48:54   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:54   4  	  miss_table_name => 'svmc_miss_num',
07:48:54   5  	  data_table_name => '&scoretable',
07:48:54   6  	  xform_view_name => 'xformed_apply_miss_num');
07:48:54   7  
07:48:54   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:54   9  	  miss_table_name => 'svmc_miss_cat',
07:48:54  10  	  data_table_name => '&scoretable',
07:48:54  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:48:54  12  
07:48:54  13  	-- Normalize the data to be scored
07:48:54  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:54  15  	  norm_table_name => 'svmc_norm',
07:48:54  16  	  data_table_name => '&scoretable',
07:48:54  17  	  xform_view_name => 'svmc_apply_prep');
07:48:54  18  END;
07:48:54  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
07:48:54 SQL> 
07:48:54 SQL> -- Use same model_name used in score.sql
07:48:54 SQL> DEFINE model_name = 'forex14'
07:48:54 SQL> 
07:48:54 SQL> -- Maybe I already collected a score for this prdate.
07:48:54 SQL> -- DELETE it if I did:
07:48:54 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:48:54 SQL> 
07:48:54 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:48:54   2  SELECT
07:48:54   3  prdate
07:48:54   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:48:54   5  ,sysdate
07:48:54   6  ,SUBSTR(prdate,1,3)pair
07:48:54   7  ,SUBSTR(prdate,4,19)ydate
07:48:54   8  FROM svmc_apply_prep
07:48:54   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:48:54 SQL> @score1_5min_gattn.sql	2010-12-28 09:10:00
07:48:54 SQL> --
07:48:54 SQL> -- score1_5min_gattn.sql
07:48:54 SQL> --
07:48:54 SQL> 
07:48:54 SQL> CREATE OR REPLACE VIEW sme AS
07:48:54   2  SELECT
07:48:54   3  'jpy'||ydate prdate
07:48:54   4  ,NULL gattn
07:48:54   5  ,g00
07:48:54   6  ,g01
07:48:54   7  ,g02
07:48:54   8  ,g03
07:48:54   9  ,g04
07:48:54  10  ,g05
07:48:54  11  ,g06
07:48:54  12  ,g07
07:48:54  13  ,g08
07:48:54  14  FROM jpy_ms
07:48:54  15  WHERE ydate = '&1'||' '||'&2'
07:48:54  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'09:10:00'

View created.

Elapsed: 00:00:00.05
07:48:54 SQL> 
07:48:54 SQL> -- rpt
07:48:54 SQL> -- We should see just 1 row:
07:48:54 SQL> 
07:48:54 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:48:54 SQL> 
07:48:54 SQL> -- Build the model:
07:48:54 SQL> CREATE OR REPLACE VIEW bme AS
07:48:54   2  SELECT
07:48:54   3  'jpy'||ydate prdate
07:48:54   4  ,gattn
07:48:54   5  ,g00
07:48:54   6  ,g01
07:48:54   7  ,g02
07:48:54   8  ,g03
07:48:54   9  ,g04
07:48:54  10  ,g05
07:48:54  11  ,g06
07:48:54  12  ,g07
07:48:54  13  ,g08
07:48:54  14  FROM jpy_ms
07:48:54  15  WHERE gattn IN('nup','up')
07:48:54  16  -- Use only rows which are older than 1 day:
07:48:54  17  AND 1+ydate < '&1'||' '||'&2'
07:48:54  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'09:10:00'

View created.

Elapsed: 00:00:00.04
07:48:54 SQL> 
07:48:54 SQL> -- rpt
07:48:54 SQL> 
07:48:54 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9196
up	     9649

Elapsed: 00:00:00.07
07:48:54 SQL> 
07:48:54 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 09:05:00

Elapsed: 00:00:00.06
07:48:54 SQL> 
07:48:54 SQL> -- Now build model from bme and score sme
07:48:54 SQL> @score1gattn.sql
07:48:54 SQL> -- score1gattn.sql
07:48:54 SQL> 
07:48:54 SQL> -- Does the 1st SVM score
07:48:54 SQL> 
07:48:54 SQL> -- Fill up svmc_apply_prep
07:48:54 SQL> @score_gattn.sql
07:48:54 SQL> --
07:48:54 SQL> -- score_gattn.sql
07:48:54 SQL> --
07:48:54 SQL> 
07:48:54 SQL> -- usage: score_gattn.sql
07:48:54 SQL> 
07:48:54 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:48:54 SQL> 
07:48:54 SQL> DEFINE target	= 'gattn'
07:48:54 SQL> DEFINE model_name = 'forex14'
07:48:54 SQL> DEFINE bldtable	= 'bme'
07:48:54 SQL> DEFINE scoretable = 'sme'
07:48:54 SQL> DEFINE case_id	= 'prdate'
07:48:54 SQL> 
07:48:54 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:48:54 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:48:54 SQL> 
07:48:54 SQL> -- Builds an SVM model using pl/sql.
07:48:54 SQL> 
07:48:54 SQL> -----------------------------------------------------------------------
07:48:54 SQL> --			    BUILD THE MODEL
07:48:54 SQL> -----------------------------------------------------------------------
07:48:54 SQL> 
07:48:54 SQL> -- Cleanup old build data preparation objects for repeat runs
07:48:54 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:54 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:48:54 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:48:54 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.01
07:48:54 SQL> 
07:48:54 SQL> 
07:48:54 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:48:54 SQL> --
07:48:54 SQL> -- DROP	TABLE svmc_settings ;
07:48:54 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:48:54 SQL> -- DELETE svmc_settings;
07:48:54 SQL> 
07:48:54 SQL> -- The default classification algorithm is Naive Bayes. So override
07:48:54 SQL> -- this choice to SVM using a settings table.
07:48:54 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:48:54 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:48:54 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:48:54 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:48:54 SQL> -- models.
07:48:54 SQL> --
07:48:54 SQL> 
07:48:54 SQL> -- Do this once and then comment it out.
07:48:54 SQL> -- That makes script go faster.
07:48:54 SQL> -- BEGIN
07:48:54 SQL> -- -- Populate settings table
07:48:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:54 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:48:54 SQL> --
07:48:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:54 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:48:54 SQL> --
07:48:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:48:54 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:48:54 SQL> --   COMMIT;
07:48:54 SQL> -- END;
07:48:54 SQL> -- /
07:48:54 SQL> 
07:48:54 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:48:54 SQL> 
07:48:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:48:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:48:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:48:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:48:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:48:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
07:48:54 SQL> 
07:48:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:48:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
07:48:54 SQL> 
07:48:54 SQL> --------------------------------
07:48:54 SQL> -- PREPARE BUILD (TRAINING) DATA
07:48:54 SQL> --
07:48:54 SQL> 
07:48:54 SQL> -- 1. Missing Value treatment for all Predictors and
07:48:54 SQL> -- 2. Outlier Treatment and
07:48:54 SQL> -- 3. Normalization are performed below.
07:48:54 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:48:54 SQL> --    normalized here.
07:48:54 SQL> 
07:48:54 SQL> BEGIN
07:48:54   2  	-- Perform missing value treatment for all predictors
07:48:54   3  	-- create miss tables
07:48:54   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:48:54   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:48:54   6  
07:48:54   7  	-- populate miss tables
07:48:54   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:48:54   9  	  miss_table_name => 'svmc_miss_num',
07:48:54  10  	  data_table_name => '&bldtable',
07:48:54  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:54  12  
07:48:54  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:48:54  14  	  miss_table_name => 'svmc_miss_cat',
07:48:54  15  	  data_table_name => '&bldtable',
07:48:54  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:54  17  
07:48:54  18  	-- xform input data to replace missing values
07:48:54  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:48:54  20  	  miss_table_name => 'svmc_miss_num',
07:48:54  21  	  data_table_name => '&bldtable',
07:48:54  22  	  xform_view_name => 'xformed_build_miss_num');
07:48:54  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:48:54  24  	  miss_table_name => 'svmc_miss_cat',
07:48:54  25  	  data_table_name => '&bldtable',
07:48:54  26  	  xform_view_name => 'xformed_build_miss_cat');
07:48:54  27  
07:48:54  28  	-- Perform outlier treatment.
07:48:54  29  	-- create clip table
07:48:54  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:48:54  31  
07:48:54  32  	-- populate clip table
07:48:54  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:48:54  34  	  clip_table_name => 'svmc_clip',
07:48:54  35  	  data_table_name => '&bldtable',
07:48:54  36  	  tail_frac	  => 0.025,
07:48:54  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:54  38  
07:48:54  39  	-- xform input data to winsorized data
07:48:54  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:48:54  41  	  clip_table_name => 'svmc_clip',
07:48:54  42  	  data_table_name => '&bldtable',
07:48:54  43  	  xform_view_name => 'svmc_winsor');
07:48:54  44  
07:48:54  45  	-- create normalization table
07:48:54  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:48:54  47  
07:48:54  48  	-- populate normalization table based on winsorized data
07:48:54  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:48:54  50  	  norm_table_name => 'svmc_norm',
07:48:54  51  	  data_table_name => 'svmc_winsor',
07:48:54  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:48:54  53  
07:48:54  54  	-- normalize the original data
07:48:54  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:48:54  56  	  norm_table_name => 'svmc_norm',
07:48:54  57  	  data_table_name => '&bldtable',
07:48:54  58  	  xform_view_name => 'svmc_build_prep');
07:48:54  59  END;
07:48:54  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.30
07:48:56 SQL> 
07:48:56 SQL> ---------------------
07:48:56 SQL> -- CREATE A NEW MODEL
07:48:56 SQL> --
07:48:56 SQL> -- Cleanup old model with the same name for repeat runs
07:48:56 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:48:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:48:56   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.36
07:48:57 SQL> 
07:48:57 SQL> -- Build a new SVM Model
07:48:57 SQL> BEGIN
07:48:57   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:48:57   3  	  model_name	      => '&model_name',
07:48:57   4  	  mining_function     => dbms_data_mining.classification,
07:48:57   5  	  data_table_name     => 'svmc_build_prep',
07:48:57   6  	  case_id_column_name => '&case_id',
07:48:57   7  	  target_column_name  => '&target',
07:48:57   8  	  settings_table_name => 'svmc_settings');
07:48:57   9  END;
07:48:57  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:06.20
07:49:03 SQL> 
07:49:03 SQL> -----------------------------------------------------------------------
07:49:03 SQL> --			       APPLY/score THE MODEL
07:49:03 SQL> -----------------------------------------------------------------------
07:49:03 SQL> 
07:49:03 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:49:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:49:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:49:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:49:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:49:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:49:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:49:03 SQL> -----------------------
07:49:03 SQL> -- PREPARE SCORING DATA
07:49:03 SQL> --
07:49:03 SQL> -- If the data for model creation has been prepared, then the data
07:49:03 SQL> -- to be scored using the model must be prepared in the same manner
07:49:03 SQL> -- in order to obtain meaningful results.
07:49:03 SQL> --
07:49:03 SQL> -- 1. Missing Value treatment for all Predictors and
07:49:03 SQL> -- 2. Normalization
07:49:03 SQL> -- No outlier treatment will be performed during test and apply. The
07:49:03 SQL> -- normalization step is sufficient, since the normalization parameters
07:49:03 SQL> -- already capture the effects of outlier treatment done with build data.
07:49:03 SQL> --
07:49:03 SQL> BEGIN
07:49:03   2  	-- Xform Test data to replace missing values
07:49:03   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:49:03   4  	  miss_table_name => 'svmc_miss_num',
07:49:03   5  	  data_table_name => '&scoretable',
07:49:03   6  	  xform_view_name => 'xformed_apply_miss_num');
07:49:03   7  
07:49:03   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:49:03   9  	  miss_table_name => 'svmc_miss_cat',
07:49:03  10  	  data_table_name => '&scoretable',
07:49:03  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:49:03  12  
07:49:03  13  	-- Normalize the data to be scored
07:49:03  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:49:03  15  	  norm_table_name => 'svmc_norm',
07:49:03  16  	  data_table_name => '&scoretable',
07:49:03  17  	  xform_view_name => 'svmc_apply_prep');
07:49:03  18  END;
07:49:03  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
07:49:03 SQL> 
07:49:03 SQL> -- Use same model_name used in score.sql
07:49:03 SQL> DEFINE model_name = 'forex14'
07:49:03 SQL> 
07:49:03 SQL> -- Maybe I already collected a score for this prdate.
07:49:03 SQL> -- DELETE it if I did:
07:49:03 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:49:03 SQL> 
07:49:03 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:49:03   2  SELECT
07:49:03   3  prdate
07:49:03   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:49:03   5  ,sysdate
07:49:03   6  ,SUBSTR(prdate,1,3)pair
07:49:03   7  ,SUBSTR(prdate,4,19)ydate
07:49:03   8  FROM svmc_apply_prep
07:49:03   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:49:03 SQL> @score1_5min.sql	      2010-12-28 09:15:00
07:49:03 SQL> --
07:49:03 SQL> -- score1_5min.sql
07:49:03 SQL> --
07:49:03 SQL> 
07:49:03 SQL> CREATE OR REPLACE VIEW sme AS
07:49:03   2  SELECT
07:49:03   3  'jpy'||ydate prdate
07:49:03   4  ,NULL gatt
07:49:03   5  ,g00
07:49:03   6  ,g01
07:49:03   7  ,g02
07:49:03   8  ,g03
07:49:03   9  ,g04
07:49:03  10  ,g05
07:49:03  11  ,g06
07:49:03  12  ,g07
07:49:03  13  ,g08
07:49:03  14  FROM jpy_ms
07:49:03  15  WHERE ydate = '&1'||' '||'&2'
07:49:03  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'09:15:00'

View created.

Elapsed: 00:00:00.04
07:49:03 SQL> 
07:49:03 SQL> -- rpt
07:49:03 SQL> -- We should see just 1 row:
07:49:03 SQL> 
07:49:03 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:49:03 SQL> 
07:49:03 SQL> -- Build the model:
07:49:03 SQL> CREATE OR REPLACE VIEW bme AS
07:49:03   2  SELECT
07:49:03   3  'jpy'||ydate prdate
07:49:03   4  ,gatt
07:49:03   5  ,g00
07:49:03   6  ,g01
07:49:03   7  ,g02
07:49:03   8  ,g03
07:49:03   9  ,g04
07:49:03  10  ,g05
07:49:03  11  ,g06
07:49:03  12  ,g07
07:49:03  13  ,g08
07:49:03  14  FROM jpy_ms
07:49:03  15  WHERE gatt IN('nup','up')
07:49:03  16  -- Use only rows which are older than 1 day:
07:49:03  17  AND 1+ydate < '&1'||' '||'&2'
07:49:03  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'09:15:00'

View created.

Elapsed: 00:00:00.09
07:49:04 SQL> 
07:49:04 SQL> -- rpt
07:49:04 SQL> 
07:49:04 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8905

Elapsed: 00:00:00.06
07:49:04 SQL> 
07:49:04 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 09:10:00

Elapsed: 00:00:00.06
07:49:04 SQL> 
07:49:04 SQL> -- Now build model from bme and score sme
07:49:04 SQL> @score1.sql
07:49:04 SQL> -- score1.sql
07:49:04 SQL> 
07:49:04 SQL> -- Does the 1st SVM score
07:49:04 SQL> 
07:49:04 SQL> -- Fill up svmc_apply_prep
07:49:04 SQL> @score.sql
07:49:04 SQL> --
07:49:04 SQL> -- score.sql
07:49:04 SQL> --
07:49:04 SQL> 
07:49:04 SQL> -- usage: score.sql
07:49:04 SQL> 
07:49:04 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:49:04 SQL> 
07:49:04 SQL> DEFINE target	= 'gatt'
07:49:04 SQL> DEFINE model_name = 'forex14'
07:49:04 SQL> DEFINE bldtable	= 'bme'
07:49:04 SQL> DEFINE scoretable = 'sme'
07:49:04 SQL> DEFINE case_id	= 'prdate'
07:49:04 SQL> 
07:49:04 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:49:04 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:49:04 SQL> 
07:49:04 SQL> -- Builds an SVM model using pl/sql.
07:49:04 SQL> 
07:49:04 SQL> -----------------------------------------------------------------------
07:49:04 SQL> --			    BUILD THE MODEL
07:49:04 SQL> -----------------------------------------------------------------------
07:49:04 SQL> 
07:49:04 SQL> -- Cleanup old build data preparation objects for repeat runs
07:49:04 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:49:04 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:49:04 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:49:04 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:49:04 SQL> 
07:49:04 SQL> 
07:49:04 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:49:04 SQL> --
07:49:04 SQL> -- DROP	TABLE svmc_settings ;
07:49:04 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:49:04 SQL> -- DELETE svmc_settings;
07:49:04 SQL> 
07:49:04 SQL> -- The default classification algorithm is Naive Bayes. So override
07:49:04 SQL> -- this choice to SVM using a settings table.
07:49:04 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:49:04 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:49:04 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:49:04 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:49:04 SQL> -- models.
07:49:04 SQL> --
07:49:04 SQL> 
07:49:04 SQL> -- Do this once and then comment it out.
07:49:04 SQL> -- That makes script go faster.
07:49:04 SQL> -- BEGIN
07:49:04 SQL> -- -- Populate settings table
07:49:04 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:49:04 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:49:04 SQL> --
07:49:04 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:49:04 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:49:04 SQL> --
07:49:04 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:49:04 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:49:04 SQL> --   COMMIT;
07:49:04 SQL> -- END;
07:49:04 SQL> -- /
07:49:04 SQL> 
07:49:04 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:49:04 SQL> 
07:49:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:49:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:49:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:49:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:49:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:49:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:49:04 SQL> 
07:49:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:49:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:49:04 SQL> 
07:49:04 SQL> --------------------------------
07:49:04 SQL> -- PREPARE BUILD (TRAINING) DATA
07:49:04 SQL> --
07:49:04 SQL> 
07:49:04 SQL> -- 1. Missing Value treatment for all Predictors and
07:49:04 SQL> -- 2. Outlier Treatment and
07:49:04 SQL> -- 3. Normalization are performed below.
07:49:04 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:49:04 SQL> --    normalized here.
07:49:04 SQL> 
07:49:04 SQL> BEGIN
07:49:04   2  	-- Perform missing value treatment for all predictors
07:49:04   3  	-- create miss tables
07:49:04   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:49:04   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:49:04   6  
07:49:04   7  	-- populate miss tables
07:49:04   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:49:04   9  	  miss_table_name => 'svmc_miss_num',
07:49:04  10  	  data_table_name => '&bldtable',
07:49:04  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:04  12  
07:49:04  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:49:04  14  	  miss_table_name => 'svmc_miss_cat',
07:49:04  15  	  data_table_name => '&bldtable',
07:49:04  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:04  17  
07:49:04  18  	-- xform input data to replace missing values
07:49:04  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:49:04  20  	  miss_table_name => 'svmc_miss_num',
07:49:04  21  	  data_table_name => '&bldtable',
07:49:04  22  	  xform_view_name => 'xformed_build_miss_num');
07:49:04  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:49:04  24  	  miss_table_name => 'svmc_miss_cat',
07:49:04  25  	  data_table_name => '&bldtable',
07:49:04  26  	  xform_view_name => 'xformed_build_miss_cat');
07:49:04  27  
07:49:04  28  	-- Perform outlier treatment.
07:49:04  29  	-- create clip table
07:49:04  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:49:04  31  
07:49:04  32  	-- populate clip table
07:49:04  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:49:04  34  	  clip_table_name => 'svmc_clip',
07:49:04  35  	  data_table_name => '&bldtable',
07:49:04  36  	  tail_frac	  => 0.025,
07:49:04  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:04  38  
07:49:04  39  	-- xform input data to winsorized data
07:49:04  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:49:04  41  	  clip_table_name => 'svmc_clip',
07:49:04  42  	  data_table_name => '&bldtable',
07:49:04  43  	  xform_view_name => 'svmc_winsor');
07:49:04  44  
07:49:04  45  	-- create normalization table
07:49:04  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:49:04  47  
07:49:04  48  	-- populate normalization table based on winsorized data
07:49:04  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:49:04  50  	  norm_table_name => 'svmc_norm',
07:49:04  51  	  data_table_name => 'svmc_winsor',
07:49:04  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:04  53  
07:49:04  54  	-- normalize the original data
07:49:04  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:49:04  56  	  norm_table_name => 'svmc_norm',
07:49:04  57  	  data_table_name => '&bldtable',
07:49:04  58  	  xform_view_name => 'svmc_build_prep');
07:49:04  59  END;
07:49:04  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.44
07:49:05 SQL> 
07:49:05 SQL> ---------------------
07:49:05 SQL> -- CREATE A NEW MODEL
07:49:05 SQL> --
07:49:05 SQL> -- Cleanup old model with the same name for repeat runs
07:49:05 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:49:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:05   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.20
07:49:07 SQL> 
07:49:07 SQL> -- Build a new SVM Model
07:49:07 SQL> BEGIN
07:49:07   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:49:07   3  	  model_name	      => '&model_name',
07:49:07   4  	  mining_function     => dbms_data_mining.classification,
07:49:07   5  	  data_table_name     => 'svmc_build_prep',
07:49:07   6  	  case_id_column_name => '&case_id',
07:49:07   7  	  target_column_name  => '&target',
07:49:07   8  	  settings_table_name => 'svmc_settings');
07:49:07   9  END;
07:49:07  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:10.20
07:49:17 SQL> 
07:49:17 SQL> -----------------------------------------------------------------------
07:49:17 SQL> --			       APPLY/score THE MODEL
07:49:17 SQL> -----------------------------------------------------------------------
07:49:17 SQL> 
07:49:17 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:49:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:49:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:49:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:49:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:49:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:49:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:49:17 SQL> -----------------------
07:49:17 SQL> -- PREPARE SCORING DATA
07:49:17 SQL> --
07:49:17 SQL> -- If the data for model creation has been prepared, then the data
07:49:17 SQL> -- to be scored using the model must be prepared in the same manner
07:49:17 SQL> -- in order to obtain meaningful results.
07:49:17 SQL> --
07:49:17 SQL> -- 1. Missing Value treatment for all Predictors and
07:49:17 SQL> -- 2. Normalization
07:49:17 SQL> -- No outlier treatment will be performed during test and apply. The
07:49:17 SQL> -- normalization step is sufficient, since the normalization parameters
07:49:17 SQL> -- already capture the effects of outlier treatment done with build data.
07:49:17 SQL> --
07:49:17 SQL> BEGIN
07:49:17   2  	-- Xform Test data to replace missing values
07:49:17   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:49:17   4  	  miss_table_name => 'svmc_miss_num',
07:49:17   5  	  data_table_name => '&scoretable',
07:49:17   6  	  xform_view_name => 'xformed_apply_miss_num');
07:49:17   7  
07:49:17   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:49:17   9  	  miss_table_name => 'svmc_miss_cat',
07:49:17  10  	  data_table_name => '&scoretable',
07:49:17  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:49:17  12  
07:49:17  13  	-- Normalize the data to be scored
07:49:17  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:49:17  15  	  norm_table_name => 'svmc_norm',
07:49:17  16  	  data_table_name => '&scoretable',
07:49:17  17  	  xform_view_name => 'svmc_apply_prep');
07:49:17  18  END;
07:49:17  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
07:49:17 SQL> 
07:49:17 SQL> -- Use same model_name used in score.sql
07:49:17 SQL> DEFINE model_name = 'forex14'
07:49:17 SQL> 
07:49:17 SQL> -- Maybe I already collected a score for this prdate.
07:49:17 SQL> -- DELETE it if I did:
07:49:17 SQL> DELETE fxscores_demo WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:49:17 SQL> 
07:49:17 SQL> INSERT INTO fxscores_demo (prdate,score,rundate,pair,ydate)
07:49:17   2  SELECT
07:49:17   3  prdate
07:49:17   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:49:17   5  ,sysdate
07:49:17   6  ,SUBSTR(prdate,1,3)pair
07:49:17   7  ,SUBSTR(prdate,4,19)ydate
07:49:17   8  FROM svmc_apply_prep
07:49:17   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:49:17 SQL> @score1_5min_gattn.sql	2010-12-28 09:15:00
07:49:17 SQL> --
07:49:17 SQL> -- score1_5min_gattn.sql
07:49:17 SQL> --
07:49:17 SQL> 
07:49:17 SQL> CREATE OR REPLACE VIEW sme AS
07:49:17   2  SELECT
07:49:17   3  'jpy'||ydate prdate
07:49:17   4  ,NULL gattn
07:49:17   5  ,g00
07:49:17   6  ,g01
07:49:17   7  ,g02
07:49:17   8  ,g03
07:49:17   9  ,g04
07:49:17  10  ,g05
07:49:17  11  ,g06
07:49:17  12  ,g07
07:49:17  13  ,g08
07:49:17  14  FROM jpy_ms
07:49:17  15  WHERE ydate = '&1'||' '||'&2'
07:49:17  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'09:15:00'

View created.

Elapsed: 00:00:00.03
07:49:17 SQL> 
07:49:17 SQL> -- rpt
07:49:17 SQL> -- We should see just 1 row:
07:49:17 SQL> 
07:49:17 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:49:17 SQL> 
07:49:17 SQL> -- Build the model:
07:49:17 SQL> CREATE OR REPLACE VIEW bme AS
07:49:17   2  SELECT
07:49:17   3  'jpy'||ydate prdate
07:49:17   4  ,gattn
07:49:17   5  ,g00
07:49:17   6  ,g01
07:49:17   7  ,g02
07:49:17   8  ,g03
07:49:17   9  ,g04
07:49:17  10  ,g05
07:49:17  11  ,g06
07:49:17  12  ,g07
07:49:17  13  ,g08
07:49:17  14  FROM jpy_ms
07:49:17  15  WHERE gattn IN('nup','up')
07:49:17  16  -- Use only rows which are older than 1 day:
07:49:17  17  AND 1+ydate < '&1'||' '||'&2'
07:49:17  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'09:15:00'

View created.

Elapsed: 00:00:00.09
07:49:17 SQL> 
07:49:17 SQL> -- rpt
07:49:17 SQL> 
07:49:17 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9197
up	     9649

Elapsed: 00:00:00.06
07:49:17 SQL> 
07:49:17 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 09:10:00

Elapsed: 00:00:00.06
07:49:17 SQL> 
07:49:17 SQL> -- Now build model from bme and score sme
07:49:17 SQL> @score1gattn.sql
07:49:17 SQL> -- score1gattn.sql
07:49:17 SQL> 
07:49:17 SQL> -- Does the 1st SVM score
07:49:17 SQL> 
07:49:17 SQL> -- Fill up svmc_apply_prep
07:49:17 SQL> @score_gattn.sql
07:49:17 SQL> --
07:49:17 SQL> -- score_gattn.sql
07:49:17 SQL> --
07:49:17 SQL> 
07:49:17 SQL> -- usage: score_gattn.sql
07:49:17 SQL> 
07:49:17 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:49:17 SQL> 
07:49:17 SQL> DEFINE target	= 'gattn'
07:49:17 SQL> DEFINE model_name = 'forex14'
07:49:17 SQL> DEFINE bldtable	= 'bme'
07:49:17 SQL> DEFINE scoretable = 'sme'
07:49:17 SQL> DEFINE case_id	= 'prdate'
07:49:17 SQL> 
07:49:17 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:49:17 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:49:17 SQL> 
07:49:17 SQL> -- Builds an SVM model using pl/sql.
07:49:17 SQL> 
07:49:17 SQL> -----------------------------------------------------------------------
07:49:17 SQL> --			    BUILD THE MODEL
07:49:17 SQL> -----------------------------------------------------------------------
07:49:17 SQL> 
07:49:17 SQL> -- Cleanup old build data preparation objects for repeat runs
07:49:17 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:49:17 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:49:17 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:49:17 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:49:17 SQL> 
07:49:17 SQL> 
07:49:17 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:49:17 SQL> --
07:49:17 SQL> -- DROP	TABLE svmc_settings ;
07:49:17 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:49:17 SQL> -- DELETE svmc_settings;
07:49:17 SQL> 
07:49:17 SQL> -- The default classification algorithm is Naive Bayes. So override
07:49:17 SQL> -- this choice to SVM using a settings table.
07:49:17 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:49:17 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:49:17 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:49:17 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:49:17 SQL> -- models.
07:49:17 SQL> --
07:49:17 SQL> 
07:49:17 SQL> -- Do this once and then comment it out.
07:49:17 SQL> -- That makes script go faster.
07:49:17 SQL> -- BEGIN
07:49:17 SQL> -- -- Populate settings table
07:49:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:49:17 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:49:17 SQL> --
07:49:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:49:17 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:49:17 SQL> --
07:49:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:49:17 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:49:17 SQL> --   COMMIT;
07:49:17 SQL> -- END;
07:49:17 SQL> -- /
07:49:17 SQL> 
07:49:17 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.01
07:49:18 SQL> 
07:49:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:49:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:49:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:49:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:49:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:49:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:49:18 SQL> 
07:49:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:49:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:49:18 SQL> 
07:49:18 SQL> --------------------------------
07:49:18 SQL> -- PREPARE BUILD (TRAINING) DATA
07:49:18 SQL> --
07:49:18 SQL> 
07:49:18 SQL> -- 1. Missing Value treatment for all Predictors and
07:49:18 SQL> -- 2. Outlier Treatment and
07:49:18 SQL> -- 3. Normalization are performed below.
07:49:18 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:49:18 SQL> --    normalized here.
07:49:18 SQL> 
07:49:18 SQL> BEGIN
07:49:18   2  	-- Perform missing value treatment for all predictors
07:49:18   3  	-- create miss tables
07:49:18   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:49:18   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:49:18   6  
07:49:18   7  	-- populate miss tables
07:49:18   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:49:18   9  	  miss_table_name => 'svmc_miss_num',
07:49:18  10  	  data_table_name => '&bldtable',
07:49:18  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:18  12  
07:49:18  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:49:18  14  	  miss_table_name => 'svmc_miss_cat',
07:49:18  15  	  data_table_name => '&bldtable',
07:49:18  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:18  17  
07:49:18  18  	-- xform input data to replace missing values
07:49:18  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:49:18  20  	  miss_table_name => 'svmc_miss_num',
07:49:18  21  	  data_table_name => '&bldtable',
07:49:18  22  	  xform_view_name => 'xformed_build_miss_num');
07:49:18  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:49:18  24  	  miss_table_name => 'svmc_miss_cat',
07:49:18  25  	  data_table_name => '&bldtable',
07:49:18  26  	  xform_view_name => 'xformed_build_miss_cat');
07:49:18  27  
07:49:18  28  	-- Perform outlier treatment.
07:49:18  29  	-- create clip table
07:49:18  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:49:18  31  
07:49:18  32  	-- populate clip table
07:49:18  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:49:18  34  	  clip_table_name => 'svmc_clip',
07:49:18  35  	  data_table_name => '&bldtable',
07:49:18  36  	  tail_frac	  => 0.025,
07:49:18  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:18  38  
07:49:18  39  	-- xform input data to winsorized data
07:49:18  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:49:18  41  	  clip_table_name => 'svmc_clip',
07:49:18  42  	  data_table_name => '&bldtable',
07:49:18  43  	  xform_view_name => 'svmc_winsor');
07:49:18  44  
07:49:18  45  	-- create normalization table
07:49:18  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:49:18  47  
07:49:18  48  	-- populate normalization table based on winsorized data
07:49:18  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:49:18  50  	  norm_table_name => 'svmc_norm',
07:49:18  51  	  data_table_name => 'svmc_winsor',
07:49:18  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:18  53  
07:49:18  54  	-- normalize the original data
07:49:18  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:49:18  56  	  norm_table_name => 'svmc_norm',
07:49:18  57  	  data_table_name => '&bldtable',
07:49:18  58  	  xform_view_name => 'svmc_build_prep');
07:49:18  59  END;
07:49:18  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.41
07:49:19 SQL> 
07:49:19 SQL> ---------------------
07:49:19 SQL> -- CREATE A NEW MODEL
07:49:19 SQL> --
07:49:19 SQL> -- Cleanup old model with the same name for repeat runs
07:49:19 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:49:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:19   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.81
07:49:21 SQL> 
07:49:21 SQL> -- Build a new SVM Model
07:49:21 SQL> BEGIN
07:49:21   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:49:21   3  	  model_name	      => '&model_name',
07:49:21   4  	  mining_function     => dbms_data_mining.classification,
07:49:21   5  	  data_table_name     => 'svmc_build_prep',
07:49:21   6  	  case_id_column_name => '&case_id',
07:49:21   7  	  target_column_name  => '&target',
07:49:21   8  	  settings_table_name => 'svmc_settings');
07:49:21   9  END;
07:49:21  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:07.16
07:49:28 SQL> 
07:49:28 SQL> -----------------------------------------------------------------------
07:49:28 SQL> --			       APPLY/score THE MODEL
07:49:28 SQL> -----------------------------------------------------------------------
07:49:28 SQL> 
07:49:28 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:49:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:49:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:49:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:49:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:49:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:49:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:49:28 SQL> -----------------------
07:49:28 SQL> -- PREPARE SCORING DATA
07:49:28 SQL> --
07:49:28 SQL> -- If the data for model creation has been prepared, then the data
07:49:28 SQL> -- to be scored using the model must be prepared in the same manner
07:49:28 SQL> -- in order to obtain meaningful results.
07:49:28 SQL> --
07:49:28 SQL> -- 1. Missing Value treatment for all Predictors and
07:49:28 SQL> -- 2. Normalization
07:49:28 SQL> -- No outlier treatment will be performed during test and apply. The
07:49:28 SQL> -- normalization step is sufficient, since the normalization parameters
07:49:28 SQL> -- already capture the effects of outlier treatment done with build data.
07:49:28 SQL> --
07:49:28 SQL> BEGIN
07:49:28   2  	-- Xform Test data to replace missing values
07:49:28   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:49:28   4  	  miss_table_name => 'svmc_miss_num',
07:49:28   5  	  data_table_name => '&scoretable',
07:49:28   6  	  xform_view_name => 'xformed_apply_miss_num');
07:49:28   7  
07:49:28   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:49:28   9  	  miss_table_name => 'svmc_miss_cat',
07:49:28  10  	  data_table_name => '&scoretable',
07:49:28  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:49:28  12  
07:49:28  13  	-- Normalize the data to be scored
07:49:28  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:49:28  15  	  norm_table_name => 'svmc_norm',
07:49:28  16  	  data_table_name => '&scoretable',
07:49:28  17  	  xform_view_name => 'svmc_apply_prep');
07:49:28  18  END;
07:49:28  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
07:49:29 SQL> 
07:49:29 SQL> -- Use same model_name used in score.sql
07:49:29 SQL> DEFINE model_name = 'forex14'
07:49:29 SQL> 
07:49:29 SQL> -- Maybe I already collected a score for this prdate.
07:49:29 SQL> -- DELETE it if I did:
07:49:29 SQL> DELETE fxscores_demo_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.02
07:49:29 SQL> 
07:49:29 SQL> INSERT INTO fxscores_demo_gattn (prdate,score,rundate,pair,ydate)
07:49:29   2  SELECT
07:49:29   3  prdate
07:49:29   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:49:29   5  ,sysdate
07:49:29   6  ,SUBSTR(prdate,1,3)pair
07:49:29   7  ,SUBSTR(prdate,4,19)ydate
07:49:29   8  FROM svmc_apply_prep
07:49:29   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.05
07:49:29 SQL> @score1_5min.sql	      2010-12-28 09:20:00
07:49:29 SQL> --
07:49:29 SQL> -- score1_5min.sql
07:49:29 SQL> --
07:49:29 SQL> 
07:49:29 SQL> CREATE OR REPLACE VIEW sme AS
07:49:29   2  SELECT
07:49:29   3  'jpy'||ydate prdate
07:49:29   4  ,NULL gatt
07:49:29   5  ,g00
07:49:29   6  ,g01
07:49:29   7  ,g02
07:49:29   8  ,g03
07:49:29   9  ,g04
07:49:29  10  ,g05
07:49:29  11  ,g06
07:49:29  12  ,g07
07:49:29  13  ,g08
07:49:29  14  FROM jpy_ms
07:49:29  15  WHERE ydate = '&1'||' '||'&2'
07:49:29  16  /
old  15: WHERE ydate = '&1'||' '||'&2'
new  15: WHERE ydate = '2010-12-28'||' '||'09:20:00'

View created.

Elapsed: 00:00:00.35
07:49:29 SQL> 
07:49:29 SQL> -- rpt
07:49:29 SQL> -- We should see just 1 row:
07:49:29 SQL> 
07:49:29 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
07:49:29 SQL> 
07:49:29 SQL> -- Build the model:
07:49:29 SQL> CREATE OR REPLACE VIEW bme AS
07:49:29   2  SELECT
07:49:29   3  'jpy'||ydate prdate
07:49:29   4  ,gatt
07:49:29   5  ,g00
07:49:29   6  ,g01
07:49:29   7  ,g02
07:49:29   8  ,g03
07:49:29   9  ,g04
07:49:29  10  ,g05
07:49:29  11  ,g06
07:49:29  12  ,g07
07:49:29  13  ,g08
07:49:29  14  FROM jpy_ms
07:49:29  15  WHERE gatt IN('nup','up')
07:49:29  16  -- Use only rows which are older than 1 day:
07:49:29  17  AND 1+ydate < '&1'||' '||'&2'
07:49:29  18  /
old  17: AND 1+ydate < '&1'||' '||'&2'
new  17: AND 1+ydate < '2010-12-28'||' '||'09:20:00'

View created.

Elapsed: 00:00:00.11
07:49:29 SQL> 
07:49:29 SQL> -- rpt
07:49:29 SQL> 
07:49:29 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9941
up	     8906

Elapsed: 00:00:00.06
07:49:29 SQL> 
07:49:29 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
jpy2010-12-27 09:15:00

Elapsed: 00:00:00.06
07:49:29 SQL> 
07:49:29 SQL> -- Now build model from bme and score sme
07:49:29 SQL> @score1.sql
07:49:29 SQL> -- score1.sql
07:49:29 SQL> 
07:49:29 SQL> -- Does the 1st SVM score
07:49:29 SQL> 
07:49:29 SQL> -- Fill up svmc_apply_prep
07:49:29 SQL> @score.sql
07:49:29 SQL> --
07:49:29 SQL> -- score.sql
07:49:29 SQL> --
07:49:29 SQL> 
07:49:29 SQL> -- usage: score.sql
07:49:29 SQL> 
07:49:29 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:49:29 SQL> 
07:49:29 SQL> DEFINE target	= 'gatt'
07:49:29 SQL> DEFINE model_name = 'forex14'
07:49:29 SQL> DEFINE bldtable	= 'bme'
07:49:29 SQL> DEFINE scoretable = 'sme'
07:49:29 SQL> DEFINE case_id	= 'prdate'
07:49:29 SQL> 
07:49:29 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:49:29 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:49:29 SQL> 
07:49:29 SQL> -- Builds an SVM model using pl/sql.
07:49:29 SQL> 
07:49:29 SQL> -----------------------------------------------------------------------
07:49:29 SQL> --			    BUILD THE MODEL
07:49:29 SQL> -----------------------------------------------------------------------
07:49:29 SQL> 
07:49:29 SQL> -- Cleanup old build data preparation objects for repeat runs
07:49:29 SQL> DELETE svmc_miss_num;

9 rows deleted.

Elapsed: 00:00:00.00
07:49:29 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:49:29 SQL> DELETE svmc_clip;

9 rows deleted.

Elapsed: 00:00:00.00
07:49:29 SQL> DELETE svmc_norm;

9 rows deleted.

Elapsed: 00:00:00.00
07:49:29 SQL> 
07:49:29 SQL> 
07:49:29 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:49:29 SQL> --
07:49:29 SQL> -- DROP	TABLE svmc_settings ;
07:49:29 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:49:29 SQL> -- DELETE svmc_settings;
07:49:29 SQL> 
07:49:29 SQL> -- The default classification algorithm is Naive Bayes. So override
07:49:29 SQL> -- this choice to SVM using a settings table.
07:49:29 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:49:29 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:49:29 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:49:29 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:49:29 SQL> -- models.
07:49:29 SQL> --
07:49:29 SQL> 
07:49:29 SQL> -- Do this once and then comment it out.
07:49:29 SQL> -- That makes script go faster.
07:49:29 SQL> -- BEGIN
07:49:29 SQL> -- -- Populate settings table
07:49:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:49:29 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:49:29 SQL> --
07:49:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:49:29 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:49:29 SQL> --
07:49:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:49:29 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:49:29 SQL> --   COMMIT;
07:49:29 SQL> -- END;
07:49:29 SQL> -- /
07:49:29 SQL> 
07:49:29 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       99123123

Elapsed: 00:00:00.00
07:49:29 SQL> 
07:49:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:49:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:49:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:49:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:49:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:49:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
07:49:29 SQL> 
07:49:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:49:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:49:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:49:29 SQL> 
07:49:29 SQL> --------------------------------
07:49:29 SQL> -- PREPARE BUILD (TRAINING) DATA
07:49:29 SQL> --
07:49:29 SQL> 
07:49:29 SQL> -- 1. Missing Value treatment for all Predictors and
07:49:29 SQL> -- 2. Outlier Treatment and
07:49:29 SQL> -- 3. Normalization are performed below.
07:49:29 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:49:29 SQL> --    normalized here.
07:49:29 SQL> 
07:49:29 SQL> BEGIN
07:49:29   2  	-- Perform missing value treatment for all predictors
07:49:29   3  	-- create miss tables
07:49:29   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:49:29   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:49:29   6  
07:49:29   7  	-- populate miss tables
07:49:29   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:49:29   9  	  miss_table_name => 'svmc_miss_num',
07:49:29  10  	  data_table_name => '&bldtable',
07:49:29  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:29  12  
07:49:29  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:49:29  14  	  miss_table_name => 'svmc_miss_cat',
07:49:29  15  	  data_table_name => '&bldtable',
07:49:29  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:29  17  
07:49:29  18  	-- xform input data to replace missing values
07:49:29  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:49:29  20  	  miss_table_name => 'svmc_miss_num',
07:49:29  21  	  data_table_name => '&bldtable',
07:49:29  22  	  xform_view_name => 'xformed_build_miss_num');
07:49:29  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:49:29  24  	  miss_table_name => 'svmc_miss_cat',
07:49:29  25  	  data_table_name => '&bldtable',
07:49:29  26  	  xform_view_name => 'xformed_build_miss_cat');
07:49:29  27  
07:49:29  28  	-- Perform outlier treatment.
07:49:29  29  	-- create clip table
07:49:29  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:49:29  31  
07:49:29  32  	-- populate clip table
07:49:29  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:49:29  34  	  clip_table_name => 'svmc_clip',
07:49:29  35  	  data_table_name => '&bldtable',
07:49:29  36  	  tail_frac	  => 0.025,
07:49:29  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:29  38  
07:49:29  39  	-- xform input data to winsorized data
07:49:29  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:49:29  41  	  clip_table_name => 'svmc_clip',
07:49:29  42  	  data_table_name => '&bldtable',
07:49:29  43  	  xform_view_name => 'svmc_winsor');
07:49:29  44  
07:49:29  45  	-- create normalization table
07:49:29  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:49:29  47  
07:49:29  48  	-- populate normalization table based on winsorized data
07:49:29  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:49:29  50  	  norm_table_name => 'svmc_norm',
07:49:29  51  	  data_table_name => 'svmc_winsor',
07:49:29  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:49:29  53  
07:49:29  54  	-- normalize the original data
07:49:29  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:49:29  56  	  norm_table_name => 'svmc_norm',
07:49:29  57  	  data_table_name => '&bldtable',
07:49:29  58  	  xform_view_name => 'svmc_build_prep');
07:49:29  59  END;
07:49:29  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',
