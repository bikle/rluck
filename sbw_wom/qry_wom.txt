
SQL*Plus: Release 11.2.0.1.0 Production on Thu Nov 4 13:48:22 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

13:48:22 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
13:48:22 SQL> 13:48:22 SQL> --
13:48:22 SQL> -- qry_wom.sql
13:48:22 SQL> --
13:48:22 SQL> 
13:48:22 SQL> -- I want to see my data 1st:
13:48:22 SQL> SELECT
13:48:22   2  pair
13:48:22   3  ,wom
13:48:22   4  ,yr
13:48:22   5  ,qtr
13:48:22   6  ,AVG(nwgain)
13:48:22   7  ,SUM(nwgain)
13:48:22   8  FROM wjw
13:48:22   9  WHERE yr = '2010'
13:48:22  10  GROUP BY pair,wom,yr,qtr
13:48:22  11  ORDER BY pair,wom,yr,qtr
13:48:22  12  /

PAIR	W YR   Q AVG(NWGAIN) SUM(NWGAIN)
------- - ---- - ----------- -----------
aud_usd 1 2010 1  .008573606  .120030483
aud_usd 1 2010 2  .003538904  .053083555
aud_usd 1 2010 3  .012059815  .156777598
aud_usd 1 2010 4  .014721322  .058885287
aud_usd 2 2010 1  .004065107  .052846388
aud_usd 2 2010 2  -.00934179  -.14012678
aud_usd 2 2010 3  .000793645  .011904671
aud_usd 2 2010 4  -.00731309  -.02925235
aud_usd 3 2010 1  -.00960966  -.12492554
aud_usd 3 2010 2  -.00481943  -.07229139
aud_usd 3 2010 3  .011087742  .166316137
aud_usd 3 2010 4  -.00473247  -.02366236
aud_usd 4 2010 1  -.00077856   -.0116784
aud_usd 4 2010 2  -.00971918  -.12634936
aud_usd 4 2010 3  .013860748  .207911218
aud_usd 4 2010 4   -.0017324   -.0017324
aud_usd 5 2010 1  -.00047826  -.00191303
aud_usd 5 2010 2  -.01681003  -.06724011
aud_usd 5 2010 3   .01609968  .080498401
eur_usd 1 2010 1  .000635598   .00889837
eur_usd 1 2010 2  -.00556543  -.08348139
eur_usd 1 2010 3   -.0038575  -.05014752
eur_usd 1 2010 4  .006610855  .026443419
eur_usd 2 2010 1  -.00710479  -.09236222
eur_usd 2 2010 2  -.00136037  -.02040554
eur_usd 2 2010 3  .008816956  .132254346
eur_usd 2 2010 4  -.00175305  -.00701222
eur_usd 3 2010 1  -.01068997  -.13896962
eur_usd 3 2010 2  -.00733428  -.11001426
eur_usd 3 2010 3  .007681597  .115223962
eur_usd 3 2010 4  -.00534495  -.02672476
eur_usd 4 2010 1  -.00253506  -.03802587
eur_usd 4 2010 2  -.00587948   -.0764333
eur_usd 4 2010 3  .013472305   .20208458
eur_usd 4 2010 4   -.0009333   -.0009333
eur_usd 5 2010 1  -.00790473   -.0316189
eur_usd 5 2010 2  -.00579895   -.0231958
eur_usd 5 2010 3    .0138822	 .069411
gbp_usd 1 2010 1  .000354724   .00496613
gbp_usd 1 2010 2  -.00176891  -.02653368
gbp_usd 1 2010 3  -.00322086  -.04187123
gbp_usd 1 2010 4  .000134451  .000537806
gbp_usd 2 2010 1  .003370681  .043818849
gbp_usd 2 2010 2  -.00411264  -.06168964
gbp_usd 2 2010 3  .003125069  .046876032
gbp_usd 2 2010 4  -.00433899  -.01735595
gbp_usd 3 2010 1  -.01235979  -.16067732
gbp_usd 3 2010 2  .003687887  .055318301
gbp_usd 3 2010 3   .00616279  .092441857
gbp_usd 3 2010 4   -.0051647  -.02582349
gbp_usd 4 2010 1  -.00853663  -.12804944
gbp_usd 4 2010 2  .003539591  .046014683
gbp_usd 4 2010 3  .006633656  .099504841
gbp_usd 4 2010 4  .021746062  .021746062
gbp_usd 5 2010 1  .002477717  .009910868
gbp_usd 5 2010 2  -.01053439  -.04213757
gbp_usd 5 2010 3  .009944589  .049722947
usd_cad 1 2010 1  -.00537078  -.07519088
usd_cad 1 2010 2  -.00654294  -.09814407
usd_cad 1 2010 3  -.00504011  -.06552147
usd_cad 1 2010 4  -.00762415  -.03049659
usd_cad 2 2010 1  -.00614794  -.07992325
usd_cad 2 2010 2  .006578156  .098672338
usd_cad 2 2010 3  .004600483  .069007246
usd_cad 2 2010 4  .014399898  .057599591
usd_cad 3 2010 1  .013052161  .169678093
usd_cad 3 2010 2  .006831144  .102467158
usd_cad 3 2010 3  .001342797  .020141956
usd_cad 3 2010 4   .00564593  .028229651
usd_cad 4 2010 1  -.00792748  -.11891225
usd_cad 4 2010 2  .006560075   .08528098
usd_cad 4 2010 3  -.00583351  -.08750268
usd_cad 4 2010 4  -.00701003  -.00701003
usd_cad 5 2010 1  -.01031673  -.04126694
usd_cad 5 2010 2  .014547656  .058190624
usd_cad 5 2010 3  -.01541472   -.0770736
usd_chf 1 2010 1  -.00315861  -.04422057
usd_chf 1 2010 2  -.00121924  -.01828857
usd_chf 1 2010 3  .000308513  .004010664
usd_chf 1 2010 4  -.00966355   -.0386542
usd_chf 2 2010 1  .002806601  .036485816
usd_chf 2 2010 2  .002686825  .040302376
usd_chf 2 2010 3  -.00717623  -.10764345
usd_chf 2 2010 4  .006465025	.0258601
usd_chf 3 2010 1  .004892192  .063598495
usd_chf 3 2010 2  .002099512  .031492676
usd_chf 3 2010 3  -.00984068  -.14761013
usd_chf 3 2010 4  .021550555  .107752776
usd_chf 4 2010 1  .002495418  .037431264
usd_chf 4 2010 2  -.00413551  -.05376162
usd_chf 4 2010 3  -.01030988  -.15464821
usd_chf 4 2010 4  .004695315  .004695315
usd_chf 5 2010 1  .010141942  .040567768
usd_chf 5 2010 2  .003102641  .012410562
usd_chf 5 2010 3  -.00627425  -.03137125
usd_jpy 1 2010 1  -.00053224  -.00745131
usd_jpy 1 2010 2  -.00735069  -.11026029
usd_jpy 1 2010 3  .001232204  .016018654
usd_jpy 1 2010 4  -.01437188  -.05748753
usd_jpy 2 2010 1  .002801494  .036419422
usd_jpy 2 2010 2  -.00812504  -.12187567
usd_jpy 2 2010 3  .000796586  .011948787
usd_jpy 2 2010 4  -.00434021  -.01736083
usd_jpy 3 2010 1  -.00492511  -.06402645
usd_jpy 3 2010 2  -.00470173  -.07052591
usd_jpy 3 2010 3  -.00691389  -.10370834
usd_jpy 3 2010 4  .000787522  .003937608
usd_jpy 4 2010 1  .006958336  .104375039
usd_jpy 4 2010 2   .00182281  .023696531
usd_jpy 4 2010 3  -.00843706  -.12655589
usd_jpy 4 2010 4  -.01106059  -.01106059
usd_jpy 5 2010 1  .004257194  .017028775
usd_jpy 5 2010 2  -.01810183  -.07240731
usd_jpy 5 2010 3  -.01072016  -.05360079

114 rows selected.

Elapsed: 00:00:00.02
13:48:22 SQL> 
13:48:22 SQL> -- ok now work with it:
13:48:22 SQL> CREATE OR REPLACE VIEW wjw2010 AS SELECT pair,wom,qtr,AVG(nwgain)avgg FROM wjw WHERE yr = '2010'GROUP BY pair,wom,qtr;

View created.

Elapsed: 00:00:00.07
13:48:22 SQL> CREATE OR REPLACE VIEW wjw2009 AS SELECT pair,wom,qtr,AVG(nwgain)avgg FROM wjw WHERE yr = '2009'GROUP BY pair,wom,qtr;

View created.

Elapsed: 00:00:00.04
13:48:22 SQL> CREATE OR REPLACE VIEW wjw2008 AS SELECT pair,wom,qtr,AVG(nwgain)avgg FROM wjw WHERE yr = '2008'GROUP BY pair,wom,qtr;

View created.

Elapsed: 00:00:00.05
13:48:22 SQL> 
13:48:22 SQL> -- Join all 3 years so I can have the avgs talk to each other:
13:48:22 SQL> CREATE OR REPLACE VIEW wjww0 AS
13:48:22   2  SELECT
13:48:22   3  a.pair
13:48:22   4  ,a.wom
13:48:22   5  ,a.qtr
13:48:22   6  ,a.avgg avg08
13:48:22   7  ,b.avgg avg09
13:48:22   8  ,c.avgg avg10
13:48:22   9  FROM wjw2008 a, wjw2009 b, wjw2010 c
13:48:22  10  WHERE a.pair = b.pair AND a.wom = b.wom AND a.qtr = b.qtr
13:48:22  11  AND   a.pair = c.pair AND a.wom = c.wom AND a.qtr = c.qtr
13:48:22  12  ORDER BY a.pair,a.wom,a.qtr
13:48:22  13  /

View created.

Elapsed: 00:00:00.05
13:48:22 SQL> 
13:48:22 SQL> -- I want to see it first:
13:48:22 SQL> SELECT * FROM wjww0;

PAIR	W Q	 AVG08	    AVG09      AVG10
------- - - ---------- ---------- ----------
aud_usd 1 1 .003489611 -.00465582 .008573606
aud_usd 1 2 -.00046851	.01137426 .003538904
aud_usd 1 3 -.02336993 -.00144601 .012059815
aud_usd 1 4 -.03380371 .013042624 .014721322
aud_usd 2 1 -.00329641 -.00459667 .004065107
aud_usd 2 2 .007785401	-.0013375 -.00934179
aud_usd 2 3 -.00032876 .009886961 .000793645
aud_usd 2 4 .003547247 -.00482984 -.00731309
aud_usd 3 1 .005004871 .019614691 -.00960966
aud_usd 3 2 .007607616 .004220235 -.00481943
aud_usd 3 3 .005609024 .011066753 .011087742
aud_usd 3 4 -.02487392 -.00869519 -.00473247
aud_usd 4 1 .008079459 -.01136869 -.00077856
aud_usd 4 2 -.00094799 .021087069 -.00971918
aud_usd 4 3 -.03522414 .006692326 .013860748
aud_usd 4 4 .028007059 .002240755  -.0017324
aud_usd 5 1   .0049906 .032718562 -.00047826
aud_usd 5 2 .003917331 .007258042 -.01681003
aud_usd 5 3 -.06199843 .015253189  .01609968
eur_usd 1 1 .002145831 -.00136193 .000635598
eur_usd 1 2 .001678649 -.00041728 -.00556543
eur_usd 1 3 -.02011335 .000485306  -.0038575
eur_usd 1 4 .002916208 -.00136916 .006610855
eur_usd 2 1 .005913573 .000600644 -.00710479
eur_usd 2 2    .005172 -.00590662 -.00136037
eur_usd 2 3 .001751127	.00746248 .008816956
eur_usd 2 4 .019893955 -.00540431 -.00175305
eur_usd 3 1 .006167885 .009684192 -.01068997
eur_usd 3 2 .001784236 .009565885 -.00733428
eur_usd 3 3 .005777984 .004998471 .007681597
eur_usd 3 4 -.01373598 -.00124681 -.00534495
eur_usd 4 1 .009963963 -.01260131 -.00253506
eur_usd 4 2  -.0069944 .012230885 -.00587948
eur_usd 4 3 -.02247397 -.00313878 .013472305
eur_usd 4 4 .002024647 -.00252064  -.0009333
eur_usd 5 1 -.00747793 .003002108 -.00790473
eur_usd 5 2 -.00193384 -.00206055 -.00579895
eur_usd 5 3 -.02527134 .011093307   .0138822
gbp_usd 1 1 .000912067 -.00533836 .000354724
gbp_usd 1 2 -.00600254 .005470155 -.00176891
gbp_usd 1 3 -.01449898 -.00446618 -.00322086
gbp_usd 1 4 -.02192902 -.00263591 .000134451
gbp_usd 2 1 -.00546735 -.00493415 .003370681
gbp_usd 2 2 .003566341 .009267027 -.00411264
gbp_usd 2 3 .005488138 -.00098655 .003125069
gbp_usd 2 4 .005224525 .007071487 -.00433899
gbp_usd 3 1 .004924085 .003815535 -.01235979
gbp_usd 3 2 .005361459 .004531898 .003687887
gbp_usd 3 3 .002728426 -.00646501  .00616279
gbp_usd 3 4 -.03506852 -.00679838  -.0051647
gbp_usd 4 1 .002805747 .000966954 -.00853663
gbp_usd 4 2 -.00052234 .014399106 .003539591
gbp_usd 4 3 -.02353259 -.00052135 .006633656
gbp_usd 4 4 -.00584299 .002929984 .021746062
gbp_usd 5 1 -.00722029	.03051066 .002477717
gbp_usd 5 2 -.00834908 -.00250951 -.01053439
gbp_usd 5 3 -.02089697 .008743042 .009944589
usd_cad 1 1 .005064224 .006082166 -.00537078
usd_cad 1 2 .003312594 -.00393339 -.00654294
usd_cad 1 3 .009132017 -.00014957 -.00504011
usd_cad 1 4 .029310817	-.0113923 -.00762415
usd_cad 2 1 .015658027 .009054657 -.00614794
usd_cad 2 2 -.00886369 .002772853 .006578156
usd_cad 2 3 -.00617229 -.01350338 .004600483
usd_cad 2 4  .01074816 .005082746 .014399898
usd_cad 3 1 -.00620695 -.01500214 .013052161
usd_cad 3 2 -.00102924 -.00158621 .006831144
usd_cad 3 3 -.00923844 -.00816246 .001342797
usd_cad 3 4 .020683254 .004347615  .00564593
usd_cad 4 1 -.00660553 .013527821 -.00792748
usd_cad 4 2 .004910337 -.01475165 .006560075
usd_cad 4 3 .018850907 .000682662 -.00583351
usd_cad 4 4 -.01409818 .000559128 -.00701003
usd_cad 5 1  .00418996 -.00544823 -.01031673
usd_cad 5 2 .008116131 -.00450028 .014547656
usd_cad 5 3 .027932702 -.01047154 -.01541472
usd_chf 1 1 -.00541794 .004570859 -.00315861
usd_chf 1 2 -.00326551 -.00091719 -.00121924
usd_chf 1 3 .019257249	-.0012186 .000308513
usd_chf 1 4 -.00125628 .003291167 -.00966355
usd_chf 2 1 -.01252504 .005410545 .002806601
usd_chf 2 2 .001037074	.00506718 .002686825
usd_chf 2 3 -.00544082 -.00871231 -.00717623
usd_chf 2 4  -.0158413	.00276633 .006465025
usd_chf 3 1 -.00570935 -.00541618 .004892192
usd_chf 3 2 .000370182 -.00836009 .002099512
usd_chf 3 3 -.00113189 -.00500746 -.00984068
usd_chf 3 4 -.00652589 -.00232165 .021550555
usd_chf 4 1 -.01177225 .006380279 .002495418
usd_chf 4 2 .007214426 -.01090833 -.00413551
usd_chf 4 3 .017177242 .004020582 -.01030988
usd_chf 4 4  -.0051117 .000817792 .004695315
usd_chf 5 1 .006815322 .002890469 .010141942
usd_chf 5 2 .003389907 .001239113 .003102641
usd_chf 5 3 .017391885 -.00945009 -.00627425
usd_jpy 1 1 -.00344727 -.00701281 -.00053224
usd_jpy 1 2 .001722984 -.00141847 -.00735069
usd_jpy 1 3 .003391203 -.01390039 .001232204
usd_jpy 1 4 -.02235662 .000078026 -.01437188
usd_jpy 2 1 -.01789386	.00204701 .002801494
usd_jpy 2 2  .00539455 -.01367581 -.00812504
usd_jpy 2 3 -.00896611 -.00172846 .000796586
usd_jpy 2 4 -.01143269 .009958737 -.00434021
usd_jpy 3 1 .001143974 .014646043 -.00492511
usd_jpy 3 2 .003137804 -.00954236 -.00470173
usd_jpy 3 3 .007515025 -.00095261 -.00691389
usd_jpy 3 4 -.02026744	.00477941 .000787522
usd_jpy 4 1 -.00391213	.01071682 .006958336
usd_jpy 4 2 .001803252 .008600863  .00182281
usd_jpy 4 3 -.00364846 -.00576646 -.00843706
usd_jpy 4 4 .004335269	-.0028075 -.01106059
usd_jpy 5 1 .001624977 .021522574 .004257194
usd_jpy 5 2 .006902869 .004882662 -.01810183
usd_jpy 5 3  -.0105076	.00110087 -.01072016

114 rows selected.

Elapsed: 00:00:00.02
13:48:22 SQL> 
13:48:22 SQL> -- Too much data up there.
13:48:22 SQL> -- I want a count of rows where all the avgs are same sign:
13:48:22 SQL> SELECT COUNT(*) FROM wjww0 WHERE ABS(SIGN(avg08)+SIGN(avg09)+SIGN(avg10)) = 3;

  COUNT(*)
----------
	22

Elapsed: 00:00:00.02
13:48:22 SQL> 
13:48:22 SQL> -- That is not many.  I look at them now:
13:48:22 SQL> SELECT * FROM wjww0 WHERE ABS(SIGN(avg08)+SIGN(avg09)+SIGN(avg10)) = 3;

PAIR	W Q	 AVG08	    AVG09      AVG10
------- - - ---------- ---------- ----------
aud_usd 3 3 .005609024 .011066753 .011087742
aud_usd 3 4 -.02487392 -.00869519 -.00473247
eur_usd 2 3 .001751127	.00746248 .008816956
eur_usd 3 3 .005777984 .004998471 .007681597
eur_usd 3 4 -.01373598 -.00124681 -.00534495
eur_usd 5 2 -.00193384 -.00206055 -.00579895
gbp_usd 1 3 -.01449898 -.00446618 -.00322086
gbp_usd 3 2 .005361459 .004531898 .003687887
gbp_usd 3 4 -.03506852 -.00679838  -.0051647
gbp_usd 5 2 -.00834908 -.00250951 -.01053439
usd_cad 2 4  .01074816 .005082746 .014399898
usd_cad 3 4 .020683254 .004347615  .00564593
usd_chf 1 2 -.00326551 -.00091719 -.00121924
usd_chf 2 2 .001037074	.00506718 .002686825
usd_chf 2 3 -.00544082 -.00871231 -.00717623
usd_chf 3 3 -.00113189 -.00500746 -.00984068
usd_chf 5 1 .006815322 .002890469 .010141942
usd_chf 5 2 .003389907 .001239113 .003102641
usd_jpy 1 1 -.00344727 -.00701281 -.00053224
usd_jpy 4 2 .001803252 .008600863  .00182281
usd_jpy 4 3 -.00364846 -.00576646 -.00843706
usd_jpy 5 1 .001624977 .021522574 .004257194

22 rows selected.

Elapsed: 00:00:00.02
13:48:22 SQL> 
13:48:22 SQL> 
13:48:22 SQL> -- I want a list of pairs where wom is the same across as many qtrs as possible.
13:48:22 SQL> -- I'll use analytic functions to compare data between rows and aggregate data of related rows:
13:48:22 SQL> CREATE OR REPLACE VIEW wjww1 AS
13:48:22   2  SELECT
13:48:22   3  pair
13:48:22   4  ,wom
13:48:22   5  ,qtr
13:48:22   6  ,avg08
13:48:22   7  ,avg09
13:48:22   8  ,avg10
13:48:22   9  ,COUNT(pair||wom)     OVER(PARTITION BY pair,wom ORDER BY pair,wom,qtr)ccount
13:48:22  10  , 	  LAG(avg10)OVER(PARTITION BY pair,wom ORDER BY pair,wom,qtr)avg10lag
13:48:22  11  ,SIGN(avg10*LAG(avg10)OVER(PARTITION BY pair,wom ORDER BY pair,wom,qtr))lgsign
13:48:22  12  FROM wjww0
13:48:22  13  WHERE ABS(SIGN(avg08)+SIGN(avg09)+SIGN(avg10)) = 3
13:48:22  14  /

View created.

Elapsed: 00:00:00.03
13:48:22 SQL> 
13:48:22 SQL> -- I look at the data.	It is the same data as the previous query but
13:48:22 SQL> -- with 3 additional rows of data derived from analytic functions:
13:48:22 SQL> 
13:48:22 SQL> SELECT * FROM wjww1;

PAIR	W Q	 AVG08	    AVG09      AVG10	 CCOUNT   AVG10LAG     LGSIGN
------- - - ---------- ---------- ---------- ---------- ---------- ----------
aud_usd 3 3 .005609024 .011066753 .011087742	      1
aud_usd 3 4 -.02487392 -.00869519 -.00473247	      2 .011087742	   -1
eur_usd 2 3 .001751127	.00746248 .008816956	      1
eur_usd 3 3 .005777984 .004998471 .007681597	      1
eur_usd 3 4 -.01373598 -.00124681 -.00534495	      2 .007681597	   -1
eur_usd 5 2 -.00193384 -.00206055 -.00579895	      1
gbp_usd 1 3 -.01449898 -.00446618 -.00322086	      1
gbp_usd 3 2 .005361459 .004531898 .003687887	      1
gbp_usd 3 4 -.03506852 -.00679838  -.0051647	      2 .003687887	   -1
gbp_usd 5 2 -.00834908 -.00250951 -.01053439	      1
usd_cad 2 4  .01074816 .005082746 .014399898	      1
usd_cad 3 4 .020683254 .004347615  .00564593	      1
usd_chf 1 2 -.00326551 -.00091719 -.00121924	      1
usd_chf 2 2 .001037074	.00506718 .002686825	      1
usd_chf 2 3 -.00544082 -.00871231 -.00717623	      2 .002686825	   -1
usd_chf 3 3 -.00113189 -.00500746 -.00984068	      1
usd_chf 5 1 .006815322 .002890469 .010141942	      1
usd_chf 5 2 .003389907 .001239113 .003102641	      2 .010141942	    1
usd_jpy 1 1 -.00344727 -.00701281 -.00053224	      1
usd_jpy 4 2 .001803252 .008600863  .00182281	      1
usd_jpy 4 3 -.00364846 -.00576646 -.00843706	      2  .00182281	   -1
usd_jpy 5 1 .001624977 .021522574 .004257194	      1

22 rows selected.

Elapsed: 00:00:00.03
13:48:22 SQL> 
13:48:22 SQL> -- I want a list of pairs where wom is the same across as many qtrs as possible.
13:48:22 SQL> -- Also I want the avg-gain to be the same sign across all the wom:
13:48:22 SQL> SELECT * FROM wjww1 WHERE lgsign=1;

PAIR	W Q	 AVG08	    AVG09      AVG10	 CCOUNT   AVG10LAG     LGSIGN
------- - - ---------- ---------- ---------- ---------- ---------- ----------
usd_chf 5 2 .003389907 .001239113 .003102641	      2 .010141942	    1

Elapsed: 00:00:00.02
13:48:22 SQL> 
13:48:22 SQL> -- That is not much data.  I use wjw to drill down into it:
13:48:22 SQL> SELECT COUNT(*)FROM wjw WHERE pair='usd_chf'AND wom=5 AND 0+yr IN(2008,2009,2010)AND qtr IN(2,3);

  COUNT(*)
----------
	30

Elapsed: 00:00:00.00
13:48:22 SQL> 
13:48:22 SQL> -- I see a mix of negative and positive gains below.
13:48:22 SQL> -- I'd prefer they all be the same sign:
13:48:22 SQL> SELECT
13:48:22   2  ydate1
13:48:22   3  ,ydate2
13:48:22   4  ,clse1
13:48:22   5  ,clse2
13:48:22   6  ,wgain
13:48:22   7  FROM wjw
13:48:22   8  WHERE pair='usd_chf'AND wom=5 AND 0+yr IN(2008,2009,2010)AND qtr IN(1,2)
13:48:22   9  ORDER BY ydate1
13:48:22  10  /

YDATE1	   YDATE2	   CLSE1      CLSE2	 WGAIN
---------- ---------- ---------- ---------- ----------
2008-01-29 2008-02-05	   1.094     1.1005	 .0065
2008-01-30 2008-02-06	  1.0927     1.0977	  .005
2008-01-31 2008-02-07	  1.0845     1.1049	 .0204
2008-02-29 2008-03-07	  1.0435      1.025	-.0185
2008-03-31 2008-04-07	   .9921     1.0144	 .0223
2008-04-29 2008-05-06	  1.0329     1.0485	 .0156
2008-04-30 2008-05-07	  1.0422     1.0583	 .0161
2008-05-29 2008-06-05	   1.048     1.0398	-.0082
2008-05-30 2008-06-06	  1.0426     1.0237	-.0189
2008-06-30 2008-07-07	  1.0202     1.0328	 .0126
2009-01-29 2009-02-05	  1.1507     1.1654	 .0147
2009-01-30 2009-02-06	  1.1612     1.1694	 .0082
2009-03-30 2009-04-06	  1.1532     1.1388	-.0144
2009-03-31 2009-04-07	  1.1395     1.1443	 .0048
2009-04-29 2009-05-06	  1.1309     1.1313	 .0004
2009-04-30 2009-05-07	  1.1402     1.1278	-.0124
2009-05-29 2009-06-05	  1.0692     1.0852	  .016
2009-06-29 2009-07-06	  1.0849     1.0877	 .0028
2009-06-30 2009-07-07	  1.0867     1.0858	-.0009
2010-01-29 2010-02-05	  1.0557     1.0779	 .0222
2010-03-29 2010-04-05	  1.0634     1.0619	-.0015
2010-03-30 2010-04-06	  1.0671     1.0704	 .0033
2010-03-31 2010-04-07	  1.0528     1.0716	 .0188
2010-04-29 2010-05-06	  1.0824     1.1092	 .0268
2010-04-30 2010-05-07	  1.0767     1.1085	 .0318
2010-06-29 2010-07-06	   1.081     1.0587	-.0223
2010-06-30 2010-07-07	  1.0774     1.0545	-.0229

27 rows selected.

Elapsed: 00:00:00.01
13:48:22 SQL> 
13:48:22 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
