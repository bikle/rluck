
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 28 00:22:16 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:22:16 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:22:16 SQL> 
00:22:16 SQL> 00:22:16 SQL> --
00:22:16 SQL> -- stk10u.sql
00:22:16 SQL> --
00:22:16 SQL> 
00:22:16 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
00:22:16 SQL> 
00:22:16 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
00:22:16 SQL> @stk10.sql     '&1'
00:22:16 SQL> --
00:22:16 SQL> -- stk10.sql
00:22:16 SQL> --
00:22:16 SQL> 
00:22:16 SQL> -- Creates views and tables for demonstrating SVM.
00:22:16 SQL> 
00:22:16 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.09
00:22:16 SQL> 
00:22:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.15
00:22:16 SQL> 
00:22:16 SQL> CREATE TABLE stk10svmspy COMPRESS AS
00:22:16   2  SELECT
00:22:16   3  tkr
00:22:16   4  ,ydate
00:22:16   5  ,tkr||ydate tkrdate
00:22:16   6  ,clse
00:22:16   7  ,clse2
00:22:16   8  ,rownum rnum -- acts as t in my time-series
00:22:16   9  -- g1 is important. I want to predict g1:
00:22:16  10  ,gain1day g1
00:22:16  11  -- Derive some attributes from clse.
00:22:16  12  -- Each row spans 5 minutes.
00:22:16  13  -- The number of rows in 1 day is 24*60/5.
00:22:16  14  -- I want the aggregations to span from 3 days to 9 days:
00:22:16  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
00:22:16  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
00:22:16  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
00:22:16  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
00:22:16  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
00:22:16  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
00:22:16  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
00:22:16  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
00:22:16  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
00:22:16  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
00:22:16  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
00:22:16  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
00:22:16  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
00:22:16  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
00:22:16  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
00:22:16  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
00:22:16  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
00:22:16  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
00:22:16  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
00:22:16  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
00:22:16  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
00:22:16  36  FROM di5min_stk_c2
00:22:16  37  WHERE UPPER(tkr)='&1'
00:22:16  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
00:22:16  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
00:22:16  40  ORDER BY ydate
00:22:16  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='TGT'

Table created.

Elapsed: 00:00:00.38
00:22:16 SQL> 
00:22:16 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
00:22:17 SQL> 
00:22:17 SQL> -- rpt
00:22:17 SQL> 
00:22:17 SQL> SELECT
00:22:17   2  tkr
00:22:17   3  ,COUNT(tkr)ccount
00:22:17   4  ,MIN(clse)mnclse,MAX(clse)mxclse
00:22:17   5  -- ,MIN(avg4),MAX(avg4)
00:22:17   6  ,MIN(ydate),MAX(ydate)
00:22:17   7  ,MIN(g1)
00:22:17   8  ,MAX(g1)
00:22:17   9  FROM stk10svmspy
00:22:17  10  GROUP BY tkr
00:22:17  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
TGT	      1326	 53.9	   60.37 2011-01-04 14:30:00 2011-01-27 20:55:00      -4.53	  1.67

Elapsed: 00:00:00.01
00:22:17 SQL> 
00:22:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:22:17 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.12
00:22:17 SQL> CREATE TABLE stk12svmspy COMPRESS AS
00:22:17   2  SELECT
00:22:17   3  tkr
00:22:17   4  ,ydate
00:22:17   5  ,tkrdate
00:22:17   6  ,clse
00:22:17   7  ,rnum
00:22:17   8  ,g1
00:22:17   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
00:22:17  10  -- I want more attributes from the ones I derived above:
00:22:17  11  -- clse relation to moving-min
00:22:17  12  ,clse-min3  cm3
00:22:17  13  ,clse-min4  cm4
00:22:17  14  ,clse-min5  cm5
00:22:17  15  ,clse-min6  cm6
00:22:17  16  ,clse-min7  cm7
00:22:17  17  ,clse-min8  cm8
00:22:17  18  ,clse-min9  cm9
00:22:17  19  -- clse relation to moving-avg
00:22:17  20  ,clse-avg3  ca3
00:22:17  21  ,clse-avg4  ca4
00:22:17  22  ,clse-avg5  ca5
00:22:17  23  ,clse-avg6  ca6
00:22:17  24  ,clse-avg7  ca7
00:22:17  25  ,clse-avg8  ca8
00:22:17  26  ,clse-avg9  ca9
00:22:17  27  -- clse relation to moving-max
00:22:17  28  ,clse-max3  cx3
00:22:17  29  ,clse-max4  cx4
00:22:17  30  ,clse-max5  cx5
00:22:17  31  ,clse-max6  cx6
00:22:17  32  ,clse-max7  cx7
00:22:17  33  ,clse-max8  cx8
00:22:17  34  ,clse-max9  cx9
00:22:17  35  -- Derive date related attributes:
00:22:17  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:22:17  37  ,0+TO_CHAR(ydate,'D')d
00:22:17  38  ,0+TO_CHAR(ydate,'W')w
00:22:17  39  -- mpm stands for minutes-past-midnight:
00:22:17  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:22:17  41  -- mph stands for minutes-past-hour:
00:22:17  42  ,0+TO_CHAR(ydate,'MI')mph
00:22:17  43  FROM stk10svmspy
00:22:17  44  ORDER BY ydate
00:22:17  45  /

Table created.

Elapsed: 00:00:00.08
00:22:17 SQL> 
00:22:17 SQL> -- rpt
00:22:17 SQL> 
00:22:17 SQL> SELECT
00:22:17   2  tkr
00:22:17   3  ,COUNT(tkr)ccount
00:22:17   4  ,MIN(clse)mnclse,MAX(clse)mxclse
00:22:17   5  -- ,MIN(avg4),MAX(avg4)
00:22:17   6  ,MIN(ydate),MAX(ydate)
00:22:17   7  ,MIN(g1)
00:22:17   8  ,AVG(g1)
00:22:17   9  ,MAX(g1)
00:22:17  10  FROM stk12svmspy
00:22:17  11  GROUP BY tkr
00:22:17  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
TGT	      1326	 53.9	   60.37 2011-01-04 14:30:00 2011-01-27 20:55:00      -4.53 -.29905983	     1.67

Elapsed: 00:00:00.01
00:22:17 SQL> 
00:22:17 SQL> -- Prepare for derivation of NTILE based parameters.
00:22:17 SQL> -- Also derive the "trend" parameter:
00:22:17 SQL> 
00:22:17 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.07
00:22:17 SQL> CREATE TABLE stk14svmspy COMPRESS AS
00:22:17   2  SELECT
00:22:17   3  tkr
00:22:17   4  ,ydate
00:22:17   5  ,tkrdate
00:22:17   6  ,clse
00:22:17   7  ,g1
00:22:17   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
00:22:17   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
00:22:17  10  ,CASE WHEN trend IS NULL THEN 1
00:22:17  11  	    WHEN trend =0      THEN 1
00:22:17  12  	    ELSE trend END trend
00:22:17  13  ,cm3
00:22:17  14  ,cm4
00:22:17  15  ,cm5
00:22:17  16  ,cm6
00:22:17  17  ,cm7
00:22:17  18  ,cm8
00:22:17  19  ,cm9
00:22:17  20  ,ca3
00:22:17  21  ,ca4
00:22:17  22  ,ca5
00:22:17  23  ,ca6
00:22:17  24  ,ca7
00:22:17  25  ,ca8
00:22:17  26  ,ca9
00:22:17  27  ,cx3
00:22:17  28  ,cx4
00:22:17  29  ,cx5
00:22:17  30  ,cx6
00:22:17  31  ,cx7
00:22:17  32  ,cx8
00:22:17  33  ,cx9
00:22:17  34  ,hh
00:22:17  35  ,d
00:22:17  36  ,w
00:22:17  37  ,mpm
00:22:17  38  ,mph
00:22:17  39  FROM stk12svmspy
00:22:17  40  -- Guard against divide by 0:
00:22:17  41  WHERE clse > 0
00:22:17  42  ORDER BY ydate
00:22:17  43  /

Table created.

Elapsed: 00:00:00.06
00:22:17 SQL> 
00:22:17 SQL> -- rpt
00:22:17 SQL> 
00:22:17 SQL> SELECT
00:22:17   2  tkr
00:22:17   3  ,trend
00:22:17   4  ,gatt
00:22:17   5  ,COUNT(tkr)
00:22:17   6  ,AVG(g1)
00:22:17   7  FROM stk14svmspy
00:22:17   8  GROUP BY tkr,trend,gatt
00:22:17   9  ORDER BY tkr,trend,gatt
00:22:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
TGT		-1 nup	      646 -.80893189
TGT		-1 up	      394 .541852792
TGT		-1	      156
TGT		 1 nup	      123 -.34268293
TGT		 1 up		7	 .19

Elapsed: 00:00:00.01
00:22:17 SQL> 
00:22:17 SQL> -- Derive NTILE based params:
00:22:17 SQL> 
00:22:17 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.43
00:22:17 SQL> CREATE TABLE stk16svmspy COMPRESS AS
00:22:17   2  SELECT
00:22:17   3  tkr
00:22:17   4  ,ydate
00:22:17   5  ,tkrdate
00:22:17   6  ,clse
00:22:17   7  ,g1
00:22:17   8  ,gatt
00:22:17   9  ,gattn
00:22:17  10  ,trend
00:22:17  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
00:22:17  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
00:22:17  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
00:22:17  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
00:22:17  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
00:22:17  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
00:22:17  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
00:22:17  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
00:22:17  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
00:22:17  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
00:22:17  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
00:22:17  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
00:22:17  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
00:22:17  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
00:22:17  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
00:22:17  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
00:22:17  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
00:22:17  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
00:22:17  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
00:22:17  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
00:22:17  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
00:22:17  32  ,hh  att21
00:22:17  33  ,d   att22
00:22:17  34  ,w   att23
00:22:17  35  ,mpm att24
00:22:17  36  ,mph att25
00:22:17  37  ,trend att26
00:22:17  38  FROM stk14svmspy
00:22:17  39  ORDER BY ydate
00:22:17  40  /

Table created.

Elapsed: 00:00:00.19
00:22:18 SQL> 
00:22:18 SQL> -- rpt
00:22:18 SQL> 
00:22:18 SQL> SELECT
00:22:18   2  tkr
00:22:18   3  ,trend
00:22:18   4  ,gatt
00:22:18   5  ,COUNT(tkr)
00:22:18   6  ,AVG(g1)
00:22:18   7  FROM stk16svmspy
00:22:18   8  GROUP BY tkr,trend,gatt
00:22:18   9  ORDER BY tkr,trend,gatt
00:22:18  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
TGT		-1 nup	      646 -.80893189
TGT		-1 up	      394 .541852792
TGT		-1	      156
TGT		 1 nup	      123 -.34268293
TGT		 1 up		7	 .19

Elapsed: 00:00:00.01
00:22:18 SQL> 
00:22:18 SQL> 
00:22:18 SQL> CREATE OR REPLACE VIEW sc12tkr AS
00:22:18   2  SELECT
00:22:18   3  m.tkr
00:22:18   4  ,m.ydate
00:22:18   5  ,m.tkrdate
00:22:18   6  ,l.score score_long
00:22:18   7  ,s.score score_short
00:22:18   8  ,m.g1
00:22:18   9  FROM stkscores l,stkscores s,stk16svmspy m
00:22:18  10  WHERE l.targ='gatt'
00:22:18  11  AND   s.targ='gattn'
00:22:18  12  AND l.tkrdate = s.tkrdate
00:22:18  13  AND l.tkrdate = m.tkrdate
00:22:18  14  -- Speed things up:
00:22:18  15  AND l.tkr = '&1'
00:22:18  16  AND s.tkr = '&1'
00:22:18  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'TGT'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'TGT'

View created.

Elapsed: 00:00:00.05
00:22:18 SQL> 
00:22:18 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.03
00:22:18 SQL> 
00:22:18 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
00:22:18   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
00:22:18   3  (
00:22:18   4  	SELECT
00:22:18   5  	tkrdate
00:22:18   6  	-- Find corr() tween score and g1 over 8 day period:
00:22:18   7  	,CORR((score_long - score_short),g1)
00:22:18   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
00:22:18   9  	FROM sc12tkr
00:22:18  10  )
00:22:18  11  GROUP BY tkrdate
00:22:18  12  /

Table created.

Elapsed: 00:00:00.13
00:22:18 SQL> 
00:22:18 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
00:22:18 SQL> 
00:22:18 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.08
00:22:18 SQL> 
00:22:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
00:22:18 SQL> 
00:22:18 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
00:22:18   2  SELECT
00:22:18   3  tkr
00:22:18   4  ,ydate
00:22:18   5  ,s.tkrdate
00:22:18   6  ,trend
00:22:18   7  ,g1
00:22:18   8  ,gatt
00:22:18   9  ,gattn
00:22:18  10  -- Recent CORR()tween scores and gains:
00:22:18  11  ,NVL(sc_corr,0)sc_corr
00:22:18  12  -- Goodness attributes:
00:22:18  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
00:22:18  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
00:22:18  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
00:22:18  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
00:22:18  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
00:22:18  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
00:22:18  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
00:22:18  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
00:22:18  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
00:22:18  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
00:22:18  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
00:22:18  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
00:22:18  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
00:22:18  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
00:22:18  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
00:22:18  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
00:22:18  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
00:22:18  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
00:22:18  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
00:22:18  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
00:22:18  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
00:22:18  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
00:22:18  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
00:22:18  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
00:22:18  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
00:22:18  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
00:22:18  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
00:22:18  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
00:22:18  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
00:22:18  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
00:22:18  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
00:22:18  44  FROM stk16svmspy s,score_corr_tkr c
00:22:18  45  WHERE s.tkrdate = c.tkrdate(+)
00:22:18  46  /

Table created.

Elapsed: 00:00:00.28
00:22:18 SQL> 
00:22:18 SQL> -- rpt
00:22:18 SQL> 
00:22:18 SQL> SELECT
00:22:18   2  tkr
00:22:18   3  ,trend
00:22:18   4  ,gatt
00:22:18   5  ,COUNT(tkr)
00:22:18   6  ,AVG(g1)
00:22:18   7  ,AVG(sc_corr)
00:22:18   8  FROM stk_ms_svmspy
00:22:18   9  GROUP BY tkr,trend,gatt
00:22:18  10  ORDER BY tkr,trend,gatt
00:22:18  11  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
------- ---------- --- ---------- ---------- ------------
TGT		-1 nup	      646 -.80893189   -.10515711
TGT		-1 up	      394 .541852792   -.15654054
TGT		-1	      156	       -.09903695
TGT		 1 nup	      123 -.34268293   -.00870048
TGT		 1 up		7	 .19   -.06553926

Elapsed: 00:00:00.01
00:22:18 SQL> 
00:22:18 SQL> SELECT
00:22:18   2  tkr
00:22:18   3  ,0+TO_CHAR(ydate,'D')daynum
00:22:18   4  ,COUNT(tkr)
00:22:18   5  ,MIN(ydate),MAX(ydate)
00:22:18   6  FROM stk_ms_svmspy
00:22:18   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
00:22:18   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
00:22:18   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
TGT		 2	  156 2011-01-10 14:30:00 2011-01-24 20:55:00
TGT		 3	  312 2011-01-04 14:30:00 2011-01-25 20:55:00
TGT		 4	  312 2011-01-05 14:30:00 2011-01-26 20:55:00
TGT		 5	  312 2011-01-06 14:30:00 2011-01-27 20:55:00
TGT		 6	  234 2011-01-07 14:30:00 2011-01-21 20:55:00

Elapsed: 00:00:00.00
00:22:18 SQL> 
00:22:18 SQL> -- exit
00:22:18 SQL> @stk10svmd.sql '&1'
00:22:18 SQL> --
00:22:18 SQL> -- stk10svmd.sql
00:22:18 SQL> --
00:22:18 SQL> 
00:22:18 SQL> -- Creates views and tables for demonstrating SVM.
00:22:18 SQL> -- I need to run this after I run stk10.sql
00:22:18 SQL> 
00:22:18 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.15
00:22:19 SQL> 
00:22:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
00:22:19 SQL> 
00:22:19 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
00:22:19   2  SELECT
00:22:19   3  tkr
00:22:19   4  ,ydate
00:22:19   5  ,tkr||ydate tkrdate
00:22:19   6  ,clse
00:22:19   7  ,rownum rnum -- acts as t in my time-series
00:22:19   8  -- Derive some attributes from clse.
00:22:19   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
00:22:19  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
00:22:19  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
00:22:19  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
00:22:19  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
00:22:19  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
00:22:19  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
00:22:19  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
00:22:19  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
00:22:19  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
00:22:19  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
00:22:19  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
00:22:19  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
00:22:19  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
00:22:19  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
00:22:19  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
00:22:19  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
00:22:19  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
00:22:19  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
00:22:19  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
00:22:19  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
00:22:19  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
00:22:19  31  -- ystk21 created here: svmd/cr_ystk21.sql
00:22:19  32  FROM ystk21
00:22:19  33  WHERE UPPER(tkr)='&1'
00:22:19  34  AND ydate > '1990-01-01'
00:22:19  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
00:22:19  36  ORDER BY ydate
00:22:19  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='TGT'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='TGT')

Table created.

Elapsed: 00:00:00.32
00:22:19 SQL> 
00:22:19 SQL> -- rpt
00:22:19 SQL> 
00:22:19 SQL> SELECT
00:22:19   2  tkr
00:22:19   3  ,COUNT(tkr)
00:22:19   4  ,MIN(clse),MAX(clse)
00:22:19   5  ,MIN(avg4),MAX(avg4)
00:22:19   6  ,MIN(ydate),MAX(ydate)
00:22:19   7  FROM stk_svmd10svmspy
00:22:19   8  GROUP BY tkr
00:22:19   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
TGT		5312	      3      66.63	3.058	  65.664 1990-01-02 21:00:00 2011-01-26 21:00:00

Elapsed: 00:00:00.01
00:22:19 SQL> 
00:22:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:22:19 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.18
00:22:19 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
00:22:19   2  SELECT
00:22:19   3  tkr
00:22:19   4  ,ydate
00:22:19   5  ,tkrdate
00:22:19   6  ,clse
00:22:19   7  ,rnum
00:22:19   8  -- g1 is important. I want to predict g1:
00:22:19   9  ,ld - clse g1
00:22:19  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
00:22:19  11  -- I want more attributes from the ones I derived above:
00:22:19  12  -- clse relation to moving-min
00:22:19  13  ,clse-min3  cm3
00:22:19  14  ,clse-min4  cm4
00:22:19  15  ,clse-min5  cm5
00:22:19  16  ,clse-min6  cm6
00:22:19  17  ,clse-min7  cm7
00:22:19  18  ,clse-min8  cm8
00:22:19  19  ,clse-min9  cm9
00:22:19  20  -- clse relation to moving-avg
00:22:19  21  ,clse-avg3  ca3
00:22:19  22  ,clse-avg4  ca4
00:22:19  23  ,clse-avg5  ca5
00:22:19  24  ,clse-avg6  ca6
00:22:19  25  ,clse-avg7  ca7
00:22:19  26  ,clse-avg8  ca8
00:22:19  27  ,clse-avg9  ca9
00:22:19  28  -- clse relation to moving-max
00:22:19  29  ,clse-max3  cx3
00:22:19  30  ,clse-max4  cx4
00:22:19  31  ,clse-max5  cx5
00:22:19  32  ,clse-max6  cx6
00:22:19  33  ,clse-max7  cx7
00:22:19  34  ,clse-max8  cx8
00:22:19  35  ,clse-max9  cx9
00:22:19  36  -- Derive date related attributes:
00:22:19  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:22:19  38  ,0+TO_CHAR(ydate,'D')d
00:22:19  39  ,0+TO_CHAR(ydate,'W')w
00:22:19  40  -- mpm stands for minutes-past-midnight:
00:22:19  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:22:19  42  -- mph stands for minutes-past-hour:
00:22:19  43  ,0+TO_CHAR(ydate,'MI')mph
00:22:19  44  FROM stk_svmd10svmspy
00:22:19  45  ORDER BY ydate
00:22:19  46  /

Table created.

Elapsed: 00:00:00.15
00:22:19 SQL> 
00:22:19 SQL> -- rpt
00:22:19 SQL> 
00:22:19 SQL> SELECT
00:22:19   2  tkr
00:22:19   3  ,COUNT(tkr)
00:22:19   4  ,MIN(clse),MAX(clse)
00:22:19   5  ,MIN(ydate),MAX(ydate)
00:22:19   6  FROM stk_svmd12
00:22:19   7  GROUP BY tkr
00:22:19   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
TGT		5312	      3      66.63 1990-01-02 21:00:00 2011-01-26 21:00:00

Elapsed: 00:00:00.01
00:22:19 SQL> 
00:22:19 SQL> -- Prepare for derivation of NTILE based parameters.
00:22:19 SQL> -- Also derive the "trend" parameter:
00:22:19 SQL> 
00:22:19 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.17
00:22:20 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
00:22:20   2  SELECT
00:22:20   3  tkr
00:22:20   4  ,ydate
00:22:20   5  ,tkrdate
00:22:20   6  ,clse
00:22:20   7  ,g1
00:22:20   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
00:22:20   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
00:22:20  10  ,CASE WHEN trend IS NULL THEN 1
00:22:20  11  	    WHEN trend =0      THEN 1
00:22:20  12  	    ELSE trend END trend
00:22:20  13  ,cm3
00:22:20  14  ,cm4
00:22:20  15  ,cm5
00:22:20  16  ,cm6
00:22:20  17  ,cm7
00:22:20  18  ,cm8
00:22:20  19  ,cm9
00:22:20  20  ,ca3
00:22:20  21  ,ca4
00:22:20  22  ,ca5
00:22:20  23  ,ca6
00:22:20  24  ,ca7
00:22:20  25  ,ca8
00:22:20  26  ,ca9
00:22:20  27  ,cx3
00:22:20  28  ,cx4
00:22:20  29  ,cx5
00:22:20  30  ,cx6
00:22:20  31  ,cx7
00:22:20  32  ,cx8
00:22:20  33  ,cx9
00:22:20  34  ,hh
00:22:20  35  ,d
00:22:20  36  ,w
00:22:20  37  ,mpm
00:22:20  38  ,mph
00:22:20  39  FROM stk_svmd12
00:22:20  40  -- Guard against divide by 0:
00:22:20  41  WHERE clse > 0
00:22:20  42  ORDER BY ydate
00:22:20  43  /

Table created.

Elapsed: 00:00:00.11
00:22:20 SQL> 
00:22:20 SQL> -- rpt
00:22:20 SQL> 
00:22:20 SQL> SELECT
00:22:20   2  tkr
00:22:20   3  ,trend
00:22:20   4  ,gatt
00:22:20   5  ,COUNT(tkr)
00:22:20   6  ,AVG(g1)
00:22:20   7  FROM stk_svmd14
00:22:20   8  GROUP BY tkr,trend,gatt
00:22:20   9  ORDER BY tkr,trend,gatt
00:22:20  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
TGT		  -1 nup       1368 -.36301901
TGT		  -1 up        1112 .522985612
TGT		   1 nup       1688 -.33418839
TGT		   1 up        1143 .464286964
TGT		   1		  1

Elapsed: 00:00:00.01
00:22:20 SQL> 
00:22:20 SQL> -- Derive NTILE based params:
00:22:20 SQL> 
00:22:20 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.13
00:22:20 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
00:22:20   2  SELECT
00:22:20   3  tkr
00:22:20   4  ,ydate
00:22:20   5  ,tkrdate
00:22:20   6  ,clse
00:22:20   7  ,g1
00:22:20   8  ,gatt
00:22:20   9  ,gattn
00:22:20  10  ,trend
00:22:20  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
00:22:20  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
00:22:20  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
00:22:20  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
00:22:20  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
00:22:20  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
00:22:20  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
00:22:20  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
00:22:20  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
00:22:20  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
00:22:20  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
00:22:20  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
00:22:20  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
00:22:20  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
00:22:20  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
00:22:20  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
00:22:20  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
00:22:20  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
00:22:20  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
00:22:20  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
00:22:20  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
00:22:20  32  ,hh  att21
00:22:20  33  ,d   att22
00:22:20  34  ,w   att23
00:22:20  35  ,mpm att24
00:22:20  36  ,mph att25
00:22:20  37  ,trend att26
00:22:20  38  FROM stk_svmd14
00:22:20  39  ORDER BY ydate
00:22:20  40  /

Table created.

Elapsed: 00:00:00.58
00:22:20 SQL> 
00:22:20 SQL> -- rpt
00:22:20 SQL> 
00:22:20 SQL> SELECT
00:22:20   2  tkr
00:22:20   3  ,trend
00:22:20   4  ,gatt
00:22:20   5  ,COUNT(tkr)
00:22:20   6  ,AVG(g1)
00:22:20   7  FROM stk_svmd16
00:22:20   8  GROUP BY tkr,trend,gatt
00:22:20   9  ORDER BY tkr,trend,gatt
00:22:20  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
TGT		  -1 nup       1368 -.36301901
TGT		  -1 up        1112 .522985612
TGT		   1 nup       1688 -.33418839
TGT		   1 up        1143 .464286964
TGT		   1		  1

Elapsed: 00:00:00.01
00:22:20 SQL> 
00:22:20 SQL> 
00:22:20 SQL> CREATE OR REPLACE VIEW sc12tkr AS
00:22:20   2  SELECT
00:22:20   3  m.tkr
00:22:20   4  ,m.ydate
00:22:20   5  ,m.tkrdate
00:22:20   6  ,l.score score_long
00:22:20   7  ,s.score score_short
00:22:20   8  ,m.g1
00:22:20   9  FROM stkscores l,stkscores s,stk_svmd16 m
00:22:20  10  WHERE l.targ='gatt'
00:22:20  11  AND   s.targ='gattn'
00:22:20  12  AND l.tkrdate = s.tkrdate
00:22:20  13  AND l.tkrdate = m.tkrdate
00:22:20  14  -- Speed things up:
00:22:20  15  AND l.tkr = '&1'
00:22:20  16  AND s.tkr = '&1'
00:22:20  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'TGT'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'TGT'

View created.

Elapsed: 00:00:00.05
00:22:20 SQL> 
00:22:20 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.07
00:22:21 SQL> 
00:22:21 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
00:22:21   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
00:22:21   3  (
00:22:21   4  	SELECT
00:22:21   5  	tkrdate
00:22:21   6  	-- Find corr() tween score and g1 over 8 day period:
00:22:21   7  	,CORR((score_long - score_short),g1)
00:22:21   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
00:22:21   9  	FROM sc12tkr
00:22:21  10  )
00:22:21  11  GROUP BY tkrdate
00:22:21  12  /

Table created.

Elapsed: 00:00:00.12
00:22:21 SQL> 
00:22:21 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
00:22:21 SQL> 
00:22:21 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.18
00:22:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
00:22:21 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
00:22:21   2  SELECT
00:22:21   3  tkr
00:22:21   4  ,ydate
00:22:21   5  ,s.tkrdate
00:22:21   6  ,trend
00:22:21   7  ,g1
00:22:21   8  ,gatt
00:22:21   9  ,gattn
00:22:21  10  -- Recent CORR()tween scores and gains:
00:22:21  11  ,NVL(sc_corr,0)sc_corr
00:22:21  12  -- Goodness attributes:
00:22:21  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
00:22:21  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
00:22:21  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
00:22:21  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
00:22:21  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
00:22:21  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
00:22:21  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
00:22:21  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
00:22:21  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
00:22:21  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
00:22:21  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
00:22:21  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
00:22:21  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
00:22:21  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
00:22:21  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
00:22:21  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
00:22:21  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
00:22:21  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
00:22:21  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
00:22:21  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
00:22:21  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
00:22:21  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
00:22:21  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
00:22:21  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
00:22:21  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
00:22:21  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
00:22:21  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
00:22:21  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
00:22:21  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
00:22:21  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
00:22:21  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
00:22:21  44  FROM stk_svmd16 s,score_corr_tkr c
00:22:21  45  WHERE s.tkrdate = c.tkrdate(+)
00:22:21  46  /

Table created.

Elapsed: 00:00:00.98
00:22:22 SQL> 
00:22:22 SQL> -- rpt
00:22:22 SQL> 
00:22:22 SQL> SELECT
00:22:22   2  tkr
00:22:22   3  ,trend
00:22:22   4  ,gatt
00:22:22   5  ,COUNT(tkr)
00:22:22   6  ,AVG(g1)
00:22:22   7  ,AVG(sc_corr)
00:22:22   8  FROM stk_ms_svmd_svmspy
00:22:22   9  GROUP BY tkr,trend,gatt
00:22:22  10  ORDER BY tkr,trend,gatt
00:22:22  11  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ------------
TGT		  -1 nup       1368 -.36301901		  0
TGT		  -1 up        1112 .522985612		  0
TGT		   1 nup       1688 -.33418839		  0
TGT		   1 up        1143 .464286964		  0
TGT		   1		  1			  0

Elapsed: 00:00:00.01
00:22:22 SQL> 
00:22:22 SQL> SELECT
00:22:22   2  tkr
00:22:22   3  ,COUNT(tkr)
00:22:22   4  ,MIN(ydate),MAX(ydate)
00:22:22   5  FROM stk_ms_svmd_svmspy
00:22:22   6  GROUP BY tkr
00:22:22   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
TGT		5312 1990-01-02 21:00:00 2011-01-26 21:00:00

Elapsed: 00:00:00.00
00:22:22 SQL> 
00:22:22 SQL> -- exit
00:22:22 SQL> 
00:22:22 SQL> 
00:22:22 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.18
00:22:22 SQL> 
00:22:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
00:22:22 SQL> 
00:22:22 SQL> CREATE TABLE stk_ms_u COMPRESS AS
00:22:22   2  SELECT * FROM stk_ms_svmspy
00:22:22   3  UNION
00:22:22   4  SELECT * FROM stk_ms_svmd_svmspy
00:22:22   5  /

Table created.

Elapsed: 00:00:00.13
00:22:23 SQL> 
00:22:23 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
