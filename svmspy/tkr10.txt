
SQL*Plus: Release 11.2.0.1.0 Production on Sun May 1 02:53:03 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:53:03 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
02:53:03 SQL> 
02:53:03 SQL> 02:53:03 SQL> --
02:53:03 SQL> -- stk10u.sql
02:53:03 SQL> --
02:53:03 SQL> 
02:53:03 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
02:53:03 SQL> 
02:53:03 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
02:53:03 SQL> @stk10.sql     '&1'
02:53:03 SQL> --
02:53:03 SQL> -- stk10.sql
02:53:03 SQL> --
02:53:03 SQL> 
02:53:03 SQL> -- Creates views and tables for demonstrating SVM.
02:53:03 SQL> 
02:53:03 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.13
02:53:04 SQL> 
02:53:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
02:53:04 SQL> 
02:53:04 SQL> CREATE TABLE stk10svmspy COMPRESS AS
02:53:04   2  SELECT
02:53:04   3  tkr
02:53:04   4  ,ydate
02:53:04   5  ,tkr||ydate tkrdate
02:53:04   6  ,clse
02:53:04   7  ,clse2
02:53:04   8  ,rownum rnum -- acts as t in my time-series
02:53:04   9  -- g1 is important. I want to predict g1:
02:53:04  10  ,gain1day g1
02:53:04  11  -- Derive some attributes from clse.
02:53:04  12  -- Each row spans 5 minutes.
02:53:04  13  -- The number of rows in 1 day is 24*60/5.
02:53:04  14  -- I want the aggregations to span from 3 days to 9 days:
02:53:04  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
02:53:04  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
02:53:04  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
02:53:04  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
02:53:04  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
02:53:04  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
02:53:04  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
02:53:04  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
02:53:04  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
02:53:04  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
02:53:04  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
02:53:04  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
02:53:04  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
02:53:04  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
02:53:04  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
02:53:04  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
02:53:04  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
02:53:04  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
02:53:04  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
02:53:04  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
02:53:04  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
02:53:04  36  FROM di5min_stk_c2
02:53:04  37  WHERE UPPER(tkr)='&1'
02:53:04  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
02:53:04  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
02:53:04  40  ORDER BY ydate
02:53:04  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='CREE'

Table created.

Elapsed: 00:00:01.19
02:53:05 SQL> 
02:53:05 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:53:05 SQL> 
02:53:05 SQL> -- rpt
02:53:05 SQL> 
02:53:05 SQL> SELECT
02:53:05   2  tkr
02:53:05   3  ,COUNT(tkr)ccount
02:53:05   4  ,MIN(clse)mnclse,MAX(clse)mxclse
02:53:05   5  -- ,MIN(avg4),MAX(avg4)
02:53:05   6  ,MIN(ydate),MAX(ydate)
02:53:05   7  ,MIN(g1)
02:53:05   8  ,MAX(g1)
02:53:05   9  FROM stk10svmspy
02:53:05  10  GROUP BY tkr
02:53:05  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
CREE	      6318	38.57	   69.19 2011-01-04 14:30:00 2011-04-29 19:55:00     -10.63	  2.89

Elapsed: 00:00:00.01
02:53:05 SQL> 
02:53:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:53:05 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.17
02:53:05 SQL> CREATE TABLE stk12svmspy COMPRESS AS
02:53:05   2  SELECT
02:53:05   3  tkr
02:53:05   4  ,ydate
02:53:05   5  ,tkrdate
02:53:05   6  ,clse
02:53:05   7  ,rnum
02:53:05   8  ,g1
02:53:05   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
02:53:05  10  -- I want more attributes from the ones I derived above:
02:53:05  11  -- clse relation to moving-min
02:53:05  12  ,clse-min3  cm3
02:53:05  13  ,clse-min4  cm4
02:53:05  14  ,clse-min5  cm5
02:53:05  15  ,clse-min6  cm6
02:53:05  16  ,clse-min7  cm7
02:53:05  17  ,clse-min8  cm8
02:53:05  18  ,clse-min9  cm9
02:53:05  19  -- clse relation to moving-avg
02:53:05  20  ,clse-avg3  ca3
02:53:05  21  ,clse-avg4  ca4
02:53:05  22  ,clse-avg5  ca5
02:53:05  23  ,clse-avg6  ca6
02:53:05  24  ,clse-avg7  ca7
02:53:05  25  ,clse-avg8  ca8
02:53:05  26  ,clse-avg9  ca9
02:53:05  27  -- clse relation to moving-max
02:53:05  28  ,clse-max3  cx3
02:53:05  29  ,clse-max4  cx4
02:53:05  30  ,clse-max5  cx5
02:53:05  31  ,clse-max6  cx6
02:53:05  32  ,clse-max7  cx7
02:53:05  33  ,clse-max8  cx8
02:53:05  34  ,clse-max9  cx9
02:53:05  35  -- Derive date related attributes:
02:53:05  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:53:05  37  ,0+TO_CHAR(ydate,'D')d
02:53:05  38  ,0+TO_CHAR(ydate,'W')w
02:53:05  39  -- mpm stands for minutes-past-midnight:
02:53:05  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:53:05  41  -- mph stands for minutes-past-hour:
02:53:05  42  ,0+TO_CHAR(ydate,'MI')mph
02:53:05  43  FROM stk10svmspy
02:53:05  44  ORDER BY ydate
02:53:05  45  /

Table created.

Elapsed: 00:00:00.20
02:53:05 SQL> 
02:53:05 SQL> -- rpt
02:53:05 SQL> 
02:53:05 SQL> SELECT
02:53:05   2  tkr
02:53:05   3  ,COUNT(tkr)ccount
02:53:05   4  ,MIN(clse)mnclse,MAX(clse)mxclse
02:53:05   5  -- ,MIN(avg4),MAX(avg4)
02:53:05   6  ,MIN(ydate),MAX(ydate)
02:53:05   7  ,MIN(g1)
02:53:05   8  ,AVG(g1)
02:53:05   9  ,MAX(g1)
02:53:05  10  FROM stk12svmspy
02:53:05  11  GROUP BY tkr
02:53:05  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
CREE	      6318	38.57	   69.19 2011-01-04 14:30:00 2011-04-29 19:55:00     -10.63 -.33278111	     2.89

Elapsed: 00:00:00.02
02:53:05 SQL> 
02:53:05 SQL> -- Prepare for derivation of NTILE based parameters.
02:53:05 SQL> -- Also derive the "trend" parameter:
02:53:05 SQL> 
02:53:05 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
02:53:05 SQL> CREATE TABLE stk14svmspy COMPRESS AS
02:53:05   2  SELECT
02:53:05   3  tkr
02:53:05   4  ,ydate
02:53:05   5  ,tkrdate
02:53:05   6  ,clse
02:53:05   7  ,g1
02:53:05   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
02:53:05   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
02:53:05  10  ,CASE WHEN trend IS NULL THEN 1
02:53:05  11  	    WHEN trend =0      THEN 1
02:53:05  12  	    ELSE trend END trend
02:53:05  13  ,cm3
02:53:05  14  ,cm4
02:53:05  15  ,cm5
02:53:05  16  ,cm6
02:53:05  17  ,cm7
02:53:05  18  ,cm8
02:53:05  19  ,cm9
02:53:05  20  ,ca3
02:53:05  21  ,ca4
02:53:05  22  ,ca5
02:53:05  23  ,ca6
02:53:05  24  ,ca7
02:53:05  25  ,ca8
02:53:05  26  ,ca9
02:53:05  27  ,cx3
02:53:05  28  ,cx4
02:53:05  29  ,cx5
02:53:05  30  ,cx6
02:53:05  31  ,cx7
02:53:05  32  ,cx8
02:53:05  33  ,cx9
02:53:05  34  ,hh
02:53:05  35  ,d
02:53:05  36  ,w
02:53:05  37  ,mpm
02:53:05  38  ,mph
02:53:05  39  FROM stk12svmspy
02:53:05  40  -- Guard against divide by 0:
02:53:05  41  WHERE clse > 0
02:53:05  42  ORDER BY ydate
02:53:05  43  /

Table created.

Elapsed: 00:00:00.18
02:53:06 SQL> 
02:53:06 SQL> -- rpt
02:53:06 SQL> 
02:53:06 SQL> SELECT
02:53:06   2  tkr
02:53:06   3  ,trend
02:53:06   4  ,gatt
02:53:06   5  ,COUNT(tkr)
02:53:06   6  ,AVG(g1)
02:53:06   7  FROM stk14svmspy
02:53:06   8  GROUP BY tkr,trend,gatt
02:53:06   9  ORDER BY tkr,trend,gatt
02:53:06  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
CREE		-1 nup	     3020 -1.0692046
CREE		-1 up	     1824 .848156773
CREE		-1	      246
CREE		 1 nup	      687 -1.0390975
CREE		 1 up	      463  .86637149
CREE		 1	       78

6 rows selected.

Elapsed: 00:00:00.02
02:53:06 SQL> 
02:53:06 SQL> -- Derive NTILE based params:
02:53:06 SQL> 
02:53:06 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
02:53:06 SQL> CREATE TABLE stk16svmspy COMPRESS AS
02:53:06   2  SELECT
02:53:06   3  tkr
02:53:06   4  ,ydate
02:53:06   5  ,tkrdate
02:53:06   6  ,clse
02:53:06   7  ,g1
02:53:06   8  ,gatt
02:53:06   9  ,gattn
02:53:06  10  ,trend
02:53:06  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
02:53:06  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
02:53:06  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
02:53:06  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
02:53:06  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
02:53:06  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
02:53:06  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
02:53:06  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
02:53:06  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
02:53:06  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
02:53:06  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
02:53:06  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
02:53:06  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
02:53:06  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
02:53:06  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
02:53:06  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
02:53:06  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
02:53:06  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
02:53:06  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
02:53:06  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
02:53:06  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
02:53:06  32  ,hh  att21
02:53:06  33  ,d   att22
02:53:06  34  ,w   att23
02:53:06  35  ,mpm att24
02:53:06  36  ,mph att25
02:53:06  37  ,trend att26
02:53:06  38  FROM stk14svmspy
02:53:06  39  ORDER BY ydate
02:53:06  40  /

Table created.

Elapsed: 00:00:00.77
02:53:06 SQL> 
02:53:06 SQL> -- rpt
02:53:06 SQL> 
02:53:06 SQL> SELECT
02:53:06   2  tkr
02:53:06   3  ,trend
02:53:06   4  ,gatt
02:53:06   5  ,COUNT(tkr)
02:53:06   6  ,AVG(g1)
02:53:06   7  FROM stk16svmspy
02:53:06   8  GROUP BY tkr,trend,gatt
02:53:06   9  ORDER BY tkr,trend,gatt
02:53:06  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
CREE		-1 nup	     3020 -1.0692046
CREE		-1 up	     1824 .848156773
CREE		-1	      246
CREE		 1 nup	      687 -1.0390975
CREE		 1 up	      463  .86637149
CREE		 1	       78

6 rows selected.

Elapsed: 00:00:00.02
02:53:06 SQL> 
02:53:06 SQL> -- Comment out feedback related syntax:
02:53:06 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
02:53:06 SQL> -- SELECT
02:53:06 SQL> -- m.tkr
02:53:06 SQL> -- ,m.ydate
02:53:06 SQL> -- ,m.tkrdate
02:53:06 SQL> -- ,l.score score_long
02:53:06 SQL> -- ,s.score score_short
02:53:06 SQL> -- ,m.g1
02:53:06 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
02:53:06 SQL> -- WHERE l.targ='gatt'
02:53:06 SQL> -- AND	 s.targ='gattn'
02:53:06 SQL> -- AND l.tkrdate = s.tkrdate
02:53:06 SQL> -- AND l.tkrdate = m.tkrdate
02:53:06 SQL> -- -- Speed things up:
02:53:06 SQL> -- AND l.tkr = '&1'
02:53:06 SQL> -- AND s.tkr = '&1'
02:53:06 SQL> -- /
02:53:06 SQL> --
02:53:06 SQL> -- DROP TABLE score_corr_tkr;
02:53:06 SQL> --
02:53:06 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
02:53:06 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
02:53:06 SQL> -- (
02:53:06 SQL> --   SELECT
02:53:06 SQL> --   tkrdate
02:53:06 SQL> --   -- Find corr() tween score and g1 over 8 day period:
02:53:06 SQL> --   ,CORR((score_long - score_short),g1)
02:53:06 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
02:53:06 SQL> --   FROM sc12tkr
02:53:06 SQL> -- )
02:53:06 SQL> -- GROUP BY tkrdate
02:53:06 SQL> -- /
02:53:06 SQL> 
02:53:06 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
02:53:06 SQL> 
02:53:06 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
02:53:07 SQL> 
02:53:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
02:53:07 SQL> 
02:53:07 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
02:53:07   2  SELECT
02:53:07   3  tkr
02:53:07   4  ,ydate
02:53:07   5  ,tkrdate
02:53:07   6  ,trend
02:53:07   7  ,g1
02:53:07   8  ,gatt
02:53:07   9  ,gattn
02:53:07  10  -- Goodness attributes:
02:53:07  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
02:53:07  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
02:53:07  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
02:53:07  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
02:53:07  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
02:53:07  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
02:53:07  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
02:53:07  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
02:53:07  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
02:53:07  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
02:53:07  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
02:53:07  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
02:53:07  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
02:53:07  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
02:53:07  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
02:53:07  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
02:53:07  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
02:53:07  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
02:53:07  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
02:53:07  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
02:53:07  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
02:53:07  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
02:53:07  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
02:53:07  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
02:53:07  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
02:53:07  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
02:53:07  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
02:53:07  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
02:53:07  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
02:53:07  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
02:53:07  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
02:53:07  42  FROM stk16svmspy
02:53:07  43  /

Table created.

Elapsed: 00:00:01.11
02:53:08 SQL> 
02:53:08 SQL> -- rpt
02:53:08 SQL> 
02:53:08 SQL> SELECT
02:53:08   2  tkr
02:53:08   3  ,trend
02:53:08   4  ,gatt
02:53:08   5  ,COUNT(tkr)
02:53:08   6  ,AVG(g1)
02:53:08   7  FROM stk_ms_svmspy
02:53:08   8  GROUP BY tkr,trend,gatt
02:53:08   9  ORDER BY tkr,trend,gatt
02:53:08  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
CREE		-1 nup	     3020 -1.0692046
CREE		-1 up	     1824 .848156773
CREE		-1	      246
CREE		 1 nup	      687 -1.0390975
CREE		 1 up	      463  .86637149
CREE		 1	       78

6 rows selected.

Elapsed: 00:00:00.02
02:53:08 SQL> 
02:53:08 SQL> SELECT
02:53:08   2  tkr
02:53:08   3  ,0+TO_CHAR(ydate,'D')daynum
02:53:08   4  ,COUNT(tkr)
02:53:08   5  ,MIN(ydate),MAX(ydate)
02:53:08   6  FROM stk_ms_svmspy
02:53:08   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
02:53:08   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
02:53:08   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
CREE		 2	 1092 2011-01-10 14:30:00 2011-04-25 19:55:00
CREE		 3	 1326 2011-01-04 14:30:00 2011-04-26 19:55:00
CREE		 4	 1326 2011-01-05 14:30:00 2011-04-27 19:55:00
CREE		 5	 1326 2011-01-06 14:30:00 2011-04-28 19:55:00
CREE		 6	 1248 2011-01-07 14:30:00 2011-04-29 19:55:00

Elapsed: 00:00:00.01
02:53:08 SQL> 
02:53:08 SQL> -- exit
02:53:08 SQL> @stk10svmd.sql '&1'
02:53:08 SQL> --
02:53:08 SQL> -- stk10svmd.sql
02:53:08 SQL> --
02:53:08 SQL> 
02:53:08 SQL> -- Creates views and tables for demonstrating SVM.
02:53:08 SQL> -- I need to run this after I run stk10.sql
02:53:08 SQL> 
02:53:08 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.12
02:53:08 SQL> 
02:53:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
02:53:08 SQL> 
02:53:08 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
02:53:08   2  SELECT
02:53:08   3  tkr
02:53:08   4  ,ydate
02:53:08   5  ,tkr||ydate tkrdate
02:53:08   6  ,clse
02:53:08   7  ,rownum rnum -- acts as t in my time-series
02:53:08   8  -- Derive some attributes from clse.
02:53:08   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
02:53:08  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
02:53:08  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
02:53:08  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
02:53:08  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
02:53:08  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
02:53:08  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
02:53:08  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
02:53:08  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
02:53:08  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
02:53:08  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
02:53:08  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
02:53:08  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
02:53:08  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
02:53:08  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
02:53:08  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
02:53:08  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
02:53:08  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
02:53:08  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
02:53:08  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
02:53:08  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
02:53:08  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
02:53:08  31  -- ystk21 created here: svmd/cr_ystk21.sql
02:53:08  32  FROM ystk21
02:53:08  33  WHERE UPPER(tkr)='&1'
02:53:08  34  AND ydate > '1990-01-01'
02:53:08  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
02:53:08  36  ORDER BY ydate
02:53:08  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='CREE'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='CREE')

Table created.

Elapsed: 00:00:00.53
02:53:09 SQL> 
02:53:09 SQL> -- rpt
02:53:09 SQL> 
02:53:09 SQL> SELECT
02:53:09   2  tkr
02:53:09   3  ,COUNT(tkr)
02:53:09   4  ,MIN(clse),MAX(clse)
02:53:09   5  ,MIN(avg4),MAX(avg4)
02:53:09   6  ,MIN(ydate),MAX(ydate)
02:53:09   7  FROM stk_svmd10svmspy
02:53:09   8  GROUP BY tkr
02:53:09   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
CREE		4529	    .72      99.09	 .786	  94.918 1993-02-09 20:00:00 2011-04-29 20:00:00

Elapsed: 00:00:00.02
02:53:09 SQL> 
02:53:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:53:09 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.17
02:53:09 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
02:53:09   2  SELECT
02:53:09   3  tkr
02:53:09   4  ,ydate
02:53:09   5  ,tkrdate
02:53:09   6  ,clse
02:53:09   7  ,rnum
02:53:09   8  -- g1 is important. I want to predict g1:
02:53:09   9  ,ld - clse g1
02:53:09  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
02:53:09  11  -- I want more attributes from the ones I derived above:
02:53:09  12  -- clse relation to moving-min
02:53:09  13  ,clse-min3  cm3
02:53:09  14  ,clse-min4  cm4
02:53:09  15  ,clse-min5  cm5
02:53:09  16  ,clse-min6  cm6
02:53:09  17  ,clse-min7  cm7
02:53:09  18  ,clse-min8  cm8
02:53:09  19  ,clse-min9  cm9
02:53:09  20  -- clse relation to moving-avg
02:53:09  21  ,clse-avg3  ca3
02:53:09  22  ,clse-avg4  ca4
02:53:09  23  ,clse-avg5  ca5
02:53:09  24  ,clse-avg6  ca6
02:53:09  25  ,clse-avg7  ca7
02:53:09  26  ,clse-avg8  ca8
02:53:09  27  ,clse-avg9  ca9
02:53:09  28  -- clse relation to moving-max
02:53:09  29  ,clse-max3  cx3
02:53:09  30  ,clse-max4  cx4
02:53:09  31  ,clse-max5  cx5
02:53:09  32  ,clse-max6  cx6
02:53:09  33  ,clse-max7  cx7
02:53:09  34  ,clse-max8  cx8
02:53:09  35  ,clse-max9  cx9
02:53:09  36  -- Derive date related attributes:
02:53:09  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:53:09  38  ,0+TO_CHAR(ydate,'D')d
02:53:09  39  ,0+TO_CHAR(ydate,'W')w
02:53:09  40  -- mpm stands for minutes-past-midnight:
02:53:09  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:53:09  42  -- mph stands for minutes-past-hour:
02:53:09  43  ,0+TO_CHAR(ydate,'MI')mph
02:53:09  44  FROM stk_svmd10svmspy
02:53:09  45  ORDER BY ydate
02:53:09  46  /

Table created.

Elapsed: 00:00:00.13
02:53:09 SQL> 
02:53:09 SQL> -- rpt
02:53:09 SQL> 
02:53:09 SQL> SELECT
02:53:09   2  tkr
02:53:09   3  ,COUNT(tkr)
02:53:09   4  ,MIN(clse),MAX(clse)
02:53:09   5  ,MIN(ydate),MAX(ydate)
02:53:09   6  FROM stk_svmd12
02:53:09   7  GROUP BY tkr
02:53:09   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
CREE		4529	    .72      99.09 1993-02-09 20:00:00 2011-04-29 20:00:00

Elapsed: 00:00:00.01
02:53:09 SQL> 
02:53:09 SQL> -- Prepare for derivation of NTILE based parameters.
02:53:09 SQL> -- Also derive the "trend" parameter:
02:53:09 SQL> 
02:53:09 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
02:53:09 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
02:53:09   2  SELECT
02:53:09   3  tkr
02:53:09   4  ,ydate
02:53:09   5  ,tkrdate
02:53:09   6  ,clse
02:53:09   7  ,g1
02:53:09   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
02:53:09   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
02:53:09  10  ,CASE WHEN trend IS NULL THEN 1
02:53:09  11  	    WHEN trend =0      THEN 1
02:53:09  12  	    ELSE trend END trend
02:53:09  13  ,cm3
02:53:09  14  ,cm4
02:53:09  15  ,cm5
02:53:09  16  ,cm6
02:53:09  17  ,cm7
02:53:09  18  ,cm8
02:53:09  19  ,cm9
02:53:09  20  ,ca3
02:53:09  21  ,ca4
02:53:09  22  ,ca5
02:53:09  23  ,ca6
02:53:09  24  ,ca7
02:53:09  25  ,ca8
02:53:09  26  ,ca9
02:53:09  27  ,cx3
02:53:09  28  ,cx4
02:53:09  29  ,cx5
02:53:09  30  ,cx6
02:53:09  31  ,cx7
02:53:09  32  ,cx8
02:53:09  33  ,cx9
02:53:09  34  ,hh
02:53:09  35  ,d
02:53:09  36  ,w
02:53:09  37  ,mpm
02:53:09  38  ,mph
02:53:09  39  FROM stk_svmd12
02:53:09  40  -- Guard against divide by 0:
02:53:09  41  WHERE clse > 0
02:53:09  42  ORDER BY ydate
02:53:09  43  /

Table created.

Elapsed: 00:00:00.10
02:53:09 SQL> 
02:53:09 SQL> -- rpt
02:53:09 SQL> 
02:53:09 SQL> SELECT
02:53:09   2  tkr
02:53:09   3  ,trend
02:53:09   4  ,gatt
02:53:09   5  ,COUNT(tkr)
02:53:09   6  ,AVG(g1)
02:53:09   7  FROM stk_svmd14
02:53:09   8  GROUP BY tkr,trend,gatt
02:53:09   9  ORDER BY tkr,trend,gatt
02:53:09  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CREE		  -1 nup       1196 -.60469064
CREE		  -1 up        1028 .706138132
CREE		   1 nup       1301 -.56134512
CREE		   1 up        1003 .764835494
CREE		   1		  1

Elapsed: 00:00:00.01
02:53:09 SQL> 
02:53:09 SQL> -- Derive NTILE based params:
02:53:09 SQL> 
02:53:09 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.03
02:53:09 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
02:53:09   2  SELECT
02:53:09   3  tkr
02:53:09   4  ,ydate
02:53:09   5  ,tkrdate
02:53:09   6  ,clse
02:53:09   7  ,g1
02:53:09   8  ,gatt
02:53:09   9  ,gattn
02:53:09  10  ,trend
02:53:09  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
02:53:09  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
02:53:09  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
02:53:09  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
02:53:09  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
02:53:09  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
02:53:09  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
02:53:09  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
02:53:09  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
02:53:09  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
02:53:09  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
02:53:09  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
02:53:09  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
02:53:09  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
02:53:09  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
02:53:09  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
02:53:09  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
02:53:09  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
02:53:09  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
02:53:09  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
02:53:09  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
02:53:09  32  ,hh  att21
02:53:09  33  ,d   att22
02:53:09  34  ,w   att23
02:53:09  35  ,mpm att24
02:53:09  36  ,mph att25
02:53:09  37  ,trend att26
02:53:09  38  FROM stk_svmd14
02:53:09  39  ORDER BY ydate
02:53:09  40  /

Table created.

Elapsed: 00:00:00.64
02:53:10 SQL> 
02:53:10 SQL> -- rpt
02:53:10 SQL> 
02:53:10 SQL> SELECT
02:53:10   2  tkr
02:53:10   3  ,trend
02:53:10   4  ,gatt
02:53:10   5  ,COUNT(tkr)
02:53:10   6  ,AVG(g1)
02:53:10   7  FROM stk_svmd16
02:53:10   8  GROUP BY tkr,trend,gatt
02:53:10   9  ORDER BY tkr,trend,gatt
02:53:10  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CREE		  -1 nup       1196 -.60469064
CREE		  -1 up        1028 .706138132
CREE		   1 nup       1301 -.56134512
CREE		   1 up        1003 .764835494
CREE		   1		  1

Elapsed: 00:00:00.01
02:53:10 SQL> 
02:53:10 SQL> -- Comment out feedback related syntax:
02:53:10 SQL> 
02:53:10 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
02:53:10 SQL> -- SELECT
02:53:10 SQL> -- m.tkr
02:53:10 SQL> -- ,m.ydate
02:53:10 SQL> -- ,m.tkrdate
02:53:10 SQL> -- ,l.score score_long
02:53:10 SQL> -- ,s.score score_short
02:53:10 SQL> -- ,m.g1
02:53:10 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
02:53:10 SQL> -- WHERE l.targ='gatt'
02:53:10 SQL> -- AND	 s.targ='gattn'
02:53:10 SQL> -- AND l.tkrdate = s.tkrdate
02:53:10 SQL> -- AND l.tkrdate = m.tkrdate
02:53:10 SQL> -- -- Speed things up:
02:53:10 SQL> -- AND l.tkr = '&1'
02:53:10 SQL> -- AND s.tkr = '&1'
02:53:10 SQL> -- /
02:53:10 SQL> --
02:53:10 SQL> -- DROP TABLE score_corr_tkr;
02:53:10 SQL> --
02:53:10 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
02:53:10 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
02:53:10 SQL> -- (
02:53:10 SQL> --   SELECT
02:53:10 SQL> --   tkrdate
02:53:10 SQL> --   -- Find corr() tween score and g1 over 8 day period:
02:53:10 SQL> --   ,CORR((score_long - score_short),g1)
02:53:10 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
02:53:10 SQL> --   FROM sc12tkr
02:53:10 SQL> -- )
02:53:10 SQL> -- GROUP BY tkrdate
02:53:10 SQL> -- /
02:53:10 SQL> 
02:53:10 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
02:53:10 SQL> 
02:53:10 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.05
02:53:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
02:53:10 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
02:53:10   2  SELECT
02:53:10   3  tkr
02:53:10   4  ,ydate
02:53:10   5  ,tkrdate
02:53:10   6  ,trend
02:53:10   7  ,g1
02:53:10   8  ,gatt
02:53:10   9  ,gattn
02:53:10  10  -- Goodness attributes:
02:53:10  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
02:53:10  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
02:53:10  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
02:53:10  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
02:53:10  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
02:53:10  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
02:53:10  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
02:53:10  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
02:53:10  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
02:53:10  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
02:53:10  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
02:53:10  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
02:53:10  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
02:53:10  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
02:53:10  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
02:53:10  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
02:53:10  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
02:53:10  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
02:53:10  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
02:53:10  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
02:53:10  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
02:53:10  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
02:53:10  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
02:53:10  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
02:53:10  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
02:53:10  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
02:53:10  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
02:53:10  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
02:53:10  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
02:53:10  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
02:53:10  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
02:53:10  42  FROM stk_svmd16
02:53:10  43  /

Table created.

Elapsed: 00:00:00.83
02:53:11 SQL> 
02:53:11 SQL> -- rpt
02:53:11 SQL> 
02:53:11 SQL> SELECT
02:53:11   2  tkr
02:53:11   3  ,trend
02:53:11   4  ,gatt
02:53:11   5  ,COUNT(tkr)
02:53:11   6  ,AVG(g1)
02:53:11   7  FROM stk_ms_svmd_svmspy
02:53:11   8  GROUP BY tkr,trend,gatt
02:53:11   9  ORDER BY tkr,trend,gatt
02:53:11  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CREE		  -1 nup       1196 -.60469064
CREE		  -1 up        1028 .706138132
CREE		   1 nup       1301 -.56134512
CREE		   1 up        1003 .764835494
CREE		   1		  1

Elapsed: 00:00:00.02
02:53:11 SQL> 
02:53:11 SQL> SELECT
02:53:11   2  tkr
02:53:11   3  ,COUNT(tkr)
02:53:11   4  ,MIN(ydate),MAX(ydate)
02:53:11   5  FROM stk_ms_svmd_svmspy
02:53:11   6  GROUP BY tkr
02:53:11   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
CREE		4529 1993-02-09 20:00:00 2011-04-29 20:00:00

Elapsed: 00:00:00.01
02:53:11 SQL> 
02:53:11 SQL> -- exit
02:53:11 SQL> 
02:53:11 SQL> 
02:53:11 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.16
02:53:11 SQL> 
02:53:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.19
02:53:11 SQL> 
02:53:11 SQL> CREATE TABLE stk_ms_u COMPRESS AS
02:53:11   2  SELECT * FROM stk_ms_svmspy
02:53:11   3  UNION
02:53:11   4  SELECT * FROM stk_ms_svmd_svmspy
02:53:11   5  /

Table created.

Elapsed: 00:00:00.30
02:53:12 SQL> 
02:53:12 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
