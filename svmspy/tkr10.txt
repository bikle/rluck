
SQL*Plus: Release 11.2.0.1.0 Production on Sun Apr 3 01:20:45 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

01:20:45 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
01:20:45 SQL> 
01:20:45 SQL> 01:20:45 SQL> --
01:20:45 SQL> -- stk10u.sql
01:20:45 SQL> --
01:20:45 SQL> 
01:20:45 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
01:20:45 SQL> 
01:20:45 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
01:20:45 SQL> @stk10.sql     '&1'
01:20:45 SQL> --
01:20:45 SQL> -- stk10.sql
01:20:45 SQL> --
01:20:45 SQL> 
01:20:45 SQL> -- Creates views and tables for demonstrating SVM.
01:20:45 SQL> 
01:20:45 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.94
01:20:46 SQL> 
01:20:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
01:20:46 SQL> 
01:20:46 SQL> CREATE TABLE stk10svmspy COMPRESS AS
01:20:46   2  SELECT
01:20:46   3  tkr
01:20:46   4  ,ydate
01:20:46   5  ,tkr||ydate tkrdate
01:20:46   6  ,clse
01:20:46   7  ,clse2
01:20:46   8  ,rownum rnum -- acts as t in my time-series
01:20:46   9  -- g1 is important. I want to predict g1:
01:20:46  10  ,gain1day g1
01:20:46  11  -- Derive some attributes from clse.
01:20:46  12  -- Each row spans 5 minutes.
01:20:46  13  -- The number of rows in 1 day is 24*60/5.
01:20:46  14  -- I want the aggregations to span from 3 days to 9 days:
01:20:46  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
01:20:46  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
01:20:46  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
01:20:46  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
01:20:46  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
01:20:46  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
01:20:46  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
01:20:46  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
01:20:46  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
01:20:46  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
01:20:46  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
01:20:46  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
01:20:46  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
01:20:46  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
01:20:46  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
01:20:46  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
01:20:46  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
01:20:46  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
01:20:46  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
01:20:46  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
01:20:46  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
01:20:46  36  FROM di5min_stk_c2
01:20:46  37  WHERE UPPER(tkr)='&1'
01:20:46  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
01:20:46  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
01:20:46  40  ORDER BY ydate
01:20:46  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='HPQ'

Table created.

Elapsed: 00:00:05.30
01:20:52 SQL> 
01:20:52 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.25
01:20:53 SQL> 
01:20:53 SQL> -- rpt
01:20:53 SQL> 
01:20:53 SQL> SELECT
01:20:53   2  tkr
01:20:53   3  ,COUNT(tkr)ccount
01:20:53   4  ,MIN(clse)mnclse,MAX(clse)mxclse
01:20:53   5  -- ,MIN(avg4),MAX(avg4)
01:20:53   6  ,MIN(ydate),MAX(ydate)
01:20:53   7  ,MIN(g1)
01:20:53   8  ,MAX(g1)
01:20:53   9  FROM stk10svmspy
01:20:53  10  GROUP BY tkr
01:20:53  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
HPQ	     28733	37.45	    54.7 2009-10-28 18:10:00 2011-04-01 19:55:00      -5.83	   3.4

Elapsed: 00:00:00.04
01:20:53 SQL> 
01:20:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:20:53 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.08
01:20:53 SQL> CREATE TABLE stk12svmspy COMPRESS AS
01:20:53   2  SELECT
01:20:53   3  tkr
01:20:53   4  ,ydate
01:20:53   5  ,tkrdate
01:20:53   6  ,clse
01:20:53   7  ,rnum
01:20:53   8  ,g1
01:20:53   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
01:20:53  10  -- I want more attributes from the ones I derived above:
01:20:53  11  -- clse relation to moving-min
01:20:53  12  ,clse-min3  cm3
01:20:53  13  ,clse-min4  cm4
01:20:53  14  ,clse-min5  cm5
01:20:53  15  ,clse-min6  cm6
01:20:53  16  ,clse-min7  cm7
01:20:53  17  ,clse-min8  cm8
01:20:53  18  ,clse-min9  cm9
01:20:53  19  -- clse relation to moving-avg
01:20:53  20  ,clse-avg3  ca3
01:20:53  21  ,clse-avg4  ca4
01:20:53  22  ,clse-avg5  ca5
01:20:53  23  ,clse-avg6  ca6
01:20:53  24  ,clse-avg7  ca7
01:20:53  25  ,clse-avg8  ca8
01:20:53  26  ,clse-avg9  ca9
01:20:53  27  -- clse relation to moving-max
01:20:53  28  ,clse-max3  cx3
01:20:53  29  ,clse-max4  cx4
01:20:53  30  ,clse-max5  cx5
01:20:53  31  ,clse-max6  cx6
01:20:53  32  ,clse-max7  cx7
01:20:53  33  ,clse-max8  cx8
01:20:53  34  ,clse-max9  cx9
01:20:53  35  -- Derive date related attributes:
01:20:53  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:20:53  37  ,0+TO_CHAR(ydate,'D')d
01:20:53  38  ,0+TO_CHAR(ydate,'W')w
01:20:53  39  -- mpm stands for minutes-past-midnight:
01:20:53  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:20:53  41  -- mph stands for minutes-past-hour:
01:20:53  42  ,0+TO_CHAR(ydate,'MI')mph
01:20:53  43  FROM stk10svmspy
01:20:53  44  ORDER BY ydate
01:20:53  45  /

Table created.

Elapsed: 00:00:00.71
01:20:54 SQL> 
01:20:54 SQL> -- rpt
01:20:54 SQL> 
01:20:54 SQL> SELECT
01:20:54   2  tkr
01:20:54   3  ,COUNT(tkr)ccount
01:20:54   4  ,MIN(clse)mnclse,MAX(clse)mxclse
01:20:54   5  -- ,MIN(avg4),MAX(avg4)
01:20:54   6  ,MIN(ydate),MAX(ydate)
01:20:54   7  ,MIN(g1)
01:20:54   8  ,AVG(g1)
01:20:54   9  ,MAX(g1)
01:20:54  10  FROM stk12svmspy
01:20:54  11  GROUP BY tkr
01:20:54  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
HPQ	     28733	37.45	    54.7 2009-10-28 18:10:00 2011-04-01 19:55:00      -5.83 -.01357735	      3.4

Elapsed: 00:00:00.06
01:20:54 SQL> 
01:20:54 SQL> -- Prepare for derivation of NTILE based parameters.
01:20:54 SQL> -- Also derive the "trend" parameter:
01:20:54 SQL> 
01:20:54 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.07
01:20:54 SQL> CREATE TABLE stk14svmspy COMPRESS AS
01:20:54   2  SELECT
01:20:54   3  tkr
01:20:54   4  ,ydate
01:20:54   5  ,tkrdate
01:20:54   6  ,clse
01:20:54   7  ,g1
01:20:54   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
01:20:54   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
01:20:54  10  ,CASE WHEN trend IS NULL THEN 1
01:20:54  11  	    WHEN trend =0      THEN 1
01:20:54  12  	    ELSE trend END trend
01:20:54  13  ,cm3
01:20:54  14  ,cm4
01:20:54  15  ,cm5
01:20:54  16  ,cm6
01:20:54  17  ,cm7
01:20:54  18  ,cm8
01:20:54  19  ,cm9
01:20:54  20  ,ca3
01:20:54  21  ,ca4
01:20:54  22  ,ca5
01:20:54  23  ,ca6
01:20:54  24  ,ca7
01:20:54  25  ,ca8
01:20:54  26  ,ca9
01:20:54  27  ,cx3
01:20:54  28  ,cx4
01:20:54  29  ,cx5
01:20:54  30  ,cx6
01:20:54  31  ,cx7
01:20:54  32  ,cx8
01:20:54  33  ,cx9
01:20:54  34  ,hh
01:20:54  35  ,d
01:20:54  36  ,w
01:20:54  37  ,mpm
01:20:54  38  ,mph
01:20:54  39  FROM stk12svmspy
01:20:54  40  -- Guard against divide by 0:
01:20:54  41  WHERE clse > 0
01:20:54  42  ORDER BY ydate
01:20:54  43  /

Table created.

Elapsed: 00:00:00.41
01:20:54 SQL> 
01:20:54 SQL> -- rpt
01:20:54 SQL> 
01:20:54 SQL> SELECT
01:20:54   2  tkr
01:20:54   3  ,trend
01:20:54   4  ,gatt
01:20:54   5  ,COUNT(tkr)
01:20:54   6  ,AVG(g1)
01:20:54   7  FROM stk14svmspy
01:20:54   8  GROUP BY tkr,trend,gatt
01:20:54   9  ORDER BY tkr,trend,gatt
01:20:54  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
HPQ		-1 nup	     7543 -.52934443
HPQ		-1 up	     5102 .618881826
HPQ		-1	      113
HPQ		 1 nup	     9296 -.33106532
HPQ		 1 up	     6411 .550296064
HPQ		 1	      268

6 rows selected.

Elapsed: 00:00:00.04
01:20:54 SQL> 
01:20:54 SQL> -- Derive NTILE based params:
01:20:54 SQL> 
01:20:54 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.06
01:20:54 SQL> CREATE TABLE stk16svmspy COMPRESS AS
01:20:54   2  SELECT
01:20:54   3  tkr
01:20:54   4  ,ydate
01:20:54   5  ,tkrdate
01:20:54   6  ,clse
01:20:54   7  ,g1
01:20:54   8  ,gatt
01:20:54   9  ,gattn
01:20:54  10  ,trend
01:20:54  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
01:20:54  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
01:20:54  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
01:20:54  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
01:20:54  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
01:20:54  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
01:20:54  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
01:20:54  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
01:20:54  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
01:20:54  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
01:20:54  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
01:20:54  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
01:20:54  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
01:20:54  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
01:20:54  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
01:20:54  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
01:20:54  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
01:20:54  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
01:20:54  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
01:20:54  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
01:20:54  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
01:20:54  32  ,hh  att21
01:20:54  33  ,d   att22
01:20:54  34  ,w   att23
01:20:54  35  ,mpm att24
01:20:54  36  ,mph att25
01:20:54  37  ,trend att26
01:20:54  38  FROM stk14svmspy
01:20:54  39  ORDER BY ydate
01:20:54  40  /

Table created.

Elapsed: 00:00:03.31
01:20:58 SQL> 
01:20:58 SQL> -- rpt
01:20:58 SQL> 
01:20:58 SQL> SELECT
01:20:58   2  tkr
01:20:58   3  ,trend
01:20:58   4  ,gatt
01:20:58   5  ,COUNT(tkr)
01:20:58   6  ,AVG(g1)
01:20:58   7  FROM stk16svmspy
01:20:58   8  GROUP BY tkr,trend,gatt
01:20:58   9  ORDER BY tkr,trend,gatt
01:20:58  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
HPQ		-1 nup	     7543 -.52934443
HPQ		-1 up	     5102 .618881826
HPQ		-1	      113
HPQ		 1 nup	     9296 -.33106532
HPQ		 1 up	     6411 .550296064
HPQ		 1	      268

6 rows selected.

Elapsed: 00:00:00.03
01:20:58 SQL> 
01:20:58 SQL> -- Comment out feedback related syntax:
01:20:58 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
01:20:58 SQL> -- SELECT
01:20:58 SQL> -- m.tkr
01:20:58 SQL> -- ,m.ydate
01:20:58 SQL> -- ,m.tkrdate
01:20:58 SQL> -- ,l.score score_long
01:20:58 SQL> -- ,s.score score_short
01:20:58 SQL> -- ,m.g1
01:20:58 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
01:20:58 SQL> -- WHERE l.targ='gatt'
01:20:58 SQL> -- AND	 s.targ='gattn'
01:20:58 SQL> -- AND l.tkrdate = s.tkrdate
01:20:58 SQL> -- AND l.tkrdate = m.tkrdate
01:20:58 SQL> -- -- Speed things up:
01:20:58 SQL> -- AND l.tkr = '&1'
01:20:58 SQL> -- AND s.tkr = '&1'
01:20:58 SQL> -- /
01:20:58 SQL> --
01:20:58 SQL> -- DROP TABLE score_corr_tkr;
01:20:58 SQL> --
01:20:58 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
01:20:58 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
01:20:58 SQL> -- (
01:20:58 SQL> --   SELECT
01:20:58 SQL> --   tkrdate
01:20:58 SQL> --   -- Find corr() tween score and g1 over 8 day period:
01:20:58 SQL> --   ,CORR((score_long - score_short),g1)
01:20:58 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
01:20:58 SQL> --   FROM sc12tkr
01:20:58 SQL> -- )
01:20:58 SQL> -- GROUP BY tkrdate
01:20:58 SQL> -- /
01:20:58 SQL> 
01:20:58 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
01:20:58 SQL> 
01:20:58 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.03
01:20:58 SQL> 
01:20:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.27
01:20:58 SQL> 
01:20:58 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
01:20:58   2  SELECT
01:20:58   3  tkr
01:20:58   4  ,ydate
01:20:58   5  ,tkrdate
01:20:58   6  ,trend
01:20:58   7  ,g1
01:20:58   8  ,gatt
01:20:58   9  ,gattn
01:20:58  10  -- Goodness attributes:
01:20:58  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
01:20:58  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
01:20:58  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
01:20:58  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
01:20:58  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
01:20:58  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
01:20:58  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
01:20:58  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
01:20:58  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
01:20:58  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
01:20:58  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
01:20:58  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
01:20:58  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
01:20:58  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
01:20:58  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
01:20:58  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
01:20:58  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
01:20:58  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
01:20:58  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
01:20:58  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
01:20:58  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
01:20:58  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
01:20:58  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
01:20:58  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
01:20:58  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
01:20:58  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
01:20:58  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
01:20:58  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
01:20:58  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
01:20:58  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
01:20:58  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
01:20:58  42  FROM stk16svmspy
01:20:58  43  /

Table created.

Elapsed: 00:00:04.52
01:21:03 SQL> 
01:21:03 SQL> -- rpt
01:21:03 SQL> 
01:21:03 SQL> SELECT
01:21:03   2  tkr
01:21:03   3  ,trend
01:21:03   4  ,gatt
01:21:03   5  ,COUNT(tkr)
01:21:03   6  ,AVG(g1)
01:21:03   7  FROM stk_ms_svmspy
01:21:03   8  GROUP BY tkr,trend,gatt
01:21:03   9  ORDER BY tkr,trend,gatt
01:21:03  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
HPQ		-1 nup	     7543 -.52934443
HPQ		-1 up	     5102 .618881826
HPQ		-1	      113
HPQ		 1 nup	     9296 -.33106532
HPQ		 1 up	     6411 .550296064
HPQ		 1	      268

6 rows selected.

Elapsed: 00:00:00.03
01:21:03 SQL> 
01:21:03 SQL> SELECT
01:21:03   2  tkr
01:21:03   3  ,0+TO_CHAR(ydate,'D')daynum
01:21:03   4  ,COUNT(tkr)
01:21:03   5  ,MIN(ydate),MAX(ydate)
01:21:03   6  FROM stk_ms_svmspy
01:21:03   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
01:21:03   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
01:21:03   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
HPQ		 2	 5570 2009-11-02 13:25:00 2011-03-28 19:55:00
HPQ		 3	 5730 2009-11-03 13:25:00 2011-03-29 19:55:00
HPQ		 4	 5743 2009-10-28 18:10:00 2011-03-30 19:55:00
HPQ		 5	 5840 2009-10-29 13:25:00 2011-03-31 19:55:00
HPQ		 6	 5850 2009-10-30 13:25:00 2011-04-01 19:55:00

Elapsed: 00:00:00.04
01:21:03 SQL> 
01:21:03 SQL> -- exit
01:21:03 SQL> @stk10svmd.sql '&1'
01:21:03 SQL> --
01:21:03 SQL> -- stk10svmd.sql
01:21:03 SQL> --
01:21:03 SQL> 
01:21:03 SQL> -- Creates views and tables for demonstrating SVM.
01:21:03 SQL> -- I need to run this after I run stk10.sql
01:21:03 SQL> 
01:21:03 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.04
01:21:03 SQL> 
01:21:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
01:21:03 SQL> 
01:21:03 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
01:21:03   2  SELECT
01:21:03   3  tkr
01:21:03   4  ,ydate
01:21:03   5  ,tkr||ydate tkrdate
01:21:03   6  ,clse
01:21:03   7  ,rownum rnum -- acts as t in my time-series
01:21:03   8  -- Derive some attributes from clse.
01:21:03   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
01:21:03  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
01:21:03  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
01:21:03  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
01:21:03  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
01:21:03  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
01:21:03  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
01:21:03  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
01:21:03  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
01:21:03  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
01:21:03  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
01:21:03  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
01:21:03  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
01:21:03  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
01:21:03  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
01:21:03  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
01:21:03  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
01:21:03  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
01:21:03  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
01:21:03  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
01:21:03  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
01:21:03  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
01:21:03  31  -- ystk21 created here: svmd/cr_ystk21.sql
01:21:03  32  FROM ystk21
01:21:03  33  WHERE UPPER(tkr)='&1'
01:21:03  34  AND ydate > '1990-01-01'
01:21:03  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
01:21:03  36  ORDER BY ydate
01:21:03  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='HPQ'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='HPQ')

Table created.

Elapsed: 00:00:02.41
01:21:05 SQL> 
01:21:05 SQL> -- rpt
01:21:05 SQL> 
01:21:05 SQL> SELECT
01:21:05   2  tkr
01:21:05   3  ,COUNT(tkr)
01:21:05   4  ,MIN(clse),MAX(clse)
01:21:05   5  ,MIN(avg4),MAX(avg4)
01:21:05   6  ,MIN(ydate),MAX(ydate)
01:21:05   7  FROM stk_svmd10svmspy
01:21:05   8  GROUP BY tkr
01:21:05   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
HPQ		5358	   1.96      59.62	 2.07	  58.722 1990-01-02 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.02
01:21:05 SQL> 
01:21:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:21:05 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.03
01:21:05 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
01:21:05   2  SELECT
01:21:05   3  tkr
01:21:05   4  ,ydate
01:21:05   5  ,tkrdate
01:21:05   6  ,clse
01:21:05   7  ,rnum
01:21:05   8  -- g1 is important. I want to predict g1:
01:21:05   9  ,ld - clse g1
01:21:05  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
01:21:05  11  -- I want more attributes from the ones I derived above:
01:21:05  12  -- clse relation to moving-min
01:21:05  13  ,clse-min3  cm3
01:21:05  14  ,clse-min4  cm4
01:21:05  15  ,clse-min5  cm5
01:21:05  16  ,clse-min6  cm6
01:21:05  17  ,clse-min7  cm7
01:21:05  18  ,clse-min8  cm8
01:21:05  19  ,clse-min9  cm9
01:21:05  20  -- clse relation to moving-avg
01:21:05  21  ,clse-avg3  ca3
01:21:05  22  ,clse-avg4  ca4
01:21:05  23  ,clse-avg5  ca5
01:21:05  24  ,clse-avg6  ca6
01:21:05  25  ,clse-avg7  ca7
01:21:05  26  ,clse-avg8  ca8
01:21:05  27  ,clse-avg9  ca9
01:21:05  28  -- clse relation to moving-max
01:21:05  29  ,clse-max3  cx3
01:21:05  30  ,clse-max4  cx4
01:21:05  31  ,clse-max5  cx5
01:21:05  32  ,clse-max6  cx6
01:21:05  33  ,clse-max7  cx7
01:21:05  34  ,clse-max8  cx8
01:21:05  35  ,clse-max9  cx9
01:21:05  36  -- Derive date related attributes:
01:21:05  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:21:05  38  ,0+TO_CHAR(ydate,'D')d
01:21:05  39  ,0+TO_CHAR(ydate,'W')w
01:21:05  40  -- mpm stands for minutes-past-midnight:
01:21:05  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:21:05  42  -- mph stands for minutes-past-hour:
01:21:05  43  ,0+TO_CHAR(ydate,'MI')mph
01:21:05  44  FROM stk_svmd10svmspy
01:21:05  45  ORDER BY ydate
01:21:05  46  /

Table created.

Elapsed: 00:00:00.15
01:21:05 SQL> 
01:21:05 SQL> -- rpt
01:21:05 SQL> 
01:21:05 SQL> SELECT
01:21:05   2  tkr
01:21:05   3  ,COUNT(tkr)
01:21:05   4  ,MIN(clse),MAX(clse)
01:21:05   5  ,MIN(ydate),MAX(ydate)
01:21:05   6  FROM stk_svmd12
01:21:05   7  GROUP BY tkr
01:21:05   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
HPQ		5358	   1.96      59.62 1990-01-02 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
01:21:05 SQL> 
01:21:05 SQL> -- Prepare for derivation of NTILE based parameters.
01:21:05 SQL> -- Also derive the "trend" parameter:
01:21:05 SQL> 
01:21:05 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.03
01:21:05 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
01:21:05   2  SELECT
01:21:05   3  tkr
01:21:05   4  ,ydate
01:21:05   5  ,tkrdate
01:21:05   6  ,clse
01:21:05   7  ,g1
01:21:05   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
01:21:05   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
01:21:05  10  ,CASE WHEN trend IS NULL THEN 1
01:21:05  11  	    WHEN trend =0      THEN 1
01:21:05  12  	    ELSE trend END trend
01:21:05  13  ,cm3
01:21:05  14  ,cm4
01:21:05  15  ,cm5
01:21:05  16  ,cm6
01:21:05  17  ,cm7
01:21:05  18  ,cm8
01:21:05  19  ,cm9
01:21:05  20  ,ca3
01:21:05  21  ,ca4
01:21:05  22  ,ca5
01:21:05  23  ,ca6
01:21:05  24  ,ca7
01:21:05  25  ,ca8
01:21:05  26  ,ca9
01:21:05  27  ,cx3
01:21:05  28  ,cx4
01:21:05  29  ,cx5
01:21:05  30  ,cx6
01:21:05  31  ,cx7
01:21:05  32  ,cx8
01:21:05  33  ,cx9
01:21:05  34  ,hh
01:21:05  35  ,d
01:21:05  36  ,w
01:21:05  37  ,mpm
01:21:05  38  ,mph
01:21:05  39  FROM stk_svmd12
01:21:05  40  -- Guard against divide by 0:
01:21:05  41  WHERE clse > 0
01:21:05  42  ORDER BY ydate
01:21:05  43  /

Table created.

Elapsed: 00:00:00.10
01:21:06 SQL> 
01:21:06 SQL> -- rpt
01:21:06 SQL> 
01:21:06 SQL> SELECT
01:21:06   2  tkr
01:21:06   3  ,trend
01:21:06   4  ,gatt
01:21:06   5  ,COUNT(tkr)
01:21:06   6  ,AVG(g1)
01:21:06   7  FROM stk_svmd14
01:21:06   8  GROUP BY tkr,trend,gatt
01:21:06   9  ORDER BY tkr,trend,gatt
01:21:06  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
HPQ		  -1 nup       1337 -.35961107
HPQ		  -1 up        1118 .476914132
HPQ		  -1		  1
HPQ		   1 nup       1668 -.32871703
HPQ		   1 up        1234 .431985413

Elapsed: 00:00:00.02
01:21:06 SQL> 
01:21:06 SQL> -- Derive NTILE based params:
01:21:06 SQL> 
01:21:06 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.05
01:21:06 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
01:21:06   2  SELECT
01:21:06   3  tkr
01:21:06   4  ,ydate
01:21:06   5  ,tkrdate
01:21:06   6  ,clse
01:21:06   7  ,g1
01:21:06   8  ,gatt
01:21:06   9  ,gattn
01:21:06  10  ,trend
01:21:06  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
01:21:06  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
01:21:06  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
01:21:06  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
01:21:06  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
01:21:06  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
01:21:06  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
01:21:06  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
01:21:06  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
01:21:06  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
01:21:06  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
01:21:06  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
01:21:06  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
01:21:06  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
01:21:06  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
01:21:06  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
01:21:06  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
01:21:06  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
01:21:06  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
01:21:06  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
01:21:06  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
01:21:06  32  ,hh  att21
01:21:06  33  ,d   att22
01:21:06  34  ,w   att23
01:21:06  35  ,mpm att24
01:21:06  36  ,mph att25
01:21:06  37  ,trend att26
01:21:06  38  FROM stk_svmd14
01:21:06  39  ORDER BY ydate
01:21:06  40  /

Table created.

Elapsed: 00:00:00.61
01:21:06 SQL> 
01:21:06 SQL> -- rpt
01:21:06 SQL> 
01:21:06 SQL> SELECT
01:21:06   2  tkr
01:21:06   3  ,trend
01:21:06   4  ,gatt
01:21:06   5  ,COUNT(tkr)
01:21:06   6  ,AVG(g1)
01:21:06   7  FROM stk_svmd16
01:21:06   8  GROUP BY tkr,trend,gatt
01:21:06   9  ORDER BY tkr,trend,gatt
01:21:06  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
HPQ		  -1 nup       1337 -.35961107
HPQ		  -1 up        1118 .476914132
HPQ		  -1		  1
HPQ		   1 nup       1668 -.32871703
HPQ		   1 up        1234 .431985413

Elapsed: 00:00:00.02
01:21:06 SQL> 
01:21:06 SQL> -- Comment out feedback related syntax:
01:21:06 SQL> 
01:21:06 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
01:21:06 SQL> -- SELECT
01:21:06 SQL> -- m.tkr
01:21:06 SQL> -- ,m.ydate
01:21:06 SQL> -- ,m.tkrdate
01:21:06 SQL> -- ,l.score score_long
01:21:06 SQL> -- ,s.score score_short
01:21:06 SQL> -- ,m.g1
01:21:06 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
01:21:06 SQL> -- WHERE l.targ='gatt'
01:21:06 SQL> -- AND	 s.targ='gattn'
01:21:06 SQL> -- AND l.tkrdate = s.tkrdate
01:21:06 SQL> -- AND l.tkrdate = m.tkrdate
01:21:06 SQL> -- -- Speed things up:
01:21:06 SQL> -- AND l.tkr = '&1'
01:21:06 SQL> -- AND s.tkr = '&1'
01:21:06 SQL> -- /
01:21:06 SQL> --
01:21:06 SQL> -- DROP TABLE score_corr_tkr;
01:21:06 SQL> --
01:21:06 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
01:21:06 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
01:21:06 SQL> -- (
01:21:06 SQL> --   SELECT
01:21:06 SQL> --   tkrdate
01:21:06 SQL> --   -- Find corr() tween score and g1 over 8 day period:
01:21:06 SQL> --   ,CORR((score_long - score_short),g1)
01:21:06 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
01:21:06 SQL> --   FROM sc12tkr
01:21:06 SQL> -- )
01:21:06 SQL> -- GROUP BY tkrdate
01:21:06 SQL> -- /
01:21:06 SQL> 
01:21:06 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
01:21:06 SQL> 
01:21:06 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
01:21:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
01:21:07 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
01:21:07   2  SELECT
01:21:07   3  tkr
01:21:07   4  ,ydate
01:21:07   5  ,tkrdate
01:21:07   6  ,trend
01:21:07   7  ,g1
01:21:07   8  ,gatt
01:21:07   9  ,gattn
01:21:07  10  -- Goodness attributes:
01:21:07  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
01:21:07  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
01:21:07  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
01:21:07  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
01:21:07  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
01:21:07  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
01:21:07  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
01:21:07  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
01:21:07  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
01:21:07  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
01:21:07  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
01:21:07  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
01:21:07  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
01:21:07  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
01:21:07  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
01:21:07  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
01:21:07  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
01:21:07  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
01:21:07  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
01:21:07  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
01:21:07  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
01:21:07  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
01:21:07  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
01:21:07  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
01:21:07  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
01:21:07  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
01:21:07  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
01:21:07  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
01:21:07  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
01:21:07  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
01:21:07  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
01:21:07  42  FROM stk_svmd16
01:21:07  43  /

Table created.

Elapsed: 00:00:00.98
01:21:08 SQL> 
01:21:08 SQL> -- rpt
01:21:08 SQL> 
01:21:08 SQL> SELECT
01:21:08   2  tkr
01:21:08   3  ,trend
01:21:08   4  ,gatt
01:21:08   5  ,COUNT(tkr)
01:21:08   6  ,AVG(g1)
01:21:08   7  FROM stk_ms_svmd_svmspy
01:21:08   8  GROUP BY tkr,trend,gatt
01:21:08   9  ORDER BY tkr,trend,gatt
01:21:08  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
HPQ		  -1 nup       1337 -.35961107
HPQ		  -1 up        1118 .476914132
HPQ		  -1		  1
HPQ		   1 nup       1668 -.32871703
HPQ		   1 up        1234 .431985413

Elapsed: 00:00:00.02
01:21:08 SQL> 
01:21:08 SQL> SELECT
01:21:08   2  tkr
01:21:08   3  ,COUNT(tkr)
01:21:08   4  ,MIN(ydate),MAX(ydate)
01:21:08   5  FROM stk_ms_svmd_svmspy
01:21:08   6  GROUP BY tkr
01:21:08   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
HPQ		5358 1990-01-02 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
01:21:08 SQL> 
01:21:08 SQL> -- exit
01:21:08 SQL> 
01:21:08 SQL> 
01:21:08 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.04
01:21:08 SQL> 
01:21:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
01:21:08 SQL> 
01:21:08 SQL> CREATE TABLE stk_ms_u COMPRESS AS
01:21:08   2  SELECT * FROM stk_ms_svmspy
01:21:08   3  UNION
01:21:08   4  SELECT * FROM stk_ms_svmd_svmspy
01:21:08   5  /

Table created.

Elapsed: 00:00:00.52
01:21:08 SQL> 
01:21:08 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
