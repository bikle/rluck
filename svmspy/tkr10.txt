
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 2 09:10:47 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:10:47 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:10:47 SQL> 09:10:47 SQL> --
09:10:47 SQL> -- stk10.sql
09:10:47 SQL> --
09:10:47 SQL> 
09:10:47 SQL> -- Creates views and tables for demonstrating SVM.
09:10:47 SQL> 
09:10:47 SQL> CREATE OR REPLACE VIEW stk10 AS
09:10:47   2  SELECT
09:10:47   3  tkr
09:10:47   4  ,ydate
09:10:47   5  ,tkr||ydate tkrdate
09:10:47   6  ,clse
09:10:47   7  ,rownum rnum -- acts as t in my time-series
09:10:47   8  -- Derive some attributes from clse.
09:10:47   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
09:10:47  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
09:10:47  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:10:47  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
09:10:47  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:10:47  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
09:10:47  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:10:47  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
09:10:47  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
09:10:47  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:10:47  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
09:10:47  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:10:47  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
09:10:47  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:10:47  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
09:10:47  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
09:10:47  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:10:47  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
09:10:47  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:10:47  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
09:10:47  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:10:47  30  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
09:10:47  31  FROM dukas5min_stk WHERE UPPER(tkr)='&1'
09:10:47  32  ORDER BY ydate
09:10:47  33  /
old  31: FROM dukas5min_stk WHERE UPPER(tkr)='&1'
new  31: FROM dukas5min_stk WHERE UPPER(tkr)='SPY'

View created.

Elapsed: 00:00:00.03
09:10:47 SQL> 
09:10:47 SQL> -- rpt
09:10:47 SQL> 
09:10:47 SQL> SELECT
09:10:47   2  tkr
09:10:47   3  ,COUNT(tkr)
09:10:47   4  ,MIN(clse),MAX(clse)
09:10:47   5  ,MIN(avg4),MAX(avg4)
09:10:47   6  ,MIN(ydate),MAX(ydate)
09:10:47   7  FROM stk10
09:10:47   8  GROUP BY tkr
09:10:47   9  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
-------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
SPY	      19911	103.18	    126.2 103.882959 126.128776 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.56
09:10:48 SQL> 
09:10:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:10:48 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.04
09:10:48 SQL> CREATE TABLE stk12 COMPRESS AS
09:10:48   2  SELECT
09:10:48   3  tkr
09:10:48   4  ,ydate
09:10:48   5  ,tkrdate
09:10:48   6  ,clse
09:10:48   7  ,rnum
09:10:48   8  -- g4 is important. I want to predict g4:
09:10:48   9  ,ld4 - clse g4
09:10:48  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
09:10:48  11  -- I want more attributes from the ones I derived above:
09:10:48  12  -- clse relation to moving-min
09:10:48  13  ,clse-min2  cm2
09:10:48  14  ,clse-min3  cm3
09:10:48  15  ,clse-min4  cm4
09:10:48  16  ,clse-min5  cm5
09:10:48  17  ,clse-min6  cm6
09:10:48  18  ,clse-min7  cm7
09:10:48  19  ,clse-min8  cm8
09:10:48  20  -- clse relation to moving-avg
09:10:48  21  ,clse-avg2  ca2
09:10:48  22  ,clse-avg3  ca3
09:10:48  23  ,clse-avg4  ca4
09:10:48  24  ,clse-avg5  ca5
09:10:48  25  ,clse-avg6  ca6
09:10:48  26  ,clse-avg7  ca7
09:10:48  27  ,clse-avg8  ca8
09:10:48  28  -- clse relation to moving-max
09:10:48  29  ,clse-max2  cx2
09:10:48  30  ,clse-max3  cx3
09:10:48  31  ,clse-max4  cx4
09:10:48  32  ,clse-max5  cx5
09:10:48  33  ,clse-max6  cx6
09:10:48  34  ,clse-max7  cx7
09:10:48  35  ,clse-max8  cx8
09:10:48  36  -- Derive date related attributes:
09:10:48  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:10:48  38  ,0+TO_CHAR(ydate,'D')d
09:10:48  39  ,0+TO_CHAR(ydate,'W')w
09:10:48  40  -- mpm stands for minutes-past-midnight:
09:10:48  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:10:48  42  -- mph stands for minutes-past-hour:
09:10:48  43  ,0+TO_CHAR(ydate,'MI')mph
09:10:48  44  FROM stk10
09:10:48  45  ORDER BY ydate
09:10:48  46  /

Table created.

Elapsed: 00:00:01.30
09:10:49 SQL> 
09:10:49 SQL> -- rpt
09:10:49 SQL> 
09:10:49 SQL> SELECT
09:10:49   2  tkr
09:10:49   3  ,COUNT(tkr)
09:10:49   4  ,MIN(clse),MAX(clse)
09:10:49   5  ,MIN(ydate),MAX(ydate)
09:10:49   6  FROM stk12
09:10:49   7  GROUP BY tkr
09:10:49   8  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
-------- ---------- ---------- ---------- ------------------- -------------------
SPY	      19911	103.18	    126.2 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.03
09:10:49 SQL> 
09:10:49 SQL> -- Prepare for derivation of NTILE based parameters.
09:10:49 SQL> -- Also derive the "trend" parameter:
09:10:49 SQL> 
09:10:49 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.03
09:10:49 SQL> CREATE TABLE stk14 COMPRESS AS
09:10:49   2  SELECT
09:10:49   3  tkr
09:10:49   4  ,ydate
09:10:49   5  ,tkrdate
09:10:49   6  ,clse
09:10:49   7  ,g4
09:10:49   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.30/120 THEN 'up' ELSE 'nup' END gatt
09:10:49   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.30/120 THEN 'up' ELSE 'nup' END gattn
09:10:49  10  ,CASE WHEN trend IS NULL THEN 1
09:10:49  11  	    WHEN trend =0      THEN 1
09:10:49  12  	    ELSE trend END trend
09:10:49  13  ,cm2
09:10:49  14  ,cm3
09:10:49  15  ,cm4
09:10:49  16  ,cm5
09:10:49  17  ,cm6
09:10:49  18  ,cm7
09:10:49  19  ,cm8
09:10:49  20  ,ca2
09:10:49  21  ,ca3
09:10:49  22  ,ca4
09:10:49  23  ,ca5
09:10:49  24  ,ca6
09:10:49  25  ,ca7
09:10:49  26  ,ca8
09:10:49  27  ,cx2
09:10:49  28  ,cx3
09:10:49  29  ,cx4
09:10:49  30  ,cx5
09:10:49  31  ,cx6
09:10:49  32  ,cx7
09:10:49  33  ,cx8
09:10:49  34  ,hh
09:10:49  35  ,d
09:10:49  36  ,w
09:10:49  37  ,mpm
09:10:49  38  ,mph
09:10:49  39  FROM stk12
09:10:49  40  -- Guard against divide by 0:
09:10:49  41  WHERE clse > 0
09:10:49  42  ORDER BY ydate
09:10:49  43  /

Table created.

Elapsed: 00:00:00.29
09:10:49 SQL> 
09:10:49 SQL> -- rpt
09:10:49 SQL> 
09:10:49 SQL> SELECT
09:10:49   2  tkr
09:10:49   3  ,trend
09:10:49   4  ,gatt
09:10:49   5  ,COUNT(tkr)
09:10:49   6  ,AVG(g4)
09:10:49   7  FROM stk14
09:10:49   8  GROUP BY tkr,trend,gatt
09:10:49   9  ORDER BY tkr,trend,gatt
09:10:49  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5064 -.43559439
SPY		 -1 up	      3547 .930148012
SPY		 -1		17
SPY		  1 nup       7736 -.35844041
SPY		  1 up	      3516 .758363197
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.03
09:10:49 SQL> 
09:10:49 SQL> -- Derive NTILE based params:
09:10:49 SQL> 
09:10:49 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.04
09:10:49 SQL> CREATE TABLE stk16 COMPRESS AS
09:10:49   2  SELECT
09:10:49   3  tkr
09:10:49   4  ,ydate
09:10:49   5  ,tkrdate
09:10:49   6  ,clse
09:10:49   7  ,g4
09:10:49   8  ,gatt
09:10:49   9  ,gattn
09:10:49  10  ,trend
09:10:49  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
09:10:49  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
09:10:49  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
09:10:49  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
09:10:49  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
09:10:49  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
09:10:49  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
09:10:49  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
09:10:49  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
09:10:49  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
09:10:49  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
09:10:49  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
09:10:49  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
09:10:49  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
09:10:49  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
09:10:49  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
09:10:49  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
09:10:49  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
09:10:49  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
09:10:49  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
09:10:49  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
09:10:49  32  ,hh  att21
09:10:49  33  ,d   att22
09:10:49  34  ,w   att23
09:10:49  35  ,mpm att24
09:10:49  36  ,mph att25
09:10:49  37  ,trend att26
09:10:49  38  FROM stk14
09:10:49  39  ORDER BY ydate
09:10:49  40  /

Table created.

Elapsed: 00:00:02.25
09:10:52 SQL> 
09:10:52 SQL> -- rpt
09:10:52 SQL> 
09:10:52 SQL> SELECT
09:10:52   2  tkr
09:10:52   3  ,trend
09:10:52   4  ,gatt
09:10:52   5  ,COUNT(tkr)
09:10:52   6  ,AVG(g4)
09:10:52   7  FROM stk16
09:10:52   8  GROUP BY tkr,trend,gatt
09:10:52   9  ORDER BY tkr,trend,gatt
09:10:52  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5064 -.43559439
SPY		 -1 up	      3547 .930148012
SPY		 -1		17
SPY		  1 nup       7736 -.35844041
SPY		  1 up	      3516 .758363197
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.03
09:10:52 SQL> 
09:10:52 SQL> -- Now I derive goodness attributes:
09:10:52 SQL> 
09:10:52 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.04
09:10:52 SQL> CREATE TABLE stk_ms COMPRESS AS
09:10:52   2  SELECT
09:10:52   3  tkr
09:10:52   4  ,ydate
09:10:52   5  ,tkrdate
09:10:52   6  ,trend
09:10:52   7  ,g4
09:10:52   8  ,gatt
09:10:52   9  ,gattn
09:10:52  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
09:10:52  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
09:10:52  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
09:10:52  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
09:10:52  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
09:10:52  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
09:10:52  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
09:10:52  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
09:10:52  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
09:10:52  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
09:10:52  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
09:10:52  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
09:10:52  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
09:10:52  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
09:10:52  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
09:10:52  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
09:10:52  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
09:10:52  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
09:10:52  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
09:10:52  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
09:10:52  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
09:10:52  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
09:10:52  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
09:10:52  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
09:10:52  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
09:10:52  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
09:10:52  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
09:10:52  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
09:10:52  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
09:10:52  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
09:10:52  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
09:10:52  41  FROM stk16
09:10:52  42  /

Table created.

Elapsed: 00:00:03.13
09:10:55 SQL> 
09:10:55 SQL> -- rpt
09:10:55 SQL> 
09:10:55 SQL> SELECT
09:10:55   2  tkr
09:10:55   3  ,trend
09:10:55   4  ,gatt
09:10:55   5  ,COUNT(tkr)
09:10:55   6  ,AVG(g4)
09:10:55   7  FROM stk_ms
09:10:55   8  GROUP BY tkr,trend,gatt
09:10:55   9  ORDER BY tkr,trend,gatt
09:10:55  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5064 -.43559439
SPY		 -1 up	      3547 .930148012
SPY		 -1		17
SPY		  1 nup       7736 -.35844041
SPY		  1 up	      3516 .758363197
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.03
09:10:55 SQL> 
09:10:55 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
