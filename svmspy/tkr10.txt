
SQL*Plus: Release 11.2.0.1.0 Production on Wed Mar 30 20:04:24 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:04:24 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:04:24 SQL> 
20:04:24 SQL> 20:04:24 SQL> --
20:04:24 SQL> -- stk10u.sql
20:04:24 SQL> --
20:04:24 SQL> 
20:04:24 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
20:04:24 SQL> 
20:04:24 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
20:04:24 SQL> @stk10.sql     '&1'
20:04:24 SQL> --
20:04:24 SQL> -- stk10.sql
20:04:24 SQL> --
20:04:24 SQL> 
20:04:24 SQL> -- Creates views and tables for demonstrating SVM.
20:04:24 SQL> 
20:04:24 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.29
20:04:24 SQL> 
20:04:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
20:04:25 SQL> 
20:04:25 SQL> CREATE TABLE stk10svmspy COMPRESS AS
20:04:25   2  SELECT
20:04:25   3  tkr
20:04:25   4  ,ydate
20:04:25   5  ,tkr||ydate tkrdate
20:04:25   6  ,clse
20:04:25   7  ,clse2
20:04:25   8  ,rownum rnum -- acts as t in my time-series
20:04:25   9  -- g1 is important. I want to predict g1:
20:04:25  10  ,gain1day g1
20:04:25  11  -- Derive some attributes from clse.
20:04:25  12  -- Each row spans 5 minutes.
20:04:25  13  -- The number of rows in 1 day is 24*60/5.
20:04:25  14  -- I want the aggregations to span from 3 days to 9 days:
20:04:25  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
20:04:25  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
20:04:25  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
20:04:25  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
20:04:25  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
20:04:25  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
20:04:25  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
20:04:25  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
20:04:25  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
20:04:25  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
20:04:25  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
20:04:25  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
20:04:25  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
20:04:25  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
20:04:25  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
20:04:25  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
20:04:25  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
20:04:25  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
20:04:25  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
20:04:25  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
20:04:25  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
20:04:25  36  FROM di5min_stk_c2
20:04:25  37  WHERE UPPER(tkr)='&1'
20:04:25  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
20:04:25  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
20:04:25  40  ORDER BY ydate
20:04:25  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='GILD'

Table created.

Elapsed: 00:00:02.40
20:04:27 SQL> 
20:04:27 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.33
20:04:27 SQL> 
20:04:27 SQL> -- rpt
20:04:27 SQL> 
20:04:27 SQL> SELECT
20:04:27   2  tkr
20:04:27   3  ,COUNT(tkr)ccount
20:04:27   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:04:27   5  -- ,MIN(avg4),MAX(avg4)
20:04:27   6  ,MIN(ydate),MAX(ydate)
20:04:27   7  ,MIN(g1)
20:04:27   8  ,MAX(g1)
20:04:27   9  FROM stk10svmspy
20:04:27  10  GROUP BY tkr
20:04:27  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
GILD	      4381	36.51	   42.87 2011-01-04 14:30:00 2011-03-30 14:30:00      -1.26	  1.75

Elapsed: 00:00:00.00
20:04:27 SQL> 
20:04:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:04:27 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.84
20:04:28 SQL> CREATE TABLE stk12svmspy COMPRESS AS
20:04:28   2  SELECT
20:04:28   3  tkr
20:04:28   4  ,ydate
20:04:28   5  ,tkrdate
20:04:28   6  ,clse
20:04:28   7  ,rnum
20:04:28   8  ,g1
20:04:28   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:04:28  10  -- I want more attributes from the ones I derived above:
20:04:28  11  -- clse relation to moving-min
20:04:28  12  ,clse-min3  cm3
20:04:28  13  ,clse-min4  cm4
20:04:28  14  ,clse-min5  cm5
20:04:28  15  ,clse-min6  cm6
20:04:28  16  ,clse-min7  cm7
20:04:28  17  ,clse-min8  cm8
20:04:28  18  ,clse-min9  cm9
20:04:28  19  -- clse relation to moving-avg
20:04:28  20  ,clse-avg3  ca3
20:04:28  21  ,clse-avg4  ca4
20:04:28  22  ,clse-avg5  ca5
20:04:28  23  ,clse-avg6  ca6
20:04:28  24  ,clse-avg7  ca7
20:04:28  25  ,clse-avg8  ca8
20:04:28  26  ,clse-avg9  ca9
20:04:28  27  -- clse relation to moving-max
20:04:28  28  ,clse-max3  cx3
20:04:28  29  ,clse-max4  cx4
20:04:28  30  ,clse-max5  cx5
20:04:28  31  ,clse-max6  cx6
20:04:28  32  ,clse-max7  cx7
20:04:28  33  ,clse-max8  cx8
20:04:28  34  ,clse-max9  cx9
20:04:28  35  -- Derive date related attributes:
20:04:28  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:04:28  37  ,0+TO_CHAR(ydate,'D')d
20:04:28  38  ,0+TO_CHAR(ydate,'W')w
20:04:28  39  -- mpm stands for minutes-past-midnight:
20:04:28  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:04:28  41  -- mph stands for minutes-past-hour:
20:04:28  42  ,0+TO_CHAR(ydate,'MI')mph
20:04:28  43  FROM stk10svmspy
20:04:28  44  ORDER BY ydate
20:04:28  45  /

Table created.

Elapsed: 00:00:00.19
20:04:28 SQL> 
20:04:28 SQL> -- rpt
20:04:28 SQL> 
20:04:28 SQL> SELECT
20:04:28   2  tkr
20:04:28   3  ,COUNT(tkr)ccount
20:04:28   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:04:28   5  -- ,MIN(avg4),MAX(avg4)
20:04:28   6  ,MIN(ydate),MAX(ydate)
20:04:28   7  ,MIN(g1)
20:04:28   8  ,AVG(g1)
20:04:28   9  ,MAX(g1)
20:04:28  10  FROM stk12svmspy
20:04:28  11  GROUP BY tkr
20:04:28  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
GILD	      4381	36.51	   42.87 2011-01-04 14:30:00 2011-03-30 14:30:00      -1.26 .082632487	     1.75

Elapsed: 00:00:00.01
20:04:28 SQL> 
20:04:28 SQL> -- Prepare for derivation of NTILE based parameters.
20:04:28 SQL> -- Also derive the "trend" parameter:
20:04:28 SQL> 
20:04:28 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.45
20:04:29 SQL> CREATE TABLE stk14svmspy COMPRESS AS
20:04:29   2  SELECT
20:04:29   3  tkr
20:04:29   4  ,ydate
20:04:29   5  ,tkrdate
20:04:29   6  ,clse
20:04:29   7  ,g1
20:04:29   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:04:29   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:04:29  10  ,CASE WHEN trend IS NULL THEN 1
20:04:29  11  	    WHEN trend =0      THEN 1
20:04:29  12  	    ELSE trend END trend
20:04:29  13  ,cm3
20:04:29  14  ,cm4
20:04:29  15  ,cm5
20:04:29  16  ,cm6
20:04:29  17  ,cm7
20:04:29  18  ,cm8
20:04:29  19  ,cm9
20:04:29  20  ,ca3
20:04:29  21  ,ca4
20:04:29  22  ,ca5
20:04:29  23  ,ca6
20:04:29  24  ,ca7
20:04:29  25  ,ca8
20:04:29  26  ,ca9
20:04:29  27  ,cx3
20:04:29  28  ,cx4
20:04:29  29  ,cx5
20:04:29  30  ,cx6
20:04:29  31  ,cx7
20:04:29  32  ,cx8
20:04:29  33  ,cx9
20:04:29  34  ,hh
20:04:29  35  ,d
20:04:29  36  ,w
20:04:29  37  ,mpm
20:04:29  38  ,mph
20:04:29  39  FROM stk12svmspy
20:04:29  40  -- Guard against divide by 0:
20:04:29  41  WHERE clse > 0
20:04:29  42  ORDER BY ydate
20:04:29  43  /

Table created.

Elapsed: 00:00:00.10
20:04:29 SQL> 
20:04:29 SQL> -- rpt
20:04:29 SQL> 
20:04:29 SQL> SELECT
20:04:29   2  tkr
20:04:29   3  ,trend
20:04:29   4  ,gatt
20:04:29   5  ,COUNT(tkr)
20:04:29   6  ,AVG(g1)
20:04:29   7  FROM stk14svmspy
20:04:29   8  GROUP BY tkr,trend,gatt
20:04:29   9  ORDER BY tkr,trend,gatt
20:04:29  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
GILD		-1 nup	      183  -.2201127
GILD		-1 up	      307 .428630395
GILD		-1	       39
GILD		 1 nup	     2217 -.22025661
GILD		 1 up	     1350 .542399996
GILD		 1	      285

6 rows selected.

Elapsed: 00:00:00.02
20:04:29 SQL> 
20:04:29 SQL> -- Derive NTILE based params:
20:04:29 SQL> 
20:04:29 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
20:04:29 SQL> CREATE TABLE stk16svmspy COMPRESS AS
20:04:29   2  SELECT
20:04:29   3  tkr
20:04:29   4  ,ydate
20:04:29   5  ,tkrdate
20:04:29   6  ,clse
20:04:29   7  ,g1
20:04:29   8  ,gatt
20:04:29   9  ,gattn
20:04:29  10  ,trend
20:04:29  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:04:29  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:04:29  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:04:29  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:04:29  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:04:29  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:04:29  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:04:29  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:04:29  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:04:29  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:04:29  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:04:29  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:04:29  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:04:29  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:04:29  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:04:29  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:04:29  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:04:29  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:04:29  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:04:29  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:04:29  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:04:29  32  ,hh  att21
20:04:29  33  ,d   att22
20:04:29  34  ,w   att23
20:04:29  35  ,mpm att24
20:04:29  36  ,mph att25
20:04:29  37  ,trend att26
20:04:29  38  FROM stk14svmspy
20:04:29  39  ORDER BY ydate
20:04:29  40  /

Table created.

Elapsed: 00:00:00.56
20:04:29 SQL> 
20:04:29 SQL> -- rpt
20:04:29 SQL> 
20:04:29 SQL> SELECT
20:04:29   2  tkr
20:04:29   3  ,trend
20:04:29   4  ,gatt
20:04:29   5  ,COUNT(tkr)
20:04:29   6  ,AVG(g1)
20:04:29   7  FROM stk16svmspy
20:04:29   8  GROUP BY tkr,trend,gatt
20:04:29   9  ORDER BY tkr,trend,gatt
20:04:29  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
GILD		-1 nup	      183  -.2201127
GILD		-1 up	      307 .428630395
GILD		-1	       39
GILD		 1 nup	     2217 -.22025661
GILD		 1 up	     1350 .542399996
GILD		 1	      285

6 rows selected.

Elapsed: 00:00:00.01
20:04:29 SQL> 
20:04:29 SQL> -- Comment out feedback related syntax:
20:04:29 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:04:29 SQL> -- SELECT
20:04:29 SQL> -- m.tkr
20:04:29 SQL> -- ,m.ydate
20:04:29 SQL> -- ,m.tkrdate
20:04:29 SQL> -- ,l.score score_long
20:04:29 SQL> -- ,s.score score_short
20:04:29 SQL> -- ,m.g1
20:04:29 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
20:04:29 SQL> -- WHERE l.targ='gatt'
20:04:29 SQL> -- AND	 s.targ='gattn'
20:04:29 SQL> -- AND l.tkrdate = s.tkrdate
20:04:29 SQL> -- AND l.tkrdate = m.tkrdate
20:04:29 SQL> -- -- Speed things up:
20:04:29 SQL> -- AND l.tkr = '&1'
20:04:29 SQL> -- AND s.tkr = '&1'
20:04:29 SQL> -- /
20:04:29 SQL> --
20:04:29 SQL> -- DROP TABLE score_corr_tkr;
20:04:29 SQL> --
20:04:29 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:04:29 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:04:29 SQL> -- (
20:04:29 SQL> --   SELECT
20:04:29 SQL> --   tkrdate
20:04:29 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:04:29 SQL> --   ,CORR((score_long - score_short),g1)
20:04:29 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
20:04:29 SQL> --   FROM sc12tkr
20:04:29 SQL> -- )
20:04:29 SQL> -- GROUP BY tkrdate
20:04:29 SQL> -- /
20:04:29 SQL> 
20:04:29 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:04:29 SQL> 
20:04:29 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
20:04:30 SQL> 
20:04:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
20:04:30 SQL> 
20:04:30 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
20:04:30   2  SELECT
20:04:30   3  tkr
20:04:30   4  ,ydate
20:04:30   5  ,tkrdate
20:04:30   6  ,trend
20:04:30   7  ,g1
20:04:30   8  ,gatt
20:04:30   9  ,gattn
20:04:30  10  -- Goodness attributes:
20:04:30  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
20:04:30  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
20:04:30  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
20:04:30  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
20:04:30  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
20:04:30  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
20:04:30  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
20:04:30  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
20:04:30  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
20:04:30  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
20:04:30  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
20:04:30  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
20:04:30  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
20:04:30  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
20:04:30  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
20:04:30  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
20:04:30  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
20:04:30  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
20:04:30  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
20:04:30  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
20:04:30  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
20:04:30  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
20:04:30  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
20:04:30  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
20:04:30  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
20:04:30  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
20:04:30  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
20:04:30  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:04:30  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
20:04:30  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
20:04:30  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
20:04:30  42  FROM stk16svmspy
20:04:30  43  /

Table created.

Elapsed: 00:00:00.84
20:04:31 SQL> 
20:04:31 SQL> -- rpt
20:04:31 SQL> 
20:04:31 SQL> SELECT
20:04:31   2  tkr
20:04:31   3  ,trend
20:04:31   4  ,gatt
20:04:31   5  ,COUNT(tkr)
20:04:31   6  ,AVG(g1)
20:04:31   7  FROM stk_ms_svmspy
20:04:31   8  GROUP BY tkr,trend,gatt
20:04:31   9  ORDER BY tkr,trend,gatt
20:04:31  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
GILD		-1 nup	      183  -.2201127
GILD		-1 up	      307 .428630395
GILD		-1	       39
GILD		 1 nup	     2217 -.22025661
GILD		 1 up	     1350 .542399996
GILD		 1	      285

6 rows selected.

Elapsed: 00:00:00.01
20:04:31 SQL> 
20:04:31 SQL> SELECT
20:04:31   2  tkr
20:04:31   3  ,0+TO_CHAR(ydate,'D')daynum
20:04:31   4  ,COUNT(tkr)
20:04:31   5  ,MIN(ydate),MAX(ydate)
20:04:31   6  FROM stk_ms_svmspy
20:04:31   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
20:04:31   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
20:04:31   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
GILD		 2	  702 2011-01-10 14:30:00 2011-03-28 19:55:00
GILD		 3	  936 2011-01-04 14:30:00 2011-03-29 19:55:00
GILD		 4	  871 2011-01-05 14:30:00 2011-03-30 14:30:00
GILD		 5	  936 2011-01-06 14:30:00 2011-03-24 19:55:00
GILD		 6	  936 2011-01-07 14:30:00 2011-03-25 19:55:00

Elapsed: 00:00:00.01
20:04:31 SQL> 
20:04:31 SQL> -- exit
20:04:31 SQL> @stk10svmd.sql '&1'
20:04:31 SQL> --
20:04:31 SQL> -- stk10svmd.sql
20:04:31 SQL> --
20:04:31 SQL> 
20:04:31 SQL> -- Creates views and tables for demonstrating SVM.
20:04:31 SQL> -- I need to run this after I run stk10.sql
20:04:31 SQL> 
20:04:31 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.27
20:04:31 SQL> 
20:04:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
20:04:31 SQL> 
20:04:31 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
20:04:31   2  SELECT
20:04:31   3  tkr
20:04:31   4  ,ydate
20:04:31   5  ,tkr||ydate tkrdate
20:04:31   6  ,clse
20:04:31   7  ,rownum rnum -- acts as t in my time-series
20:04:31   8  -- Derive some attributes from clse.
20:04:31   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
20:04:31  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
20:04:31  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
20:04:31  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
20:04:31  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
20:04:31  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
20:04:31  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
20:04:31  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
20:04:31  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
20:04:31  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
20:04:31  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
20:04:31  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
20:04:31  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
20:04:31  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
20:04:31  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
20:04:31  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
20:04:31  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
20:04:31  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
20:04:31  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
20:04:31  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
20:04:31  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
20:04:31  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
20:04:31  31  -- ystk21 created here: svmd/cr_ystk21.sql
20:04:31  32  FROM ystk21
20:04:31  33  WHERE UPPER(tkr)='&1'
20:04:31  34  AND ydate > '1990-01-01'
20:04:31  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
20:04:31  36  ORDER BY ydate
20:04:31  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='GILD'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='GILD')

Table created.

Elapsed: 00:00:02.55
20:04:34 SQL> 
20:04:34 SQL> -- rpt
20:04:34 SQL> 
20:04:34 SQL> SELECT
20:04:34   2  tkr
20:04:34   3  ,COUNT(tkr)
20:04:34   4  ,MIN(clse),MAX(clse)
20:04:34   5  ,MIN(avg4),MAX(avg4)
20:04:34   6  ,MIN(ydate),MAX(ydate)
20:04:34   7  FROM stk_svmd10svmspy
20:04:34   8  GROUP BY tkr
20:04:34   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
GILD		4828	    .44       57.1	 .456	   56.76 1992-01-22 21:00:00 2011-03-29 21:00:00

Elapsed: 00:00:00.01
20:04:34 SQL> 
20:04:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:04:34 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:01.84
20:04:35 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
20:04:35   2  SELECT
20:04:35   3  tkr
20:04:35   4  ,ydate
20:04:35   5  ,tkrdate
20:04:35   6  ,clse
20:04:35   7  ,rnum
20:04:35   8  -- g1 is important. I want to predict g1:
20:04:35   9  ,ld - clse g1
20:04:35  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:04:35  11  -- I want more attributes from the ones I derived above:
20:04:35  12  -- clse relation to moving-min
20:04:35  13  ,clse-min3  cm3
20:04:35  14  ,clse-min4  cm4
20:04:35  15  ,clse-min5  cm5
20:04:35  16  ,clse-min6  cm6
20:04:35  17  ,clse-min7  cm7
20:04:35  18  ,clse-min8  cm8
20:04:35  19  ,clse-min9  cm9
20:04:35  20  -- clse relation to moving-avg
20:04:35  21  ,clse-avg3  ca3
20:04:35  22  ,clse-avg4  ca4
20:04:35  23  ,clse-avg5  ca5
20:04:35  24  ,clse-avg6  ca6
20:04:35  25  ,clse-avg7  ca7
20:04:35  26  ,clse-avg8  ca8
20:04:35  27  ,clse-avg9  ca9
20:04:35  28  -- clse relation to moving-max
20:04:35  29  ,clse-max3  cx3
20:04:35  30  ,clse-max4  cx4
20:04:35  31  ,clse-max5  cx5
20:04:35  32  ,clse-max6  cx6
20:04:35  33  ,clse-max7  cx7
20:04:35  34  ,clse-max8  cx8
20:04:35  35  ,clse-max9  cx9
20:04:35  36  -- Derive date related attributes:
20:04:35  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:04:35  38  ,0+TO_CHAR(ydate,'D')d
20:04:35  39  ,0+TO_CHAR(ydate,'W')w
20:04:35  40  -- mpm stands for minutes-past-midnight:
20:04:35  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:04:35  42  -- mph stands for minutes-past-hour:
20:04:35  43  ,0+TO_CHAR(ydate,'MI')mph
20:04:35  44  FROM stk_svmd10svmspy
20:04:35  45  ORDER BY ydate
20:04:35  46  /

Table created.

Elapsed: 00:00:00.14
20:04:36 SQL> 
20:04:36 SQL> -- rpt
20:04:36 SQL> 
20:04:36 SQL> SELECT
20:04:36   2  tkr
20:04:36   3  ,COUNT(tkr)
20:04:36   4  ,MIN(clse),MAX(clse)
20:04:36   5  ,MIN(ydate),MAX(ydate)
20:04:36   6  FROM stk_svmd12
20:04:36   7  GROUP BY tkr
20:04:36   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
GILD		4828	    .44       57.1 1992-01-22 21:00:00 2011-03-29 21:00:00

Elapsed: 00:00:00.01
20:04:36 SQL> 
20:04:36 SQL> -- Prepare for derivation of NTILE based parameters.
20:04:36 SQL> -- Also derive the "trend" parameter:
20:04:36 SQL> 
20:04:36 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.05
20:04:36 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
20:04:36   2  SELECT
20:04:36   3  tkr
20:04:36   4  ,ydate
20:04:36   5  ,tkrdate
20:04:36   6  ,clse
20:04:36   7  ,g1
20:04:36   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:04:36   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:04:36  10  ,CASE WHEN trend IS NULL THEN 1
20:04:36  11  	    WHEN trend =0      THEN 1
20:04:36  12  	    ELSE trend END trend
20:04:36  13  ,cm3
20:04:36  14  ,cm4
20:04:36  15  ,cm5
20:04:36  16  ,cm6
20:04:36  17  ,cm7
20:04:36  18  ,cm8
20:04:36  19  ,cm9
20:04:36  20  ,ca3
20:04:36  21  ,ca4
20:04:36  22  ,ca5
20:04:36  23  ,ca6
20:04:36  24  ,ca7
20:04:36  25  ,ca8
20:04:36  26  ,ca9
20:04:36  27  ,cx3
20:04:36  28  ,cx4
20:04:36  29  ,cx5
20:04:36  30  ,cx6
20:04:36  31  ,cx7
20:04:36  32  ,cx8
20:04:36  33  ,cx9
20:04:36  34  ,hh
20:04:36  35  ,d
20:04:36  36  ,w
20:04:36  37  ,mpm
20:04:36  38  ,mph
20:04:36  39  FROM stk_svmd12
20:04:36  40  -- Guard against divide by 0:
20:04:36  41  WHERE clse > 0
20:04:36  42  ORDER BY ydate
20:04:36  43  /

Table created.

Elapsed: 00:00:00.10
20:04:36 SQL> 
20:04:36 SQL> -- rpt
20:04:36 SQL> 
20:04:36 SQL> SELECT
20:04:36   2  tkr
20:04:36   3  ,trend
20:04:36   4  ,gatt
20:04:36   5  ,COUNT(tkr)
20:04:36   6  ,AVG(g1)
20:04:36   7  FROM stk_svmd14
20:04:36   8  GROUP BY tkr,trend,gatt
20:04:36   9  ORDER BY tkr,trend,gatt
20:04:36  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GILD		  -1 nup       1210 -.20691736
GILD		  -1 up        1026 .306676413
GILD		   1 nup       1534 -.22021512
GILD		   1 up        1057 .297360454
GILD		   1		  1

Elapsed: 00:00:00.01
20:04:36 SQL> 
20:04:36 SQL> -- Derive NTILE based params:
20:04:36 SQL> 
20:04:36 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.06
20:04:36 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
20:04:36   2  SELECT
20:04:36   3  tkr
20:04:36   4  ,ydate
20:04:36   5  ,tkrdate
20:04:36   6  ,clse
20:04:36   7  ,g1
20:04:36   8  ,gatt
20:04:36   9  ,gattn
20:04:36  10  ,trend
20:04:36  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:04:36  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:04:36  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:04:36  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:04:36  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:04:36  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:04:36  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:04:36  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:04:36  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:04:36  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:04:36  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:04:36  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:04:36  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:04:36  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:04:36  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:04:36  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:04:36  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:04:36  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:04:36  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:04:36  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:04:36  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:04:36  32  ,hh  att21
20:04:36  33  ,d   att22
20:04:36  34  ,w   att23
20:04:36  35  ,mpm att24
20:04:36  36  ,mph att25
20:04:36  37  ,trend att26
20:04:36  38  FROM stk_svmd14
20:04:36  39  ORDER BY ydate
20:04:36  40  /

Table created.

Elapsed: 00:00:00.57
20:04:36 SQL> 
20:04:36 SQL> -- rpt
20:04:36 SQL> 
20:04:36 SQL> SELECT
20:04:36   2  tkr
20:04:36   3  ,trend
20:04:36   4  ,gatt
20:04:36   5  ,COUNT(tkr)
20:04:36   6  ,AVG(g1)
20:04:36   7  FROM stk_svmd16
20:04:36   8  GROUP BY tkr,trend,gatt
20:04:36   9  ORDER BY tkr,trend,gatt
20:04:36  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GILD		  -1 nup       1210 -.20691736
GILD		  -1 up        1026 .306676413
GILD		   1 nup       1534 -.22021512
GILD		   1 up        1057 .297360454
GILD		   1		  1

Elapsed: 00:00:00.01
20:04:36 SQL> 
20:04:36 SQL> -- Comment out feedback related syntax:
20:04:36 SQL> 
20:04:36 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:04:36 SQL> -- SELECT
20:04:36 SQL> -- m.tkr
20:04:36 SQL> -- ,m.ydate
20:04:36 SQL> -- ,m.tkrdate
20:04:36 SQL> -- ,l.score score_long
20:04:36 SQL> -- ,s.score score_short
20:04:36 SQL> -- ,m.g1
20:04:36 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
20:04:36 SQL> -- WHERE l.targ='gatt'
20:04:36 SQL> -- AND	 s.targ='gattn'
20:04:36 SQL> -- AND l.tkrdate = s.tkrdate
20:04:36 SQL> -- AND l.tkrdate = m.tkrdate
20:04:36 SQL> -- -- Speed things up:
20:04:36 SQL> -- AND l.tkr = '&1'
20:04:36 SQL> -- AND s.tkr = '&1'
20:04:36 SQL> -- /
20:04:36 SQL> --
20:04:36 SQL> -- DROP TABLE score_corr_tkr;
20:04:36 SQL> --
20:04:36 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:04:36 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:04:36 SQL> -- (
20:04:36 SQL> --   SELECT
20:04:36 SQL> --   tkrdate
20:04:36 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:04:36 SQL> --   ,CORR((score_long - score_short),g1)
20:04:36 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
20:04:36 SQL> --   FROM sc12tkr
20:04:36 SQL> -- )
20:04:36 SQL> -- GROUP BY tkrdate
20:04:36 SQL> -- /
20:04:36 SQL> 
20:04:36 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:04:36 SQL> 
20:04:36 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
20:04:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
20:04:37 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
20:04:37   2  SELECT
20:04:37   3  tkr
20:04:37   4  ,ydate
20:04:37   5  ,tkrdate
20:04:37   6  ,trend
20:04:37   7  ,g1
20:04:37   8  ,gatt
20:04:37   9  ,gattn
20:04:37  10  -- Goodness attributes:
20:04:37  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
20:04:37  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
20:04:37  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
20:04:37  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
20:04:37  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
20:04:37  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
20:04:37  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
20:04:37  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
20:04:37  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
20:04:37  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
20:04:37  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
20:04:37  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
20:04:37  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
20:04:37  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
20:04:37  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
20:04:37  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
20:04:37  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
20:04:37  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
20:04:37  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
20:04:37  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
20:04:37  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
20:04:37  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
20:04:37  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
20:04:37  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
20:04:37  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
20:04:37  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
20:04:37  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
20:04:37  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:04:37  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
20:04:37  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
20:04:37  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
20:04:37  42  FROM stk_svmd16
20:04:37  43  /

Table created.

Elapsed: 00:00:00.93
20:04:38 SQL> 
20:04:38 SQL> -- rpt
20:04:38 SQL> 
20:04:38 SQL> SELECT
20:04:38   2  tkr
20:04:38   3  ,trend
20:04:38   4  ,gatt
20:04:38   5  ,COUNT(tkr)
20:04:38   6  ,AVG(g1)
20:04:38   7  FROM stk_ms_svmd_svmspy
20:04:38   8  GROUP BY tkr,trend,gatt
20:04:38   9  ORDER BY tkr,trend,gatt
20:04:38  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GILD		  -1 nup       1210 -.20691736
GILD		  -1 up        1026 .306676413
GILD		   1 nup       1534 -.22021512
GILD		   1 up        1057 .297360454
GILD		   1		  1

Elapsed: 00:00:00.02
20:04:38 SQL> 
20:04:38 SQL> SELECT
20:04:38   2  tkr
20:04:38   3  ,COUNT(tkr)
20:04:38   4  ,MIN(ydate),MAX(ydate)
20:04:38   5  FROM stk_ms_svmd_svmspy
20:04:38   6  GROUP BY tkr
20:04:38   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
GILD		4828 1992-01-22 21:00:00 2011-03-29 21:00:00

Elapsed: 00:00:00.00
20:04:38 SQL> 
20:04:38 SQL> -- exit
20:04:38 SQL> 
20:04:38 SQL> 
20:04:38 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.08
20:04:38 SQL> 
20:04:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
20:04:38 SQL> 
20:04:38 SQL> CREATE TABLE stk_ms_u COMPRESS AS
20:04:38   2  SELECT * FROM stk_ms_svmspy
20:04:38   3  UNION
20:04:38   4  SELECT * FROM stk_ms_svmd_svmspy
20:04:38   5  /

Table created.

Elapsed: 00:00:00.22
20:04:38 SQL> 
20:04:38 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
