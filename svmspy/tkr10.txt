
SQL*Plus: Release 11.2.0.1.0 Production on Tue Mar 29 10:30:53 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:30:53 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:30:53 SQL> 
10:30:53 SQL> 10:30:53 SQL> --
10:30:53 SQL> -- stk10u.sql
10:30:53 SQL> --
10:30:53 SQL> 
10:30:53 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
10:30:53 SQL> 
10:30:53 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
10:30:53 SQL> @stk10.sql     '&1'
10:30:53 SQL> --
10:30:53 SQL> -- stk10.sql
10:30:53 SQL> --
10:30:53 SQL> 
10:30:53 SQL> -- Creates views and tables for demonstrating SVM.
10:30:53 SQL> 
10:30:53 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.31
10:30:53 SQL> 
10:30:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
10:30:54 SQL> 
10:30:54 SQL> CREATE TABLE stk10svmspy COMPRESS AS
10:30:54   2  SELECT
10:30:54   3  tkr
10:30:54   4  ,ydate
10:30:54   5  ,tkr||ydate tkrdate
10:30:54   6  ,clse
10:30:54   7  ,clse2
10:30:54   8  ,rownum rnum -- acts as t in my time-series
10:30:54   9  -- g1 is important. I want to predict g1:
10:30:54  10  ,gain1day g1
10:30:54  11  -- Derive some attributes from clse.
10:30:54  12  -- Each row spans 5 minutes.
10:30:54  13  -- The number of rows in 1 day is 24*60/5.
10:30:54  14  -- I want the aggregations to span from 3 days to 9 days:
10:30:54  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
10:30:54  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
10:30:54  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
10:30:54  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
10:30:54  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
10:30:54  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
10:30:54  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
10:30:54  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
10:30:54  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
10:30:54  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
10:30:54  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
10:30:54  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
10:30:54  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
10:30:54  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
10:30:54  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
10:30:54  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
10:30:54  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
10:30:54  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
10:30:54  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
10:30:54  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
10:30:54  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
10:30:54  36  FROM di5min_stk_c2
10:30:54  37  WHERE UPPER(tkr)='&1'
10:30:54  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
10:30:54  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
10:30:54  40  ORDER BY ydate
10:30:54  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='WDC'

Table created.

Elapsed: 00:00:02.07
10:30:56 SQL> 
10:30:56 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
10:30:56 SQL> 
10:30:56 SQL> -- rpt
10:30:56 SQL> 
10:30:56 SQL> SELECT
10:30:56   2  tkr
10:30:56   3  ,COUNT(tkr)ccount
10:30:56   4  ,MIN(clse)mnclse,MAX(clse)mxclse
10:30:56   5  -- ,MIN(avg4),MAX(avg4)
10:30:56   6  ,MIN(ydate),MAX(ydate)
10:30:56   7  ,MIN(g1)
10:30:56   8  ,MAX(g1)
10:30:56   9  FROM stk10svmspy
10:30:56  10  GROUP BY tkr
10:30:56  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
WDC	      4524	29.42	   37.85 2011-01-04 14:30:00 2011-03-28 19:55:00      -1.86	  5.73

Elapsed: 00:00:00.02
10:30:56 SQL> 
10:30:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:30:56 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.07
10:30:56 SQL> CREATE TABLE stk12svmspy COMPRESS AS
10:30:56   2  SELECT
10:30:56   3  tkr
10:30:56   4  ,ydate
10:30:56   5  ,tkrdate
10:30:56   6  ,clse
10:30:56   7  ,rnum
10:30:56   8  ,g1
10:30:56   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
10:30:56  10  -- I want more attributes from the ones I derived above:
10:30:56  11  -- clse relation to moving-min
10:30:56  12  ,clse-min3  cm3
10:30:56  13  ,clse-min4  cm4
10:30:56  14  ,clse-min5  cm5
10:30:56  15  ,clse-min6  cm6
10:30:56  16  ,clse-min7  cm7
10:30:56  17  ,clse-min8  cm8
10:30:56  18  ,clse-min9  cm9
10:30:56  19  -- clse relation to moving-avg
10:30:56  20  ,clse-avg3  ca3
10:30:56  21  ,clse-avg4  ca4
10:30:56  22  ,clse-avg5  ca5
10:30:56  23  ,clse-avg6  ca6
10:30:56  24  ,clse-avg7  ca7
10:30:56  25  ,clse-avg8  ca8
10:30:56  26  ,clse-avg9  ca9
10:30:56  27  -- clse relation to moving-max
10:30:56  28  ,clse-max3  cx3
10:30:56  29  ,clse-max4  cx4
10:30:56  30  ,clse-max5  cx5
10:30:56  31  ,clse-max6  cx6
10:30:56  32  ,clse-max7  cx7
10:30:56  33  ,clse-max8  cx8
10:30:56  34  ,clse-max9  cx9
10:30:56  35  -- Derive date related attributes:
10:30:56  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:30:56  37  ,0+TO_CHAR(ydate,'D')d
10:30:56  38  ,0+TO_CHAR(ydate,'W')w
10:30:56  39  -- mpm stands for minutes-past-midnight:
10:30:56  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:30:56  41  -- mph stands for minutes-past-hour:
10:30:56  42  ,0+TO_CHAR(ydate,'MI')mph
10:30:56  43  FROM stk10svmspy
10:30:56  44  ORDER BY ydate
10:30:56  45  /

Table created.

Elapsed: 00:00:00.17
10:30:56 SQL> 
10:30:56 SQL> -- rpt
10:30:56 SQL> 
10:30:56 SQL> SELECT
10:30:56   2  tkr
10:30:56   3  ,COUNT(tkr)ccount
10:30:56   4  ,MIN(clse)mnclse,MAX(clse)mxclse
10:30:56   5  -- ,MIN(avg4),MAX(avg4)
10:30:56   6  ,MIN(ydate),MAX(ydate)
10:30:56   7  ,MIN(g1)
10:30:56   8  ,AVG(g1)
10:30:56   9  ,MAX(g1)
10:30:56  10  FROM stk12svmspy
10:30:56  11  GROUP BY tkr
10:30:56  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
WDC	      4524	29.42	   37.85 2011-01-04 14:30:00 2011-03-28 19:55:00      -1.86 .080222066	     5.73

Elapsed: 00:00:00.03
10:30:56 SQL> 
10:30:56 SQL> -- Prepare for derivation of NTILE based parameters.
10:30:56 SQL> -- Also derive the "trend" parameter:
10:30:56 SQL> 
10:30:56 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.12
10:30:57 SQL> CREATE TABLE stk14svmspy COMPRESS AS
10:30:57   2  SELECT
10:30:57   3  tkr
10:30:57   4  ,ydate
10:30:57   5  ,tkrdate
10:30:57   6  ,clse
10:30:57   7  ,g1
10:30:57   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
10:30:57   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
10:30:57  10  ,CASE WHEN trend IS NULL THEN 1
10:30:57  11  	    WHEN trend =0      THEN 1
10:30:57  12  	    ELSE trend END trend
10:30:57  13  ,cm3
10:30:57  14  ,cm4
10:30:57  15  ,cm5
10:30:57  16  ,cm6
10:30:57  17  ,cm7
10:30:57  18  ,cm8
10:30:57  19  ,cm9
10:30:57  20  ,ca3
10:30:57  21  ,ca4
10:30:57  22  ,ca5
10:30:57  23  ,ca6
10:30:57  24  ,ca7
10:30:57  25  ,ca8
10:30:57  26  ,ca9
10:30:57  27  ,cx3
10:30:57  28  ,cx4
10:30:57  29  ,cx5
10:30:57  30  ,cx6
10:30:57  31  ,cx7
10:30:57  32  ,cx8
10:30:57  33  ,cx9
10:30:57  34  ,hh
10:30:57  35  ,d
10:30:57  36  ,w
10:30:57  37  ,mpm
10:30:57  38  ,mph
10:30:57  39  FROM stk12svmspy
10:30:57  40  -- Guard against divide by 0:
10:30:57  41  WHERE clse > 0
10:30:57  42  ORDER BY ydate
10:30:57  43  /

Table created.

Elapsed: 00:00:00.11
10:30:57 SQL> 
10:30:57 SQL> -- rpt
10:30:57 SQL> 
10:30:57 SQL> SELECT
10:30:57   2  tkr
10:30:57   3  ,trend
10:30:57   4  ,gatt
10:30:57   5  ,COUNT(tkr)
10:30:57   6  ,AVG(g1)
10:30:57   7  FROM stk14svmspy
10:30:57   8  GROUP BY tkr,trend,gatt
10:30:57   9  ORDER BY tkr,trend,gatt
10:30:57  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
WDC		-1 nup	      920 -.50540878
WDC		-1 up	      785 1.00592128
WDC		-1	       83
WDC		 1 nup	     1543 -.46388215
WDC		 1 up	     1030 .712901006
WDC		 1	      163

6 rows selected.

Elapsed: 00:00:00.02
10:30:57 SQL> 
10:30:57 SQL> -- Derive NTILE based params:
10:30:57 SQL> 
10:30:57 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.12
10:30:57 SQL> CREATE TABLE stk16svmspy COMPRESS AS
10:30:57   2  SELECT
10:30:57   3  tkr
10:30:57   4  ,ydate
10:30:57   5  ,tkrdate
10:30:57   6  ,clse
10:30:57   7  ,g1
10:30:57   8  ,gatt
10:30:57   9  ,gattn
10:30:57  10  ,trend
10:30:57  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
10:30:57  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
10:30:57  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
10:30:57  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
10:30:57  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
10:30:57  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
10:30:57  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
10:30:57  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
10:30:57  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
10:30:57  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
10:30:57  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
10:30:57  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
10:30:57  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
10:30:57  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
10:30:57  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
10:30:57  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
10:30:57  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
10:30:57  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
10:30:57  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
10:30:57  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
10:30:57  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
10:30:57  32  ,hh  att21
10:30:57  33  ,d   att22
10:30:57  34  ,w   att23
10:30:57  35  ,mpm att24
10:30:57  36  ,mph att25
10:30:57  37  ,trend att26
10:30:57  38  FROM stk14svmspy
10:30:57  39  ORDER BY ydate
10:30:57  40  /

Table created.

Elapsed: 00:00:00.61
10:30:57 SQL> 
10:30:57 SQL> -- rpt
10:30:57 SQL> 
10:30:57 SQL> SELECT
10:30:57   2  tkr
10:30:57   3  ,trend
10:30:57   4  ,gatt
10:30:57   5  ,COUNT(tkr)
10:30:57   6  ,AVG(g1)
10:30:57   7  FROM stk16svmspy
10:30:57   8  GROUP BY tkr,trend,gatt
10:30:57   9  ORDER BY tkr,trend,gatt
10:30:57  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
WDC		-1 nup	      920 -.50540878
WDC		-1 up	      785 1.00592128
WDC		-1	       83
WDC		 1 nup	     1543 -.46388215
WDC		 1 up	     1030 .712901006
WDC		 1	      163

6 rows selected.

Elapsed: 00:00:00.02
10:30:57 SQL> 
10:30:57 SQL> -- Comment out feedback related syntax:
10:30:57 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
10:30:57 SQL> -- SELECT
10:30:57 SQL> -- m.tkr
10:30:57 SQL> -- ,m.ydate
10:30:57 SQL> -- ,m.tkrdate
10:30:57 SQL> -- ,l.score score_long
10:30:57 SQL> -- ,s.score score_short
10:30:57 SQL> -- ,m.g1
10:30:57 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
10:30:57 SQL> -- WHERE l.targ='gatt'
10:30:57 SQL> -- AND	 s.targ='gattn'
10:30:57 SQL> -- AND l.tkrdate = s.tkrdate
10:30:57 SQL> -- AND l.tkrdate = m.tkrdate
10:30:57 SQL> -- -- Speed things up:
10:30:57 SQL> -- AND l.tkr = '&1'
10:30:57 SQL> -- AND s.tkr = '&1'
10:30:57 SQL> -- /
10:30:57 SQL> --
10:30:57 SQL> -- DROP TABLE score_corr_tkr;
10:30:57 SQL> --
10:30:57 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
10:30:57 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
10:30:57 SQL> -- (
10:30:57 SQL> --   SELECT
10:30:57 SQL> --   tkrdate
10:30:57 SQL> --   -- Find corr() tween score and g1 over 8 day period:
10:30:57 SQL> --   ,CORR((score_long - score_short),g1)
10:30:57 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
10:30:57 SQL> --   FROM sc12tkr
10:30:57 SQL> -- )
10:30:57 SQL> -- GROUP BY tkrdate
10:30:57 SQL> -- /
10:30:57 SQL> 
10:30:57 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
10:30:57 SQL> 
10:30:57 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.05
10:30:57 SQL> 
10:30:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
10:30:58 SQL> 
10:30:58 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
10:30:58   2  SELECT
10:30:58   3  tkr
10:30:58   4  ,ydate
10:30:58   5  ,tkrdate
10:30:58   6  ,trend
10:30:58   7  ,g1
10:30:58   8  ,gatt
10:30:58   9  ,gattn
10:30:58  10  -- Goodness attributes:
10:30:58  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
10:30:58  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
10:30:58  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
10:30:58  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
10:30:58  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
10:30:58  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
10:30:58  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
10:30:58  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
10:30:58  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
10:30:58  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
10:30:58  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
10:30:58  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
10:30:58  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
10:30:58  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
10:30:58  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
10:30:58  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
10:30:58  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
10:30:58  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
10:30:58  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
10:30:58  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
10:30:58  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
10:30:58  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
10:30:58  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
10:30:58  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
10:30:58  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
10:30:58  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
10:30:58  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
10:30:58  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
10:30:58  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
10:30:58  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
10:30:58  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
10:30:58  42  FROM stk16svmspy
10:30:58  43  /

Table created.

Elapsed: 00:00:00.87
10:30:59 SQL> 
10:30:59 SQL> -- rpt
10:30:59 SQL> 
10:30:59 SQL> SELECT
10:30:59   2  tkr
10:30:59   3  ,trend
10:30:59   4  ,gatt
10:30:59   5  ,COUNT(tkr)
10:30:59   6  ,AVG(g1)
10:30:59   7  FROM stk_ms_svmspy
10:30:59   8  GROUP BY tkr,trend,gatt
10:30:59   9  ORDER BY tkr,trend,gatt
10:30:59  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
WDC		-1 nup	      920 -.50540878
WDC		-1 up	      785 1.00592128
WDC		-1	       83
WDC		 1 nup	     1543 -.46388215
WDC		 1 up	     1030 .712901006
WDC		 1	      163

6 rows selected.

Elapsed: 00:00:00.01
10:30:59 SQL> 
10:30:59 SQL> SELECT
10:30:59   2  tkr
10:30:59   3  ,0+TO_CHAR(ydate,'D')daynum
10:30:59   4  ,COUNT(tkr)
10:30:59   5  ,MIN(ydate),MAX(ydate)
10:30:59   6  FROM stk_ms_svmspy
10:30:59   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
10:30:59   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
10:30:59   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
WDC		 2	  780 2011-01-10 14:30:00 2011-03-28 19:55:00
WDC		 3	  936 2011-01-04 14:30:00 2011-03-22 19:55:00
WDC		 4	  936 2011-01-05 14:30:00 2011-03-23 19:55:00
WDC		 5	  936 2011-01-06 14:30:00 2011-03-24 19:55:00
WDC		 6	  936 2011-01-07 14:30:00 2011-03-25 19:55:00

Elapsed: 00:00:00.01
10:30:59 SQL> 
10:30:59 SQL> -- exit
10:30:59 SQL> @stk10svmd.sql '&1'
10:30:59 SQL> --
10:30:59 SQL> -- stk10svmd.sql
10:30:59 SQL> --
10:30:59 SQL> 
10:30:59 SQL> -- Creates views and tables for demonstrating SVM.
10:30:59 SQL> -- I need to run this after I run stk10.sql
10:30:59 SQL> 
10:30:59 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.07
10:30:59 SQL> 
10:30:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
10:30:59 SQL> 
10:30:59 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
10:30:59   2  SELECT
10:30:59   3  tkr
10:30:59   4  ,ydate
10:30:59   5  ,tkr||ydate tkrdate
10:30:59   6  ,clse
10:30:59   7  ,rownum rnum -- acts as t in my time-series
10:30:59   8  -- Derive some attributes from clse.
10:30:59   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
10:30:59  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
10:30:59  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
10:30:59  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
10:30:59  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
10:30:59  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
10:30:59  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
10:30:59  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
10:30:59  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
10:30:59  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
10:30:59  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
10:30:59  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
10:30:59  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
10:30:59  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
10:30:59  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
10:30:59  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
10:30:59  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
10:30:59  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
10:30:59  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
10:30:59  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
10:30:59  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
10:30:59  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
10:30:59  31  -- ystk21 created here: svmd/cr_ystk21.sql
10:30:59  32  FROM ystk21
10:30:59  33  WHERE UPPER(tkr)='&1'
10:30:59  34  AND ydate > '1990-01-01'
10:30:59  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
10:30:59  36  ORDER BY ydate
10:30:59  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='WDC'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='WDC')

Table created.

Elapsed: 00:00:02.05
10:31:01 SQL> 
10:31:01 SQL> -- rpt
10:31:01 SQL> 
10:31:01 SQL> SELECT
10:31:01   2  tkr
10:31:01   3  ,COUNT(tkr)
10:31:01   4  ,MIN(clse),MAX(clse)
10:31:01   5  ,MIN(avg4),MAX(avg4)
10:31:01   6  ,MIN(ydate),MAX(ydate)
10:31:01   7  FROM stk_svmd10svmspy
10:31:01   8  GROUP BY tkr
10:31:01   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
WDC		5347	      1 	54	1.036	  52.788 1990-01-02 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.02
10:31:01 SQL> 
10:31:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:31:01 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:11.92
10:31:13 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
10:31:13   2  SELECT
10:31:13   3  tkr
10:31:13   4  ,ydate
10:31:13   5  ,tkrdate
10:31:13   6  ,clse
10:31:13   7  ,rnum
10:31:13   8  -- g1 is important. I want to predict g1:
10:31:13   9  ,ld - clse g1
10:31:13  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
10:31:13  11  -- I want more attributes from the ones I derived above:
10:31:13  12  -- clse relation to moving-min
10:31:13  13  ,clse-min3  cm3
10:31:13  14  ,clse-min4  cm4
10:31:13  15  ,clse-min5  cm5
10:31:13  16  ,clse-min6  cm6
10:31:13  17  ,clse-min7  cm7
10:31:13  18  ,clse-min8  cm8
10:31:13  19  ,clse-min9  cm9
10:31:13  20  -- clse relation to moving-avg
10:31:13  21  ,clse-avg3  ca3
10:31:13  22  ,clse-avg4  ca4
10:31:13  23  ,clse-avg5  ca5
10:31:13  24  ,clse-avg6  ca6
10:31:13  25  ,clse-avg7  ca7
10:31:13  26  ,clse-avg8  ca8
10:31:13  27  ,clse-avg9  ca9
10:31:13  28  -- clse relation to moving-max
10:31:13  29  ,clse-max3  cx3
10:31:13  30  ,clse-max4  cx4
10:31:13  31  ,clse-max5  cx5
10:31:13  32  ,clse-max6  cx6
10:31:13  33  ,clse-max7  cx7
10:31:13  34  ,clse-max8  cx8
10:31:13  35  ,clse-max9  cx9
10:31:13  36  -- Derive date related attributes:
10:31:13  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:31:13  38  ,0+TO_CHAR(ydate,'D')d
10:31:13  39  ,0+TO_CHAR(ydate,'W')w
10:31:13  40  -- mpm stands for minutes-past-midnight:
10:31:13  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:31:13  42  -- mph stands for minutes-past-hour:
10:31:13  43  ,0+TO_CHAR(ydate,'MI')mph
10:31:13  44  FROM stk_svmd10svmspy
10:31:13  45  ORDER BY ydate
10:31:13  46  /

Table created.

Elapsed: 00:00:00.30
10:31:13 SQL> 
10:31:13 SQL> -- rpt
10:31:13 SQL> 
10:31:13 SQL> SELECT
10:31:13   2  tkr
10:31:13   3  ,COUNT(tkr)
10:31:13   4  ,MIN(clse),MAX(clse)
10:31:13   5  ,MIN(ydate),MAX(ydate)
10:31:13   6  FROM stk_svmd12
10:31:13   7  GROUP BY tkr
10:31:13   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
WDC		5347	      1 	54 1990-01-02 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.02
10:31:13 SQL> 
10:31:13 SQL> -- Prepare for derivation of NTILE based parameters.
10:31:13 SQL> -- Also derive the "trend" parameter:
10:31:13 SQL> 
10:31:13 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.17
10:31:13 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
10:31:13   2  SELECT
10:31:13   3  tkr
10:31:13   4  ,ydate
10:31:13   5  ,tkrdate
10:31:13   6  ,clse
10:31:13   7  ,g1
10:31:13   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
10:31:13   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
10:31:13  10  ,CASE WHEN trend IS NULL THEN 1
10:31:13  11  	    WHEN trend =0      THEN 1
10:31:13  12  	    ELSE trend END trend
10:31:13  13  ,cm3
10:31:13  14  ,cm4
10:31:13  15  ,cm5
10:31:13  16  ,cm6
10:31:13  17  ,cm7
10:31:13  18  ,cm8
10:31:13  19  ,cm9
10:31:13  20  ,ca3
10:31:13  21  ,ca4
10:31:13  22  ,ca5
10:31:13  23  ,ca6
10:31:13  24  ,ca7
10:31:13  25  ,ca8
10:31:13  26  ,ca9
10:31:13  27  ,cx3
10:31:13  28  ,cx4
10:31:13  29  ,cx5
10:31:13  30  ,cx6
10:31:13  31  ,cx7
10:31:13  32  ,cx8
10:31:13  33  ,cx9
10:31:13  34  ,hh
10:31:13  35  ,d
10:31:13  36  ,w
10:31:13  37  ,mpm
10:31:13  38  ,mph
10:31:13  39  FROM stk_svmd12
10:31:13  40  -- Guard against divide by 0:
10:31:13  41  WHERE clse > 0
10:31:13  42  ORDER BY ydate
10:31:13  43  /

Table created.

Elapsed: 00:00:00.17
10:31:13 SQL> 
10:31:13 SQL> -- rpt
10:31:13 SQL> 
10:31:13 SQL> SELECT
10:31:13   2  tkr
10:31:13   3  ,trend
10:31:13   4  ,gatt
10:31:13   5  ,COUNT(tkr)
10:31:13   6  ,AVG(g1)
10:31:13   7  FROM stk_svmd14
10:31:13   8  GROUP BY tkr,trend,gatt
10:31:13   9  ORDER BY tkr,trend,gatt
10:31:13  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
WDC		  -1 nup       1485 -.30457239
WDC		  -1 up        1111 .419306931
WDC		   1 nup       1553 -.29318094
WDC		   1 up        1197 .396407686
WDC		   1		  1

Elapsed: 00:00:00.01
10:31:14 SQL> 
10:31:14 SQL> -- Derive NTILE based params:
10:31:14 SQL> 
10:31:14 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.08
10:31:14 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
10:31:14   2  SELECT
10:31:14   3  tkr
10:31:14   4  ,ydate
10:31:14   5  ,tkrdate
10:31:14   6  ,clse
10:31:14   7  ,g1
10:31:14   8  ,gatt
10:31:14   9  ,gattn
10:31:14  10  ,trend
10:31:14  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
10:31:14  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
10:31:14  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
10:31:14  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
10:31:14  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
10:31:14  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
10:31:14  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
10:31:14  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
10:31:14  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
10:31:14  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
10:31:14  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
10:31:14  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
10:31:14  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
10:31:14  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
10:31:14  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
10:31:14  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
10:31:14  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
10:31:14  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
10:31:14  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
10:31:14  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
10:31:14  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
10:31:14  32  ,hh  att21
10:31:14  33  ,d   att22
10:31:14  34  ,w   att23
10:31:14  35  ,mpm att24
10:31:14  36  ,mph att25
10:31:14  37  ,trend att26
10:31:14  38  FROM stk_svmd14
10:31:14  39  ORDER BY ydate
10:31:14  40  /

Table created.

Elapsed: 00:00:00.60
10:31:14 SQL> 
10:31:14 SQL> -- rpt
10:31:14 SQL> 
10:31:14 SQL> SELECT
10:31:14   2  tkr
10:31:14   3  ,trend
10:31:14   4  ,gatt
10:31:14   5  ,COUNT(tkr)
10:31:14   6  ,AVG(g1)
10:31:14   7  FROM stk_svmd16
10:31:14   8  GROUP BY tkr,trend,gatt
10:31:14   9  ORDER BY tkr,trend,gatt
10:31:14  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
WDC		  -1 nup       1485 -.30457239
WDC		  -1 up        1111 .419306931
WDC		   1 nup       1553 -.29318094
WDC		   1 up        1197 .396407686
WDC		   1		  1

Elapsed: 00:00:00.01
10:31:14 SQL> 
10:31:14 SQL> -- Comment out feedback related syntax:
10:31:14 SQL> 
10:31:14 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
10:31:14 SQL> -- SELECT
10:31:14 SQL> -- m.tkr
10:31:14 SQL> -- ,m.ydate
10:31:14 SQL> -- ,m.tkrdate
10:31:14 SQL> -- ,l.score score_long
10:31:14 SQL> -- ,s.score score_short
10:31:14 SQL> -- ,m.g1
10:31:14 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
10:31:14 SQL> -- WHERE l.targ='gatt'
10:31:14 SQL> -- AND	 s.targ='gattn'
10:31:14 SQL> -- AND l.tkrdate = s.tkrdate
10:31:14 SQL> -- AND l.tkrdate = m.tkrdate
10:31:14 SQL> -- -- Speed things up:
10:31:14 SQL> -- AND l.tkr = '&1'
10:31:14 SQL> -- AND s.tkr = '&1'
10:31:14 SQL> -- /
10:31:14 SQL> --
10:31:14 SQL> -- DROP TABLE score_corr_tkr;
10:31:14 SQL> --
10:31:14 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
10:31:14 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
10:31:14 SQL> -- (
10:31:14 SQL> --   SELECT
10:31:14 SQL> --   tkrdate
10:31:14 SQL> --   -- Find corr() tween score and g1 over 8 day period:
10:31:14 SQL> --   ,CORR((score_long - score_short),g1)
10:31:14 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
10:31:14 SQL> --   FROM sc12tkr
10:31:14 SQL> -- )
10:31:14 SQL> -- GROUP BY tkrdate
10:31:14 SQL> -- /
10:31:14 SQL> 
10:31:14 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
10:31:14 SQL> 
10:31:14 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.06
10:31:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.27
10:31:15 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
10:31:15   2  SELECT
10:31:15   3  tkr
10:31:15   4  ,ydate
10:31:15   5  ,tkrdate
10:31:15   6  ,trend
10:31:15   7  ,g1
10:31:15   8  ,gatt
10:31:15   9  ,gattn
10:31:15  10  -- Goodness attributes:
10:31:15  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
10:31:15  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
10:31:15  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
10:31:15  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
10:31:15  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
10:31:15  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
10:31:15  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
10:31:15  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
10:31:15  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
10:31:15  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
10:31:15  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
10:31:15  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
10:31:15  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
10:31:15  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
10:31:15  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
10:31:15  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
10:31:15  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
10:31:15  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
10:31:15  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
10:31:15  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
10:31:15  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
10:31:15  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
10:31:15  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
10:31:15  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
10:31:15  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
10:31:15  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
10:31:15  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
10:31:15  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
10:31:15  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
10:31:15  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
10:31:15  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
10:31:15  42  FROM stk_svmd16
10:31:15  43  /

Table created.

Elapsed: 00:00:01.03
10:31:16 SQL> 
10:31:16 SQL> -- rpt
10:31:16 SQL> 
10:31:16 SQL> SELECT
10:31:16   2  tkr
10:31:16   3  ,trend
10:31:16   4  ,gatt
10:31:16   5  ,COUNT(tkr)
10:31:16   6  ,AVG(g1)
10:31:16   7  FROM stk_ms_svmd_svmspy
10:31:16   8  GROUP BY tkr,trend,gatt
10:31:16   9  ORDER BY tkr,trend,gatt
10:31:16  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
WDC		  -1 nup       1485 -.30457239
WDC		  -1 up        1111 .419306931
WDC		   1 nup       1553 -.29318094
WDC		   1 up        1197 .396407686
WDC		   1		  1

Elapsed: 00:00:00.01
10:31:16 SQL> 
10:31:16 SQL> SELECT
10:31:16   2  tkr
10:31:16   3  ,COUNT(tkr)
10:31:16   4  ,MIN(ydate),MAX(ydate)
10:31:16   5  FROM stk_ms_svmd_svmspy
10:31:16   6  GROUP BY tkr
10:31:16   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
WDC		5347 1990-01-02 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.01
10:31:16 SQL> 
10:31:16 SQL> -- exit
10:31:16 SQL> 
10:31:16 SQL> 
10:31:16 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.03
10:31:16 SQL> 
10:31:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
10:31:16 SQL> 
10:31:16 SQL> CREATE TABLE stk_ms_u COMPRESS AS
10:31:16   2  SELECT * FROM stk_ms_svmspy
10:31:16   3  UNION
10:31:16   4  SELECT * FROM stk_ms_svmd_svmspy
10:31:16   5  /

Table created.

Elapsed: 00:00:00.25
10:31:16 SQL> 
10:31:16 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
