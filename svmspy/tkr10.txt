
SQL*Plus: Release 11.2.0.1.0 Production on Wed May 11 01:13:39 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

01:13:39 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
01:13:39 SQL> 
01:13:39 SQL> 01:13:39 SQL> --
01:13:39 SQL> -- stk10u.sql
01:13:40 SQL> --
01:13:40 SQL> 
01:13:40 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
01:13:40 SQL> 
01:13:40 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
01:13:40 SQL> @stk10.sql     '&1'
01:13:40 SQL> --
01:13:40 SQL> -- stk10.sql
01:13:40 SQL> --
01:13:40 SQL> 
01:13:40 SQL> -- Creates views and tables for demonstrating SVM.
01:13:40 SQL> 
01:13:40 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.15
01:13:40 SQL> 
01:13:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:02.75
01:13:42 SQL> 
01:13:42 SQL> CREATE TABLE stk10svmspy COMPRESS AS
01:13:42   2  SELECT
01:13:42   3  tkr
01:13:42   4  ,ydate
01:13:42   5  ,tkr||ydate tkrdate
01:13:42   6  ,clse
01:13:42   7  ,clse2
01:13:42   8  ,rownum rnum -- acts as t in my time-series
01:13:42   9  -- g1 is important. I want to predict g1:
01:13:42  10  ,gain1day g1
01:13:42  11  -- Derive some attributes from clse.
01:13:42  12  -- Each row spans 5 minutes.
01:13:42  13  -- The number of rows in 1 day is 24*60/5.
01:13:42  14  -- I want the aggregations to span from 3 days to 9 days:
01:13:42  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
01:13:42  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
01:13:42  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
01:13:42  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
01:13:42  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
01:13:42  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
01:13:42  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
01:13:42  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
01:13:42  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
01:13:42  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
01:13:42  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
01:13:42  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
01:13:42  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
01:13:42  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
01:13:42  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
01:13:42  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
01:13:42  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
01:13:42  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
01:13:42  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
01:13:42  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
01:13:42  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
01:13:42  36  FROM di5min_stk_c2
01:13:42  37  WHERE UPPER(tkr)='&1'
01:13:42  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
01:13:42  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
01:13:42  40  ORDER BY ydate
01:13:42  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='AXU'

Table created.

Elapsed: 00:00:02.71
01:13:45 SQL> 
01:13:45 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
01:13:45 SQL> 
01:13:45 SQL> -- rpt
01:13:45 SQL> 
01:13:45 SQL> SELECT
01:13:45   2  tkr
01:13:45   3  ,COUNT(tkr)ccount
01:13:45   4  ,MIN(clse)mnclse,MAX(clse)mxclse
01:13:45   5  -- ,MIN(avg4),MAX(avg4)
01:13:45   6  ,MIN(ydate),MAX(ydate)
01:13:45   7  ,MIN(g1)
01:13:45   8  ,MAX(g1)
01:13:45   9  FROM stk10svmspy
01:13:45  10  GROUP BY tkr
01:13:45  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
AXU	      5572	 5.88	   10.25 2011-01-21 14:30:00 2011-05-10 16:15:00      -1.16	  1.07

Elapsed: 00:00:00.01
01:13:45 SQL> 
01:13:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:13:45 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.03
01:13:45 SQL> CREATE TABLE stk12svmspy COMPRESS AS
01:13:45   2  SELECT
01:13:45   3  tkr
01:13:45   4  ,ydate
01:13:45   5  ,tkrdate
01:13:45   6  ,clse
01:13:45   7  ,rnum
01:13:45   8  ,g1
01:13:45   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
01:13:45  10  -- I want more attributes from the ones I derived above:
01:13:45  11  -- clse relation to moving-min
01:13:45  12  ,clse-min3  cm3
01:13:45  13  ,clse-min4  cm4
01:13:45  14  ,clse-min5  cm5
01:13:45  15  ,clse-min6  cm6
01:13:45  16  ,clse-min7  cm7
01:13:45  17  ,clse-min8  cm8
01:13:45  18  ,clse-min9  cm9
01:13:45  19  -- clse relation to moving-avg
01:13:45  20  ,clse-avg3  ca3
01:13:45  21  ,clse-avg4  ca4
01:13:45  22  ,clse-avg5  ca5
01:13:45  23  ,clse-avg6  ca6
01:13:45  24  ,clse-avg7  ca7
01:13:45  25  ,clse-avg8  ca8
01:13:45  26  ,clse-avg9  ca9
01:13:45  27  -- clse relation to moving-max
01:13:45  28  ,clse-max3  cx3
01:13:45  29  ,clse-max4  cx4
01:13:45  30  ,clse-max5  cx5
01:13:45  31  ,clse-max6  cx6
01:13:45  32  ,clse-max7  cx7
01:13:45  33  ,clse-max8  cx8
01:13:45  34  ,clse-max9  cx9
01:13:45  35  -- Derive date related attributes:
01:13:45  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:13:45  37  ,0+TO_CHAR(ydate,'D')d
01:13:45  38  ,0+TO_CHAR(ydate,'W')w
01:13:45  39  -- mpm stands for minutes-past-midnight:
01:13:45  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:13:45  41  -- mph stands for minutes-past-hour:
01:13:45  42  ,0+TO_CHAR(ydate,'MI')mph
01:13:45  43  FROM stk10svmspy
01:13:45  44  ORDER BY ydate
01:13:45  45  /

Table created.

Elapsed: 00:00:00.22
01:13:46 SQL> 
01:13:46 SQL> -- rpt
01:13:46 SQL> 
01:13:46 SQL> SELECT
01:13:46   2  tkr
01:13:46   3  ,COUNT(tkr)ccount
01:13:46   4  ,MIN(clse)mnclse,MAX(clse)mxclse
01:13:46   5  -- ,MIN(avg4),MAX(avg4)
01:13:46   6  ,MIN(ydate),MAX(ydate)
01:13:46   7  ,MIN(g1)
01:13:46   8  ,AVG(g1)
01:13:46   9  ,MAX(g1)
01:13:46  10  FROM stk12svmspy
01:13:46  11  GROUP BY tkr
01:13:46  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
AXU	      5572	 5.88	   10.25 2011-01-21 14:30:00 2011-05-10 16:15:00      -1.16 .033672529	     1.07

Elapsed: 00:00:00.02
01:13:46 SQL> 
01:13:46 SQL> -- Prepare for derivation of NTILE based parameters.
01:13:46 SQL> -- Also derive the "trend" parameter:
01:13:46 SQL> 
01:13:46 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.24
01:13:46 SQL> CREATE TABLE stk14svmspy COMPRESS AS
01:13:46   2  SELECT
01:13:46   3  tkr
01:13:46   4  ,ydate
01:13:46   5  ,tkrdate
01:13:46   6  ,clse
01:13:46   7  ,g1
01:13:46   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
01:13:46   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
01:13:46  10  ,CASE WHEN trend IS NULL THEN 1
01:13:46  11  	    WHEN trend =0      THEN 1
01:13:46  12  	    ELSE trend END trend
01:13:46  13  ,cm3
01:13:46  14  ,cm4
01:13:46  15  ,cm5
01:13:46  16  ,cm6
01:13:46  17  ,cm7
01:13:46  18  ,cm8
01:13:46  19  ,cm9
01:13:46  20  ,ca3
01:13:46  21  ,ca4
01:13:46  22  ,ca5
01:13:46  23  ,ca6
01:13:46  24  ,ca7
01:13:46  25  ,ca8
01:13:46  26  ,ca9
01:13:46  27  ,cx3
01:13:46  28  ,cx4
01:13:46  29  ,cx5
01:13:46  30  ,cx6
01:13:46  31  ,cx7
01:13:46  32  ,cx8
01:13:46  33  ,cx9
01:13:46  34  ,hh
01:13:46  35  ,d
01:13:46  36  ,w
01:13:46  37  ,mpm
01:13:46  38  ,mph
01:13:46  39  FROM stk12svmspy
01:13:46  40  -- Guard against divide by 0:
01:13:46  41  WHERE clse > 0
01:13:46  42  ORDER BY ydate
01:13:46  43  /

Table created.

Elapsed: 00:00:00.13
01:13:46 SQL> 
01:13:46 SQL> -- rpt
01:13:46 SQL> 
01:13:46 SQL> SELECT
01:13:46   2  tkr
01:13:46   3  ,trend
01:13:46   4  ,gatt
01:13:46   5  ,COUNT(tkr)
01:13:46   6  ,AVG(g1)
01:13:46   7  FROM stk14svmspy
01:13:46   8  GROUP BY tkr,trend,gatt
01:13:46   9  ORDER BY tkr,trend,gatt
01:13:46  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AXU		-1 nup	      433 -.22538059
AXU		-1 up	      806 .315546986
AXU		-1	       78
AXU		 1 nup	     2118 -.24974319
AXU		 1 up	     1969 .280119299
AXU		 1	      168

6 rows selected.

Elapsed: 00:00:00.01
01:13:46 SQL> 
01:13:46 SQL> -- Derive NTILE based params:
01:13:46 SQL> 
01:13:46 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
01:13:46 SQL> CREATE TABLE stk16svmspy COMPRESS AS
01:13:46   2  SELECT
01:13:46   3  tkr
01:13:46   4  ,ydate
01:13:46   5  ,tkrdate
01:13:46   6  ,clse
01:13:46   7  ,g1
01:13:46   8  ,gatt
01:13:46   9  ,gattn
01:13:46  10  ,trend
01:13:46  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
01:13:46  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
01:13:46  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
01:13:46  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
01:13:46  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
01:13:46  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
01:13:46  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
01:13:46  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
01:13:46  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
01:13:46  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
01:13:46  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
01:13:46  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
01:13:46  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
01:13:46  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
01:13:46  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
01:13:46  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
01:13:46  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
01:13:46  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
01:13:46  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
01:13:46  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
01:13:46  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
01:13:46  32  ,hh  att21
01:13:46  33  ,d   att22
01:13:46  34  ,w   att23
01:13:46  35  ,mpm att24
01:13:46  36  ,mph att25
01:13:46  37  ,trend att26
01:13:46  38  FROM stk14svmspy
01:13:46  39  ORDER BY ydate
01:13:46  40  /

Table created.

Elapsed: 00:00:00.67
01:13:47 SQL> 
01:13:47 SQL> -- rpt
01:13:47 SQL> 
01:13:47 SQL> SELECT
01:13:47   2  tkr
01:13:47   3  ,trend
01:13:47   4  ,gatt
01:13:47   5  ,COUNT(tkr)
01:13:47   6  ,AVG(g1)
01:13:47   7  FROM stk16svmspy
01:13:47   8  GROUP BY tkr,trend,gatt
01:13:47   9  ORDER BY tkr,trend,gatt
01:13:47  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AXU		-1 nup	      433 -.22538059
AXU		-1 up	      806 .315546986
AXU		-1	       78
AXU		 1 nup	     2118 -.24974319
AXU		 1 up	     1969 .280119299
AXU		 1	      168

6 rows selected.

Elapsed: 00:00:00.03
01:13:47 SQL> 
01:13:47 SQL> -- Comment out feedback related syntax:
01:13:47 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
01:13:47 SQL> -- SELECT
01:13:47 SQL> -- m.tkr
01:13:47 SQL> -- ,m.ydate
01:13:47 SQL> -- ,m.tkrdate
01:13:47 SQL> -- ,l.score score_long
01:13:47 SQL> -- ,s.score score_short
01:13:47 SQL> -- ,m.g1
01:13:47 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
01:13:47 SQL> -- WHERE l.targ='gatt'
01:13:47 SQL> -- AND	 s.targ='gattn'
01:13:47 SQL> -- AND l.tkrdate = s.tkrdate
01:13:47 SQL> -- AND l.tkrdate = m.tkrdate
01:13:47 SQL> -- -- Speed things up:
01:13:47 SQL> -- AND l.tkr = '&1'
01:13:47 SQL> -- AND s.tkr = '&1'
01:13:47 SQL> -- /
01:13:47 SQL> --
01:13:47 SQL> -- DROP TABLE score_corr_tkr;
01:13:47 SQL> --
01:13:47 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
01:13:47 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
01:13:47 SQL> -- (
01:13:47 SQL> --   SELECT
01:13:47 SQL> --   tkrdate
01:13:47 SQL> --   -- Find corr() tween score and g1 over 8 day period:
01:13:47 SQL> --   ,CORR((score_long - score_short),g1)
01:13:47 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
01:13:47 SQL> --   FROM sc12tkr
01:13:47 SQL> -- )
01:13:47 SQL> -- GROUP BY tkrdate
01:13:47 SQL> -- /
01:13:47 SQL> 
01:13:47 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
01:13:47 SQL> 
01:13:47 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.07
01:13:47 SQL> 
01:13:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
01:13:47 SQL> 
01:13:47 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
01:13:47   2  SELECT
01:13:47   3  tkr
01:13:47   4  ,ydate
01:13:47   5  ,tkrdate
01:13:47   6  ,trend
01:13:47   7  ,g1
01:13:47   8  ,gatt
01:13:47   9  ,gattn
01:13:47  10  -- Goodness attributes:
01:13:47  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
01:13:47  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
01:13:47  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
01:13:47  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
01:13:47  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
01:13:47  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
01:13:47  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
01:13:47  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
01:13:47  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
01:13:47  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
01:13:47  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
01:13:47  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
01:13:47  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
01:13:47  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
01:13:47  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
01:13:47  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
01:13:47  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
01:13:47  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
01:13:47  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
01:13:47  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
01:13:47  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
01:13:47  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
01:13:47  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
01:13:47  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
01:13:47  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
01:13:47  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
01:13:47  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
01:13:47  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
01:13:47  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
01:13:47  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
01:13:47  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
01:13:47  42  FROM stk16svmspy
01:13:47  43  /

Table created.

Elapsed: 00:00:00.99
01:13:48 SQL> 
01:13:48 SQL> -- rpt
01:13:48 SQL> 
01:13:48 SQL> SELECT
01:13:48   2  tkr
01:13:48   3  ,trend
01:13:48   4  ,gatt
01:13:48   5  ,COUNT(tkr)
01:13:48   6  ,AVG(g1)
01:13:48   7  FROM stk_ms_svmspy
01:13:48   8  GROUP BY tkr,trend,gatt
01:13:48   9  ORDER BY tkr,trend,gatt
01:13:48  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AXU		-1 nup	      433 -.22538059
AXU		-1 up	      806 .315546986
AXU		-1	       78
AXU		 1 nup	     2118 -.24974319
AXU		 1 up	     1969 .280119299
AXU		 1	      168

6 rows selected.

Elapsed: 00:00:00.02
01:13:48 SQL> 
01:13:48 SQL> SELECT
01:13:48   2  tkr
01:13:48   3  ,0+TO_CHAR(ydate,'D')daynum
01:13:48   4  ,COUNT(tkr)
01:13:48   5  ,MIN(ydate),MAX(ydate)
01:13:48   6  FROM stk_ms_svmspy
01:13:48   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
01:13:48   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
01:13:48   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
AXU		 2	 1170 2011-01-24 14:30:00 2011-05-09 19:55:00
AXU		 3	 1126 2011-01-25 14:30:00 2011-05-10 16:15:00
AXU		 4	 1092 2011-01-26 14:30:00 2011-05-04 19:55:00
AXU		 5	 1092 2011-01-27 14:30:00 2011-05-05 19:55:00
AXU		 6	 1092 2011-01-21 14:30:00 2011-05-06 19:55:00

Elapsed: 00:00:00.01
01:13:48 SQL> 
01:13:48 SQL> -- exit
01:13:48 SQL> @stk10svmd.sql '&1'
01:13:48 SQL> --
01:13:48 SQL> -- stk10svmd.sql
01:13:48 SQL> --
01:13:48 SQL> 
01:13:48 SQL> -- Creates views and tables for demonstrating SVM.
01:13:48 SQL> -- I need to run this after I run stk10.sql
01:13:48 SQL> 
01:13:48 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.04
01:13:48 SQL> 
01:13:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
01:13:48 SQL> 
01:13:48 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
01:13:48   2  SELECT
01:13:48   3  tkr
01:13:48   4  ,ydate
01:13:48   5  ,tkr||ydate tkrdate
01:13:48   6  ,clse
01:13:48   7  ,rownum rnum -- acts as t in my time-series
01:13:48   8  -- Derive some attributes from clse.
01:13:48   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
01:13:48  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
01:13:48  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
01:13:48  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
01:13:48  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
01:13:48  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
01:13:48  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
01:13:48  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
01:13:48  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
01:13:48  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
01:13:48  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
01:13:48  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
01:13:48  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
01:13:48  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
01:13:48  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
01:13:48  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
01:13:48  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
01:13:48  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
01:13:48  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
01:13:48  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
01:13:48  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
01:13:48  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
01:13:48  31  -- ystk21 created here: svmd/cr_ystk21.sql
01:13:48  32  FROM ystk21
01:13:48  33  WHERE UPPER(tkr)='&1'
01:13:48  34  AND ydate > '1990-01-01'
01:13:48  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
01:13:48  36  ORDER BY ydate
01:13:48  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='AXU'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='AXU')

Table created.

Elapsed: 00:00:00.28
01:13:48 SQL> 
01:13:48 SQL> -- rpt
01:13:48 SQL> 
01:13:48 SQL> SELECT
01:13:48   2  tkr
01:13:48   3  ,COUNT(tkr)
01:13:48   4  ,MIN(clse),MAX(clse)
01:13:48   5  ,MIN(avg4),MAX(avg4)
01:13:48   6  ,MIN(ydate),MAX(ydate)
01:13:48   7  FROM stk_svmd10svmspy
01:13:48   8  GROUP BY tkr
01:13:48   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
AXU		1144	    .43      10.17	 .474	    9.89 2006-09-08 20:00:00 2011-05-09 20:00:00

Elapsed: 00:00:00.00
01:13:48 SQL> 
01:13:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:13:48 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
01:13:48 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
01:13:48   2  SELECT
01:13:48   3  tkr
01:13:48   4  ,ydate
01:13:48   5  ,tkrdate
01:13:48   6  ,clse
01:13:48   7  ,rnum
01:13:48   8  -- g1 is important. I want to predict g1:
01:13:48   9  ,ld - clse g1
01:13:48  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
01:13:48  11  -- I want more attributes from the ones I derived above:
01:13:48  12  -- clse relation to moving-min
01:13:48  13  ,clse-min3  cm3
01:13:48  14  ,clse-min4  cm4
01:13:48  15  ,clse-min5  cm5
01:13:48  16  ,clse-min6  cm6
01:13:48  17  ,clse-min7  cm7
01:13:48  18  ,clse-min8  cm8
01:13:48  19  ,clse-min9  cm9
01:13:48  20  -- clse relation to moving-avg
01:13:48  21  ,clse-avg3  ca3
01:13:48  22  ,clse-avg4  ca4
01:13:48  23  ,clse-avg5  ca5
01:13:48  24  ,clse-avg6  ca6
01:13:48  25  ,clse-avg7  ca7
01:13:48  26  ,clse-avg8  ca8
01:13:48  27  ,clse-avg9  ca9
01:13:48  28  -- clse relation to moving-max
01:13:48  29  ,clse-max3  cx3
01:13:48  30  ,clse-max4  cx4
01:13:48  31  ,clse-max5  cx5
01:13:48  32  ,clse-max6  cx6
01:13:48  33  ,clse-max7  cx7
01:13:48  34  ,clse-max8  cx8
01:13:48  35  ,clse-max9  cx9
01:13:48  36  -- Derive date related attributes:
01:13:48  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:13:48  38  ,0+TO_CHAR(ydate,'D')d
01:13:48  39  ,0+TO_CHAR(ydate,'W')w
01:13:48  40  -- mpm stands for minutes-past-midnight:
01:13:48  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:13:48  42  -- mph stands for minutes-past-hour:
01:13:48  43  ,0+TO_CHAR(ydate,'MI')mph
01:13:48  44  FROM stk_svmd10svmspy
01:13:48  45  ORDER BY ydate
01:13:48  46  /

Table created.

Elapsed: 00:00:00.13
01:13:49 SQL> 
01:13:49 SQL> -- rpt
01:13:49 SQL> 
01:13:49 SQL> SELECT
01:13:49   2  tkr
01:13:49   3  ,COUNT(tkr)
01:13:49   4  ,MIN(clse),MAX(clse)
01:13:49   5  ,MIN(ydate),MAX(ydate)
01:13:49   6  FROM stk_svmd12
01:13:49   7  GROUP BY tkr
01:13:49   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
AXU		1144	    .43      10.17 2006-09-08 20:00:00 2011-05-09 20:00:00

Elapsed: 00:00:00.00
01:13:49 SQL> 
01:13:49 SQL> -- Prepare for derivation of NTILE based parameters.
01:13:49 SQL> -- Also derive the "trend" parameter:
01:13:49 SQL> 
01:13:49 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.05
01:13:49 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
01:13:49   2  SELECT
01:13:49   3  tkr
01:13:49   4  ,ydate
01:13:49   5  ,tkrdate
01:13:49   6  ,clse
01:13:49   7  ,g1
01:13:49   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
01:13:49   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
01:13:49  10  ,CASE WHEN trend IS NULL THEN 1
01:13:49  11  	    WHEN trend =0      THEN 1
01:13:49  12  	    ELSE trend END trend
01:13:49  13  ,cm3
01:13:49  14  ,cm4
01:13:49  15  ,cm5
01:13:49  16  ,cm6
01:13:49  17  ,cm7
01:13:49  18  ,cm8
01:13:49  19  ,cm9
01:13:49  20  ,ca3
01:13:49  21  ,ca4
01:13:49  22  ,ca5
01:13:49  23  ,ca6
01:13:49  24  ,ca7
01:13:49  25  ,ca8
01:13:49  26  ,ca9
01:13:49  27  ,cx3
01:13:49  28  ,cx4
01:13:49  29  ,cx5
01:13:49  30  ,cx6
01:13:49  31  ,cx7
01:13:49  32  ,cx8
01:13:49  33  ,cx9
01:13:49  34  ,hh
01:13:49  35  ,d
01:13:49  36  ,w
01:13:49  37  ,mpm
01:13:49  38  ,mph
01:13:49  39  FROM stk_svmd12
01:13:49  40  -- Guard against divide by 0:
01:13:49  41  WHERE clse > 0
01:13:49  42  ORDER BY ydate
01:13:49  43  /

Table created.

Elapsed: 00:00:00.09
01:13:49 SQL> 
01:13:49 SQL> -- rpt
01:13:49 SQL> 
01:13:49 SQL> SELECT
01:13:49   2  tkr
01:13:49   3  ,trend
01:13:49   4  ,gatt
01:13:49   5  ,COUNT(tkr)
01:13:49   6  ,AVG(g1)
01:13:49   7  FROM stk_svmd14
01:13:49   8  GROUP BY tkr,trend,gatt
01:13:49   9  ORDER BY tkr,trend,gatt
01:13:49  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AXU		  -1 nup	299 -.09605351
AXU		  -1 up 	259 .122007722
AXU		  -1		  1
AXU		   1 nup	325 -.10338462
AXU		   1 up 	260 .138038462

Elapsed: 00:00:00.01
01:13:49 SQL> 
01:13:49 SQL> -- Derive NTILE based params:
01:13:49 SQL> 
01:13:49 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.04
01:13:49 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
01:13:49   2  SELECT
01:13:49   3  tkr
01:13:49   4  ,ydate
01:13:49   5  ,tkrdate
01:13:49   6  ,clse
01:13:49   7  ,g1
01:13:49   8  ,gatt
01:13:49   9  ,gattn
01:13:49  10  ,trend
01:13:49  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
01:13:49  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
01:13:49  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
01:13:49  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
01:13:49  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
01:13:49  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
01:13:49  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
01:13:49  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
01:13:49  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
01:13:49  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
01:13:49  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
01:13:49  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
01:13:49  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
01:13:49  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
01:13:49  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
01:13:49  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
01:13:49  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
01:13:49  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
01:13:49  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
01:13:49  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
01:13:49  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
01:13:49  32  ,hh  att21
01:13:49  33  ,d   att22
01:13:49  34  ,w   att23
01:13:49  35  ,mpm att24
01:13:49  36  ,mph att25
01:13:49  37  ,trend att26
01:13:49  38  FROM stk_svmd14
01:13:49  39  ORDER BY ydate
01:13:49  40  /

Table created.

Elapsed: 00:00:00.15
01:13:49 SQL> 
01:13:49 SQL> -- rpt
01:13:49 SQL> 
01:13:49 SQL> SELECT
01:13:49   2  tkr
01:13:49   3  ,trend
01:13:49   4  ,gatt
01:13:49   5  ,COUNT(tkr)
01:13:49   6  ,AVG(g1)
01:13:49   7  FROM stk_svmd16
01:13:49   8  GROUP BY tkr,trend,gatt
01:13:49   9  ORDER BY tkr,trend,gatt
01:13:49  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AXU		  -1 nup	299 -.09605351
AXU		  -1 up 	259 .122007722
AXU		  -1		  1
AXU		   1 nup	325 -.10338462
AXU		   1 up 	260 .138038462

Elapsed: 00:00:00.00
01:13:49 SQL> 
01:13:49 SQL> -- Comment out feedback related syntax:
01:13:49 SQL> 
01:13:49 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
01:13:49 SQL> -- SELECT
01:13:49 SQL> -- m.tkr
01:13:49 SQL> -- ,m.ydate
01:13:49 SQL> -- ,m.tkrdate
01:13:49 SQL> -- ,l.score score_long
01:13:49 SQL> -- ,s.score score_short
01:13:49 SQL> -- ,m.g1
01:13:49 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
01:13:49 SQL> -- WHERE l.targ='gatt'
01:13:49 SQL> -- AND	 s.targ='gattn'
01:13:49 SQL> -- AND l.tkrdate = s.tkrdate
01:13:49 SQL> -- AND l.tkrdate = m.tkrdate
01:13:49 SQL> -- -- Speed things up:
01:13:49 SQL> -- AND l.tkr = '&1'
01:13:49 SQL> -- AND s.tkr = '&1'
01:13:49 SQL> -- /
01:13:49 SQL> --
01:13:49 SQL> -- DROP TABLE score_corr_tkr;
01:13:49 SQL> --
01:13:49 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
01:13:49 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
01:13:49 SQL> -- (
01:13:49 SQL> --   SELECT
01:13:49 SQL> --   tkrdate
01:13:49 SQL> --   -- Find corr() tween score and g1 over 8 day period:
01:13:49 SQL> --   ,CORR((score_long - score_short),g1)
01:13:49 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
01:13:49 SQL> --   FROM sc12tkr
01:13:49 SQL> -- )
01:13:49 SQL> -- GROUP BY tkrdate
01:13:49 SQL> -- /
01:13:49 SQL> 
01:13:49 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
01:13:49 SQL> 
01:13:49 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.05
01:13:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
01:13:49 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
01:13:49   2  SELECT
01:13:49   3  tkr
01:13:49   4  ,ydate
01:13:49   5  ,tkrdate
01:13:49   6  ,trend
01:13:49   7  ,g1
01:13:49   8  ,gatt
01:13:49   9  ,gattn
01:13:49  10  -- Goodness attributes:
01:13:49  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
01:13:49  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
01:13:49  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
01:13:49  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
01:13:49  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
01:13:49  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
01:13:49  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
01:13:49  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
01:13:49  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
01:13:49  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
01:13:49  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
01:13:49  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
01:13:49  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
01:13:49  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
01:13:49  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
01:13:49  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
01:13:49  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
01:13:49  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
01:13:49  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
01:13:49  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
01:13:49  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
01:13:49  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
01:13:49  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
01:13:49  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
01:13:49  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
01:13:49  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
01:13:49  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
01:13:49  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
01:13:49  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
01:13:49  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
01:13:49  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
01:13:49  42  FROM stk_svmd16
01:13:49  43  /

Table created.

Elapsed: 00:00:00.23
01:13:50 SQL> 
01:13:50 SQL> -- rpt
01:13:50 SQL> 
01:13:50 SQL> SELECT
01:13:50   2  tkr
01:13:50   3  ,trend
01:13:50   4  ,gatt
01:13:50   5  ,COUNT(tkr)
01:13:50   6  ,AVG(g1)
01:13:50   7  FROM stk_ms_svmd_svmspy
01:13:50   8  GROUP BY tkr,trend,gatt
01:13:50   9  ORDER BY tkr,trend,gatt
01:13:50  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AXU		  -1 nup	299 -.09605351
AXU		  -1 up 	259 .122007722
AXU		  -1		  1
AXU		   1 nup	325 -.10338462
AXU		   1 up 	260 .138038462

Elapsed: 00:00:00.00
01:13:50 SQL> 
01:13:50 SQL> SELECT
01:13:50   2  tkr
01:13:50   3  ,COUNT(tkr)
01:13:50   4  ,MIN(ydate),MAX(ydate)
01:13:50   5  FROM stk_ms_svmd_svmspy
01:13:50   6  GROUP BY tkr
01:13:50   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
AXU		1144 2006-09-08 20:00:00 2011-05-09 20:00:00

Elapsed: 00:00:00.00
01:13:50 SQL> 
01:13:50 SQL> -- exit
01:13:50 SQL> 
01:13:50 SQL> 
01:13:50 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.09
01:13:50 SQL> 
01:13:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.17
01:13:50 SQL> 
01:13:50 SQL> CREATE TABLE stk_ms_u COMPRESS AS
01:13:50   2  SELECT * FROM stk_ms_svmspy
01:13:50   3  UNION
01:13:50   4  SELECT * FROM stk_ms_svmd_svmspy
01:13:50   5  /

Table created.

Elapsed: 00:00:00.21
01:13:50 SQL> 
01:13:50 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
