
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 27 06:55:03 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:55:03 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:55:03 SQL> 
06:55:03 SQL> 06:55:03 SQL> --
06:55:03 SQL> -- stk10u.sql
06:55:03 SQL> --
06:55:03 SQL> 
06:55:03 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
06:55:03 SQL> 
06:55:03 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
06:55:03 SQL> @stk10.sql     '&1'
06:55:03 SQL> --
06:55:03 SQL> -- stk10.sql
06:55:03 SQL> --
06:55:03 SQL> 
06:55:03 SQL> -- Creates views and tables for demonstrating SVM.
06:55:03 SQL> 
06:55:03 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:06.30
06:55:09 SQL> 
06:55:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
06:55:09 SQL> 
06:55:09 SQL> CREATE TABLE stk10svmspy COMPRESS AS
06:55:09   2  SELECT
06:55:09   3  tkr
06:55:09   4  ,ydate
06:55:09   5  ,tkr||ydate tkrdate
06:55:09   6  ,clse
06:55:09   7  ,clse2
06:55:09   8  ,rownum rnum -- acts as t in my time-series
06:55:09   9  -- g1 is important. I want to predict g1:
06:55:09  10  ,gain1day g1
06:55:09  11  -- Derive some attributes from clse.
06:55:09  12  -- Each row spans 5 minutes.
06:55:09  13  -- The number of rows in 1 day is 24*60/5.
06:55:09  14  -- I want the aggregations to span from 3 days to 9 days:
06:55:09  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
06:55:09  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
06:55:09  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
06:55:09  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
06:55:09  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
06:55:09  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
06:55:09  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
06:55:09  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
06:55:09  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
06:55:09  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
06:55:09  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
06:55:09  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
06:55:09  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
06:55:09  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
06:55:09  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
06:55:09  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
06:55:09  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
06:55:09  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
06:55:09  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
06:55:09  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
06:55:09  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
06:55:09  36  FROM di5min_stk_c2
06:55:09  37  WHERE UPPER(tkr)='&1'
06:55:09  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
06:55:09  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
06:55:09  40  ORDER BY ydate
06:55:09  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='FLS'

Table created.

Elapsed: 00:00:00.27
06:55:10 SQL> 
06:55:10 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.07
06:55:10 SQL> 
06:55:10 SQL> -- rpt
06:55:10 SQL> 
06:55:10 SQL> SELECT
06:55:10   2  tkr
06:55:10   3  ,COUNT(tkr)ccount
06:55:10   4  ,MIN(clse)mnclse,MAX(clse)mxclse
06:55:10   5  -- ,MIN(avg4),MAX(avg4)
06:55:10   6  ,MIN(ydate),MAX(ydate)
06:55:10   7  ,MIN(g1)
06:55:10   8  ,MAX(g1)
06:55:10   9  FROM stk10svmspy
06:55:10  10  GROUP BY tkr
06:55:10  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
FLS	      1248	112.9	  121.36 2011-01-04 14:30:00 2011-01-26 20:55:00      -4.43	  4.87

Elapsed: 00:00:00.00
06:55:10 SQL> 
06:55:10 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:55:10 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.17
06:55:10 SQL> CREATE TABLE stk12svmspy COMPRESS AS
06:55:10   2  SELECT
06:55:10   3  tkr
06:55:10   4  ,ydate
06:55:10   5  ,tkrdate
06:55:10   6  ,clse
06:55:10   7  ,rnum
06:55:10   8  ,g1
06:55:10   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:55:10  10  -- I want more attributes from the ones I derived above:
06:55:10  11  -- clse relation to moving-min
06:55:10  12  ,clse-min3  cm3
06:55:10  13  ,clse-min4  cm4
06:55:10  14  ,clse-min5  cm5
06:55:10  15  ,clse-min6  cm6
06:55:10  16  ,clse-min7  cm7
06:55:10  17  ,clse-min8  cm8
06:55:10  18  ,clse-min9  cm9
06:55:10  19  -- clse relation to moving-avg
06:55:10  20  ,clse-avg3  ca3
06:55:10  21  ,clse-avg4  ca4
06:55:10  22  ,clse-avg5  ca5
06:55:10  23  ,clse-avg6  ca6
06:55:10  24  ,clse-avg7  ca7
06:55:10  25  ,clse-avg8  ca8
06:55:10  26  ,clse-avg9  ca9
06:55:10  27  -- clse relation to moving-max
06:55:10  28  ,clse-max3  cx3
06:55:10  29  ,clse-max4  cx4
06:55:10  30  ,clse-max5  cx5
06:55:10  31  ,clse-max6  cx6
06:55:10  32  ,clse-max7  cx7
06:55:10  33  ,clse-max8  cx8
06:55:10  34  ,clse-max9  cx9
06:55:10  35  -- Derive date related attributes:
06:55:10  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:55:10  37  ,0+TO_CHAR(ydate,'D')d
06:55:10  38  ,0+TO_CHAR(ydate,'W')w
06:55:10  39  -- mpm stands for minutes-past-midnight:
06:55:10  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:55:10  41  -- mph stands for minutes-past-hour:
06:55:10  42  ,0+TO_CHAR(ydate,'MI')mph
06:55:10  43  FROM stk10svmspy
06:55:10  44  ORDER BY ydate
06:55:10  45  /

Table created.

Elapsed: 00:00:00.08
06:55:10 SQL> 
06:55:10 SQL> -- rpt
06:55:10 SQL> 
06:55:10 SQL> SELECT
06:55:10   2  tkr
06:55:10   3  ,COUNT(tkr)ccount
06:55:10   4  ,MIN(clse)mnclse,MAX(clse)mxclse
06:55:10   5  -- ,MIN(avg4),MAX(avg4)
06:55:10   6  ,MIN(ydate),MAX(ydate)
06:55:10   7  ,MIN(g1)
06:55:10   8  ,AVG(g1)
06:55:10   9  ,MAX(g1)
06:55:10  10  FROM stk12svmspy
06:55:10  11  GROUP BY tkr
06:55:10  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
FLS	      1248	112.9	  121.36 2011-01-04 14:30:00 2011-01-26 20:55:00      -4.43 .132628205	     4.87

Elapsed: 00:00:00.00
06:55:10 SQL> 
06:55:10 SQL> -- Prepare for derivation of NTILE based parameters.
06:55:10 SQL> -- Also derive the "trend" parameter:
06:55:10 SQL> 
06:55:10 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.07
06:55:10 SQL> CREATE TABLE stk14svmspy COMPRESS AS
06:55:10   2  SELECT
06:55:10   3  tkr
06:55:10   4  ,ydate
06:55:10   5  ,tkrdate
06:55:10   6  ,clse
06:55:10   7  ,g1
06:55:10   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
06:55:10   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
06:55:10  10  ,CASE WHEN trend IS NULL THEN 1
06:55:10  11  	    WHEN trend =0      THEN 1
06:55:10  12  	    ELSE trend END trend
06:55:10  13  ,cm3
06:55:10  14  ,cm4
06:55:10  15  ,cm5
06:55:10  16  ,cm6
06:55:10  17  ,cm7
06:55:10  18  ,cm8
06:55:10  19  ,cm9
06:55:10  20  ,ca3
06:55:10  21  ,ca4
06:55:10  22  ,ca5
06:55:10  23  ,ca6
06:55:10  24  ,ca7
06:55:10  25  ,ca8
06:55:10  26  ,ca9
06:55:10  27  ,cx3
06:55:10  28  ,cx4
06:55:10  29  ,cx5
06:55:10  30  ,cx6
06:55:10  31  ,cx7
06:55:10  32  ,cx8
06:55:10  33  ,cx9
06:55:10  34  ,hh
06:55:10  35  ,d
06:55:10  36  ,w
06:55:10  37  ,mpm
06:55:10  38  ,mph
06:55:10  39  FROM stk12svmspy
06:55:10  40  -- Guard against divide by 0:
06:55:10  41  WHERE clse > 0
06:55:10  42  ORDER BY ydate
06:55:10  43  /

Table created.

Elapsed: 00:00:00.08
06:55:10 SQL> 
06:55:10 SQL> -- rpt
06:55:10 SQL> 
06:55:10 SQL> SELECT
06:55:10   2  tkr
06:55:10   3  ,trend
06:55:10   4  ,gatt
06:55:10   5  ,COUNT(tkr)
06:55:10   6  ,AVG(g1)
06:55:10   7  FROM stk14svmspy
06:55:10   8  GROUP BY tkr,trend,gatt
06:55:10   9  ORDER BY tkr,trend,gatt
06:55:10  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
FLS		-1 nup	      429 -1.0686538
FLS		-1 up	      370 2.34649324
FLS		-1	       77
FLS		 1 nup	      203 -1.7962315
FLS		 1 up	       90 1.10794444
FLS		 1	       79

6 rows selected.

Elapsed: 00:00:00.01
06:55:10 SQL> 
06:55:10 SQL> -- Derive NTILE based params:
06:55:10 SQL> 
06:55:10 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.09
06:55:10 SQL> CREATE TABLE stk16svmspy COMPRESS AS
06:55:10   2  SELECT
06:55:10   3  tkr
06:55:10   4  ,ydate
06:55:10   5  ,tkrdate
06:55:10   6  ,clse
06:55:10   7  ,g1
06:55:10   8  ,gatt
06:55:10   9  ,gattn
06:55:10  10  ,trend
06:55:10  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
06:55:10  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
06:55:10  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
06:55:10  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
06:55:10  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
06:55:10  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
06:55:10  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
06:55:10  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
06:55:10  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
06:55:10  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
06:55:10  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
06:55:10  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
06:55:10  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
06:55:10  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
06:55:10  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
06:55:10  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
06:55:10  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
06:55:10  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
06:55:10  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
06:55:10  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
06:55:10  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
06:55:10  32  ,hh  att21
06:55:10  33  ,d   att22
06:55:10  34  ,w   att23
06:55:10  35  ,mpm att24
06:55:10  36  ,mph att25
06:55:10  37  ,trend att26
06:55:10  38  FROM stk14svmspy
06:55:10  39  ORDER BY ydate
06:55:10  40  /

Table created.

Elapsed: 00:00:00.21
06:55:11 SQL> 
06:55:11 SQL> -- rpt
06:55:11 SQL> 
06:55:11 SQL> SELECT
06:55:11   2  tkr
06:55:11   3  ,trend
06:55:11   4  ,gatt
06:55:11   5  ,COUNT(tkr)
06:55:11   6  ,AVG(g1)
06:55:11   7  FROM stk16svmspy
06:55:11   8  GROUP BY tkr,trend,gatt
06:55:11   9  ORDER BY tkr,trend,gatt
06:55:11  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
FLS		-1 nup	      429 -1.0686538
FLS		-1 up	      370 2.34649324
FLS		-1	       77
FLS		 1 nup	      203 -1.7962315
FLS		 1 up	       90 1.10794444
FLS		 1	       79

6 rows selected.

Elapsed: 00:00:00.02
06:55:11 SQL> 
06:55:11 SQL> 
06:55:11 SQL> CREATE OR REPLACE VIEW sc12tkr AS
06:55:11   2  SELECT
06:55:11   3  m.tkr
06:55:11   4  ,m.ydate
06:55:11   5  ,m.tkrdate
06:55:11   6  ,l.score score_long
06:55:11   7  ,s.score score_short
06:55:11   8  ,m.g1
06:55:11   9  FROM stkscores l,stkscores s,stk16svmspy m
06:55:11  10  WHERE l.targ='gatt'
06:55:11  11  AND   s.targ='gattn'
06:55:11  12  AND l.tkrdate = s.tkrdate
06:55:11  13  AND l.tkrdate = m.tkrdate
06:55:11  14  -- Speed things up:
06:55:11  15  AND l.tkr = '&1'
06:55:11  16  AND s.tkr = '&1'
06:55:11  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'FLS'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'FLS'

View created.

Elapsed: 00:00:00.07
06:55:11 SQL> 
06:55:11 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.04
06:55:11 SQL> 
06:55:11 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
06:55:11   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
06:55:11   3  (
06:55:11   4  	SELECT
06:55:11   5  	tkrdate
06:55:11   6  	-- Find corr() tween score and g1 over 8 day period:
06:55:11   7  	,CORR((score_long - score_short),g1)
06:55:11   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
06:55:11   9  	FROM sc12tkr
06:55:11  10  )
06:55:11  11  GROUP BY tkrdate
06:55:11  12  /

Table created.

Elapsed: 00:00:00.15
06:55:11 SQL> 
06:55:11 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
06:55:11 SQL> 
06:55:11 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
06:55:11 SQL> 
06:55:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
06:55:11 SQL> 
06:55:11 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
06:55:11   2  SELECT
06:55:11   3  tkr
06:55:11   4  ,ydate
06:55:11   5  ,s.tkrdate
06:55:11   6  ,trend
06:55:11   7  ,g1
06:55:11   8  ,gatt
06:55:11   9  ,gattn
06:55:11  10  -- Recent CORR()tween scores and gains:
06:55:11  11  ,NVL(sc_corr,0)sc_corr
06:55:11  12  -- Goodness attributes:
06:55:11  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
06:55:11  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
06:55:11  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
06:55:11  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
06:55:11  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
06:55:11  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
06:55:11  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
06:55:11  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
06:55:11  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
06:55:11  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
06:55:11  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
06:55:11  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
06:55:11  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
06:55:11  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
06:55:11  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
06:55:11  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
06:55:11  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
06:55:11  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
06:55:11  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
06:55:11  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
06:55:11  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
06:55:11  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
06:55:11  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
06:55:11  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
06:55:11  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
06:55:11  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
06:55:11  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
06:55:11  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:55:11  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
06:55:11  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
06:55:11  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
06:55:11  44  FROM stk16svmspy s,score_corr_tkr c
06:55:11  45  WHERE s.tkrdate = c.tkrdate(+)
06:55:11  46  /

Table created.

Elapsed: 00:00:00.27
06:55:12 SQL> 
06:55:12 SQL> -- rpt
06:55:12 SQL> 
06:55:12 SQL> SELECT
06:55:12   2  tkr
06:55:12   3  ,trend
06:55:12   4  ,gatt
06:55:12   5  ,COUNT(tkr)
06:55:12   6  ,AVG(g1)
06:55:12   7  ,AVG(sc_corr)
06:55:12   8  FROM stk_ms_svmspy
06:55:12   9  GROUP BY tkr,trend,gatt
06:55:12  10  ORDER BY tkr,trend,gatt
06:55:12  11  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
------- ---------- --- ---------- ---------- ------------
FLS		-1 nup	      429 -1.0686538   .134496057
FLS		-1 up	      370 2.34649324   -.06560838
FLS		-1	       77	       -.18684528
FLS		 1 nup	      203 -1.7962315   -.14089308
FLS		 1 up	       90 1.10794444   -.22832137
FLS		 1	       79	       -.03862371

6 rows selected.

Elapsed: 00:00:00.01
06:55:12 SQL> 
06:55:12 SQL> SELECT
06:55:12   2  tkr
06:55:12   3  ,0+TO_CHAR(ydate,'D')daynum
06:55:12   4  ,COUNT(tkr)
06:55:12   5  ,MIN(ydate),MAX(ydate)
06:55:12   6  FROM stk_ms_svmspy
06:55:12   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
06:55:12   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
06:55:12   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
FLS		 2	  156 2011-01-10 14:30:00 2011-01-24 20:55:00
FLS		 3	  312 2011-01-04 14:30:00 2011-01-25 20:55:00
FLS		 4	  312 2011-01-05 14:30:00 2011-01-26 20:55:00
FLS		 5	  234 2011-01-06 14:30:00 2011-01-20 20:55:00
FLS		 6	  234 2011-01-07 14:30:00 2011-01-21 20:55:00

Elapsed: 00:00:00.00
06:55:12 SQL> 
06:55:12 SQL> -- exit
06:55:12 SQL> @stk10svmd.sql '&1'
06:55:12 SQL> --
06:55:12 SQL> -- stk10svmd.sql
06:55:12 SQL> --
06:55:12 SQL> 
06:55:12 SQL> -- Creates views and tables for demonstrating SVM.
06:55:12 SQL> -- I need to run this after I run stk10.sql
06:55:12 SQL> 
06:55:12 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.07
06:55:12 SQL> 
06:55:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
06:55:12 SQL> 
06:55:12 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
06:55:12   2  SELECT
06:55:12   3  tkr
06:55:12   4  ,ydate
06:55:12   5  ,tkr||ydate tkrdate
06:55:12   6  ,clse
06:55:12   7  ,rownum rnum -- acts as t in my time-series
06:55:12   8  -- Derive some attributes from clse.
06:55:12   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
06:55:12  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
06:55:12  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
06:55:12  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
06:55:12  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
06:55:12  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
06:55:12  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
06:55:12  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
06:55:12  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
06:55:12  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
06:55:12  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
06:55:12  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
06:55:12  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
06:55:12  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
06:55:12  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
06:55:12  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
06:55:12  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
06:55:12  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
06:55:12  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
06:55:12  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
06:55:12  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
06:55:12  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
06:55:12  31  FROM ystk
06:55:12  32  WHERE UPPER(tkr)='&1'
06:55:12  33  AND ydate > '1990-01-01'
06:55:12  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
06:55:12  35  ORDER BY ydate
06:55:12  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='FLS'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='FLS')

Table created.

Elapsed: 00:00:00.95
06:55:13 SQL> 
06:55:13 SQL> -- rpt
06:55:13 SQL> 
06:55:13 SQL> SELECT
06:55:13   2  tkr
06:55:13   3  ,COUNT(tkr)
06:55:13   4  ,MIN(clse),MAX(clse)
06:55:13   5  ,MIN(avg4),MAX(avg4)
06:55:13   6  ,MIN(ydate),MAX(ydate)
06:55:13   7  FROM stk_svmd10svmspy
06:55:13   8  GROUP BY tkr
06:55:13   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
FLS		5247	   5.72     136.83	 5.83	  132.51 1990-03-26 00:00:00 2011-01-25 00:00:00

Elapsed: 00:00:00.01
06:55:13 SQL> 
06:55:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:55:13 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.25
06:55:13 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
06:55:13   2  SELECT
06:55:13   3  tkr
06:55:13   4  ,ydate
06:55:13   5  ,tkrdate
06:55:13   6  ,clse
06:55:13   7  ,rnum
06:55:13   8  -- g1 is important. I want to predict g1:
06:55:13   9  ,ld - clse g1
06:55:13  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:55:13  11  -- I want more attributes from the ones I derived above:
06:55:13  12  -- clse relation to moving-min
06:55:13  13  ,clse-min3  cm3
06:55:13  14  ,clse-min4  cm4
06:55:13  15  ,clse-min5  cm5
06:55:13  16  ,clse-min6  cm6
06:55:13  17  ,clse-min7  cm7
06:55:13  18  ,clse-min8  cm8
06:55:13  19  ,clse-min9  cm9
06:55:13  20  -- clse relation to moving-avg
06:55:13  21  ,clse-avg3  ca3
06:55:13  22  ,clse-avg4  ca4
06:55:13  23  ,clse-avg5  ca5
06:55:13  24  ,clse-avg6  ca6
06:55:13  25  ,clse-avg7  ca7
06:55:13  26  ,clse-avg8  ca8
06:55:13  27  ,clse-avg9  ca9
06:55:13  28  -- clse relation to moving-max
06:55:13  29  ,clse-max3  cx3
06:55:13  30  ,clse-max4  cx4
06:55:13  31  ,clse-max5  cx5
06:55:13  32  ,clse-max6  cx6
06:55:13  33  ,clse-max7  cx7
06:55:13  34  ,clse-max8  cx8
06:55:13  35  ,clse-max9  cx9
06:55:13  36  -- Derive date related attributes:
06:55:13  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:55:13  38  ,0+TO_CHAR(ydate,'D')d
06:55:13  39  ,0+TO_CHAR(ydate,'W')w
06:55:13  40  -- mpm stands for minutes-past-midnight:
06:55:13  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:55:13  42  -- mph stands for minutes-past-hour:
06:55:13  43  ,0+TO_CHAR(ydate,'MI')mph
06:55:13  44  FROM stk_svmd10svmspy
06:55:13  45  ORDER BY ydate
06:55:13  46  /

Table created.

Elapsed: 00:00:00.29
06:55:13 SQL> 
06:55:13 SQL> -- rpt
06:55:13 SQL> 
06:55:13 SQL> SELECT
06:55:13   2  tkr
06:55:13   3  ,COUNT(tkr)
06:55:13   4  ,MIN(clse),MAX(clse)
06:55:13   5  ,MIN(ydate),MAX(ydate)
06:55:13   6  FROM stk_svmd12
06:55:13   7  GROUP BY tkr
06:55:13   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
FLS		5247	   5.72     136.83 1990-03-26 00:00:00 2011-01-25 00:00:00

Elapsed: 00:00:00.02
06:55:13 SQL> 
06:55:13 SQL> -- Prepare for derivation of NTILE based parameters.
06:55:13 SQL> -- Also derive the "trend" parameter:
06:55:13 SQL> 
06:55:13 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.14
06:55:13 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
06:55:13   2  SELECT
06:55:13   3  tkr
06:55:13   4  ,ydate
06:55:13   5  ,tkrdate
06:55:13   6  ,clse
06:55:13   7  ,g1
06:55:13   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
06:55:13   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
06:55:13  10  ,CASE WHEN trend IS NULL THEN 1
06:55:13  11  	    WHEN trend =0      THEN 1
06:55:13  12  	    ELSE trend END trend
06:55:13  13  ,cm3
06:55:13  14  ,cm4
06:55:13  15  ,cm5
06:55:13  16  ,cm6
06:55:13  17  ,cm7
06:55:13  18  ,cm8
06:55:13  19  ,cm9
06:55:13  20  ,ca3
06:55:13  21  ,ca4
06:55:13  22  ,ca5
06:55:13  23  ,ca6
06:55:13  24  ,ca7
06:55:13  25  ,ca8
06:55:13  26  ,ca9
06:55:13  27  ,cx3
06:55:13  28  ,cx4
06:55:13  29  ,cx5
06:55:13  30  ,cx6
06:55:13  31  ,cx7
06:55:13  32  ,cx8
06:55:13  33  ,cx9
06:55:13  34  ,hh
06:55:13  35  ,d
06:55:13  36  ,w
06:55:13  37  ,mpm
06:55:13  38  ,mph
06:55:13  39  FROM stk_svmd12
06:55:13  40  -- Guard against divide by 0:
06:55:13  41  WHERE clse > 0
06:55:13  42  ORDER BY ydate
06:55:13  43  /

Table created.

Elapsed: 00:00:00.14
06:55:14 SQL> 
06:55:14 SQL> -- rpt
06:55:14 SQL> 
06:55:14 SQL> SELECT
06:55:14   2  tkr
06:55:14   3  ,trend
06:55:14   4  ,gatt
06:55:14   5  ,COUNT(tkr)
06:55:14   6  ,AVG(g1)
06:55:14   7  FROM stk_svmd14
06:55:14   8  GROUP BY tkr,trend,gatt
06:55:14   9  ORDER BY tkr,trend,gatt
06:55:14  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FLS		  -1 nup       1333 -.52207052
FLS		  -1 up        1035 .785652174
FLS		   1 nup       1643 -.49112599
FLS		   1 up        1235 .647506073
FLS		   1		  1

Elapsed: 00:00:00.02
06:55:14 SQL> 
06:55:14 SQL> -- Derive NTILE based params:
06:55:14 SQL> 
06:55:14 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.08
06:55:14 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
06:55:14   2  SELECT
06:55:14   3  tkr
06:55:14   4  ,ydate
06:55:14   5  ,tkrdate
06:55:14   6  ,clse
06:55:14   7  ,g1
06:55:14   8  ,gatt
06:55:14   9  ,gattn
06:55:14  10  ,trend
06:55:14  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
06:55:14  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
06:55:14  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
06:55:14  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
06:55:14  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
06:55:14  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
06:55:14  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
06:55:14  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
06:55:14  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
06:55:14  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
06:55:14  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
06:55:14  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
06:55:14  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
06:55:14  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
06:55:14  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
06:55:14  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
06:55:14  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
06:55:14  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
06:55:14  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
06:55:14  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
06:55:14  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
06:55:14  32  ,hh  att21
06:55:14  33  ,d   att22
06:55:14  34  ,w   att23
06:55:14  35  ,mpm att24
06:55:14  36  ,mph att25
06:55:14  37  ,trend att26
06:55:14  38  FROM stk_svmd14
06:55:14  39  ORDER BY ydate
06:55:14  40  /

Table created.

Elapsed: 00:00:00.58
06:55:14 SQL> 
06:55:14 SQL> -- rpt
06:55:14 SQL> 
06:55:14 SQL> SELECT
06:55:14   2  tkr
06:55:14   3  ,trend
06:55:14   4  ,gatt
06:55:14   5  ,COUNT(tkr)
06:55:14   6  ,AVG(g1)
06:55:14   7  FROM stk_svmd16
06:55:14   8  GROUP BY tkr,trend,gatt
06:55:14   9  ORDER BY tkr,trend,gatt
06:55:14  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FLS		  -1 nup       1333 -.52207052
FLS		  -1 up        1035 .785652174
FLS		   1 nup       1643 -.49112599
FLS		   1 up        1235 .647506073
FLS		   1		  1

Elapsed: 00:00:00.01
06:55:14 SQL> 
06:55:14 SQL> 
06:55:14 SQL> CREATE OR REPLACE VIEW sc12tkr AS
06:55:14   2  SELECT
06:55:14   3  m.tkr
06:55:14   4  ,m.ydate
06:55:14   5  ,m.tkrdate
06:55:14   6  ,l.score score_long
06:55:14   7  ,s.score score_short
06:55:14   8  ,m.g1
06:55:14   9  FROM stkscores l,stkscores s,stk_svmd16 m
06:55:14  10  WHERE l.targ='gatt'
06:55:14  11  AND   s.targ='gattn'
06:55:14  12  AND l.tkrdate = s.tkrdate
06:55:14  13  AND l.tkrdate = m.tkrdate
06:55:14  14  -- Speed things up:
06:55:14  15  AND l.tkr = '&1'
06:55:14  16  AND s.tkr = '&1'
06:55:14  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'FLS'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'FLS'

View created.

Elapsed: 00:00:00.04
06:55:14 SQL> 
06:55:14 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.07
06:55:14 SQL> 
06:55:14 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
06:55:14   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
06:55:14   3  (
06:55:14   4  	SELECT
06:55:14   5  	tkrdate
06:55:14   6  	-- Find corr() tween score and g1 over 8 day period:
06:55:14   7  	,CORR((score_long - score_short),g1)
06:55:14   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
06:55:14   9  	FROM sc12tkr
06:55:14  10  )
06:55:14  11  GROUP BY tkrdate
06:55:14  12  /

Table created.

Elapsed: 00:00:00.12
06:55:14 SQL> 
06:55:14 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
06:55:14 SQL> -- Now I derive goodness attributes:
06:55:14 SQL> 
06:55:14 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.03
06:55:14 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
06:55:14   2  SELECT
06:55:14   3  tkr
06:55:14   4  ,ydate
06:55:14   5  ,s.tkrdate
06:55:14   6  ,trend
06:55:14   7  ,g1
06:55:14   8  ,gatt
06:55:14   9  ,gattn
06:55:14  10  -- Recent CORR()tween scores and gains:
06:55:14  11  ,NVL(sc_corr,0)sc_corr
06:55:14  12  -- Goodness attributes:
06:55:14  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
06:55:14  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
06:55:14  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
06:55:14  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
06:55:14  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
06:55:14  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
06:55:14  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
06:55:14  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
06:55:14  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
06:55:14  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
06:55:14  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
06:55:14  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
06:55:14  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
06:55:14  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
06:55:14  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
06:55:14  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
06:55:14  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
06:55:14  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
06:55:14  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
06:55:14  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
06:55:14  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
06:55:14  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
06:55:14  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
06:55:14  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
06:55:14  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
06:55:14  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
06:55:14  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
06:55:14  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:55:14  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
06:55:14  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
06:55:14  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
06:55:14  44  FROM stk_svmd16 s,score_corr_tkr c
06:55:14  45  WHERE s.tkrdate = c.tkrdate(+)
06:55:14  46  /

Table created.

Elapsed: 00:00:01.03
06:55:16 SQL> 
06:55:16 SQL> -- rpt
06:55:16 SQL> 
06:55:16 SQL> SELECT
06:55:16   2  tkr
06:55:16   3  ,trend
06:55:16   4  ,gatt
06:55:16   5  ,COUNT(tkr)
06:55:16   6  ,AVG(g1)
06:55:16   7  ,AVG(sc_corr)
06:55:16   8  FROM stk_ms_svmd_svmspy
06:55:16   9  GROUP BY tkr,trend,gatt
06:55:16  10  ORDER BY tkr,trend,gatt
06:55:16  11  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ------------
FLS		  -1 nup       1333 -.52207052	 .000055957
FLS		  -1 up        1035 .785652174	 .001343949
FLS		   1 nup       1643 -.49112599	 -.00124203
FLS		   1 up        1235 .647506073	 -.00260576
FLS		   1		  1			  0

Elapsed: 00:00:00.01
06:55:16 SQL> 
06:55:16 SQL> SELECT
06:55:16   2  tkr
06:55:16   3  ,COUNT(tkr)
06:55:16   4  ,MIN(ydate),MAX(ydate)
06:55:16   5  FROM stk_ms_svmd_svmspy
06:55:16   6  GROUP BY tkr
06:55:16   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
FLS		5247 1990-03-26 00:00:00 2011-01-25 00:00:00

Elapsed: 00:00:00.01
06:55:16 SQL> 
06:55:16 SQL> -- exit
06:55:16 SQL> 
06:55:16 SQL> 
06:55:16 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.29
06:55:16 SQL> 
06:55:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
06:55:16 SQL> 
06:55:16 SQL> CREATE TABLE stk_ms_u COMPRESS AS
06:55:16   2  SELECT * FROM stk_ms_svmspy
06:55:16   3  UNION
06:55:16   4  SELECT * FROM stk_ms_svmd_svmspy
06:55:16   5  /

Table created.

Elapsed: 00:00:00.13
06:55:16 SQL> 
06:55:16 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
