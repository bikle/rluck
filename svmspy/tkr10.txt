
SQL*Plus: Release 11.2.0.1.0 Production on Wed Apr 20 20:07:06 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:07:08 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:07:08 SQL> 
20:07:08 SQL> 20:07:08 SQL> --
20:07:08 SQL> -- stk10u.sql
20:07:08 SQL> --
20:07:08 SQL> 
20:07:08 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
20:07:08 SQL> 
20:07:08 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
20:07:08 SQL> @stk10.sql     '&1'
20:07:08 SQL> --
20:07:08 SQL> -- stk10.sql
20:07:08 SQL> --
20:07:08 SQL> 
20:07:08 SQL> -- Creates views and tables for demonstrating SVM.
20:07:08 SQL> 
20:07:08 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.15
20:07:08 SQL> 
20:07:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.75
20:07:09 SQL> 
20:07:09 SQL> CREATE TABLE stk10svmspy COMPRESS AS
20:07:09   2  SELECT
20:07:09   3  tkr
20:07:09   4  ,ydate
20:07:09   5  ,tkr||ydate tkrdate
20:07:09   6  ,clse
20:07:09   7  ,clse2
20:07:09   8  ,rownum rnum -- acts as t in my time-series
20:07:09   9  -- g1 is important. I want to predict g1:
20:07:09  10  ,gain1day g1
20:07:09  11  -- Derive some attributes from clse.
20:07:09  12  -- Each row spans 5 minutes.
20:07:09  13  -- The number of rows in 1 day is 24*60/5.
20:07:09  14  -- I want the aggregations to span from 3 days to 9 days:
20:07:09  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
20:07:09  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
20:07:09  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
20:07:09  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
20:07:09  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
20:07:09  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
20:07:09  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
20:07:09  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
20:07:09  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
20:07:09  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
20:07:09  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
20:07:09  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
20:07:09  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
20:07:09  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
20:07:09  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
20:07:09  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
20:07:09  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
20:07:09  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
20:07:09  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
20:07:09  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
20:07:09  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
20:07:09  36  FROM di5min_stk_c2
20:07:09  37  WHERE UPPER(tkr)='&1'
20:07:09  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
20:07:09  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
20:07:09  40  ORDER BY ydate
20:07:09  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='BA'

Table created.

Elapsed: 00:00:00.90
20:07:10 SQL> 
20:07:10 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:07:10 SQL> 
20:07:10 SQL> -- rpt
20:07:10 SQL> 
20:07:10 SQL> SELECT
20:07:10   2  tkr
20:07:10   3  ,COUNT(tkr)ccount
20:07:10   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:07:10   5  -- ,MIN(avg4),MAX(avg4)
20:07:10   6  ,MIN(ydate),MAX(ydate)
20:07:10   7  ,MIN(g1)
20:07:10   8  ,MAX(g1)
20:07:10   9  FROM stk10svmspy
20:07:10  10  GROUP BY tkr
20:07:10  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
BA	      5850	66.51	 102.935 2011-01-04 14:30:00 2011-04-20 19:55:00 -28.421172	  2.85

Elapsed: 00:00:00.02
20:07:10 SQL> 
20:07:10 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:07:10 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.97
20:07:11 SQL> CREATE TABLE stk12svmspy COMPRESS AS
20:07:11   2  SELECT
20:07:11   3  tkr
20:07:11   4  ,ydate
20:07:11   5  ,tkrdate
20:07:11   6  ,clse
20:07:11   7  ,rnum
20:07:11   8  ,g1
20:07:11   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:07:11  10  -- I want more attributes from the ones I derived above:
20:07:11  11  -- clse relation to moving-min
20:07:11  12  ,clse-min3  cm3
20:07:11  13  ,clse-min4  cm4
20:07:11  14  ,clse-min5  cm5
20:07:11  15  ,clse-min6  cm6
20:07:11  16  ,clse-min7  cm7
20:07:11  17  ,clse-min8  cm8
20:07:11  18  ,clse-min9  cm9
20:07:11  19  -- clse relation to moving-avg
20:07:11  20  ,clse-avg3  ca3
20:07:11  21  ,clse-avg4  ca4
20:07:11  22  ,clse-avg5  ca5
20:07:11  23  ,clse-avg6  ca6
20:07:11  24  ,clse-avg7  ca7
20:07:11  25  ,clse-avg8  ca8
20:07:11  26  ,clse-avg9  ca9
20:07:11  27  -- clse relation to moving-max
20:07:11  28  ,clse-max3  cx3
20:07:11  29  ,clse-max4  cx4
20:07:11  30  ,clse-max5  cx5
20:07:11  31  ,clse-max6  cx6
20:07:11  32  ,clse-max7  cx7
20:07:11  33  ,clse-max8  cx8
20:07:11  34  ,clse-max9  cx9
20:07:11  35  -- Derive date related attributes:
20:07:11  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:07:11  37  ,0+TO_CHAR(ydate,'D')d
20:07:11  38  ,0+TO_CHAR(ydate,'W')w
20:07:11  39  -- mpm stands for minutes-past-midnight:
20:07:11  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:07:11  41  -- mph stands for minutes-past-hour:
20:07:11  42  ,0+TO_CHAR(ydate,'MI')mph
20:07:11  43  FROM stk10svmspy
20:07:11  44  ORDER BY ydate
20:07:11  45  /

Table created.

Elapsed: 00:00:00.23
20:07:11 SQL> 
20:07:11 SQL> -- rpt
20:07:11 SQL> 
20:07:11 SQL> SELECT
20:07:11   2  tkr
20:07:11   3  ,COUNT(tkr)ccount
20:07:11   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:07:11   5  -- ,MIN(avg4),MAX(avg4)
20:07:11   6  ,MIN(ydate),MAX(ydate)
20:07:11   7  ,MIN(g1)
20:07:11   8  ,AVG(g1)
20:07:11   9  ,MAX(g1)
20:07:11  10  FROM stk12svmspy
20:07:11  11  GROUP BY tkr
20:07:11  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
BA	      5850	66.51	 102.935 2011-01-04 14:30:00 2011-04-20 19:55:00 -28.421172   -.321548	     2.85

Elapsed: 00:00:00.02
20:07:11 SQL> 
20:07:11 SQL> -- Prepare for derivation of NTILE based parameters.
20:07:11 SQL> -- Also derive the "trend" parameter:
20:07:11 SQL> 
20:07:11 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.88
20:07:12 SQL> CREATE TABLE stk14svmspy COMPRESS AS
20:07:12   2  SELECT
20:07:12   3  tkr
20:07:12   4  ,ydate
20:07:12   5  ,tkrdate
20:07:12   6  ,clse
20:07:12   7  ,g1
20:07:12   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:07:12   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:07:12  10  ,CASE WHEN trend IS NULL THEN 1
20:07:12  11  	    WHEN trend =0      THEN 1
20:07:12  12  	    ELSE trend END trend
20:07:12  13  ,cm3
20:07:12  14  ,cm4
20:07:12  15  ,cm5
20:07:12  16  ,cm6
20:07:12  17  ,cm7
20:07:12  18  ,cm8
20:07:12  19  ,cm9
20:07:12  20  ,ca3
20:07:12  21  ,ca4
20:07:12  22  ,ca5
20:07:12  23  ,ca6
20:07:12  24  ,ca7
20:07:12  25  ,ca8
20:07:12  26  ,ca9
20:07:12  27  ,cx3
20:07:12  28  ,cx4
20:07:12  29  ,cx5
20:07:12  30  ,cx6
20:07:12  31  ,cx7
20:07:12  32  ,cx8
20:07:12  33  ,cx9
20:07:12  34  ,hh
20:07:12  35  ,d
20:07:12  36  ,w
20:07:12  37  ,mpm
20:07:12  38  ,mph
20:07:12  39  FROM stk12svmspy
20:07:12  40  -- Guard against divide by 0:
20:07:12  41  WHERE clse > 0
20:07:12  42  ORDER BY ydate
20:07:12  43  /

Table created.

Elapsed: 00:00:00.12
20:07:12 SQL> 
20:07:12 SQL> -- rpt
20:07:12 SQL> 
20:07:12 SQL> SELECT
20:07:12   2  tkr
20:07:12   3  ,trend
20:07:12   4  ,gatt
20:07:12   5  ,COUNT(tkr)
20:07:12   6  ,AVG(g1)
20:07:12   7  FROM stk14svmspy
20:07:12   8  GROUP BY tkr,trend,gatt
20:07:12   9  ORDER BY tkr,trend,gatt
20:07:12  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BA		-1 nup	      824 -.62350664
BA		-1 up	      857 1.10302713
BA		-1	       12
BA		 1 nup	     2372 -1.3767616
BA		 1 up	     1551 .665505297
BA		 1	      234

6 rows selected.

Elapsed: 00:00:00.02
20:07:12 SQL> 
20:07:12 SQL> -- Derive NTILE based params:
20:07:12 SQL> 
20:07:12 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
20:07:12 SQL> CREATE TABLE stk16svmspy COMPRESS AS
20:07:12   2  SELECT
20:07:12   3  tkr
20:07:12   4  ,ydate
20:07:12   5  ,tkrdate
20:07:12   6  ,clse
20:07:12   7  ,g1
20:07:12   8  ,gatt
20:07:12   9  ,gattn
20:07:12  10  ,trend
20:07:12  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:07:12  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:07:12  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:07:12  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:07:12  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:07:12  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:07:12  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:07:12  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:07:12  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:07:12  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:07:12  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:07:12  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:07:12  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:07:12  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:07:12  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:07:12  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:07:12  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:07:12  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:07:12  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:07:12  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:07:12  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:07:12  32  ,hh  att21
20:07:12  33  ,d   att22
20:07:12  34  ,w   att23
20:07:12  35  ,mpm att24
20:07:12  36  ,mph att25
20:07:12  37  ,trend att26
20:07:12  38  FROM stk14svmspy
20:07:12  39  ORDER BY ydate
20:07:12  40  /

Table created.

Elapsed: 00:00:00.82
20:07:13 SQL> 
20:07:13 SQL> -- rpt
20:07:13 SQL> 
20:07:13 SQL> SELECT
20:07:13   2  tkr
20:07:13   3  ,trend
20:07:13   4  ,gatt
20:07:13   5  ,COUNT(tkr)
20:07:13   6  ,AVG(g1)
20:07:13   7  FROM stk16svmspy
20:07:13   8  GROUP BY tkr,trend,gatt
20:07:13   9  ORDER BY tkr,trend,gatt
20:07:13  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BA		-1 nup	      824 -.62350664
BA		-1 up	      857 1.10302713
BA		-1	       12
BA		 1 nup	     2372 -1.3767616
BA		 1 up	     1551 .665505297
BA		 1	      234

6 rows selected.

Elapsed: 00:00:00.01
20:07:13 SQL> 
20:07:13 SQL> -- Comment out feedback related syntax:
20:07:13 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:07:13 SQL> -- SELECT
20:07:13 SQL> -- m.tkr
20:07:13 SQL> -- ,m.ydate
20:07:13 SQL> -- ,m.tkrdate
20:07:13 SQL> -- ,l.score score_long
20:07:13 SQL> -- ,s.score score_short
20:07:13 SQL> -- ,m.g1
20:07:13 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
20:07:13 SQL> -- WHERE l.targ='gatt'
20:07:13 SQL> -- AND	 s.targ='gattn'
20:07:13 SQL> -- AND l.tkrdate = s.tkrdate
20:07:13 SQL> -- AND l.tkrdate = m.tkrdate
20:07:13 SQL> -- -- Speed things up:
20:07:13 SQL> -- AND l.tkr = '&1'
20:07:13 SQL> -- AND s.tkr = '&1'
20:07:13 SQL> -- /
20:07:13 SQL> --
20:07:13 SQL> -- DROP TABLE score_corr_tkr;
20:07:13 SQL> --
20:07:13 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:07:13 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:07:13 SQL> -- (
20:07:13 SQL> --   SELECT
20:07:13 SQL> --   tkrdate
20:07:13 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:07:13 SQL> --   ,CORR((score_long - score_short),g1)
20:07:13 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
20:07:13 SQL> --   FROM sc12tkr
20:07:13 SQL> -- )
20:07:13 SQL> -- GROUP BY tkrdate
20:07:13 SQL> -- /
20:07:13 SQL> 
20:07:13 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:07:13 SQL> 
20:07:13 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.09
20:07:13 SQL> 
20:07:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
20:07:14 SQL> 
20:07:14 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
20:07:14   2  SELECT
20:07:14   3  tkr
20:07:14   4  ,ydate
20:07:14   5  ,tkrdate
20:07:14   6  ,trend
20:07:14   7  ,g1
20:07:14   8  ,gatt
20:07:14   9  ,gattn
20:07:14  10  -- Goodness attributes:
20:07:14  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
20:07:14  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
20:07:14  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
20:07:14  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
20:07:14  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
20:07:14  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
20:07:14  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
20:07:14  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
20:07:14  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
20:07:14  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
20:07:14  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
20:07:14  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
20:07:14  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
20:07:14  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
20:07:14  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
20:07:14  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
20:07:14  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
20:07:14  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
20:07:14  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
20:07:14  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
20:07:14  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
20:07:14  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
20:07:14  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
20:07:14  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
20:07:14  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
20:07:14  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
20:07:14  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
20:07:14  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:07:14  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
20:07:14  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
20:07:14  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
20:07:14  42  FROM stk16svmspy
20:07:14  43  /

Table created.

Elapsed: 00:00:01.08
20:07:15 SQL> 
20:07:15 SQL> -- rpt
20:07:15 SQL> 
20:07:15 SQL> SELECT
20:07:15   2  tkr
20:07:15   3  ,trend
20:07:15   4  ,gatt
20:07:15   5  ,COUNT(tkr)
20:07:15   6  ,AVG(g1)
20:07:15   7  FROM stk_ms_svmspy
20:07:15   8  GROUP BY tkr,trend,gatt
20:07:15   9  ORDER BY tkr,trend,gatt
20:07:15  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BA		-1 nup	      824 -.62350664
BA		-1 up	      857 1.10302713
BA		-1	       12
BA		 1 nup	     2372 -1.3767616
BA		 1 up	     1551 .665505297
BA		 1	      234

6 rows selected.

Elapsed: 00:00:00.03
20:07:15 SQL> 
20:07:15 SQL> SELECT
20:07:15   2  tkr
20:07:15   3  ,0+TO_CHAR(ydate,'D')daynum
20:07:15   4  ,COUNT(tkr)
20:07:15   5  ,MIN(ydate),MAX(ydate)
20:07:15   6  FROM stk_ms_svmspy
20:07:15   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
20:07:15   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
20:07:15   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
BA		 2	 1014 2011-01-10 14:30:00 2011-04-18 19:55:00
BA		 3	 1248 2011-01-04 14:30:00 2011-04-19 19:55:00
BA		 4	 1248 2011-01-05 14:30:00 2011-04-20 19:55:00
BA		 5	 1170 2011-01-06 14:30:00 2011-04-14 19:55:00
BA		 6	 1170 2011-01-07 14:30:00 2011-04-15 19:55:00

Elapsed: 00:00:00.01
20:07:15 SQL> 
20:07:15 SQL> -- exit
20:07:15 SQL> @stk10svmd.sql '&1'
20:07:15 SQL> --
20:07:15 SQL> -- stk10svmd.sql
20:07:15 SQL> --
20:07:15 SQL> 
20:07:15 SQL> -- Creates views and tables for demonstrating SVM.
20:07:15 SQL> -- I need to run this after I run stk10.sql
20:07:15 SQL> 
20:07:15 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.29
20:07:15 SQL> 
20:07:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.14
20:07:15 SQL> 
20:07:15 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
20:07:15   2  SELECT
20:07:15   3  tkr
20:07:15   4  ,ydate
20:07:15   5  ,tkr||ydate tkrdate
20:07:15   6  ,clse
20:07:15   7  ,rownum rnum -- acts as t in my time-series
20:07:15   8  -- Derive some attributes from clse.
20:07:15   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
20:07:15  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
20:07:15  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
20:07:15  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
20:07:15  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
20:07:15  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
20:07:15  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
20:07:15  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
20:07:15  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
20:07:15  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
20:07:15  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
20:07:15  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
20:07:15  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
20:07:15  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
20:07:15  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
20:07:15  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
20:07:15  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
20:07:15  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
20:07:15  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
20:07:15  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
20:07:15  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
20:07:15  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
20:07:15  31  -- ystk21 created here: svmd/cr_ystk21.sql
20:07:15  32  FROM ystk21
20:07:15  33  WHERE UPPER(tkr)='&1'
20:07:15  34  AND ydate > '1990-01-01'
20:07:15  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
20:07:15  36  ORDER BY ydate
20:07:15  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='BA'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='BA')

Table created.

Elapsed: 00:00:00.80
20:07:16 SQL> 
20:07:16 SQL> -- rpt
20:07:16 SQL> 
20:07:16 SQL> SELECT
20:07:16   2  tkr
20:07:16   3  ,COUNT(tkr)
20:07:16   4  ,MIN(clse),MAX(clse)
20:07:16   5  ,MIN(avg4),MAX(avg4)
20:07:16   6  ,MIN(ydate),MAX(ydate)
20:07:16   7  FROM stk_svmd10svmspy
20:07:16   8  GROUP BY tkr
20:07:16   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
BA		5323	  12.07      97.14     12.202	  95.946 1990-01-02 20:00:00 2011-04-19 20:00:00

Elapsed: 00:00:00.02
20:07:16 SQL> 
20:07:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:07:16 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:01.91
20:07:18 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
20:07:18   2  SELECT
20:07:18   3  tkr
20:07:18   4  ,ydate
20:07:18   5  ,tkrdate
20:07:18   6  ,clse
20:07:18   7  ,rnum
20:07:18   8  -- g1 is important. I want to predict g1:
20:07:18   9  ,ld - clse g1
20:07:18  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:07:18  11  -- I want more attributes from the ones I derived above:
20:07:18  12  -- clse relation to moving-min
20:07:18  13  ,clse-min3  cm3
20:07:18  14  ,clse-min4  cm4
20:07:18  15  ,clse-min5  cm5
20:07:18  16  ,clse-min6  cm6
20:07:18  17  ,clse-min7  cm7
20:07:18  18  ,clse-min8  cm8
20:07:18  19  ,clse-min9  cm9
20:07:18  20  -- clse relation to moving-avg
20:07:18  21  ,clse-avg3  ca3
20:07:18  22  ,clse-avg4  ca4
20:07:18  23  ,clse-avg5  ca5
20:07:18  24  ,clse-avg6  ca6
20:07:18  25  ,clse-avg7  ca7
20:07:18  26  ,clse-avg8  ca8
20:07:18  27  ,clse-avg9  ca9
20:07:18  28  -- clse relation to moving-max
20:07:18  29  ,clse-max3  cx3
20:07:18  30  ,clse-max4  cx4
20:07:18  31  ,clse-max5  cx5
20:07:18  32  ,clse-max6  cx6
20:07:18  33  ,clse-max7  cx7
20:07:18  34  ,clse-max8  cx8
20:07:18  35  ,clse-max9  cx9
20:07:18  36  -- Derive date related attributes:
20:07:18  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:07:18  38  ,0+TO_CHAR(ydate,'D')d
20:07:18  39  ,0+TO_CHAR(ydate,'W')w
20:07:18  40  -- mpm stands for minutes-past-midnight:
20:07:18  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:07:18  42  -- mph stands for minutes-past-hour:
20:07:18  43  ,0+TO_CHAR(ydate,'MI')mph
20:07:18  44  FROM stk_svmd10svmspy
20:07:18  45  ORDER BY ydate
20:07:18  46  /

Table created.

Elapsed: 00:00:00.18
20:07:18 SQL> 
20:07:18 SQL> -- rpt
20:07:18 SQL> 
20:07:18 SQL> SELECT
20:07:18   2  tkr
20:07:18   3  ,COUNT(tkr)
20:07:18   4  ,MIN(clse),MAX(clse)
20:07:18   5  ,MIN(ydate),MAX(ydate)
20:07:18   6  FROM stk_svmd12
20:07:18   7  GROUP BY tkr
20:07:18   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
BA		5323	  12.07      97.14 1990-01-02 20:00:00 2011-04-19 20:00:00

Elapsed: 00:00:00.01
20:07:18 SQL> 
20:07:18 SQL> -- Prepare for derivation of NTILE based parameters.
20:07:18 SQL> -- Also derive the "trend" parameter:
20:07:18 SQL> 
20:07:18 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
20:07:18 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
20:07:18   2  SELECT
20:07:18   3  tkr
20:07:18   4  ,ydate
20:07:18   5  ,tkrdate
20:07:18   6  ,clse
20:07:18   7  ,g1
20:07:18   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:07:18   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:07:18  10  ,CASE WHEN trend IS NULL THEN 1
20:07:18  11  	    WHEN trend =0      THEN 1
20:07:18  12  	    ELSE trend END trend
20:07:18  13  ,cm3
20:07:18  14  ,cm4
20:07:18  15  ,cm5
20:07:18  16  ,cm6
20:07:18  17  ,cm7
20:07:18  18  ,cm8
20:07:18  19  ,cm9
20:07:18  20  ,ca3
20:07:18  21  ,ca4
20:07:18  22  ,ca5
20:07:18  23  ,ca6
20:07:18  24  ,ca7
20:07:18  25  ,ca8
20:07:18  26  ,ca9
20:07:18  27  ,cx3
20:07:18  28  ,cx4
20:07:18  29  ,cx5
20:07:18  30  ,cx6
20:07:18  31  ,cx7
20:07:18  32  ,cx8
20:07:18  33  ,cx9
20:07:18  34  ,hh
20:07:18  35  ,d
20:07:18  36  ,w
20:07:18  37  ,mpm
20:07:18  38  ,mph
20:07:18  39  FROM stk_svmd12
20:07:18  40  -- Guard against divide by 0:
20:07:18  41  WHERE clse > 0
20:07:18  42  ORDER BY ydate
20:07:18  43  /

Table created.

Elapsed: 00:00:00.15
20:07:18 SQL> 
20:07:18 SQL> -- rpt
20:07:18 SQL> 
20:07:18 SQL> SELECT
20:07:18   2  tkr
20:07:18   3  ,trend
20:07:18   4  ,gatt
20:07:18   5  ,COUNT(tkr)
20:07:18   6  ,AVG(g1)
20:07:18   7  FROM stk_svmd14
20:07:18   8  GROUP BY tkr,trend,gatt
20:07:18   9  ORDER BY tkr,trend,gatt
20:07:18  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BA		  -1 nup       1380 -.49123188
BA		  -1 up        1106 .663092224
BA		  -1		  1
BA		   1 nup       1664 -.42705529
BA		   1 up        1172 .609675768

Elapsed: 00:00:00.01
20:07:18 SQL> 
20:07:18 SQL> -- Derive NTILE based params:
20:07:18 SQL> 
20:07:18 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.03
20:07:18 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
20:07:18   2  SELECT
20:07:18   3  tkr
20:07:18   4  ,ydate
20:07:18   5  ,tkrdate
20:07:18   6  ,clse
20:07:18   7  ,g1
20:07:18   8  ,gatt
20:07:18   9  ,gattn
20:07:18  10  ,trend
20:07:18  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:07:18  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:07:18  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:07:18  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:07:18  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:07:18  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:07:18  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:07:18  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:07:18  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:07:18  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:07:18  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:07:18  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:07:18  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:07:18  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:07:18  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:07:18  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:07:18  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:07:18  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:07:18  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:07:18  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:07:18  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:07:18  32  ,hh  att21
20:07:18  33  ,d   att22
20:07:18  34  ,w   att23
20:07:18  35  ,mpm att24
20:07:18  36  ,mph att25
20:07:18  37  ,trend att26
20:07:18  38  FROM stk_svmd14
20:07:18  39  ORDER BY ydate
20:07:18  40  /

Table created.

Elapsed: 00:00:00.57
20:07:19 SQL> 
20:07:19 SQL> -- rpt
20:07:19 SQL> 
20:07:19 SQL> SELECT
20:07:19   2  tkr
20:07:19   3  ,trend
20:07:19   4  ,gatt
20:07:19   5  ,COUNT(tkr)
20:07:19   6  ,AVG(g1)
20:07:19   7  FROM stk_svmd16
20:07:19   8  GROUP BY tkr,trend,gatt
20:07:19   9  ORDER BY tkr,trend,gatt
20:07:19  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BA		  -1 nup       1380 -.49123188
BA		  -1 up        1106 .663092224
BA		  -1		  1
BA		   1 nup       1664 -.42705529
BA		   1 up        1172 .609675768

Elapsed: 00:00:00.01
20:07:19 SQL> 
20:07:19 SQL> -- Comment out feedback related syntax:
20:07:19 SQL> 
20:07:19 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:07:19 SQL> -- SELECT
20:07:19 SQL> -- m.tkr
20:07:19 SQL> -- ,m.ydate
20:07:19 SQL> -- ,m.tkrdate
20:07:19 SQL> -- ,l.score score_long
20:07:19 SQL> -- ,s.score score_short
20:07:19 SQL> -- ,m.g1
20:07:19 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
20:07:19 SQL> -- WHERE l.targ='gatt'
20:07:19 SQL> -- AND	 s.targ='gattn'
20:07:19 SQL> -- AND l.tkrdate = s.tkrdate
20:07:19 SQL> -- AND l.tkrdate = m.tkrdate
20:07:19 SQL> -- -- Speed things up:
20:07:19 SQL> -- AND l.tkr = '&1'
20:07:19 SQL> -- AND s.tkr = '&1'
20:07:19 SQL> -- /
20:07:19 SQL> --
20:07:19 SQL> -- DROP TABLE score_corr_tkr;
20:07:19 SQL> --
20:07:19 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:07:19 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:07:19 SQL> -- (
20:07:19 SQL> --   SELECT
20:07:19 SQL> --   tkrdate
20:07:19 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:07:19 SQL> --   ,CORR((score_long - score_short),g1)
20:07:19 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
20:07:19 SQL> --   FROM sc12tkr
20:07:19 SQL> -- )
20:07:19 SQL> -- GROUP BY tkrdate
20:07:19 SQL> -- /
20:07:19 SQL> 
20:07:19 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:07:19 SQL> 
20:07:19 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
20:07:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
20:07:19 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
20:07:19   2  SELECT
20:07:19   3  tkr
20:07:19   4  ,ydate
20:07:19   5  ,tkrdate
20:07:19   6  ,trend
20:07:19   7  ,g1
20:07:19   8  ,gatt
20:07:19   9  ,gattn
20:07:19  10  -- Goodness attributes:
20:07:19  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
20:07:19  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
20:07:19  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
20:07:19  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
20:07:19  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
20:07:19  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
20:07:19  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
20:07:19  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
20:07:19  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
20:07:19  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
20:07:19  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
20:07:19  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
20:07:19  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
20:07:19  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
20:07:19  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
20:07:19  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
20:07:19  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
20:07:19  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
20:07:19  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
20:07:19  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
20:07:19  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
20:07:19  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
20:07:19  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
20:07:19  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
20:07:19  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
20:07:19  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
20:07:19  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
20:07:19  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:07:19  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
20:07:19  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
20:07:19  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
20:07:19  42  FROM stk_svmd16
20:07:19  43  /

Table created.

Elapsed: 00:00:01.01
20:07:20 SQL> 
20:07:20 SQL> -- rpt
20:07:20 SQL> 
20:07:20 SQL> SELECT
20:07:20   2  tkr
20:07:20   3  ,trend
20:07:20   4  ,gatt
20:07:20   5  ,COUNT(tkr)
20:07:20   6  ,AVG(g1)
20:07:20   7  FROM stk_ms_svmd_svmspy
20:07:20   8  GROUP BY tkr,trend,gatt
20:07:20   9  ORDER BY tkr,trend,gatt
20:07:20  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BA		  -1 nup       1380 -.49123188
BA		  -1 up        1106 .663092224
BA		  -1		  1
BA		   1 nup       1664 -.42705529
BA		   1 up        1172 .609675768

Elapsed: 00:00:00.01
20:07:20 SQL> 
20:07:20 SQL> SELECT
20:07:20   2  tkr
20:07:20   3  ,COUNT(tkr)
20:07:20   4  ,MIN(ydate),MAX(ydate)
20:07:20   5  FROM stk_ms_svmd_svmspy
20:07:20   6  GROUP BY tkr
20:07:20   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
BA		5323 1990-01-02 20:00:00 2011-04-19 20:00:00

Elapsed: 00:00:00.01
20:07:20 SQL> 
20:07:20 SQL> -- exit
20:07:20 SQL> 
20:07:20 SQL> 
20:07:20 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.03
20:07:20 SQL> 
20:07:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
20:07:20 SQL> 
20:07:20 SQL> CREATE TABLE stk_ms_u COMPRESS AS
20:07:20   2  SELECT * FROM stk_ms_svmspy
20:07:20   3  UNION
20:07:20   4  SELECT * FROM stk_ms_svmd_svmspy
20:07:20   5  /

Table created.

Elapsed: 00:00:00.25
20:07:21 SQL> 
20:07:21 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
