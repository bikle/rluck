
SQL*Plus: Release 11.2.0.1.0 Production on Sat Apr 16 20:41:00 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:41:00 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:41:00 SQL> 
20:41:00 SQL> 20:41:00 SQL> --
20:41:00 SQL> -- stk10u.sql
20:41:00 SQL> --
20:41:00 SQL> 
20:41:00 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
20:41:00 SQL> 
20:41:00 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
20:41:00 SQL> @stk10.sql     '&1'
20:41:00 SQL> --
20:41:00 SQL> -- stk10.sql
20:41:00 SQL> --
20:41:00 SQL> 
20:41:00 SQL> -- Creates views and tables for demonstrating SVM.
20:41:00 SQL> 
20:41:00 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.12
20:41:01 SQL> 
20:41:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
20:41:01 SQL> 
20:41:01 SQL> CREATE TABLE stk10svmspy COMPRESS AS
20:41:01   2  SELECT
20:41:01   3  tkr
20:41:01   4  ,ydate
20:41:01   5  ,tkr||ydate tkrdate
20:41:01   6  ,clse
20:41:01   7  ,clse2
20:41:01   8  ,rownum rnum -- acts as t in my time-series
20:41:01   9  -- g1 is important. I want to predict g1:
20:41:01  10  ,gain1day g1
20:41:01  11  -- Derive some attributes from clse.
20:41:01  12  -- Each row spans 5 minutes.
20:41:01  13  -- The number of rows in 1 day is 24*60/5.
20:41:01  14  -- I want the aggregations to span from 3 days to 9 days:
20:41:01  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
20:41:01  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
20:41:01  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
20:41:01  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
20:41:01  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
20:41:01  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
20:41:01  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
20:41:01  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
20:41:01  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
20:41:01  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
20:41:01  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
20:41:01  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
20:41:01  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
20:41:01  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
20:41:01  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
20:41:01  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
20:41:01  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
20:41:01  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
20:41:01  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
20:41:01  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
20:41:01  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
20:41:01  36  FROM di5min_stk_c2
20:41:01  37  WHERE UPPER(tkr)='&1'
20:41:01  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
20:41:01  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
20:41:01  40  ORDER BY ydate
20:41:01  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='DE'

Table created.

Elapsed: 00:00:01.37
20:41:02 SQL> 
20:41:02 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
20:41:02 SQL> 
20:41:02 SQL> -- rpt
20:41:02 SQL> 
20:41:02 SQL> SELECT
20:41:02   2  tkr
20:41:02   3  ,COUNT(tkr)ccount
20:41:02   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:41:02   5  -- ,MIN(avg4),MAX(avg4)
20:41:02   6  ,MIN(ydate),MAX(ydate)
20:41:02   7  ,MIN(g1)
20:41:02   8  ,MAX(g1)
20:41:02   9  FROM stk10svmspy
20:41:02  10  GROUP BY tkr
20:41:02  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
DE	      5616	81.82	    99.8 2011-01-04 14:30:00 2011-04-15 19:55:00       -6.8	  3.93

Elapsed: 00:00:00.01
20:41:02 SQL> 
20:41:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:41:02 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.04
20:41:02 SQL> CREATE TABLE stk12svmspy COMPRESS AS
20:41:02   2  SELECT
20:41:02   3  tkr
20:41:02   4  ,ydate
20:41:02   5  ,tkrdate
20:41:02   6  ,clse
20:41:02   7  ,rnum
20:41:02   8  ,g1
20:41:02   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:41:02  10  -- I want more attributes from the ones I derived above:
20:41:02  11  -- clse relation to moving-min
20:41:02  12  ,clse-min3  cm3
20:41:02  13  ,clse-min4  cm4
20:41:02  14  ,clse-min5  cm5
20:41:02  15  ,clse-min6  cm6
20:41:02  16  ,clse-min7  cm7
20:41:02  17  ,clse-min8  cm8
20:41:02  18  ,clse-min9  cm9
20:41:02  19  -- clse relation to moving-avg
20:41:02  20  ,clse-avg3  ca3
20:41:02  21  ,clse-avg4  ca4
20:41:02  22  ,clse-avg5  ca5
20:41:02  23  ,clse-avg6  ca6
20:41:02  24  ,clse-avg7  ca7
20:41:02  25  ,clse-avg8  ca8
20:41:02  26  ,clse-avg9  ca9
20:41:02  27  -- clse relation to moving-max
20:41:02  28  ,clse-max3  cx3
20:41:02  29  ,clse-max4  cx4
20:41:02  30  ,clse-max5  cx5
20:41:02  31  ,clse-max6  cx6
20:41:02  32  ,clse-max7  cx7
20:41:02  33  ,clse-max8  cx8
20:41:02  34  ,clse-max9  cx9
20:41:02  35  -- Derive date related attributes:
20:41:02  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:41:02  37  ,0+TO_CHAR(ydate,'D')d
20:41:02  38  ,0+TO_CHAR(ydate,'W')w
20:41:02  39  -- mpm stands for minutes-past-midnight:
20:41:02  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:41:02  41  -- mph stands for minutes-past-hour:
20:41:02  42  ,0+TO_CHAR(ydate,'MI')mph
20:41:02  43  FROM stk10svmspy
20:41:02  44  ORDER BY ydate
20:41:02  45  /

Table created.

Elapsed: 00:00:00.16
20:41:02 SQL> 
20:41:02 SQL> -- rpt
20:41:02 SQL> 
20:41:02 SQL> SELECT
20:41:02   2  tkr
20:41:02   3  ,COUNT(tkr)ccount
20:41:02   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:41:02   5  -- ,MIN(avg4),MAX(avg4)
20:41:02   6  ,MIN(ydate),MAX(ydate)
20:41:02   7  ,MIN(g1)
20:41:02   8  ,AVG(g1)
20:41:02   9  ,MAX(g1)
20:41:02  10  FROM stk12svmspy
20:41:02  11  GROUP BY tkr
20:41:02  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
DE	      5616	81.82	    99.8 2011-01-04 14:30:00 2011-04-15 19:55:00       -6.8 .166433892	     3.93

Elapsed: 00:00:00.02
20:41:02 SQL> 
20:41:02 SQL> -- Prepare for derivation of NTILE based parameters.
20:41:02 SQL> -- Also derive the "trend" parameter:
20:41:02 SQL> 
20:41:02 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.11
20:41:03 SQL> CREATE TABLE stk14svmspy COMPRESS AS
20:41:03   2  SELECT
20:41:03   3  tkr
20:41:03   4  ,ydate
20:41:03   5  ,tkrdate
20:41:03   6  ,clse
20:41:03   7  ,g1
20:41:03   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:41:03   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:41:03  10  ,CASE WHEN trend IS NULL THEN 1
20:41:03  11  	    WHEN trend =0      THEN 1
20:41:03  12  	    ELSE trend END trend
20:41:03  13  ,cm3
20:41:03  14  ,cm4
20:41:03  15  ,cm5
20:41:03  16  ,cm6
20:41:03  17  ,cm7
20:41:03  18  ,cm8
20:41:03  19  ,cm9
20:41:03  20  ,ca3
20:41:03  21  ,ca4
20:41:03  22  ,ca5
20:41:03  23  ,ca6
20:41:03  24  ,ca7
20:41:03  25  ,ca8
20:41:03  26  ,ca9
20:41:03  27  ,cx3
20:41:03  28  ,cx4
20:41:03  29  ,cx5
20:41:03  30  ,cx6
20:41:03  31  ,cx7
20:41:03  32  ,cx8
20:41:03  33  ,cx9
20:41:03  34  ,hh
20:41:03  35  ,d
20:41:03  36  ,w
20:41:03  37  ,mpm
20:41:03  38  ,mph
20:41:03  39  FROM stk12svmspy
20:41:03  40  -- Guard against divide by 0:
20:41:03  41  WHERE clse > 0
20:41:03  42  ORDER BY ydate
20:41:03  43  /

Table created.

Elapsed: 00:00:00.15
20:41:03 SQL> 
20:41:03 SQL> -- rpt
20:41:03 SQL> 
20:41:03 SQL> SELECT
20:41:03   2  tkr
20:41:03   3  ,trend
20:41:03   4  ,gatt
20:41:03   5  ,COUNT(tkr)
20:41:03   6  ,AVG(g1)
20:41:03   7  FROM stk14svmspy
20:41:03   8  GROUP BY tkr,trend,gatt
20:41:03   9  ORDER BY tkr,trend,gatt
20:41:03  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
DE		-1 nup	      723 -1.0352694
DE		-1 up	      750 1.50463779
DE		-1	       90
DE		 1 nup	     2199 -.80652662
DE		 1 up	     1698  1.3470692
DE		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
20:41:03 SQL> 
20:41:03 SQL> -- Derive NTILE based params:
20:41:03 SQL> 
20:41:03 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.03
20:41:03 SQL> CREATE TABLE stk16svmspy COMPRESS AS
20:41:03   2  SELECT
20:41:03   3  tkr
20:41:03   4  ,ydate
20:41:03   5  ,tkrdate
20:41:03   6  ,clse
20:41:03   7  ,g1
20:41:03   8  ,gatt
20:41:03   9  ,gattn
20:41:03  10  ,trend
20:41:03  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:41:03  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:41:03  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:41:03  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:41:03  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:41:03  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:41:03  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:41:03  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:41:03  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:41:03  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:41:03  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:41:03  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:41:03  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:41:03  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:41:03  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:41:03  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:41:03  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:41:03  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:41:03  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:41:03  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:41:03  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:41:03  32  ,hh  att21
20:41:03  33  ,d   att22
20:41:03  34  ,w   att23
20:41:03  35  ,mpm att24
20:41:03  36  ,mph att25
20:41:03  37  ,trend att26
20:41:03  38  FROM stk14svmspy
20:41:03  39  ORDER BY ydate
20:41:03  40  /

Table created.

Elapsed: 00:00:00.66
20:41:03 SQL> 
20:41:03 SQL> -- rpt
20:41:03 SQL> 
20:41:03 SQL> SELECT
20:41:03   2  tkr
20:41:03   3  ,trend
20:41:03   4  ,gatt
20:41:03   5  ,COUNT(tkr)
20:41:03   6  ,AVG(g1)
20:41:03   7  FROM stk16svmspy
20:41:03   8  GROUP BY tkr,trend,gatt
20:41:03   9  ORDER BY tkr,trend,gatt
20:41:03  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
DE		-1 nup	      723 -1.0352694
DE		-1 up	      750 1.50463779
DE		-1	       90
DE		 1 nup	     2199 -.80652662
DE		 1 up	     1698  1.3470692
DE		 1	      156

6 rows selected.

Elapsed: 00:00:00.02
20:41:03 SQL> 
20:41:03 SQL> -- Comment out feedback related syntax:
20:41:03 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:41:03 SQL> -- SELECT
20:41:03 SQL> -- m.tkr
20:41:03 SQL> -- ,m.ydate
20:41:03 SQL> -- ,m.tkrdate
20:41:03 SQL> -- ,l.score score_long
20:41:03 SQL> -- ,s.score score_short
20:41:03 SQL> -- ,m.g1
20:41:03 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
20:41:03 SQL> -- WHERE l.targ='gatt'
20:41:03 SQL> -- AND	 s.targ='gattn'
20:41:03 SQL> -- AND l.tkrdate = s.tkrdate
20:41:03 SQL> -- AND l.tkrdate = m.tkrdate
20:41:03 SQL> -- -- Speed things up:
20:41:03 SQL> -- AND l.tkr = '&1'
20:41:03 SQL> -- AND s.tkr = '&1'
20:41:03 SQL> -- /
20:41:03 SQL> --
20:41:03 SQL> -- DROP TABLE score_corr_tkr;
20:41:03 SQL> --
20:41:03 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:41:03 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:41:03 SQL> -- (
20:41:03 SQL> --   SELECT
20:41:03 SQL> --   tkrdate
20:41:03 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:41:03 SQL> --   ,CORR((score_long - score_short),g1)
20:41:03 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
20:41:03 SQL> --   FROM sc12tkr
20:41:03 SQL> -- )
20:41:03 SQL> -- GROUP BY tkrdate
20:41:03 SQL> -- /
20:41:03 SQL> 
20:41:03 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:41:03 SQL> 
20:41:03 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.05
20:41:04 SQL> 
20:41:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.25
20:41:04 SQL> 
20:41:04 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
20:41:04   2  SELECT
20:41:04   3  tkr
20:41:04   4  ,ydate
20:41:04   5  ,tkrdate
20:41:04   6  ,trend
20:41:04   7  ,g1
20:41:04   8  ,gatt
20:41:04   9  ,gattn
20:41:04  10  -- Goodness attributes:
20:41:04  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
20:41:04  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
20:41:04  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
20:41:04  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
20:41:04  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
20:41:04  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
20:41:04  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
20:41:04  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
20:41:04  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
20:41:04  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
20:41:04  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
20:41:04  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
20:41:04  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
20:41:04  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
20:41:04  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
20:41:04  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
20:41:04  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
20:41:04  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
20:41:04  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
20:41:04  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
20:41:04  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
20:41:04  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
20:41:04  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
20:41:04  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
20:41:04  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
20:41:04  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
20:41:04  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
20:41:04  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:41:04  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
20:41:04  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
20:41:04  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
20:41:04  42  FROM stk16svmspy
20:41:04  43  /

Table created.

Elapsed: 00:00:00.96
20:41:05 SQL> 
20:41:05 SQL> -- rpt
20:41:05 SQL> 
20:41:05 SQL> SELECT
20:41:05   2  tkr
20:41:05   3  ,trend
20:41:05   4  ,gatt
20:41:05   5  ,COUNT(tkr)
20:41:05   6  ,AVG(g1)
20:41:05   7  FROM stk_ms_svmspy
20:41:05   8  GROUP BY tkr,trend,gatt
20:41:05   9  ORDER BY tkr,trend,gatt
20:41:05  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
DE		-1 nup	      723 -1.0352694
DE		-1 up	      750 1.50463779
DE		-1	       90
DE		 1 nup	     2199 -.80652662
DE		 1 up	     1698  1.3470692
DE		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
20:41:05 SQL> 
20:41:05 SQL> SELECT
20:41:05   2  tkr
20:41:05   3  ,0+TO_CHAR(ydate,'D')daynum
20:41:05   4  ,COUNT(tkr)
20:41:05   5  ,MIN(ydate),MAX(ydate)
20:41:05   6  FROM stk_ms_svmspy
20:41:05   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
20:41:05   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
20:41:05   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
DE		 2	  936 2011-01-10 14:30:00 2011-04-11 19:55:00
DE		 3	 1170 2011-01-04 14:30:00 2011-04-12 19:55:00
DE		 4	 1170 2011-01-05 14:30:00 2011-04-13 19:55:00
DE		 5	 1170 2011-01-06 14:30:00 2011-04-14 19:55:00
DE		 6	 1170 2011-01-07 14:30:00 2011-04-15 19:55:00

Elapsed: 00:00:00.01
20:41:05 SQL> 
20:41:05 SQL> -- exit
20:41:05 SQL> @stk10svmd.sql '&1'
20:41:05 SQL> --
20:41:05 SQL> -- stk10svmd.sql
20:41:05 SQL> --
20:41:05 SQL> 
20:41:05 SQL> -- Creates views and tables for demonstrating SVM.
20:41:05 SQL> -- I need to run this after I run stk10.sql
20:41:05 SQL> 
20:41:05 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.05
20:41:05 SQL> 
20:41:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
20:41:05 SQL> 
20:41:05 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
20:41:05   2  SELECT
20:41:05   3  tkr
20:41:05   4  ,ydate
20:41:05   5  ,tkr||ydate tkrdate
20:41:05   6  ,clse
20:41:05   7  ,rownum rnum -- acts as t in my time-series
20:41:05   8  -- Derive some attributes from clse.
20:41:05   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
20:41:05  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
20:41:05  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
20:41:05  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
20:41:05  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
20:41:05  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
20:41:05  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
20:41:05  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
20:41:05  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
20:41:05  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
20:41:05  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
20:41:05  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
20:41:05  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
20:41:05  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
20:41:05  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
20:41:05  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
20:41:05  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
20:41:05  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
20:41:05  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
20:41:05  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
20:41:05  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
20:41:05  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
20:41:05  31  -- ystk21 created here: svmd/cr_ystk21.sql
20:41:05  32  FROM ystk21
20:41:05  33  WHERE UPPER(tkr)='&1'
20:41:05  34  AND ydate > '1990-01-01'
20:41:05  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
20:41:05  36  ORDER BY ydate
20:41:05  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='DE'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='DE')

Table created.

Elapsed: 00:00:00.45
20:41:05 SQL> 
20:41:05 SQL> -- rpt
20:41:05 SQL> 
20:41:05 SQL> SELECT
20:41:05   2  tkr
20:41:05   3  ,COUNT(tkr)
20:41:05   4  ,MIN(clse),MAX(clse)
20:41:05   5  ,MIN(avg4),MAX(avg4)
20:41:05   6  ,MIN(ydate),MAX(ydate)
20:41:05   7  FROM stk_svmd10svmspy
20:41:05   8  GROUP BY tkr
20:41:05   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
DE		5314	   2.92      99.24	    3	   97.99 1990-01-02 20:00:00 2011-04-14 20:00:00

Elapsed: 00:00:00.01
20:41:05 SQL> 
20:41:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:41:05 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
20:41:05 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
20:41:05   2  SELECT
20:41:05   3  tkr
20:41:05   4  ,ydate
20:41:05   5  ,tkrdate
20:41:05   6  ,clse
20:41:05   7  ,rnum
20:41:05   8  -- g1 is important. I want to predict g1:
20:41:05   9  ,ld - clse g1
20:41:05  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:41:05  11  -- I want more attributes from the ones I derived above:
20:41:05  12  -- clse relation to moving-min
20:41:05  13  ,clse-min3  cm3
20:41:05  14  ,clse-min4  cm4
20:41:05  15  ,clse-min5  cm5
20:41:05  16  ,clse-min6  cm6
20:41:05  17  ,clse-min7  cm7
20:41:05  18  ,clse-min8  cm8
20:41:05  19  ,clse-min9  cm9
20:41:05  20  -- clse relation to moving-avg
20:41:05  21  ,clse-avg3  ca3
20:41:05  22  ,clse-avg4  ca4
20:41:05  23  ,clse-avg5  ca5
20:41:05  24  ,clse-avg6  ca6
20:41:05  25  ,clse-avg7  ca7
20:41:05  26  ,clse-avg8  ca8
20:41:05  27  ,clse-avg9  ca9
20:41:05  28  -- clse relation to moving-max
20:41:05  29  ,clse-max3  cx3
20:41:05  30  ,clse-max4  cx4
20:41:05  31  ,clse-max5  cx5
20:41:05  32  ,clse-max6  cx6
20:41:05  33  ,clse-max7  cx7
20:41:05  34  ,clse-max8  cx8
20:41:05  35  ,clse-max9  cx9
20:41:05  36  -- Derive date related attributes:
20:41:05  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:41:05  38  ,0+TO_CHAR(ydate,'D')d
20:41:05  39  ,0+TO_CHAR(ydate,'W')w
20:41:05  40  -- mpm stands for minutes-past-midnight:
20:41:05  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:41:05  42  -- mph stands for minutes-past-hour:
20:41:05  43  ,0+TO_CHAR(ydate,'MI')mph
20:41:05  44  FROM stk_svmd10svmspy
20:41:05  45  ORDER BY ydate
20:41:05  46  /

Table created.

Elapsed: 00:00:00.18
20:41:06 SQL> 
20:41:06 SQL> -- rpt
20:41:06 SQL> 
20:41:06 SQL> SELECT
20:41:06   2  tkr
20:41:06   3  ,COUNT(tkr)
20:41:06   4  ,MIN(clse),MAX(clse)
20:41:06   5  ,MIN(ydate),MAX(ydate)
20:41:06   6  FROM stk_svmd12
20:41:06   7  GROUP BY tkr
20:41:06   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
DE		5314	   2.92      99.24 1990-01-02 20:00:00 2011-04-14 20:00:00

Elapsed: 00:00:00.01
20:41:06 SQL> 
20:41:06 SQL> -- Prepare for derivation of NTILE based parameters.
20:41:06 SQL> -- Also derive the "trend" parameter:
20:41:06 SQL> 
20:41:06 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.06
20:41:06 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
20:41:06   2  SELECT
20:41:06   3  tkr
20:41:06   4  ,ydate
20:41:06   5  ,tkrdate
20:41:06   6  ,clse
20:41:06   7  ,g1
20:41:06   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:41:06   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:41:06  10  ,CASE WHEN trend IS NULL THEN 1
20:41:06  11  	    WHEN trend =0      THEN 1
20:41:06  12  	    ELSE trend END trend
20:41:06  13  ,cm3
20:41:06  14  ,cm4
20:41:06  15  ,cm5
20:41:06  16  ,cm6
20:41:06  17  ,cm7
20:41:06  18  ,cm8
20:41:06  19  ,cm9
20:41:06  20  ,ca3
20:41:06  21  ,ca4
20:41:06  22  ,ca5
20:41:06  23  ,ca6
20:41:06  24  ,ca7
20:41:06  25  ,ca8
20:41:06  26  ,ca9
20:41:06  27  ,cx3
20:41:06  28  ,cx4
20:41:06  29  ,cx5
20:41:06  30  ,cx6
20:41:06  31  ,cx7
20:41:06  32  ,cx8
20:41:06  33  ,cx9
20:41:06  34  ,hh
20:41:06  35  ,d
20:41:06  36  ,w
20:41:06  37  ,mpm
20:41:06  38  ,mph
20:41:06  39  FROM stk_svmd12
20:41:06  40  -- Guard against divide by 0:
20:41:06  41  WHERE clse > 0
20:41:06  42  ORDER BY ydate
20:41:06  43  /

Table created.

Elapsed: 00:00:00.11
20:41:06 SQL> 
20:41:06 SQL> -- rpt
20:41:06 SQL> 
20:41:06 SQL> SELECT
20:41:06   2  tkr
20:41:06   3  ,trend
20:41:06   4  ,gatt
20:41:06   5  ,COUNT(tkr)
20:41:06   6  ,AVG(g1)
20:41:06   7  FROM stk_svmd14
20:41:06   8  GROUP BY tkr,trend,gatt
20:41:06   9  ORDER BY tkr,trend,gatt
20:41:06  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
DE		  -1 nup       1353 -.34339246
DE		  -1 up        1060 .506518868
DE		  -1		  1
DE		   1 nup       1665 -.32453453
DE		   1 up        1235 .451651822

Elapsed: 00:00:00.01
20:41:06 SQL> 
20:41:06 SQL> -- Derive NTILE based params:
20:41:06 SQL> 
20:41:06 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.03
20:41:06 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
20:41:06   2  SELECT
20:41:06   3  tkr
20:41:06   4  ,ydate
20:41:06   5  ,tkrdate
20:41:06   6  ,clse
20:41:06   7  ,g1
20:41:06   8  ,gatt
20:41:06   9  ,gattn
20:41:06  10  ,trend
20:41:06  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:41:06  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:41:06  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:41:06  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:41:06  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:41:06  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:41:06  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:41:06  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:41:06  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:41:06  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:41:06  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:41:06  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:41:06  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:41:06  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:41:06  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:41:06  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:41:06  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:41:06  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:41:06  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:41:06  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:41:06  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:41:06  32  ,hh  att21
20:41:06  33  ,d   att22
20:41:06  34  ,w   att23
20:41:06  35  ,mpm att24
20:41:06  36  ,mph att25
20:41:06  37  ,trend att26
20:41:06  38  FROM stk_svmd14
20:41:06  39  ORDER BY ydate
20:41:06  40  /

Table created.

Elapsed: 00:00:00.55
20:41:06 SQL> 
20:41:06 SQL> -- rpt
20:41:06 SQL> 
20:41:06 SQL> SELECT
20:41:06   2  tkr
20:41:06   3  ,trend
20:41:06   4  ,gatt
20:41:06   5  ,COUNT(tkr)
20:41:06   6  ,AVG(g1)
20:41:06   7  FROM stk_svmd16
20:41:06   8  GROUP BY tkr,trend,gatt
20:41:06   9  ORDER BY tkr,trend,gatt
20:41:06  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
DE		  -1 nup       1353 -.34339246
DE		  -1 up        1060 .506518868
DE		  -1		  1
DE		   1 nup       1665 -.32453453
DE		   1 up        1235 .451651822

Elapsed: 00:00:00.01
20:41:06 SQL> 
20:41:06 SQL> -- Comment out feedback related syntax:
20:41:06 SQL> 
20:41:06 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:41:06 SQL> -- SELECT
20:41:06 SQL> -- m.tkr
20:41:06 SQL> -- ,m.ydate
20:41:06 SQL> -- ,m.tkrdate
20:41:06 SQL> -- ,l.score score_long
20:41:06 SQL> -- ,s.score score_short
20:41:06 SQL> -- ,m.g1
20:41:06 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
20:41:06 SQL> -- WHERE l.targ='gatt'
20:41:06 SQL> -- AND	 s.targ='gattn'
20:41:06 SQL> -- AND l.tkrdate = s.tkrdate
20:41:06 SQL> -- AND l.tkrdate = m.tkrdate
20:41:06 SQL> -- -- Speed things up:
20:41:06 SQL> -- AND l.tkr = '&1'
20:41:06 SQL> -- AND s.tkr = '&1'
20:41:06 SQL> -- /
20:41:06 SQL> --
20:41:06 SQL> -- DROP TABLE score_corr_tkr;
20:41:06 SQL> --
20:41:06 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:41:06 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:41:06 SQL> -- (
20:41:06 SQL> --   SELECT
20:41:06 SQL> --   tkrdate
20:41:06 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:41:06 SQL> --   ,CORR((score_long - score_short),g1)
20:41:06 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
20:41:06 SQL> --   FROM sc12tkr
20:41:06 SQL> -- )
20:41:06 SQL> -- GROUP BY tkrdate
20:41:06 SQL> -- /
20:41:06 SQL> 
20:41:06 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:41:06 SQL> 
20:41:06 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
20:41:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
20:41:07 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
20:41:07   2  SELECT
20:41:07   3  tkr
20:41:07   4  ,ydate
20:41:07   5  ,tkrdate
20:41:07   6  ,trend
20:41:07   7  ,g1
20:41:07   8  ,gatt
20:41:07   9  ,gattn
20:41:07  10  -- Goodness attributes:
20:41:07  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
20:41:07  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
20:41:07  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
20:41:07  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
20:41:07  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
20:41:07  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
20:41:07  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
20:41:07  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
20:41:07  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
20:41:07  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
20:41:07  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
20:41:07  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
20:41:07  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
20:41:07  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
20:41:07  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
20:41:07  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
20:41:07  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
20:41:07  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
20:41:07  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
20:41:07  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
20:41:07  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
20:41:07  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
20:41:07  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
20:41:07  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
20:41:07  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
20:41:07  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
20:41:07  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
20:41:07  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:41:07  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
20:41:07  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
20:41:07  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
20:41:07  42  FROM stk_svmd16
20:41:07  43  /

Table created.

Elapsed: 00:00:00.94
20:41:08 SQL> 
20:41:08 SQL> -- rpt
20:41:08 SQL> 
20:41:08 SQL> SELECT
20:41:08   2  tkr
20:41:08   3  ,trend
20:41:08   4  ,gatt
20:41:08   5  ,COUNT(tkr)
20:41:08   6  ,AVG(g1)
20:41:08   7  FROM stk_ms_svmd_svmspy
20:41:08   8  GROUP BY tkr,trend,gatt
20:41:08   9  ORDER BY tkr,trend,gatt
20:41:08  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
DE		  -1 nup       1353 -.34339246
DE		  -1 up        1060 .506518868
DE		  -1		  1
DE		   1 nup       1665 -.32453453
DE		   1 up        1235 .451651822

Elapsed: 00:00:00.02
20:41:08 SQL> 
20:41:08 SQL> SELECT
20:41:08   2  tkr
20:41:08   3  ,COUNT(tkr)
20:41:08   4  ,MIN(ydate),MAX(ydate)
20:41:08   5  FROM stk_ms_svmd_svmspy
20:41:08   6  GROUP BY tkr
20:41:08   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
DE		5314 1990-01-02 20:00:00 2011-04-14 20:00:00

Elapsed: 00:00:00.01
20:41:08 SQL> 
20:41:08 SQL> -- exit
20:41:08 SQL> 
20:41:08 SQL> 
20:41:08 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.04
20:41:08 SQL> 
20:41:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
20:41:08 SQL> 
20:41:08 SQL> CREATE TABLE stk_ms_u COMPRESS AS
20:41:08   2  SELECT * FROM stk_ms_svmspy
20:41:08   3  UNION
20:41:08   4  SELECT * FROM stk_ms_svmd_svmspy
20:41:08   5  /

Table created.

Elapsed: 00:00:00.27
20:41:08 SQL> 
20:41:08 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
