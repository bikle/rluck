
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 26 16:12:30 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

16:12:30 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
16:12:30 SQL> 
16:12:30 SQL> 16:12:30 SQL> --
16:12:30 SQL> -- stk10u.sql
16:12:30 SQL> --
16:12:30 SQL> 
16:12:30 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
16:12:30 SQL> 
16:12:30 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
16:12:30 SQL> @stk10.sql     '&1'
16:12:30 SQL> --
16:12:30 SQL> -- stk10.sql
16:12:30 SQL> --
16:12:30 SQL> 
16:12:30 SQL> -- Creates views and tables for demonstrating SVM.
16:12:30 SQL> 
16:12:30 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.10
16:12:30 SQL> 
16:12:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.25
16:12:30 SQL> 
16:12:30 SQL> CREATE TABLE stk10svmspy COMPRESS AS
16:12:30   2  SELECT
16:12:30   3  tkr
16:12:30   4  ,ydate
16:12:30   5  ,tkr||ydate tkrdate
16:12:30   6  ,clse
16:12:30   7  ,clse2
16:12:30   8  ,rownum rnum -- acts as t in my time-series
16:12:30   9  -- g1 is important. I want to predict g1:
16:12:30  10  ,gain1day g1
16:12:30  11  -- Derive some attributes from clse.
16:12:30  12  -- Each row spans 5 minutes.
16:12:30  13  -- The number of rows in 1 day is 24*60/5.
16:12:30  14  -- I want the aggregations to span from 3 days to 9 days:
16:12:30  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
16:12:30  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
16:12:30  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
16:12:30  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
16:12:30  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
16:12:30  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
16:12:30  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
16:12:30  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
16:12:30  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
16:12:30  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
16:12:30  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
16:12:30  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
16:12:30  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
16:12:30  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
16:12:30  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
16:12:30  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
16:12:30  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
16:12:30  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
16:12:30  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
16:12:30  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
16:12:30  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
16:12:30  36  FROM di5min_stk_c2
16:12:30  37  WHERE UPPER(tkr)='&1'
16:12:30  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
16:12:30  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
16:12:30  40  ORDER BY ydate
16:12:30  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='IWM'

Table created.

Elapsed: 00:00:00.26
16:12:31 SQL> 
16:12:31 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.07
16:12:31 SQL> 
16:12:31 SQL> -- rpt
16:12:31 SQL> 
16:12:31 SQL> SELECT
16:12:31   2  tkr
16:12:31   3  ,COUNT(tkr)ccount
16:12:31   4  ,MIN(clse)mnclse,MAX(clse)mxclse
16:12:31   5  -- ,MIN(avg4),MAX(avg4)
16:12:31   6  ,MIN(ydate),MAX(ydate)
16:12:31   7  ,MIN(g1)
16:12:31   8  ,MAX(g1)
16:12:31   9  FROM stk10svmspy
16:12:31  10  GROUP BY tkr
16:12:31  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
IWM	      1190	77.04	   80.62 2011-01-04 14:30:00 2011-01-26 16:05:00      -2.78	  1.95

Elapsed: 00:00:00.01
16:12:31 SQL> 
16:12:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:12:31 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.10
16:12:31 SQL> CREATE TABLE stk12svmspy COMPRESS AS
16:12:31   2  SELECT
16:12:31   3  tkr
16:12:31   4  ,ydate
16:12:31   5  ,tkrdate
16:12:31   6  ,clse
16:12:31   7  ,rnum
16:12:31   8  ,g1
16:12:31   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
16:12:31  10  -- I want more attributes from the ones I derived above:
16:12:31  11  -- clse relation to moving-min
16:12:31  12  ,clse-min3  cm3
16:12:31  13  ,clse-min4  cm4
16:12:31  14  ,clse-min5  cm5
16:12:31  15  ,clse-min6  cm6
16:12:31  16  ,clse-min7  cm7
16:12:31  17  ,clse-min8  cm8
16:12:31  18  ,clse-min9  cm9
16:12:31  19  -- clse relation to moving-avg
16:12:31  20  ,clse-avg3  ca3
16:12:31  21  ,clse-avg4  ca4
16:12:31  22  ,clse-avg5  ca5
16:12:31  23  ,clse-avg6  ca6
16:12:31  24  ,clse-avg7  ca7
16:12:31  25  ,clse-avg8  ca8
16:12:31  26  ,clse-avg9  ca9
16:12:31  27  -- clse relation to moving-max
16:12:31  28  ,clse-max3  cx3
16:12:31  29  ,clse-max4  cx4
16:12:31  30  ,clse-max5  cx5
16:12:31  31  ,clse-max6  cx6
16:12:31  32  ,clse-max7  cx7
16:12:31  33  ,clse-max8  cx8
16:12:31  34  ,clse-max9  cx9
16:12:31  35  -- Derive date related attributes:
16:12:31  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:12:31  37  ,0+TO_CHAR(ydate,'D')d
16:12:31  38  ,0+TO_CHAR(ydate,'W')w
16:12:31  39  -- mpm stands for minutes-past-midnight:
16:12:31  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:12:31  41  -- mph stands for minutes-past-hour:
16:12:31  42  ,0+TO_CHAR(ydate,'MI')mph
16:12:31  43  FROM stk10svmspy
16:12:31  44  ORDER BY ydate
16:12:31  45  /

Table created.

Elapsed: 00:00:00.13
16:12:31 SQL> 
16:12:31 SQL> -- rpt
16:12:31 SQL> 
16:12:31 SQL> SELECT
16:12:31   2  tkr
16:12:31   3  ,COUNT(tkr)ccount
16:12:31   4  ,MIN(clse)mnclse,MAX(clse)mxclse
16:12:31   5  -- ,MIN(avg4),MAX(avg4)
16:12:31   6  ,MIN(ydate),MAX(ydate)
16:12:31   7  ,MIN(g1)
16:12:31   8  ,AVG(g1)
16:12:31   9  ,MAX(g1)
16:12:31  10  FROM stk12svmspy
16:12:31  11  GROUP BY tkr
16:12:31  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
IWM	      1190	77.04	   80.62 2011-01-04 14:30:00 2011-01-26 16:05:00      -2.78 -.06870406	     1.95

Elapsed: 00:00:00.01
16:12:31 SQL> 
16:12:31 SQL> -- Prepare for derivation of NTILE based parameters.
16:12:31 SQL> -- Also derive the "trend" parameter:
16:12:31 SQL> 
16:12:31 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.10
16:12:31 SQL> CREATE TABLE stk14svmspy COMPRESS AS
16:12:31   2  SELECT
16:12:31   3  tkr
16:12:31   4  ,ydate
16:12:31   5  ,tkrdate
16:12:31   6  ,clse
16:12:31   7  ,g1
16:12:31   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
16:12:31   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
16:12:31  10  ,CASE WHEN trend IS NULL THEN 1
16:12:31  11  	    WHEN trend =0      THEN 1
16:12:31  12  	    ELSE trend END trend
16:12:31  13  ,cm3
16:12:31  14  ,cm4
16:12:31  15  ,cm5
16:12:31  16  ,cm6
16:12:31  17  ,cm7
16:12:31  18  ,cm8
16:12:31  19  ,cm9
16:12:31  20  ,ca3
16:12:31  21  ,ca4
16:12:31  22  ,ca5
16:12:31  23  ,ca6
16:12:31  24  ,ca7
16:12:31  25  ,ca8
16:12:31  26  ,ca9
16:12:31  27  ,cx3
16:12:31  28  ,cx4
16:12:31  29  ,cx5
16:12:31  30  ,cx6
16:12:31  31  ,cx7
16:12:31  32  ,cx8
16:12:31  33  ,cx9
16:12:31  34  ,hh
16:12:31  35  ,d
16:12:31  36  ,w
16:12:31  37  ,mpm
16:12:31  38  ,mph
16:12:31  39  FROM stk12svmspy
16:12:31  40  -- Guard against divide by 0:
16:12:31  41  WHERE clse > 0
16:12:31  42  ORDER BY ydate
16:12:31  43  /

Table created.

Elapsed: 00:00:00.12
16:12:31 SQL> 
16:12:31 SQL> -- rpt
16:12:31 SQL> 
16:12:31 SQL> SELECT
16:12:31   2  tkr
16:12:31   3  ,trend
16:12:31   4  ,gatt
16:12:31   5  ,COUNT(tkr)
16:12:31   6  ,AVG(g1)
16:12:31   7  FROM stk14svmspy
16:12:31   8  GROUP BY tkr,trend,gatt
16:12:31   9  ORDER BY tkr,trend,gatt
16:12:31  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
IWM		-1 nup	      272 -.47071691
IWM		-1 up	      228     .82625
IWM		-1	       68
IWM		 1 nup	      394 -.53001269
IWM		 1 up	      140 .553107143
IWM		 1	       88

6 rows selected.

Elapsed: 00:00:00.01
16:12:31 SQL> 
16:12:31 SQL> -- Derive NTILE based params:
16:12:31 SQL> 
16:12:31 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.27
16:12:31 SQL> CREATE TABLE stk16svmspy COMPRESS AS
16:12:31   2  SELECT
16:12:31   3  tkr
16:12:31   4  ,ydate
16:12:31   5  ,tkrdate
16:12:31   6  ,clse
16:12:31   7  ,g1
16:12:31   8  ,gatt
16:12:31   9  ,gattn
16:12:31  10  ,trend
16:12:31  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
16:12:31  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
16:12:31  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
16:12:31  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
16:12:31  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
16:12:31  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
16:12:31  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
16:12:31  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
16:12:31  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
16:12:31  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
16:12:31  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
16:12:31  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
16:12:31  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
16:12:31  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
16:12:31  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
16:12:31  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
16:12:31  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
16:12:31  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
16:12:31  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
16:12:31  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
16:12:31  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
16:12:31  32  ,hh  att21
16:12:31  33  ,d   att22
16:12:31  34  ,w   att23
16:12:31  35  ,mpm att24
16:12:31  36  ,mph att25
16:12:31  37  ,trend att26
16:12:31  38  FROM stk14svmspy
16:12:31  39  ORDER BY ydate
16:12:31  40  /

Table created.

Elapsed: 00:00:00.17
16:12:32 SQL> 
16:12:32 SQL> -- rpt
16:12:32 SQL> 
16:12:32 SQL> SELECT
16:12:32   2  tkr
16:12:32   3  ,trend
16:12:32   4  ,gatt
16:12:32   5  ,COUNT(tkr)
16:12:32   6  ,AVG(g1)
16:12:32   7  FROM stk16svmspy
16:12:32   8  GROUP BY tkr,trend,gatt
16:12:32   9  ORDER BY tkr,trend,gatt
16:12:32  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
IWM		-1 nup	      272 -.47071691
IWM		-1 up	      228     .82625
IWM		-1	       68
IWM		 1 nup	      394 -.53001269
IWM		 1 up	      140 .553107143
IWM		 1	       88

6 rows selected.

Elapsed: 00:00:00.01
16:12:32 SQL> 
16:12:32 SQL> -- Now I derive goodness attributes:
16:12:32 SQL> 
16:12:32 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.11
16:12:32 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
16:12:32   2  SELECT
16:12:32   3  tkr
16:12:32   4  ,ydate
16:12:32   5  ,tkrdate
16:12:32   6  ,trend
16:12:32   7  ,g1
16:12:32   8  ,gatt
16:12:32   9  ,gattn
16:12:32  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
16:12:32  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
16:12:32  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
16:12:32  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
16:12:32  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
16:12:32  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
16:12:32  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
16:12:32  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
16:12:32  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
16:12:32  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
16:12:32  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
16:12:32  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
16:12:32  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
16:12:32  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
16:12:32  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
16:12:32  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
16:12:32  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
16:12:32  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
16:12:32  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
16:12:32  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
16:12:32  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
16:12:32  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
16:12:32  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
16:12:32  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
16:12:32  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
16:12:32  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
16:12:32  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
16:12:32  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
16:12:32  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
16:12:32  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
16:12:32  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
16:12:32  41  FROM stk16svmspy
16:12:32  42  /

Table created.

Elapsed: 00:00:00.23
16:12:32 SQL> 
16:12:32 SQL> -- rpt
16:12:32 SQL> 
16:12:32 SQL> SELECT
16:12:32   2  tkr
16:12:32   3  ,trend
16:12:32   4  ,gatt
16:12:32   5  ,COUNT(tkr)
16:12:32   6  ,AVG(g1)
16:12:32   7  FROM stk_ms_svmspy
16:12:32   8  GROUP BY tkr,trend,gatt
16:12:32   9  ORDER BY tkr,trend,gatt
16:12:32  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
IWM		-1 nup	      272 -.47071691
IWM		-1 up	      228     .82625
IWM		-1	       68
IWM		 1 nup	      394 -.53001269
IWM		 1 up	      140 .553107143
IWM		 1	       88

6 rows selected.

Elapsed: 00:00:00.00
16:12:32 SQL> 
16:12:32 SQL> SELECT
16:12:32   2  tkr
16:12:32   3  ,0+TO_CHAR(ydate,'D')daynum
16:12:32   4  ,COUNT(tkr)
16:12:32   5  ,MIN(ydate),MAX(ydate)
16:12:32   6  FROM stk_ms_svmspy
16:12:32   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
16:12:32   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
16:12:32   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
IWM		 2	  156 2011-01-10 14:30:00 2011-01-24 20:55:00
IWM		 3	  312 2011-01-04 14:30:00 2011-01-25 20:55:00
IWM		 4	  254 2011-01-05 14:30:00 2011-01-26 16:05:00
IWM		 5	  234 2011-01-06 14:30:00 2011-01-20 20:55:00
IWM		 6	  234 2011-01-07 14:30:00 2011-01-21 20:55:00

Elapsed: 00:00:00.01
16:12:32 SQL> 
16:12:32 SQL> -- exit
16:12:32 SQL> @stk10svmd.sql '&1'
16:12:32 SQL> --
16:12:32 SQL> -- stk10svmd.sql
16:12:32 SQL> --
16:12:32 SQL> 
16:12:32 SQL> -- Creates views and tables for demonstrating SVM.
16:12:32 SQL> -- I need to run this after I run stk10.sql
16:12:32 SQL> 
16:12:32 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.11
16:12:32 SQL> 
16:12:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
16:12:32 SQL> 
16:12:32 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
16:12:32   2  SELECT
16:12:32   3  tkr
16:12:32   4  ,ydate
16:12:32   5  ,tkr||ydate tkrdate
16:12:32   6  ,clse
16:12:32   7  ,rownum rnum -- acts as t in my time-series
16:12:32   8  -- Derive some attributes from clse.
16:12:32   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
16:12:32  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
16:12:32  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
16:12:32  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
16:12:32  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
16:12:32  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
16:12:32  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
16:12:32  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
16:12:32  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
16:12:32  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
16:12:32  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
16:12:32  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
16:12:32  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
16:12:32  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
16:12:32  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
16:12:32  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
16:12:32  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
16:12:32  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
16:12:32  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
16:12:32  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
16:12:32  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
16:12:32  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
16:12:32  31  FROM ystk
16:12:32  32  WHERE UPPER(tkr)='&1'
16:12:32  33  AND ydate > '1990-01-01'
16:12:32  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
16:12:32  35  ORDER BY ydate
16:12:32  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='IWM'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='IWM')

Table created.

Elapsed: 00:00:00.21
16:12:33 SQL> 
16:12:33 SQL> -- rpt
16:12:33 SQL> 
16:12:33 SQL> SELECT
16:12:33   2  tkr
16:12:33   3  ,COUNT(tkr)
16:12:33   4  ,MIN(clse),MAX(clse)
16:12:33   5  ,MIN(avg4),MAX(avg4)
16:12:33   6  ,MIN(ydate),MAX(ydate)
16:12:33   7  FROM stk_svmd10svmspy
16:12:33   8  GROUP BY tkr
16:12:33   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
IWM		2682	  29.54      81.45     30.516	  81.168 2000-05-26 00:00:00 2011-01-25 00:00:00

Elapsed: 00:00:00.01
16:12:33 SQL> 
16:12:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:12:33 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.13
16:12:33 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
16:12:33   2  SELECT
16:12:33   3  tkr
16:12:33   4  ,ydate
16:12:33   5  ,tkrdate
16:12:33   6  ,clse
16:12:33   7  ,rnum
16:12:33   8  -- g1 is important. I want to predict g1:
16:12:33   9  ,ld - clse g1
16:12:33  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
16:12:33  11  -- I want more attributes from the ones I derived above:
16:12:33  12  -- clse relation to moving-min
16:12:33  13  ,clse-min3  cm3
16:12:33  14  ,clse-min4  cm4
16:12:33  15  ,clse-min5  cm5
16:12:33  16  ,clse-min6  cm6
16:12:33  17  ,clse-min7  cm7
16:12:33  18  ,clse-min8  cm8
16:12:33  19  ,clse-min9  cm9
16:12:33  20  -- clse relation to moving-avg
16:12:33  21  ,clse-avg3  ca3
16:12:33  22  ,clse-avg4  ca4
16:12:33  23  ,clse-avg5  ca5
16:12:33  24  ,clse-avg6  ca6
16:12:33  25  ,clse-avg7  ca7
16:12:33  26  ,clse-avg8  ca8
16:12:33  27  ,clse-avg9  ca9
16:12:33  28  -- clse relation to moving-max
16:12:33  29  ,clse-max3  cx3
16:12:33  30  ,clse-max4  cx4
16:12:33  31  ,clse-max5  cx5
16:12:33  32  ,clse-max6  cx6
16:12:33  33  ,clse-max7  cx7
16:12:33  34  ,clse-max8  cx8
16:12:33  35  ,clse-max9  cx9
16:12:33  36  -- Derive date related attributes:
16:12:33  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:12:33  38  ,0+TO_CHAR(ydate,'D')d
16:12:33  39  ,0+TO_CHAR(ydate,'W')w
16:12:33  40  -- mpm stands for minutes-past-midnight:
16:12:33  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:12:33  42  -- mph stands for minutes-past-hour:
16:12:33  43  ,0+TO_CHAR(ydate,'MI')mph
16:12:33  44  FROM stk_svmd10svmspy
16:12:33  45  ORDER BY ydate
16:12:33  46  /

Table created.

Elapsed: 00:00:00.08
16:12:33 SQL> 
16:12:33 SQL> -- rpt
16:12:33 SQL> 
16:12:33 SQL> SELECT
16:12:33   2  tkr
16:12:33   3  ,COUNT(tkr)
16:12:33   4  ,MIN(clse),MAX(clse)
16:12:33   5  ,MIN(ydate),MAX(ydate)
16:12:33   6  FROM stk_svmd12
16:12:33   7  GROUP BY tkr
16:12:33   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
IWM		2682	  29.54      81.45 2000-05-26 00:00:00 2011-01-25 00:00:00

Elapsed: 00:00:00.01
16:12:33 SQL> 
16:12:33 SQL> -- Prepare for derivation of NTILE based parameters.
16:12:33 SQL> -- Also derive the "trend" parameter:
16:12:33 SQL> 
16:12:33 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.18
16:12:33 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
16:12:33   2  SELECT
16:12:33   3  tkr
16:12:33   4  ,ydate
16:12:33   5  ,tkrdate
16:12:33   6  ,clse
16:12:33   7  ,g1
16:12:33   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
16:12:33   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
16:12:33  10  ,CASE WHEN trend IS NULL THEN 1
16:12:33  11  	    WHEN trend =0      THEN 1
16:12:33  12  	    ELSE trend END trend
16:12:33  13  ,cm3
16:12:33  14  ,cm4
16:12:33  15  ,cm5
16:12:33  16  ,cm6
16:12:33  17  ,cm7
16:12:33  18  ,cm8
16:12:33  19  ,cm9
16:12:33  20  ,ca3
16:12:33  21  ,ca4
16:12:33  22  ,ca5
16:12:33  23  ,ca6
16:12:33  24  ,ca7
16:12:33  25  ,ca8
16:12:33  26  ,ca9
16:12:33  27  ,cx3
16:12:33  28  ,cx4
16:12:33  29  ,cx5
16:12:33  30  ,cx6
16:12:33  31  ,cx7
16:12:33  32  ,cx8
16:12:33  33  ,cx9
16:12:33  34  ,hh
16:12:33  35  ,d
16:12:33  36  ,w
16:12:33  37  ,mpm
16:12:33  38  ,mph
16:12:33  39  FROM stk_svmd12
16:12:33  40  -- Guard against divide by 0:
16:12:33  41  WHERE clse > 0
16:12:33  42  ORDER BY ydate
16:12:33  43  /

Table created.

Elapsed: 00:00:00.08
16:12:33 SQL> 
16:12:33 SQL> -- rpt
16:12:33 SQL> 
16:12:33 SQL> SELECT
16:12:33   2  tkr
16:12:33   3  ,trend
16:12:33   4  ,gatt
16:12:33   5  ,COUNT(tkr)
16:12:33   6  ,AVG(g1)
16:12:33   7  FROM stk_svmd14
16:12:33   8  GROUP BY tkr,trend,gatt
16:12:33   9  ORDER BY tkr,trend,gatt
16:12:33  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
IWM		  -1 nup	629 -.64804452
IWM		  -1 up 	547 .824460695
IWM		  -1		  1
IWM		   1 nup	886 -.46960497
IWM		   1 up 	619   .6626979

Elapsed: 00:00:00.00
16:12:33 SQL> 
16:12:33 SQL> -- Derive NTILE based params:
16:12:33 SQL> 
16:12:33 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.10
16:12:33 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
16:12:33   2  SELECT
16:12:33   3  tkr
16:12:33   4  ,ydate
16:12:33   5  ,tkrdate
16:12:33   6  ,clse
16:12:33   7  ,g1
16:12:33   8  ,gatt
16:12:33   9  ,gattn
16:12:33  10  ,trend
16:12:33  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
16:12:33  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
16:12:33  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
16:12:33  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
16:12:33  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
16:12:33  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
16:12:33  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
16:12:33  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
16:12:33  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
16:12:33  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
16:12:33  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
16:12:33  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
16:12:33  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
16:12:33  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
16:12:33  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
16:12:33  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
16:12:33  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
16:12:33  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
16:12:33  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
16:12:33  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
16:12:33  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
16:12:33  32  ,hh  att21
16:12:33  33  ,d   att22
16:12:33  34  ,w   att23
16:12:33  35  ,mpm att24
16:12:33  36  ,mph att25
16:12:33  37  ,trend att26
16:12:33  38  FROM stk_svmd14
16:12:33  39  ORDER BY ydate
16:12:33  40  /

Table created.

Elapsed: 00:00:00.31
16:12:34 SQL> 
16:12:34 SQL> -- rpt
16:12:34 SQL> 
16:12:34 SQL> SELECT
16:12:34   2  tkr
16:12:34   3  ,trend
16:12:34   4  ,gatt
16:12:34   5  ,COUNT(tkr)
16:12:34   6  ,AVG(g1)
16:12:34   7  FROM stk_svmd16
16:12:34   8  GROUP BY tkr,trend,gatt
16:12:34   9  ORDER BY tkr,trend,gatt
16:12:34  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
IWM		  -1 nup	629 -.64804452
IWM		  -1 up 	547 .824460695
IWM		  -1		  1
IWM		   1 nup	886 -.46960497
IWM		   1 up 	619   .6626979

Elapsed: 00:00:00.01
16:12:34 SQL> 
16:12:34 SQL> -- Now I derive goodness attributes:
16:12:34 SQL> 
16:12:34 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.11
16:12:34 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
16:12:34   2  SELECT
16:12:34   3  tkr
16:12:34   4  ,ydate
16:12:34   5  ,tkrdate
16:12:34   6  ,trend
16:12:34   7  ,g1
16:12:34   8  ,gatt
16:12:34   9  ,gattn
16:12:34  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
16:12:34  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
16:12:34  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
16:12:34  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
16:12:34  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
16:12:34  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
16:12:34  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
16:12:34  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
16:12:34  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
16:12:34  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
16:12:34  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
16:12:34  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
16:12:34  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
16:12:34  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
16:12:34  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
16:12:34  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
16:12:34  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
16:12:34  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
16:12:34  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
16:12:34  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
16:12:34  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
16:12:34  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
16:12:34  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
16:12:34  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
16:12:34  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
16:12:34  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
16:12:34  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
16:12:34  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
16:12:34  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
16:12:34  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
16:12:34  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
16:12:34  41  FROM stk_svmd16
16:12:34  42  /

Table created.

Elapsed: 00:00:00.54
16:12:34 SQL> 
16:12:34 SQL> -- rpt
16:12:34 SQL> 
16:12:34 SQL> SELECT
16:12:34   2  tkr
16:12:34   3  ,trend
16:12:34   4  ,gatt
16:12:34   5  ,COUNT(tkr)
16:12:34   6  ,AVG(g1)
16:12:34   7  FROM stk_ms_svmd_svmspy
16:12:34   8  GROUP BY tkr,trend,gatt
16:12:34   9  ORDER BY tkr,trend,gatt
16:12:34  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
IWM		  -1 nup	629 -.64804452
IWM		  -1 up 	547 .824460695
IWM		  -1		  1
IWM		   1 nup	886 -.46960497
IWM		   1 up 	619   .6626979

Elapsed: 00:00:00.01
16:12:34 SQL> 
16:12:34 SQL> SELECT
16:12:34   2  tkr
16:12:34   3  ,COUNT(tkr)
16:12:34   4  ,MIN(ydate),MAX(ydate)
16:12:34   5  FROM stk_ms_svmd_svmspy
16:12:34   6  GROUP BY tkr
16:12:34   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
IWM		2682 2000-05-26 00:00:00 2011-01-25 00:00:00

Elapsed: 00:00:00.01
16:12:34 SQL> 
16:12:34 SQL> -- exit
16:12:34 SQL> 
16:12:34 SQL> 
16:12:34 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.29
16:12:35 SQL> 
16:12:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
16:12:35 SQL> 
16:12:35 SQL> CREATE TABLE stk_ms_u COMPRESS AS
16:12:35   2  SELECT * FROM stk_ms_svmspy
16:12:35   3  UNION
16:12:35   4  SELECT * FROM stk_ms_svmd_svmspy
16:12:35   5  /

Table created.

Elapsed: 00:00:00.93
16:12:36 SQL> 
16:12:36 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
