
SQL*Plus: Release 11.2.0.1.0 Production on Thu Apr 28 16:47:29 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

16:47:29 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
16:47:29 SQL> 
16:47:29 SQL> 16:47:29 SQL> --
16:47:29 SQL> -- stk10u.sql
16:47:29 SQL> --
16:47:29 SQL> 
16:47:29 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
16:47:29 SQL> 
16:47:29 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
16:47:29 SQL> @stk10.sql     '&1'
16:47:29 SQL> --
16:47:29 SQL> -- stk10.sql
16:47:29 SQL> --
16:47:29 SQL> 
16:47:29 SQL> -- Creates views and tables for demonstrating SVM.
16:47:29 SQL> 
16:47:29 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.19
16:47:29 SQL> 
16:47:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
16:47:30 SQL> 
16:47:30 SQL> CREATE TABLE stk10svmspy COMPRESS AS
16:47:30   2  SELECT
16:47:30   3  tkr
16:47:30   4  ,ydate
16:47:30   5  ,tkr||ydate tkrdate
16:47:30   6  ,clse
16:47:30   7  ,clse2
16:47:30   8  ,rownum rnum -- acts as t in my time-series
16:47:30   9  -- g1 is important. I want to predict g1:
16:47:30  10  ,gain1day g1
16:47:30  11  -- Derive some attributes from clse.
16:47:30  12  -- Each row spans 5 minutes.
16:47:30  13  -- The number of rows in 1 day is 24*60/5.
16:47:30  14  -- I want the aggregations to span from 3 days to 9 days:
16:47:30  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
16:47:30  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
16:47:30  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
16:47:30  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
16:47:30  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
16:47:30  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
16:47:30  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
16:47:30  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
16:47:30  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
16:47:30  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
16:47:30  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
16:47:30  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
16:47:30  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
16:47:30  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
16:47:30  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
16:47:30  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
16:47:30  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
16:47:30  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
16:47:30  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
16:47:30  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
16:47:30  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
16:47:30  36  FROM di5min_stk_c2
16:47:30  37  WHERE UPPER(tkr)='&1'
16:47:30  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
16:47:30  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
16:47:30  40  ORDER BY ydate
16:47:30  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='HPQ'

Table created.

Elapsed: 00:00:03.95
16:47:34 SQL> 
16:47:34 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.42
16:47:35 SQL> 
16:47:35 SQL> -- rpt
16:47:35 SQL> 
16:47:35 SQL> SELECT
16:47:35   2  tkr
16:47:35   3  ,COUNT(tkr)ccount
16:47:35   4  ,MIN(clse)mnclse,MAX(clse)mxclse
16:47:35   5  -- ,MIN(avg4),MAX(avg4)
16:47:35   6  ,MIN(ydate),MAX(ydate)
16:47:35   7  ,MIN(g1)
16:47:35   8  ,MAX(g1)
16:47:35   9  FROM stk10svmspy
16:47:35  10  GROUP BY tkr
16:47:35  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
HPQ	     30094	37.45	    54.7 2009-10-28 18:10:00 2011-04-28 16:20:00      -5.83	   3.4

Elapsed: 00:00:00.05
16:47:35 SQL> 
16:47:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:47:35 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.23
16:47:35 SQL> CREATE TABLE stk12svmspy COMPRESS AS
16:47:35   2  SELECT
16:47:35   3  tkr
16:47:35   4  ,ydate
16:47:35   5  ,tkrdate
16:47:35   6  ,clse
16:47:35   7  ,rnum
16:47:35   8  ,g1
16:47:35   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
16:47:35  10  -- I want more attributes from the ones I derived above:
16:47:35  11  -- clse relation to moving-min
16:47:35  12  ,clse-min3  cm3
16:47:35  13  ,clse-min4  cm4
16:47:35  14  ,clse-min5  cm5
16:47:35  15  ,clse-min6  cm6
16:47:35  16  ,clse-min7  cm7
16:47:35  17  ,clse-min8  cm8
16:47:35  18  ,clse-min9  cm9
16:47:35  19  -- clse relation to moving-avg
16:47:35  20  ,clse-avg3  ca3
16:47:35  21  ,clse-avg4  ca4
16:47:35  22  ,clse-avg5  ca5
16:47:35  23  ,clse-avg6  ca6
16:47:35  24  ,clse-avg7  ca7
16:47:35  25  ,clse-avg8  ca8
16:47:35  26  ,clse-avg9  ca9
16:47:35  27  -- clse relation to moving-max
16:47:35  28  ,clse-max3  cx3
16:47:35  29  ,clse-max4  cx4
16:47:35  30  ,clse-max5  cx5
16:47:35  31  ,clse-max6  cx6
16:47:35  32  ,clse-max7  cx7
16:47:35  33  ,clse-max8  cx8
16:47:35  34  ,clse-max9  cx9
16:47:35  35  -- Derive date related attributes:
16:47:35  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:47:35  37  ,0+TO_CHAR(ydate,'D')d
16:47:35  38  ,0+TO_CHAR(ydate,'W')w
16:47:35  39  -- mpm stands for minutes-past-midnight:
16:47:35  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:47:35  41  -- mph stands for minutes-past-hour:
16:47:35  42  ,0+TO_CHAR(ydate,'MI')mph
16:47:35  43  FROM stk10svmspy
16:47:35  44  ORDER BY ydate
16:47:35  45  /

Table created.

Elapsed: 00:00:00.68
16:47:36 SQL> 
16:47:36 SQL> -- rpt
16:47:36 SQL> 
16:47:36 SQL> SELECT
16:47:36   2  tkr
16:47:36   3  ,COUNT(tkr)ccount
16:47:36   4  ,MIN(clse)mnclse,MAX(clse)mxclse
16:47:36   5  -- ,MIN(avg4),MAX(avg4)
16:47:36   6  ,MIN(ydate),MAX(ydate)
16:47:36   7  ,MIN(g1)
16:47:36   8  ,AVG(g1)
16:47:36   9  ,MAX(g1)
16:47:36  10  FROM stk12svmspy
16:47:36  11  GROUP BY tkr
16:47:36  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
HPQ	     30094	37.45	    54.7 2009-10-28 18:10:00 2011-04-28 16:20:00      -5.83 -.01218406	      3.4

Elapsed: 00:00:00.05
16:47:36 SQL> 
16:47:36 SQL> -- Prepare for derivation of NTILE based parameters.
16:47:36 SQL> -- Also derive the "trend" parameter:
16:47:36 SQL> 
16:47:36 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.18
16:47:36 SQL> CREATE TABLE stk14svmspy COMPRESS AS
16:47:36   2  SELECT
16:47:36   3  tkr
16:47:36   4  ,ydate
16:47:36   5  ,tkrdate
16:47:36   6  ,clse
16:47:36   7  ,g1
16:47:36   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
16:47:36   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
16:47:36  10  ,CASE WHEN trend IS NULL THEN 1
16:47:36  11  	    WHEN trend =0      THEN 1
16:47:36  12  	    ELSE trend END trend
16:47:36  13  ,cm3
16:47:36  14  ,cm4
16:47:36  15  ,cm5
16:47:36  16  ,cm6
16:47:36  17  ,cm7
16:47:36  18  ,cm8
16:47:36  19  ,cm9
16:47:36  20  ,ca3
16:47:36  21  ,ca4
16:47:36  22  ,ca5
16:47:36  23  ,ca6
16:47:36  24  ,ca7
16:47:36  25  ,ca8
16:47:36  26  ,ca9
16:47:36  27  ,cx3
16:47:36  28  ,cx4
16:47:36  29  ,cx5
16:47:36  30  ,cx6
16:47:36  31  ,cx7
16:47:36  32  ,cx8
16:47:36  33  ,cx9
16:47:36  34  ,hh
16:47:36  35  ,d
16:47:36  36  ,w
16:47:36  37  ,mpm
16:47:36  38  ,mph
16:47:36  39  FROM stk12svmspy
16:47:36  40  -- Guard against divide by 0:
16:47:36  41  WHERE clse > 0
16:47:36  42  ORDER BY ydate
16:47:36  43  /

Table created.

Elapsed: 00:00:00.48
16:47:37 SQL> 
16:47:37 SQL> -- rpt
16:47:37 SQL> 
16:47:37 SQL> SELECT
16:47:37   2  tkr
16:47:37   3  ,trend
16:47:37   4  ,gatt
16:47:37   5  ,COUNT(tkr)
16:47:37   6  ,AVG(g1)
16:47:37   7  FROM stk14svmspy
16:47:37   8  GROUP BY tkr,trend,gatt
16:47:37   9  ORDER BY tkr,trend,gatt
16:47:37  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
HPQ		-1 nup	     8142 -.51803911
HPQ		-1 up	     5608 .609102786
HPQ		-1	      128
HPQ		 1 nup	     9417 -.32989409
HPQ		 1 up	     6468 .548479264
HPQ		 1	      331

6 rows selected.

Elapsed: 00:00:00.04
16:47:37 SQL> 
16:47:37 SQL> -- Derive NTILE based params:
16:47:37 SQL> 
16:47:37 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.16
16:47:37 SQL> CREATE TABLE stk16svmspy COMPRESS AS
16:47:37   2  SELECT
16:47:37   3  tkr
16:47:37   4  ,ydate
16:47:37   5  ,tkrdate
16:47:37   6  ,clse
16:47:37   7  ,g1
16:47:37   8  ,gatt
16:47:37   9  ,gattn
16:47:37  10  ,trend
16:47:37  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
16:47:37  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
16:47:37  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
16:47:37  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
16:47:37  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
16:47:37  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
16:47:37  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
16:47:37  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
16:47:37  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
16:47:37  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
16:47:37  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
16:47:37  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
16:47:37  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
16:47:37  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
16:47:37  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
16:47:37  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
16:47:37  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
16:47:37  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
16:47:37  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
16:47:37  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
16:47:37  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
16:47:37  32  ,hh  att21
16:47:37  33  ,d   att22
16:47:37  34  ,w   att23
16:47:37  35  ,mpm att24
16:47:37  36  ,mph att25
16:47:37  37  ,trend att26
16:47:37  38  FROM stk14svmspy
16:47:37  39  ORDER BY ydate
16:47:37  40  /

Table created.

Elapsed: 00:00:03.60
16:47:40 SQL> 
16:47:40 SQL> -- rpt
16:47:40 SQL> 
16:47:40 SQL> SELECT
16:47:40   2  tkr
16:47:40   3  ,trend
16:47:40   4  ,gatt
16:47:40   5  ,COUNT(tkr)
16:47:40   6  ,AVG(g1)
16:47:40   7  FROM stk16svmspy
16:47:40   8  GROUP BY tkr,trend,gatt
16:47:40   9  ORDER BY tkr,trend,gatt
16:47:40  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
HPQ		-1 nup	     8142 -.51803911
HPQ		-1 up	     5608 .609102786
HPQ		-1	      128
HPQ		 1 nup	     9417 -.32989409
HPQ		 1 up	     6468 .548479264
HPQ		 1	      331

6 rows selected.

Elapsed: 00:00:00.03
16:47:40 SQL> 
16:47:40 SQL> -- Comment out feedback related syntax:
16:47:40 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
16:47:40 SQL> -- SELECT
16:47:40 SQL> -- m.tkr
16:47:40 SQL> -- ,m.ydate
16:47:40 SQL> -- ,m.tkrdate
16:47:40 SQL> -- ,l.score score_long
16:47:40 SQL> -- ,s.score score_short
16:47:40 SQL> -- ,m.g1
16:47:40 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
16:47:40 SQL> -- WHERE l.targ='gatt'
16:47:40 SQL> -- AND	 s.targ='gattn'
16:47:40 SQL> -- AND l.tkrdate = s.tkrdate
16:47:40 SQL> -- AND l.tkrdate = m.tkrdate
16:47:40 SQL> -- -- Speed things up:
16:47:40 SQL> -- AND l.tkr = '&1'
16:47:40 SQL> -- AND s.tkr = '&1'
16:47:40 SQL> -- /
16:47:40 SQL> --
16:47:40 SQL> -- DROP TABLE score_corr_tkr;
16:47:40 SQL> --
16:47:40 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
16:47:40 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
16:47:40 SQL> -- (
16:47:40 SQL> --   SELECT
16:47:40 SQL> --   tkrdate
16:47:40 SQL> --   -- Find corr() tween score and g1 over 8 day period:
16:47:40 SQL> --   ,CORR((score_long - score_short),g1)
16:47:40 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
16:47:40 SQL> --   FROM sc12tkr
16:47:40 SQL> -- )
16:47:40 SQL> -- GROUP BY tkrdate
16:47:40 SQL> -- /
16:47:40 SQL> 
16:47:40 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
16:47:40 SQL> 
16:47:40 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.18
16:47:41 SQL> 
16:47:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.23
16:47:41 SQL> 
16:47:41 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
16:47:41   2  SELECT
16:47:41   3  tkr
16:47:41   4  ,ydate
16:47:41   5  ,tkrdate
16:47:41   6  ,trend
16:47:41   7  ,g1
16:47:41   8  ,gatt
16:47:41   9  ,gattn
16:47:41  10  -- Goodness attributes:
16:47:41  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
16:47:41  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
16:47:41  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
16:47:41  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
16:47:41  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
16:47:41  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
16:47:41  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
16:47:41  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
16:47:41  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
16:47:41  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
16:47:41  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
16:47:41  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
16:47:41  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
16:47:41  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
16:47:41  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
16:47:41  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
16:47:41  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
16:47:41  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
16:47:41  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
16:47:41  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
16:47:41  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
16:47:41  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
16:47:41  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
16:47:41  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
16:47:41  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
16:47:41  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
16:47:41  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
16:47:41  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
16:47:41  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
16:47:41  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
16:47:41  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
16:47:41  42  FROM stk16svmspy
16:47:41  43  /

Table created.

Elapsed: 00:00:04.97
16:47:46 SQL> 
16:47:46 SQL> -- rpt
16:47:46 SQL> 
16:47:46 SQL> SELECT
16:47:46   2  tkr
16:47:46   3  ,trend
16:47:46   4  ,gatt
16:47:46   5  ,COUNT(tkr)
16:47:46   6  ,AVG(g1)
16:47:46   7  FROM stk_ms_svmspy
16:47:46   8  GROUP BY tkr,trend,gatt
16:47:46   9  ORDER BY tkr,trend,gatt
16:47:46  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
HPQ		-1 nup	     8142 -.51803911
HPQ		-1 up	     5608 .609102786
HPQ		-1	      128
HPQ		 1 nup	     9417 -.32989409
HPQ		 1 up	     6468 .548479264
HPQ		 1	      331

6 rows selected.

Elapsed: 00:00:00.05
16:47:46 SQL> 
16:47:46 SQL> SELECT
16:47:46   2  tkr
16:47:46   3  ,0+TO_CHAR(ydate,'D')daynum
16:47:46   4  ,COUNT(tkr)
16:47:46   5  ,MIN(ydate),MAX(ydate)
16:47:46   6  FROM stk_ms_svmspy
16:47:46   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
16:47:46   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
16:47:46   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
HPQ		 2	 5882 2009-11-02 13:25:00 2011-04-25 19:55:00
HPQ		 3	 6042 2009-11-03 13:25:00 2011-04-26 19:55:00
HPQ		 4	 6055 2009-10-28 18:10:00 2011-04-27 19:55:00
HPQ		 5	 6109 2009-10-29 13:25:00 2011-04-28 16:20:00
HPQ		 6	 6006 2009-10-30 13:25:00 2011-04-15 19:55:00

Elapsed: 00:00:00.03
16:47:46 SQL> 
16:47:46 SQL> -- exit
16:47:46 SQL> @stk10svmd.sql '&1'
16:47:46 SQL> --
16:47:46 SQL> -- stk10svmd.sql
16:47:46 SQL> --
16:47:46 SQL> 
16:47:46 SQL> -- Creates views and tables for demonstrating SVM.
16:47:46 SQL> -- I need to run this after I run stk10.sql
16:47:46 SQL> 
16:47:46 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.28
16:47:46 SQL> 
16:47:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.16
16:47:46 SQL> 
16:47:46 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
16:47:46   2  SELECT
16:47:46   3  tkr
16:47:46   4  ,ydate
16:47:46   5  ,tkr||ydate tkrdate
16:47:46   6  ,clse
16:47:46   7  ,rownum rnum -- acts as t in my time-series
16:47:46   8  -- Derive some attributes from clse.
16:47:46   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
16:47:46  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
16:47:46  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
16:47:46  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
16:47:46  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
16:47:46  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
16:47:46  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
16:47:46  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
16:47:46  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
16:47:46  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
16:47:46  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
16:47:46  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
16:47:46  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
16:47:46  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
16:47:46  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
16:47:46  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
16:47:46  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
16:47:46  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
16:47:46  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
16:47:46  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
16:47:46  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
16:47:46  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
16:47:46  31  -- ystk21 created here: svmd/cr_ystk21.sql
16:47:46  32  FROM ystk21
16:47:46  33  WHERE UPPER(tkr)='&1'
16:47:46  34  AND ydate > '1990-01-01'
16:47:46  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
16:47:46  36  ORDER BY ydate
16:47:46  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='HPQ'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='HPQ')

Table created.

Elapsed: 00:00:00.39
16:47:47 SQL> 
16:47:47 SQL> -- rpt
16:47:47 SQL> 
16:47:47 SQL> SELECT
16:47:47   2  tkr
16:47:47   3  ,COUNT(tkr)
16:47:47   4  ,MIN(clse),MAX(clse)
16:47:47   5  ,MIN(avg4),MAX(avg4)
16:47:47   6  ,MIN(ydate),MAX(ydate)
16:47:47   7  FROM stk_svmd10svmspy
16:47:47   8  GROUP BY tkr
16:47:47   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
HPQ		5195	   1.96      59.62	 2.07	  58.722 1990-01-02 20:00:00 2011-04-26 20:00:00

Elapsed: 00:00:00.01
16:47:47 SQL> 
16:47:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:47:47 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.16
16:47:47 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
16:47:47   2  SELECT
16:47:47   3  tkr
16:47:47   4  ,ydate
16:47:47   5  ,tkrdate
16:47:47   6  ,clse
16:47:47   7  ,rnum
16:47:47   8  -- g1 is important. I want to predict g1:
16:47:47   9  ,ld - clse g1
16:47:47  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
16:47:47  11  -- I want more attributes from the ones I derived above:
16:47:47  12  -- clse relation to moving-min
16:47:47  13  ,clse-min3  cm3
16:47:47  14  ,clse-min4  cm4
16:47:47  15  ,clse-min5  cm5
16:47:47  16  ,clse-min6  cm6
16:47:47  17  ,clse-min7  cm7
16:47:47  18  ,clse-min8  cm8
16:47:47  19  ,clse-min9  cm9
16:47:47  20  -- clse relation to moving-avg
16:47:47  21  ,clse-avg3  ca3
16:47:47  22  ,clse-avg4  ca4
16:47:47  23  ,clse-avg5  ca5
16:47:47  24  ,clse-avg6  ca6
16:47:47  25  ,clse-avg7  ca7
16:47:47  26  ,clse-avg8  ca8
16:47:47  27  ,clse-avg9  ca9
16:47:47  28  -- clse relation to moving-max
16:47:47  29  ,clse-max3  cx3
16:47:47  30  ,clse-max4  cx4
16:47:47  31  ,clse-max5  cx5
16:47:47  32  ,clse-max6  cx6
16:47:47  33  ,clse-max7  cx7
16:47:47  34  ,clse-max8  cx8
16:47:47  35  ,clse-max9  cx9
16:47:47  36  -- Derive date related attributes:
16:47:47  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:47:47  38  ,0+TO_CHAR(ydate,'D')d
16:47:47  39  ,0+TO_CHAR(ydate,'W')w
16:47:47  40  -- mpm stands for minutes-past-midnight:
16:47:47  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:47:47  42  -- mph stands for minutes-past-hour:
16:47:47  43  ,0+TO_CHAR(ydate,'MI')mph
16:47:47  44  FROM stk_svmd10svmspy
16:47:47  45  ORDER BY ydate
16:47:47  46  /

Table created.

Elapsed: 00:00:00.17
16:47:47 SQL> 
16:47:47 SQL> -- rpt
16:47:47 SQL> 
16:47:47 SQL> SELECT
16:47:47   2  tkr
16:47:47   3  ,COUNT(tkr)
16:47:47   4  ,MIN(clse),MAX(clse)
16:47:47   5  ,MIN(ydate),MAX(ydate)
16:47:47   6  FROM stk_svmd12
16:47:47   7  GROUP BY tkr
16:47:47   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
HPQ		5195	   1.96      59.62 1990-01-02 20:00:00 2011-04-26 20:00:00

Elapsed: 00:00:00.02
16:47:47 SQL> 
16:47:47 SQL> -- Prepare for derivation of NTILE based parameters.
16:47:47 SQL> -- Also derive the "trend" parameter:
16:47:47 SQL> 
16:47:47 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.15
16:47:47 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
16:47:47   2  SELECT
16:47:47   3  tkr
16:47:47   4  ,ydate
16:47:47   5  ,tkrdate
16:47:47   6  ,clse
16:47:47   7  ,g1
16:47:47   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
16:47:47   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
16:47:47  10  ,CASE WHEN trend IS NULL THEN 1
16:47:47  11  	    WHEN trend =0      THEN 1
16:47:47  12  	    ELSE trend END trend
16:47:47  13  ,cm3
16:47:47  14  ,cm4
16:47:47  15  ,cm5
16:47:47  16  ,cm6
16:47:47  17  ,cm7
16:47:47  18  ,cm8
16:47:47  19  ,cm9
16:47:47  20  ,ca3
16:47:47  21  ,ca4
16:47:47  22  ,ca5
16:47:47  23  ,ca6
16:47:47  24  ,ca7
16:47:47  25  ,ca8
16:47:47  26  ,ca9
16:47:47  27  ,cx3
16:47:47  28  ,cx4
16:47:47  29  ,cx5
16:47:47  30  ,cx6
16:47:47  31  ,cx7
16:47:47  32  ,cx8
16:47:47  33  ,cx9
16:47:47  34  ,hh
16:47:47  35  ,d
16:47:47  36  ,w
16:47:47  37  ,mpm
16:47:47  38  ,mph
16:47:47  39  FROM stk_svmd12
16:47:47  40  -- Guard against divide by 0:
16:47:47  41  WHERE clse > 0
16:47:47  42  ORDER BY ydate
16:47:47  43  /

Table created.

Elapsed: 00:00:00.10
16:47:47 SQL> 
16:47:47 SQL> -- rpt
16:47:47 SQL> 
16:47:47 SQL> SELECT
16:47:47   2  tkr
16:47:47   3  ,trend
16:47:47   4  ,gatt
16:47:47   5  ,COUNT(tkr)
16:47:47   6  ,AVG(g1)
16:47:47   7  FROM stk_svmd14
16:47:47   8  GROUP BY tkr,trend,gatt
16:47:47   9  ORDER BY tkr,trend,gatt
16:47:47  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
HPQ		  -1 nup       1310 -.35365649
HPQ		  -1 up        1090 .474972477
HPQ		   1 nup       1604 -.33091022
HPQ		   1 up        1190 .431277311
HPQ		   1		  1

Elapsed: 00:00:00.01
16:47:47 SQL> 
16:47:47 SQL> -- Derive NTILE based params:
16:47:47 SQL> 
16:47:47 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.13
16:47:47 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
16:47:47   2  SELECT
16:47:47   3  tkr
16:47:47   4  ,ydate
16:47:47   5  ,tkrdate
16:47:47   6  ,clse
16:47:47   7  ,g1
16:47:47   8  ,gatt
16:47:47   9  ,gattn
16:47:47  10  ,trend
16:47:47  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
16:47:47  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
16:47:47  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
16:47:47  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
16:47:47  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
16:47:47  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
16:47:47  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
16:47:47  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
16:47:47  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
16:47:47  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
16:47:47  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
16:47:47  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
16:47:47  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
16:47:47  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
16:47:47  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
16:47:47  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
16:47:47  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
16:47:47  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
16:47:47  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
16:47:47  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
16:47:47  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
16:47:47  32  ,hh  att21
16:47:47  33  ,d   att22
16:47:47  34  ,w   att23
16:47:47  35  ,mpm att24
16:47:47  36  ,mph att25
16:47:47  37  ,trend att26
16:47:47  38  FROM stk_svmd14
16:47:47  39  ORDER BY ydate
16:47:47  40  /

Table created.

Elapsed: 00:00:00.57
16:47:48 SQL> 
16:47:48 SQL> -- rpt
16:47:48 SQL> 
16:47:48 SQL> SELECT
16:47:48   2  tkr
16:47:48   3  ,trend
16:47:48   4  ,gatt
16:47:48   5  ,COUNT(tkr)
16:47:48   6  ,AVG(g1)
16:47:48   7  FROM stk_svmd16
16:47:48   8  GROUP BY tkr,trend,gatt
16:47:48   9  ORDER BY tkr,trend,gatt
16:47:48  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
HPQ		  -1 nup       1310 -.35365649
HPQ		  -1 up        1090 .474972477
HPQ		   1 nup       1604 -.33091022
HPQ		   1 up        1190 .431277311
HPQ		   1		  1

Elapsed: 00:00:00.01
16:47:48 SQL> 
16:47:48 SQL> -- Comment out feedback related syntax:
16:47:48 SQL> 
16:47:48 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
16:47:48 SQL> -- SELECT
16:47:48 SQL> -- m.tkr
16:47:48 SQL> -- ,m.ydate
16:47:48 SQL> -- ,m.tkrdate
16:47:48 SQL> -- ,l.score score_long
16:47:48 SQL> -- ,s.score score_short
16:47:48 SQL> -- ,m.g1
16:47:48 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
16:47:48 SQL> -- WHERE l.targ='gatt'
16:47:48 SQL> -- AND	 s.targ='gattn'
16:47:48 SQL> -- AND l.tkrdate = s.tkrdate
16:47:48 SQL> -- AND l.tkrdate = m.tkrdate
16:47:48 SQL> -- -- Speed things up:
16:47:48 SQL> -- AND l.tkr = '&1'
16:47:48 SQL> -- AND s.tkr = '&1'
16:47:48 SQL> -- /
16:47:48 SQL> --
16:47:48 SQL> -- DROP TABLE score_corr_tkr;
16:47:48 SQL> --
16:47:48 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
16:47:48 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
16:47:48 SQL> -- (
16:47:48 SQL> --   SELECT
16:47:48 SQL> --   tkrdate
16:47:48 SQL> --   -- Find corr() tween score and g1 over 8 day period:
16:47:48 SQL> --   ,CORR((score_long - score_short),g1)
16:47:48 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
16:47:48 SQL> --   FROM sc12tkr
16:47:48 SQL> -- )
16:47:48 SQL> -- GROUP BY tkrdate
16:47:48 SQL> -- /
16:47:48 SQL> 
16:47:48 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
16:47:48 SQL> 
16:47:48 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.13
16:47:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
16:47:48 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
16:47:48   2  SELECT
16:47:48   3  tkr
16:47:48   4  ,ydate
16:47:48   5  ,tkrdate
16:47:48   6  ,trend
16:47:48   7  ,g1
16:47:48   8  ,gatt
16:47:48   9  ,gattn
16:47:48  10  -- Goodness attributes:
16:47:48  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
16:47:48  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
16:47:48  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
16:47:48  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
16:47:48  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
16:47:48  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
16:47:48  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
16:47:48  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
16:47:48  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
16:47:48  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
16:47:48  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
16:47:48  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
16:47:48  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
16:47:48  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
16:47:48  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
16:47:48  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
16:47:48  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
16:47:48  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
16:47:48  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
16:47:48  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
16:47:48  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
16:47:48  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
16:47:48  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
16:47:48  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
16:47:48  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
16:47:48  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
16:47:48  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
16:47:48  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
16:47:48  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
16:47:48  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
16:47:48  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
16:47:48  42  FROM stk_svmd16
16:47:48  43  /

Table created.

Elapsed: 00:00:00.97
16:47:49 SQL> 
16:47:49 SQL> -- rpt
16:47:49 SQL> 
16:47:49 SQL> SELECT
16:47:49   2  tkr
16:47:49   3  ,trend
16:47:49   4  ,gatt
16:47:49   5  ,COUNT(tkr)
16:47:49   6  ,AVG(g1)
16:47:49   7  FROM stk_ms_svmd_svmspy
16:47:49   8  GROUP BY tkr,trend,gatt
16:47:49   9  ORDER BY tkr,trend,gatt
16:47:49  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
HPQ		  -1 nup       1310 -.35365649
HPQ		  -1 up        1090 .474972477
HPQ		   1 nup       1604 -.33091022
HPQ		   1 up        1190 .431277311
HPQ		   1		  1

Elapsed: 00:00:00.01
16:47:49 SQL> 
16:47:49 SQL> SELECT
16:47:49   2  tkr
16:47:49   3  ,COUNT(tkr)
16:47:49   4  ,MIN(ydate),MAX(ydate)
16:47:49   5  FROM stk_ms_svmd_svmspy
16:47:49   6  GROUP BY tkr
16:47:49   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
HPQ		5195 1990-01-02 20:00:00 2011-04-26 20:00:00

Elapsed: 00:00:00.01
16:47:49 SQL> 
16:47:49 SQL> -- exit
16:47:49 SQL> 
16:47:49 SQL> 
16:47:49 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.19
16:47:50 SQL> 
16:47:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
16:47:50 SQL> 
16:47:50 SQL> CREATE TABLE stk_ms_u COMPRESS AS
16:47:50   2  SELECT * FROM stk_ms_svmspy
16:47:50   3  UNION
16:47:50   4  SELECT * FROM stk_ms_svmd_svmspy
16:47:50   5  /

Table created.

Elapsed: 00:00:00.66
16:47:50 SQL> 
16:47:50 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
