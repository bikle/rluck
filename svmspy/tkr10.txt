
SQL*Plus: Release 11.2.0.1.0 Production on Tue Mar 29 14:47:40 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

14:47:41 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
14:47:41 SQL> 
14:47:41 SQL> 14:47:41 SQL> --
14:47:41 SQL> -- stk10u.sql
14:47:41 SQL> --
14:47:41 SQL> 
14:47:41 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
14:47:41 SQL> 
14:47:41 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
14:47:41 SQL> @stk10.sql     '&1'
14:47:41 SQL> --
14:47:41 SQL> -- stk10.sql
14:47:41 SQL> --
14:47:41 SQL> 
14:47:41 SQL> -- Creates views and tables for demonstrating SVM.
14:47:41 SQL> 
14:47:41 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.20
14:47:41 SQL> 
14:47:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.13
14:47:41 SQL> 
14:47:41 SQL> CREATE TABLE stk10svmspy COMPRESS AS
14:47:41   2  SELECT
14:47:41   3  tkr
14:47:41   4  ,ydate
14:47:41   5  ,tkr||ydate tkrdate
14:47:41   6  ,clse
14:47:41   7  ,clse2
14:47:41   8  ,rownum rnum -- acts as t in my time-series
14:47:41   9  -- g1 is important. I want to predict g1:
14:47:41  10  ,gain1day g1
14:47:41  11  -- Derive some attributes from clse.
14:47:41  12  -- Each row spans 5 minutes.
14:47:41  13  -- The number of rows in 1 day is 24*60/5.
14:47:41  14  -- I want the aggregations to span from 3 days to 9 days:
14:47:41  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
14:47:41  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
14:47:41  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
14:47:41  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
14:47:41  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
14:47:41  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
14:47:41  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
14:47:41  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
14:47:41  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
14:47:41  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
14:47:41  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
14:47:41  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
14:47:41  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
14:47:41  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
14:47:41  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
14:47:41  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
14:47:41  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
14:47:41  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
14:47:41  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
14:47:41  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
14:47:41  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
14:47:41  36  FROM di5min_stk_c2
14:47:41  37  WHERE UPPER(tkr)='&1'
14:47:41  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
14:47:41  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
14:47:41  40  ORDER BY ydate
14:47:41  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='TLT'

Table created.

Elapsed: 00:00:00.62
14:47:41 SQL> 
14:47:41 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
14:47:42 SQL> 
14:47:42 SQL> -- rpt
14:47:42 SQL> 
14:47:42 SQL> SELECT
14:47:42   2  tkr
14:47:42   3  ,COUNT(tkr)ccount
14:47:42   4  ,MIN(clse)mnclse,MAX(clse)mxclse
14:47:42   5  -- ,MIN(avg4),MAX(avg4)
14:47:42   6  ,MIN(ydate),MAX(ydate)
14:47:42   7  ,MIN(g1)
14:47:42   8  ,MAX(g1)
14:47:42   9  FROM stk10svmspy
14:47:42  10  GROUP BY tkr
14:47:42  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
TLT	      4524     74.605	   94.55 2011-01-04 14:30:00 2011-03-28 19:55:00      -2.04 16.5532813

Elapsed: 00:00:00.02
14:47:42 SQL> 
14:47:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:47:42 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.04
14:47:42 SQL> CREATE TABLE stk12svmspy COMPRESS AS
14:47:42   2  SELECT
14:47:42   3  tkr
14:47:42   4  ,ydate
14:47:42   5  ,tkrdate
14:47:42   6  ,clse
14:47:42   7  ,rnum
14:47:42   8  ,g1
14:47:42   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
14:47:42  10  -- I want more attributes from the ones I derived above:
14:47:42  11  -- clse relation to moving-min
14:47:42  12  ,clse-min3  cm3
14:47:42  13  ,clse-min4  cm4
14:47:42  14  ,clse-min5  cm5
14:47:42  15  ,clse-min6  cm6
14:47:42  16  ,clse-min7  cm7
14:47:42  17  ,clse-min8  cm8
14:47:42  18  ,clse-min9  cm9
14:47:42  19  -- clse relation to moving-avg
14:47:42  20  ,clse-avg3  ca3
14:47:42  21  ,clse-avg4  ca4
14:47:42  22  ,clse-avg5  ca5
14:47:42  23  ,clse-avg6  ca6
14:47:42  24  ,clse-avg7  ca7
14:47:42  25  ,clse-avg8  ca8
14:47:42  26  ,clse-avg9  ca9
14:47:42  27  -- clse relation to moving-max
14:47:42  28  ,clse-max3  cx3
14:47:42  29  ,clse-max4  cx4
14:47:42  30  ,clse-max5  cx5
14:47:42  31  ,clse-max6  cx6
14:47:42  32  ,clse-max7  cx7
14:47:42  33  ,clse-max8  cx8
14:47:42  34  ,clse-max9  cx9
14:47:42  35  -- Derive date related attributes:
14:47:42  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:47:42  37  ,0+TO_CHAR(ydate,'D')d
14:47:42  38  ,0+TO_CHAR(ydate,'W')w
14:47:42  39  -- mpm stands for minutes-past-midnight:
14:47:42  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:47:42  41  -- mph stands for minutes-past-hour:
14:47:42  42  ,0+TO_CHAR(ydate,'MI')mph
14:47:42  43  FROM stk10svmspy
14:47:42  44  ORDER BY ydate
14:47:42  45  /

Table created.

Elapsed: 00:00:00.14
14:47:42 SQL> 
14:47:42 SQL> -- rpt
14:47:42 SQL> 
14:47:42 SQL> SELECT
14:47:42   2  tkr
14:47:42   3  ,COUNT(tkr)ccount
14:47:42   4  ,MIN(clse)mnclse,MAX(clse)mxclse
14:47:42   5  -- ,MIN(avg4),MAX(avg4)
14:47:42   6  ,MIN(ydate),MAX(ydate)
14:47:42   7  ,MIN(g1)
14:47:42   8  ,AVG(g1)
14:47:42   9  ,MAX(g1)
14:47:42  10  FROM stk12svmspy
14:47:42  11  GROUP BY tkr
14:47:42  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
TLT	      4524     74.605	   94.55 2011-01-04 14:30:00 2011-03-28 19:55:00      -2.04  .25459093 16.5532813

Elapsed: 00:00:00.02
14:47:42 SQL> 
14:47:42 SQL> -- Prepare for derivation of NTILE based parameters.
14:47:42 SQL> -- Also derive the "trend" parameter:
14:47:42 SQL> 
14:47:42 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
14:47:42 SQL> CREATE TABLE stk14svmspy COMPRESS AS
14:47:42   2  SELECT
14:47:42   3  tkr
14:47:42   4  ,ydate
14:47:42   5  ,tkrdate
14:47:42   6  ,clse
14:47:42   7  ,g1
14:47:42   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
14:47:42   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
14:47:42  10  ,CASE WHEN trend IS NULL THEN 1
14:47:42  11  	    WHEN trend =0      THEN 1
14:47:42  12  	    ELSE trend END trend
14:47:42  13  ,cm3
14:47:42  14  ,cm4
14:47:42  15  ,cm5
14:47:42  16  ,cm6
14:47:42  17  ,cm7
14:47:42  18  ,cm8
14:47:42  19  ,cm9
14:47:42  20  ,ca3
14:47:42  21  ,ca4
14:47:42  22  ,ca5
14:47:42  23  ,ca6
14:47:42  24  ,ca7
14:47:42  25  ,ca8
14:47:42  26  ,ca9
14:47:42  27  ,cx3
14:47:42  28  ,cx4
14:47:42  29  ,cx5
14:47:42  30  ,cx6
14:47:42  31  ,cx7
14:47:42  32  ,cx8
14:47:42  33  ,cx9
14:47:42  34  ,hh
14:47:42  35  ,d
14:47:42  36  ,w
14:47:42  37  ,mpm
14:47:42  38  ,mph
14:47:42  39  FROM stk12svmspy
14:47:42  40  -- Guard against divide by 0:
14:47:42  41  WHERE clse > 0
14:47:42  42  ORDER BY ydate
14:47:42  43  /

Table created.

Elapsed: 00:00:00.12
14:47:42 SQL> 
14:47:42 SQL> -- rpt
14:47:42 SQL> 
14:47:42 SQL> SELECT
14:47:42   2  tkr
14:47:42   3  ,trend
14:47:42   4  ,gatt
14:47:42   5  ,COUNT(tkr)
14:47:42   6  ,AVG(g1)
14:47:42   7  FROM stk14svmspy
14:47:42   8  GROUP BY tkr,trend,gatt
14:47:42   9  ORDER BY tkr,trend,gatt
14:47:42  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
TLT		-1 nup	     1409 -.40497253
TLT		-1 up	      936 1.91817975
TLT		-1	      108
TLT		 1 nup	     1416 -.38138416
TLT		 1 up	      517 .782147029
TLT		 1	      138

6 rows selected.

Elapsed: 00:00:00.01
14:47:42 SQL> 
14:47:42 SQL> -- Derive NTILE based params:
14:47:42 SQL> 
14:47:42 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
14:47:42 SQL> CREATE TABLE stk16svmspy COMPRESS AS
14:47:42   2  SELECT
14:47:42   3  tkr
14:47:42   4  ,ydate
14:47:42   5  ,tkrdate
14:47:42   6  ,clse
14:47:42   7  ,g1
14:47:42   8  ,gatt
14:47:42   9  ,gattn
14:47:42  10  ,trend
14:47:42  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
14:47:42  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
14:47:42  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
14:47:42  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
14:47:42  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
14:47:42  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
14:47:42  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
14:47:42  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
14:47:42  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
14:47:42  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
14:47:42  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
14:47:42  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
14:47:42  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
14:47:42  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
14:47:42  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
14:47:42  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
14:47:42  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
14:47:42  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
14:47:42  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
14:47:42  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
14:47:42  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
14:47:42  32  ,hh  att21
14:47:42  33  ,d   att22
14:47:42  34  ,w   att23
14:47:42  35  ,mpm att24
14:47:42  36  ,mph att25
14:47:42  37  ,trend att26
14:47:42  38  FROM stk14svmspy
14:47:42  39  ORDER BY ydate
14:47:42  40  /

Table created.

Elapsed: 00:00:00.58
14:47:43 SQL> 
14:47:43 SQL> -- rpt
14:47:43 SQL> 
14:47:43 SQL> SELECT
14:47:43   2  tkr
14:47:43   3  ,trend
14:47:43   4  ,gatt
14:47:43   5  ,COUNT(tkr)
14:47:43   6  ,AVG(g1)
14:47:43   7  FROM stk16svmspy
14:47:43   8  GROUP BY tkr,trend,gatt
14:47:43   9  ORDER BY tkr,trend,gatt
14:47:43  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
TLT		-1 nup	     1409 -.40497253
TLT		-1 up	      936 1.91817975
TLT		-1	      108
TLT		 1 nup	     1416 -.38138416
TLT		 1 up	      517 .782147029
TLT		 1	      138

6 rows selected.

Elapsed: 00:00:00.01
14:47:43 SQL> 
14:47:43 SQL> -- Comment out feedback related syntax:
14:47:43 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
14:47:43 SQL> -- SELECT
14:47:43 SQL> -- m.tkr
14:47:43 SQL> -- ,m.ydate
14:47:43 SQL> -- ,m.tkrdate
14:47:43 SQL> -- ,l.score score_long
14:47:43 SQL> -- ,s.score score_short
14:47:43 SQL> -- ,m.g1
14:47:43 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
14:47:43 SQL> -- WHERE l.targ='gatt'
14:47:43 SQL> -- AND	 s.targ='gattn'
14:47:43 SQL> -- AND l.tkrdate = s.tkrdate
14:47:43 SQL> -- AND l.tkrdate = m.tkrdate
14:47:43 SQL> -- -- Speed things up:
14:47:43 SQL> -- AND l.tkr = '&1'
14:47:43 SQL> -- AND s.tkr = '&1'
14:47:43 SQL> -- /
14:47:43 SQL> --
14:47:43 SQL> -- DROP TABLE score_corr_tkr;
14:47:43 SQL> --
14:47:43 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
14:47:43 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
14:47:43 SQL> -- (
14:47:43 SQL> --   SELECT
14:47:43 SQL> --   tkrdate
14:47:43 SQL> --   -- Find corr() tween score and g1 over 8 day period:
14:47:43 SQL> --   ,CORR((score_long - score_short),g1)
14:47:43 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
14:47:43 SQL> --   FROM sc12tkr
14:47:43 SQL> -- )
14:47:43 SQL> -- GROUP BY tkrdate
14:47:43 SQL> -- /
14:47:43 SQL> 
14:47:43 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
14:47:43 SQL> 
14:47:43 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.03
14:47:43 SQL> 
14:47:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.98
14:47:44 SQL> 
14:47:44 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
14:47:44   2  SELECT
14:47:44   3  tkr
14:47:44   4  ,ydate
14:47:44   5  ,tkrdate
14:47:44   6  ,trend
14:47:44   7  ,g1
14:47:44   8  ,gatt
14:47:44   9  ,gattn
14:47:44  10  -- Goodness attributes:
14:47:44  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
14:47:44  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
14:47:44  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
14:47:44  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
14:47:44  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
14:47:44  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
14:47:44  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
14:47:44  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
14:47:44  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
14:47:44  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
14:47:44  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
14:47:44  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
14:47:44  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
14:47:44  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
14:47:44  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
14:47:44  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
14:47:44  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
14:47:44  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
14:47:44  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
14:47:44  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
14:47:44  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
14:47:44  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
14:47:44  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
14:47:44  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
14:47:44  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
14:47:44  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
14:47:44  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
14:47:44  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
14:47:44  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
14:47:44  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
14:47:44  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
14:47:44  42  FROM stk16svmspy
14:47:44  43  /

Table created.

Elapsed: 00:00:00.85
14:47:44 SQL> 
14:47:44 SQL> -- rpt
14:47:44 SQL> 
14:47:44 SQL> SELECT
14:47:44   2  tkr
14:47:44   3  ,trend
14:47:44   4  ,gatt
14:47:44   5  ,COUNT(tkr)
14:47:44   6  ,AVG(g1)
14:47:44   7  FROM stk_ms_svmspy
14:47:44   8  GROUP BY tkr,trend,gatt
14:47:44   9  ORDER BY tkr,trend,gatt
14:47:44  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
TLT		-1 nup	     1409 -.40497253
TLT		-1 up	      936 1.91817975
TLT		-1	      108
TLT		 1 nup	     1416 -.38138416
TLT		 1 up	      517 .782147029
TLT		 1	      138

6 rows selected.

Elapsed: 00:00:00.02
14:47:45 SQL> 
14:47:45 SQL> SELECT
14:47:45   2  tkr
14:47:45   3  ,0+TO_CHAR(ydate,'D')daynum
14:47:45   4  ,COUNT(tkr)
14:47:45   5  ,MIN(ydate),MAX(ydate)
14:47:45   6  FROM stk_ms_svmspy
14:47:45   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
14:47:45   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
14:47:45   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
TLT		 2	  780 2011-01-10 14:30:00 2011-03-28 19:55:00
TLT		 3	  936 2011-01-04 14:30:00 2011-03-22 19:55:00
TLT		 4	  936 2011-01-05 14:30:00 2011-03-23 19:55:00
TLT		 5	  936 2011-01-06 14:30:00 2011-03-24 19:55:00
TLT		 6	  936 2011-01-07 14:30:00 2011-03-25 19:55:00

Elapsed: 00:00:00.01
14:47:45 SQL> 
14:47:45 SQL> -- exit
14:47:45 SQL> @stk10svmd.sql '&1'
14:47:45 SQL> --
14:47:45 SQL> -- stk10svmd.sql
14:47:45 SQL> --
14:47:45 SQL> 
14:47:45 SQL> -- Creates views and tables for demonstrating SVM.
14:47:45 SQL> -- I need to run this after I run stk10.sql
14:47:45 SQL> 
14:47:45 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.03
14:47:45 SQL> 
14:47:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
14:47:45 SQL> 
14:47:45 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
14:47:45   2  SELECT
14:47:45   3  tkr
14:47:45   4  ,ydate
14:47:45   5  ,tkr||ydate tkrdate
14:47:45   6  ,clse
14:47:45   7  ,rownum rnum -- acts as t in my time-series
14:47:45   8  -- Derive some attributes from clse.
14:47:45   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
14:47:45  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
14:47:45  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
14:47:45  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
14:47:45  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
14:47:45  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
14:47:45  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
14:47:45  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
14:47:45  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
14:47:45  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
14:47:45  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
14:47:45  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
14:47:45  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
14:47:45  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
14:47:45  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
14:47:45  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
14:47:45  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
14:47:45  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
14:47:45  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
14:47:45  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
14:47:45  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
14:47:45  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
14:47:45  31  -- ystk21 created here: svmd/cr_ystk21.sql
14:47:45  32  FROM ystk21
14:47:45  33  WHERE UPPER(tkr)='&1'
14:47:45  34  AND ydate > '1990-01-01'
14:47:45  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
14:47:45  36  ORDER BY ydate
14:47:45  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='TLT'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='TLT')

Table created.

Elapsed: 00:00:00.38
14:47:45 SQL> 
14:47:45 SQL> -- rpt
14:47:45 SQL> 
14:47:45 SQL> SELECT
14:47:45   2  tkr
14:47:45   3  ,COUNT(tkr)
14:47:45   4  ,MIN(clse),MAX(clse)
14:47:45   5  ,MIN(avg4),MAX(avg4)
14:47:45   6  ,MIN(ydate),MAX(ydate)
14:47:45   7  FROM stk_svmd10svmspy
14:47:45   8  GROUP BY tkr
14:47:45   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
TLT		2181	  57.15     112.75	57.15	  112.06 2002-07-31 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.02
14:47:45 SQL> 
14:47:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:47:45 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
14:47:45 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
14:47:45   2  SELECT
14:47:45   3  tkr
14:47:45   4  ,ydate
14:47:45   5  ,tkrdate
14:47:45   6  ,clse
14:47:45   7  ,rnum
14:47:45   8  -- g1 is important. I want to predict g1:
14:47:45   9  ,ld - clse g1
14:47:45  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
14:47:45  11  -- I want more attributes from the ones I derived above:
14:47:45  12  -- clse relation to moving-min
14:47:45  13  ,clse-min3  cm3
14:47:45  14  ,clse-min4  cm4
14:47:45  15  ,clse-min5  cm5
14:47:45  16  ,clse-min6  cm6
14:47:45  17  ,clse-min7  cm7
14:47:45  18  ,clse-min8  cm8
14:47:45  19  ,clse-min9  cm9
14:47:45  20  -- clse relation to moving-avg
14:47:45  21  ,clse-avg3  ca3
14:47:45  22  ,clse-avg4  ca4
14:47:45  23  ,clse-avg5  ca5
14:47:45  24  ,clse-avg6  ca6
14:47:45  25  ,clse-avg7  ca7
14:47:45  26  ,clse-avg8  ca8
14:47:45  27  ,clse-avg9  ca9
14:47:45  28  -- clse relation to moving-max
14:47:45  29  ,clse-max3  cx3
14:47:45  30  ,clse-max4  cx4
14:47:45  31  ,clse-max5  cx5
14:47:45  32  ,clse-max6  cx6
14:47:45  33  ,clse-max7  cx7
14:47:45  34  ,clse-max8  cx8
14:47:45  35  ,clse-max9  cx9
14:47:45  36  -- Derive date related attributes:
14:47:45  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:47:45  38  ,0+TO_CHAR(ydate,'D')d
14:47:45  39  ,0+TO_CHAR(ydate,'W')w
14:47:45  40  -- mpm stands for minutes-past-midnight:
14:47:45  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:47:45  42  -- mph stands for minutes-past-hour:
14:47:45  43  ,0+TO_CHAR(ydate,'MI')mph
14:47:45  44  FROM stk_svmd10svmspy
14:47:45  45  ORDER BY ydate
14:47:45  46  /

Table created.

Elapsed: 00:00:00.13
14:47:45 SQL> 
14:47:45 SQL> -- rpt
14:47:45 SQL> 
14:47:45 SQL> SELECT
14:47:45   2  tkr
14:47:45   3  ,COUNT(tkr)
14:47:45   4  ,MIN(clse),MAX(clse)
14:47:45   5  ,MIN(ydate),MAX(ydate)
14:47:45   6  FROM stk_svmd12
14:47:45   7  GROUP BY tkr
14:47:45   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
TLT		2181	  57.15     112.75 2002-07-31 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.02
14:47:45 SQL> 
14:47:45 SQL> -- Prepare for derivation of NTILE based parameters.
14:47:45 SQL> -- Also derive the "trend" parameter:
14:47:45 SQL> 
14:47:45 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
14:47:45 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
14:47:45   2  SELECT
14:47:45   3  tkr
14:47:45   4  ,ydate
14:47:45   5  ,tkrdate
14:47:45   6  ,clse
14:47:45   7  ,g1
14:47:45   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
14:47:45   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
14:47:45  10  ,CASE WHEN trend IS NULL THEN 1
14:47:45  11  	    WHEN trend =0      THEN 1
14:47:45  12  	    ELSE trend END trend
14:47:45  13  ,cm3
14:47:45  14  ,cm4
14:47:45  15  ,cm5
14:47:45  16  ,cm6
14:47:45  17  ,cm7
14:47:45  18  ,cm8
14:47:45  19  ,cm9
14:47:45  20  ,ca3
14:47:45  21  ,ca4
14:47:45  22  ,ca5
14:47:45  23  ,ca6
14:47:45  24  ,ca7
14:47:45  25  ,ca8
14:47:45  26  ,ca9
14:47:45  27  ,cx3
14:47:45  28  ,cx4
14:47:45  29  ,cx5
14:47:45  30  ,cx6
14:47:45  31  ,cx7
14:47:45  32  ,cx8
14:47:45  33  ,cx9
14:47:45  34  ,hh
14:47:45  35  ,d
14:47:45  36  ,w
14:47:45  37  ,mpm
14:47:45  38  ,mph
14:47:45  39  FROM stk_svmd12
14:47:45  40  -- Guard against divide by 0:
14:47:45  41  WHERE clse > 0
14:47:45  42  ORDER BY ydate
14:47:45  43  /

Table created.

Elapsed: 00:00:00.07
14:47:45 SQL> 
14:47:45 SQL> -- rpt
14:47:45 SQL> 
14:47:45 SQL> SELECT
14:47:45   2  tkr
14:47:45   3  ,trend
14:47:45   4  ,gatt
14:47:45   5  ,COUNT(tkr)
14:47:45   6  ,AVG(g1)
14:47:45   7  FROM stk_svmd14
14:47:45   8  GROUP BY tkr,trend,gatt
14:47:45   9  ORDER BY tkr,trend,gatt
14:47:45  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
TLT		  -1 nup	619 -.36696284
TLT		  -1 up 	367 .662643052
TLT		  -1		  1
TLT		   1 nup	788 -.32699239
TLT		   1 up 	406 .681724138

Elapsed: 00:00:00.00
14:47:45 SQL> 
14:47:45 SQL> -- Derive NTILE based params:
14:47:45 SQL> 
14:47:45 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.04
14:47:45 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
14:47:45   2  SELECT
14:47:45   3  tkr
14:47:45   4  ,ydate
14:47:45   5  ,tkrdate
14:47:45   6  ,clse
14:47:45   7  ,g1
14:47:45   8  ,gatt
14:47:45   9  ,gattn
14:47:45  10  ,trend
14:47:45  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
14:47:45  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
14:47:45  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
14:47:45  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
14:47:45  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
14:47:45  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
14:47:45  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
14:47:45  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
14:47:45  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
14:47:45  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
14:47:45  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
14:47:45  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
14:47:45  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
14:47:45  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
14:47:45  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
14:47:45  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
14:47:45  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
14:47:45  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
14:47:45  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
14:47:45  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
14:47:45  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
14:47:45  32  ,hh  att21
14:47:45  33  ,d   att22
14:47:45  34  ,w   att23
14:47:45  35  ,mpm att24
14:47:45  36  ,mph att25
14:47:45  37  ,trend att26
14:47:45  38  FROM stk_svmd14
14:47:45  39  ORDER BY ydate
14:47:45  40  /

Table created.

Elapsed: 00:00:00.27
14:47:46 SQL> 
14:47:46 SQL> -- rpt
14:47:46 SQL> 
14:47:46 SQL> SELECT
14:47:46   2  tkr
14:47:46   3  ,trend
14:47:46   4  ,gatt
14:47:46   5  ,COUNT(tkr)
14:47:46   6  ,AVG(g1)
14:47:46   7  FROM stk_svmd16
14:47:46   8  GROUP BY tkr,trend,gatt
14:47:46   9  ORDER BY tkr,trend,gatt
14:47:46  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
TLT		  -1 nup	619 -.36696284
TLT		  -1 up 	367 .662643052
TLT		  -1		  1
TLT		   1 nup	788 -.32699239
TLT		   1 up 	406 .681724138

Elapsed: 00:00:00.01
14:47:46 SQL> 
14:47:46 SQL> -- Comment out feedback related syntax:
14:47:46 SQL> 
14:47:46 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
14:47:46 SQL> -- SELECT
14:47:46 SQL> -- m.tkr
14:47:46 SQL> -- ,m.ydate
14:47:46 SQL> -- ,m.tkrdate
14:47:46 SQL> -- ,l.score score_long
14:47:46 SQL> -- ,s.score score_short
14:47:46 SQL> -- ,m.g1
14:47:46 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
14:47:46 SQL> -- WHERE l.targ='gatt'
14:47:46 SQL> -- AND	 s.targ='gattn'
14:47:46 SQL> -- AND l.tkrdate = s.tkrdate
14:47:46 SQL> -- AND l.tkrdate = m.tkrdate
14:47:46 SQL> -- -- Speed things up:
14:47:46 SQL> -- AND l.tkr = '&1'
14:47:46 SQL> -- AND s.tkr = '&1'
14:47:46 SQL> -- /
14:47:46 SQL> --
14:47:46 SQL> -- DROP TABLE score_corr_tkr;
14:47:46 SQL> --
14:47:46 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
14:47:46 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
14:47:46 SQL> -- (
14:47:46 SQL> --   SELECT
14:47:46 SQL> --   tkrdate
14:47:46 SQL> --   -- Find corr() tween score and g1 over 8 day period:
14:47:46 SQL> --   ,CORR((score_long - score_short),g1)
14:47:46 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
14:47:46 SQL> --   FROM sc12tkr
14:47:46 SQL> -- )
14:47:46 SQL> -- GROUP BY tkrdate
14:47:46 SQL> -- /
14:47:46 SQL> 
14:47:46 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
14:47:46 SQL> 
14:47:46 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
14:47:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
14:47:46 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
14:47:46   2  SELECT
14:47:46   3  tkr
14:47:46   4  ,ydate
14:47:46   5  ,tkrdate
14:47:46   6  ,trend
14:47:46   7  ,g1
14:47:46   8  ,gatt
14:47:46   9  ,gattn
14:47:46  10  -- Goodness attributes:
14:47:46  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
14:47:46  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
14:47:46  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
14:47:46  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
14:47:46  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
14:47:46  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
14:47:46  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
14:47:46  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
14:47:46  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
14:47:46  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
14:47:46  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
14:47:46  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
14:47:46  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
14:47:46  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
14:47:46  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
14:47:46  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
14:47:46  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
14:47:46  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
14:47:46  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
14:47:46  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
14:47:46  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
14:47:46  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
14:47:46  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
14:47:46  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
14:47:46  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
14:47:46  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
14:47:46  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
14:47:46  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
14:47:46  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
14:47:46  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
14:47:46  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
14:47:46  42  FROM stk_svmd16
14:47:46  43  /

Table created.

Elapsed: 00:00:00.59
14:47:47 SQL> 
14:47:47 SQL> -- rpt
14:47:47 SQL> 
14:47:47 SQL> SELECT
14:47:47   2  tkr
14:47:47   3  ,trend
14:47:47   4  ,gatt
14:47:47   5  ,COUNT(tkr)
14:47:47   6  ,AVG(g1)
14:47:47   7  FROM stk_ms_svmd_svmspy
14:47:47   8  GROUP BY tkr,trend,gatt
14:47:47   9  ORDER BY tkr,trend,gatt
14:47:47  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
TLT		  -1 nup	619 -.36696284
TLT		  -1 up 	367 .662643052
TLT		  -1		  1
TLT		   1 nup	788 -.32699239
TLT		   1 up 	406 .681724138

Elapsed: 00:00:00.01
14:47:47 SQL> 
14:47:47 SQL> SELECT
14:47:47   2  tkr
14:47:47   3  ,COUNT(tkr)
14:47:47   4  ,MIN(ydate),MAX(ydate)
14:47:47   5  FROM stk_ms_svmd_svmspy
14:47:47   6  GROUP BY tkr
14:47:47   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
TLT		2181 2002-07-31 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.00
14:47:47 SQL> 
14:47:47 SQL> -- exit
14:47:47 SQL> 
14:47:47 SQL> 
14:47:47 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.11
14:47:47 SQL> 
14:47:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
14:47:47 SQL> 
14:47:47 SQL> CREATE TABLE stk_ms_u COMPRESS AS
14:47:47   2  SELECT * FROM stk_ms_svmspy
14:47:47   3  UNION
14:47:47   4  SELECT * FROM stk_ms_svmd_svmspy
14:47:47   5  /

Table created.

Elapsed: 00:00:00.16
14:47:47 SQL> 
14:47:47 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
