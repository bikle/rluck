
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 16 13:02:02 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

13:02:02 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
13:02:02 SQL> 
13:02:02 SQL> 13:02:02 SQL> --
13:02:02 SQL> -- stk10.sql
13:02:02 SQL> --
13:02:02 SQL> 
13:02:02 SQL> -- Creates views and tables for demonstrating SVM.
13:02:02 SQL> 
13:02:02 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.04
13:02:02 SQL> 
13:02:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
13:02:03 SQL> 
13:02:03 SQL> CREATE TABLE stk10svmspy COMPRESS AS
13:02:03   2  SELECT
13:02:03   3  tkr
13:02:03   4  ,ydate
13:02:03   5  ,tkr||ydate tkrdate
13:02:03   6  ,clse
13:02:03   7  ,clse2
13:02:03   8  ,rownum rnum -- acts as t in my time-series
13:02:03   9  -- g1 is important. I want to predict g1:
13:02:03  10  ,gain1day g1
13:02:03  11  -- Derive some attributes from clse.
13:02:03  12  -- Each row spans 5 minutes.
13:02:03  13  -- The number of rows in 1 day is 24*60/5.
13:02:03  14  -- I want the aggregations to span from 3 days to 9 days:
13:02:03  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
13:02:03  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
13:02:03  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
13:02:03  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
13:02:03  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
13:02:03  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
13:02:03  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
13:02:03  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
13:02:03  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
13:02:03  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
13:02:03  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
13:02:03  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
13:02:03  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
13:02:03  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
13:02:03  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
13:02:03  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
13:02:03  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
13:02:03  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
13:02:03  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
13:02:03  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
13:02:03  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
13:02:03  36  FROM di5min_stk_c2
13:02:03  37  WHERE UPPER(tkr)='&1'
13:02:03  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
13:02:03  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
13:02:03  40  ORDER BY ydate
13:02:03  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='QQQQ'

Table created.

Elapsed: 00:00:03.29
13:02:06 SQL> 
13:02:06 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.10
13:02:07 SQL> 
13:02:07 SQL> -- rpt
13:02:07 SQL> 
13:02:07 SQL> SELECT
13:02:07   2  tkr
13:02:07   3  ,COUNT(tkr)ccount
13:02:07   4  ,MIN(clse)mnclse,MAX(clse)mxclse
13:02:07   5  -- ,MIN(avg4),MAX(avg4)
13:02:07   6  ,MIN(ydate),MAX(ydate)
13:02:07   7  ,MIN(g1)
13:02:07   8  ,MAX(g1)
13:02:07   9  FROM stk10svmspy
13:02:07  10  GROUP BY tkr
13:02:07  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
QQQQ	     24815	 40.7	   57.01 2009-10-28 18:10:00 2011-01-14 20:55:00      -3.15	   2.5

Elapsed: 00:00:00.03
13:02:07 SQL> 
13:02:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
13:02:07 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.04
13:02:07 SQL> CREATE TABLE stk12svmspy COMPRESS AS
13:02:07   2  SELECT
13:02:07   3  tkr
13:02:07   4  ,ydate
13:02:07   5  ,tkrdate
13:02:07   6  ,clse
13:02:07   7  ,rnum
13:02:07   8  ,g1
13:02:07   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
13:02:07  10  -- I want more attributes from the ones I derived above:
13:02:07  11  -- clse relation to moving-min
13:02:07  12  ,clse-min3  cm3
13:02:07  13  ,clse-min4  cm4
13:02:07  14  ,clse-min5  cm5
13:02:07  15  ,clse-min6  cm6
13:02:07  16  ,clse-min7  cm7
13:02:07  17  ,clse-min8  cm8
13:02:07  18  ,clse-min9  cm9
13:02:07  19  -- clse relation to moving-avg
13:02:07  20  ,clse-avg3  ca3
13:02:07  21  ,clse-avg4  ca4
13:02:07  22  ,clse-avg5  ca5
13:02:07  23  ,clse-avg6  ca6
13:02:07  24  ,clse-avg7  ca7
13:02:07  25  ,clse-avg8  ca8
13:02:07  26  ,clse-avg9  ca9
13:02:07  27  -- clse relation to moving-max
13:02:07  28  ,clse-max3  cx3
13:02:07  29  ,clse-max4  cx4
13:02:07  30  ,clse-max5  cx5
13:02:07  31  ,clse-max6  cx6
13:02:07  32  ,clse-max7  cx7
13:02:07  33  ,clse-max8  cx8
13:02:07  34  ,clse-max9  cx9
13:02:07  35  -- Derive date related attributes:
13:02:07  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:02:07  37  ,0+TO_CHAR(ydate,'D')d
13:02:07  38  ,0+TO_CHAR(ydate,'W')w
13:02:07  39  -- mpm stands for minutes-past-midnight:
13:02:07  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:02:07  41  -- mph stands for minutes-past-hour:
13:02:07  42  ,0+TO_CHAR(ydate,'MI')mph
13:02:07  43  FROM stk10svmspy
13:02:07  44  ORDER BY ydate
13:02:07  45  /

Table created.

Elapsed: 00:00:00.56
13:02:08 SQL> 
13:02:08 SQL> -- rpt
13:02:08 SQL> 
13:02:08 SQL> SELECT
13:02:08   2  tkr
13:02:08   3  ,COUNT(tkr)ccount
13:02:08   4  ,MIN(clse)mnclse,MAX(clse)mxclse
13:02:08   5  -- ,MIN(avg4),MAX(avg4)
13:02:08   6  ,MIN(ydate),MAX(ydate)
13:02:08   7  ,MIN(g1)
13:02:08   8  ,AVG(g1)
13:02:08   9  ,MAX(g1)
13:02:08  10  FROM stk12svmspy
13:02:08  11  GROUP BY tkr
13:02:08  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
QQQQ	     24815	 40.7	   57.01 2009-10-28 18:10:00 2011-01-14 20:55:00      -3.15 .051300183	      2.5

Elapsed: 00:00:00.05
13:02:08 SQL> 
13:02:08 SQL> -- Prepare for derivation of NTILE based parameters.
13:02:08 SQL> -- Also derive the "trend" parameter:
13:02:08 SQL> 
13:02:08 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.03
13:02:08 SQL> CREATE TABLE stk14svmspy COMPRESS AS
13:02:08   2  SELECT
13:02:08   3  tkr
13:02:08   4  ,ydate
13:02:08   5  ,tkrdate
13:02:08   6  ,clse
13:02:08   7  ,g1
13:02:08   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
13:02:08   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
13:02:08  10  ,CASE WHEN trend IS NULL THEN 1
13:02:08  11  	    WHEN trend =0      THEN 1
13:02:08  12  	    ELSE trend END trend
13:02:08  13  ,cm3
13:02:08  14  ,cm4
13:02:08  15  ,cm5
13:02:08  16  ,cm6
13:02:08  17  ,cm7
13:02:08  18  ,cm8
13:02:08  19  ,cm9
13:02:08  20  ,ca3
13:02:08  21  ,ca4
13:02:08  22  ,ca5
13:02:08  23  ,ca6
13:02:08  24  ,ca7
13:02:08  25  ,ca8
13:02:08  26  ,ca9
13:02:08  27  ,cx3
13:02:08  28  ,cx4
13:02:08  29  ,cx5
13:02:08  30  ,cx6
13:02:08  31  ,cx7
13:02:08  32  ,cx8
13:02:08  33  ,cx9
13:02:08  34  ,hh
13:02:08  35  ,d
13:02:08  36  ,w
13:02:08  37  ,mpm
13:02:08  38  ,mph
13:02:08  39  FROM stk12svmspy
13:02:08  40  -- Guard against divide by 0:
13:02:08  41  WHERE clse > 0
13:02:08  42  ORDER BY ydate
13:02:08  43  /

Table created.

Elapsed: 00:00:00.36
13:02:08 SQL> 
13:02:08 SQL> -- rpt
13:02:08 SQL> 
13:02:08 SQL> SELECT
13:02:08   2  tkr
13:02:08   3  ,trend
13:02:08   4  ,gatt
13:02:08   5  ,COUNT(tkr)
13:02:08   6  ,AVG(g1)
13:02:08   7  FROM stk14svmspy
13:02:08   8  GROUP BY tkr,trend,gatt
13:02:08   9  ORDER BY tkr,trend,gatt
13:02:08  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     4335 -.42757555
QQQQ		-1 up	     3394 .574138922
QQQQ		-1	       20
QQQQ		 1 nup	     9725 -.20173535
QQQQ		 1 up	     7131 .438648682
QQQQ		 1	      210

6 rows selected.

Elapsed: 00:00:00.03
13:02:08 SQL> 
13:02:08 SQL> -- Derive NTILE based params:
13:02:08 SQL> 
13:02:08 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
13:02:08 SQL> CREATE TABLE stk16svmspy COMPRESS AS
13:02:08   2  SELECT
13:02:08   3  tkr
13:02:08   4  ,ydate
13:02:08   5  ,tkrdate
13:02:08   6  ,clse
13:02:08   7  ,g1
13:02:08   8  ,gatt
13:02:08   9  ,gattn
13:02:08  10  ,trend
13:02:08  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
13:02:08  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
13:02:08  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
13:02:08  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
13:02:08  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
13:02:08  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
13:02:08  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
13:02:08  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
13:02:08  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
13:02:08  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
13:02:08  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
13:02:08  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
13:02:08  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
13:02:08  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
13:02:08  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
13:02:08  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
13:02:08  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
13:02:08  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
13:02:08  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
13:02:08  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
13:02:08  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
13:02:08  32  ,hh  att21
13:02:08  33  ,d   att22
13:02:08  34  ,w   att23
13:02:08  35  ,mpm att24
13:02:08  36  ,mph att25
13:02:08  37  ,trend att26
13:02:08  38  FROM stk14svmspy
13:02:08  39  ORDER BY ydate
13:02:08  40  /

Table created.

Elapsed: 00:00:02.84
13:02:11 SQL> 
13:02:11 SQL> -- rpt
13:02:11 SQL> 
13:02:11 SQL> SELECT
13:02:11   2  tkr
13:02:11   3  ,trend
13:02:11   4  ,gatt
13:02:11   5  ,COUNT(tkr)
13:02:11   6  ,AVG(g1)
13:02:11   7  FROM stk16svmspy
13:02:11   8  GROUP BY tkr,trend,gatt
13:02:11   9  ORDER BY tkr,trend,gatt
13:02:11  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     4335 -.42757555
QQQQ		-1 up	     3394 .574138922
QQQQ		-1	       20
QQQQ		 1 nup	     9725 -.20173535
QQQQ		 1 up	     7131 .438648682
QQQQ		 1	      210

6 rows selected.

Elapsed: 00:00:00.03
13:02:11 SQL> 
13:02:11 SQL> -- Now I derive goodness attributes:
13:02:11 SQL> 
13:02:11 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.03
13:02:11 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
13:02:11   2  SELECT
13:02:11   3  tkr
13:02:11   4  ,ydate
13:02:11   5  ,tkrdate
13:02:11   6  ,trend
13:02:11   7  ,g1
13:02:11   8  ,gatt
13:02:11   9  ,gattn
13:02:11  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
13:02:11  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
13:02:11  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
13:02:11  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
13:02:11  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
13:02:11  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
13:02:11  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
13:02:11  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
13:02:11  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
13:02:11  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
13:02:11  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
13:02:11  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
13:02:11  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
13:02:11  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
13:02:11  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
13:02:11  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
13:02:11  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
13:02:11  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
13:02:11  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
13:02:11  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
13:02:11  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
13:02:11  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
13:02:11  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
13:02:11  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
13:02:11  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
13:02:11  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
13:02:11  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
13:02:11  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
13:02:11  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
13:02:11  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
13:02:11  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
13:02:11  41  FROM stk16svmspy
13:02:11  42  /

Table created.

Elapsed: 00:00:03.84
13:02:15 SQL> 
13:02:15 SQL> -- rpt
13:02:15 SQL> 
13:02:15 SQL> SELECT
13:02:15   2  tkr
13:02:15   3  ,trend
13:02:15   4  ,gatt
13:02:15   5  ,COUNT(tkr)
13:02:15   6  ,AVG(g1)
13:02:15   7  FROM stk_ms_svmspy
13:02:15   8  GROUP BY tkr,trend,gatt
13:02:15   9  ORDER BY tkr,trend,gatt
13:02:15  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     4335 -.42757555
QQQQ		-1 up	     3394 .574138922
QQQQ		-1	       20
QQQQ		 1 nup	     9725 -.20173535
QQQQ		 1 up	     7131 .438648682
QQQQ		 1	      210

6 rows selected.

Elapsed: 00:00:00.03
13:02:15 SQL> 
13:02:15 SQL> SELECT
13:02:15   2  tkr
13:02:15   3  ,0+TO_CHAR(ydate,'D')daynum
13:02:15   4  ,COUNT(tkr)
13:02:15   5  ,MIN(ydate),MAX(ydate)
13:02:15   6  FROM stk_ms_svmspy
13:02:15   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
13:02:15   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
13:02:15   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
QQQQ		 2	 4922 2009-11-02 13:25:00 2011-01-10 20:55:00
QQQQ		 3	 4926 2009-11-03 13:25:00 2011-01-11 20:55:00
QQQQ		 4	 4921 2009-10-28 18:10:00 2011-01-12 20:55:00
QQQQ		 5	 5018 2009-10-29 13:25:00 2011-01-13 20:55:00
QQQQ		 6	 5028 2009-10-30 13:25:00 2011-01-14 20:55:00

Elapsed: 00:00:00.02
13:02:15 SQL> 
13:02:15 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
