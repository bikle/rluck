
SQL*Plus: Release 11.2.0.1.0 Production on Wed Mar 30 09:12:30 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:12:31 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:12:31 SQL> 
09:12:31 SQL> 09:12:31 SQL> --
09:12:31 SQL> -- stk10u.sql
09:12:31 SQL> --
09:12:31 SQL> 
09:12:31 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
09:12:31 SQL> 
09:12:31 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
09:12:31 SQL> @stk10.sql     '&1'
09:12:31 SQL> --
09:12:31 SQL> -- stk10.sql
09:12:31 SQL> --
09:12:31 SQL> 
09:12:31 SQL> -- Creates views and tables for demonstrating SVM.
09:12:31 SQL> 
09:12:31 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.23
09:12:31 SQL> 
09:12:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
09:12:31 SQL> 
09:12:31 SQL> CREATE TABLE stk10svmspy COMPRESS AS
09:12:31   2  SELECT
09:12:31   3  tkr
09:12:31   4  ,ydate
09:12:31   5  ,tkr||ydate tkrdate
09:12:31   6  ,clse
09:12:31   7  ,clse2
09:12:31   8  ,rownum rnum -- acts as t in my time-series
09:12:31   9  -- g1 is important. I want to predict g1:
09:12:31  10  ,gain1day g1
09:12:31  11  -- Derive some attributes from clse.
09:12:31  12  -- Each row spans 5 minutes.
09:12:31  13  -- The number of rows in 1 day is 24*60/5.
09:12:31  14  -- I want the aggregations to span from 3 days to 9 days:
09:12:31  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
09:12:31  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
09:12:31  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
09:12:31  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
09:12:31  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
09:12:31  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
09:12:31  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
09:12:31  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
09:12:31  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
09:12:31  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
09:12:31  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
09:12:31  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
09:12:31  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
09:12:31  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
09:12:31  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
09:12:31  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
09:12:31  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
09:12:31  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
09:12:31  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
09:12:31  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
09:12:31  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
09:12:31  36  FROM di5min_stk_c2
09:12:31  37  WHERE UPPER(tkr)='&1'
09:12:31  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
09:12:31  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
09:12:31  40  ORDER BY ydate
09:12:31  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='MAR'

Table created.

Elapsed: 00:00:02.66
09:12:34 SQL> 
09:12:34 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
09:12:34 SQL> 
09:12:34 SQL> -- rpt
09:12:34 SQL> 
09:12:34 SQL> SELECT
09:12:34   2  tkr
09:12:34   3  ,COUNT(tkr)ccount
09:12:34   4  ,MIN(clse)mnclse,MAX(clse)mxclse
09:12:34   5  -- ,MIN(avg4),MAX(avg4)
09:12:34   6  ,MIN(ydate),MAX(ydate)
09:12:34   7  ,MIN(g1)
09:12:34   8  ,MAX(g1)
09:12:34   9  FROM stk10svmspy
09:12:34  10  GROUP BY tkr
09:12:34  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
MAR	      4551	34.99	   42.58 2011-01-04 14:30:00 2011-03-29 15:40:00      -2.81	   1.5

Elapsed: 00:00:00.01
09:12:34 SQL> 
09:12:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:12:34 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:12.61
09:12:46 SQL> CREATE TABLE stk12svmspy COMPRESS AS
09:12:46   2  SELECT
09:12:46   3  tkr
09:12:46   4  ,ydate
09:12:46   5  ,tkrdate
09:12:46   6  ,clse
09:12:46   7  ,rnum
09:12:46   8  ,g1
09:12:46   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
09:12:46  10  -- I want more attributes from the ones I derived above:
09:12:46  11  -- clse relation to moving-min
09:12:46  12  ,clse-min3  cm3
09:12:46  13  ,clse-min4  cm4
09:12:46  14  ,clse-min5  cm5
09:12:46  15  ,clse-min6  cm6
09:12:46  16  ,clse-min7  cm7
09:12:46  17  ,clse-min8  cm8
09:12:46  18  ,clse-min9  cm9
09:12:46  19  -- clse relation to moving-avg
09:12:46  20  ,clse-avg3  ca3
09:12:46  21  ,clse-avg4  ca4
09:12:46  22  ,clse-avg5  ca5
09:12:46  23  ,clse-avg6  ca6
09:12:46  24  ,clse-avg7  ca7
09:12:46  25  ,clse-avg8  ca8
09:12:46  26  ,clse-avg9  ca9
09:12:46  27  -- clse relation to moving-max
09:12:46  28  ,clse-max3  cx3
09:12:46  29  ,clse-max4  cx4
09:12:46  30  ,clse-max5  cx5
09:12:46  31  ,clse-max6  cx6
09:12:46  32  ,clse-max7  cx7
09:12:46  33  ,clse-max8  cx8
09:12:46  34  ,clse-max9  cx9
09:12:46  35  -- Derive date related attributes:
09:12:46  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:12:46  37  ,0+TO_CHAR(ydate,'D')d
09:12:46  38  ,0+TO_CHAR(ydate,'W')w
09:12:46  39  -- mpm stands for minutes-past-midnight:
09:12:46  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:12:46  41  -- mph stands for minutes-past-hour:
09:12:46  42  ,0+TO_CHAR(ydate,'MI')mph
09:12:46  43  FROM stk10svmspy
09:12:46  44  ORDER BY ydate
09:12:46  45  /

Table created.

Elapsed: 00:00:00.15
09:12:47 SQL> 
09:12:47 SQL> -- rpt
09:12:47 SQL> 
09:12:47 SQL> SELECT
09:12:47   2  tkr
09:12:47   3  ,COUNT(tkr)ccount
09:12:47   4  ,MIN(clse)mnclse,MAX(clse)mxclse
09:12:47   5  -- ,MIN(avg4),MAX(avg4)
09:12:47   6  ,MIN(ydate),MAX(ydate)
09:12:47   7  ,MIN(g1)
09:12:47   8  ,AVG(g1)
09:12:47   9  ,MAX(g1)
09:12:47  10  FROM stk12svmspy
09:12:47  11  GROUP BY tkr
09:12:47  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
MAR	      4551	34.99	   42.58 2011-01-04 14:30:00 2011-03-29 15:40:00      -2.81 -.07069922	      1.5

Elapsed: 00:00:00.02
09:12:47 SQL> 
09:12:47 SQL> -- Prepare for derivation of NTILE based parameters.
09:12:47 SQL> -- Also derive the "trend" parameter:
09:12:47 SQL> 
09:12:47 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
09:12:47 SQL> CREATE TABLE stk14svmspy COMPRESS AS
09:12:47   2  SELECT
09:12:47   3  tkr
09:12:47   4  ,ydate
09:12:47   5  ,tkrdate
09:12:47   6  ,clse
09:12:47   7  ,g1
09:12:47   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
09:12:47   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
09:12:47  10  ,CASE WHEN trend IS NULL THEN 1
09:12:47  11  	    WHEN trend =0      THEN 1
09:12:47  12  	    ELSE trend END trend
09:12:47  13  ,cm3
09:12:47  14  ,cm4
09:12:47  15  ,cm5
09:12:47  16  ,cm6
09:12:47  17  ,cm7
09:12:47  18  ,cm8
09:12:47  19  ,cm9
09:12:47  20  ,ca3
09:12:47  21  ,ca4
09:12:47  22  ,ca5
09:12:47  23  ,ca6
09:12:47  24  ,ca7
09:12:47  25  ,ca8
09:12:47  26  ,ca9
09:12:47  27  ,cx3
09:12:47  28  ,cx4
09:12:47  29  ,cx5
09:12:47  30  ,cx6
09:12:47  31  ,cx7
09:12:47  32  ,cx8
09:12:47  33  ,cx9
09:12:47  34  ,hh
09:12:47  35  ,d
09:12:47  36  ,w
09:12:47  37  ,mpm
09:12:47  38  ,mph
09:12:47  39  FROM stk12svmspy
09:12:47  40  -- Guard against divide by 0:
09:12:47  41  WHERE clse > 0
09:12:47  42  ORDER BY ydate
09:12:47  43  /

Table created.

Elapsed: 00:00:00.27
09:12:47 SQL> 
09:12:47 SQL> -- rpt
09:12:47 SQL> 
09:12:47 SQL> SELECT
09:12:47   2  tkr
09:12:47   3  ,trend
09:12:47   4  ,gatt
09:12:47   5  ,COUNT(tkr)
09:12:47   6  ,AVG(g1)
09:12:47   7  FROM stk14svmspy
09:12:47   8  GROUP BY tkr,trend,gatt
09:12:47   9  ORDER BY tkr,trend,gatt
09:12:47  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MAR		-1 nup	     2166 -.43620619
MAR		-1 up	     1396 .531010585
MAR		-1	       90
MAR		 1 nup	      525 -.42125388
MAR		 1 up	      218 .551972247
MAR		 1	      156

6 rows selected.

Elapsed: 00:00:00.02
09:12:47 SQL> 
09:12:47 SQL> -- Derive NTILE based params:
09:12:47 SQL> 
09:12:47 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.05
09:12:47 SQL> CREATE TABLE stk16svmspy COMPRESS AS
09:12:47   2  SELECT
09:12:47   3  tkr
09:12:47   4  ,ydate
09:12:47   5  ,tkrdate
09:12:47   6  ,clse
09:12:47   7  ,g1
09:12:47   8  ,gatt
09:12:47   9  ,gattn
09:12:47  10  ,trend
09:12:47  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
09:12:47  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
09:12:47  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
09:12:47  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
09:12:47  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
09:12:47  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
09:12:47  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
09:12:47  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
09:12:47  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
09:12:47  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
09:12:47  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
09:12:47  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
09:12:47  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
09:12:47  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
09:12:47  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
09:12:47  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
09:12:47  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
09:12:47  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
09:12:47  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
09:12:47  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
09:12:47  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
09:12:47  32  ,hh  att21
09:12:47  33  ,d   att22
09:12:47  34  ,w   att23
09:12:47  35  ,mpm att24
09:12:47  36  ,mph att25
09:12:47  37  ,trend att26
09:12:47  38  FROM stk14svmspy
09:12:47  39  ORDER BY ydate
09:12:47  40  /

Table created.

Elapsed: 00:00:00.66
09:12:48 SQL> 
09:12:48 SQL> -- rpt
09:12:48 SQL> 
09:12:48 SQL> SELECT
09:12:48   2  tkr
09:12:48   3  ,trend
09:12:48   4  ,gatt
09:12:48   5  ,COUNT(tkr)
09:12:48   6  ,AVG(g1)
09:12:48   7  FROM stk16svmspy
09:12:48   8  GROUP BY tkr,trend,gatt
09:12:48   9  ORDER BY tkr,trend,gatt
09:12:48  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MAR		-1 nup	     2166 -.43620619
MAR		-1 up	     1396 .531010585
MAR		-1	       90
MAR		 1 nup	      525 -.42125388
MAR		 1 up	      218 .551972247
MAR		 1	      156

6 rows selected.

Elapsed: 00:00:00.02
09:12:48 SQL> 
09:12:48 SQL> -- Comment out feedback related syntax:
09:12:48 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
09:12:48 SQL> -- SELECT
09:12:48 SQL> -- m.tkr
09:12:48 SQL> -- ,m.ydate
09:12:48 SQL> -- ,m.tkrdate
09:12:48 SQL> -- ,l.score score_long
09:12:48 SQL> -- ,s.score score_short
09:12:48 SQL> -- ,m.g1
09:12:48 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
09:12:48 SQL> -- WHERE l.targ='gatt'
09:12:48 SQL> -- AND	 s.targ='gattn'
09:12:48 SQL> -- AND l.tkrdate = s.tkrdate
09:12:48 SQL> -- AND l.tkrdate = m.tkrdate
09:12:48 SQL> -- -- Speed things up:
09:12:48 SQL> -- AND l.tkr = '&1'
09:12:48 SQL> -- AND s.tkr = '&1'
09:12:48 SQL> -- /
09:12:48 SQL> --
09:12:48 SQL> -- DROP TABLE score_corr_tkr;
09:12:48 SQL> --
09:12:48 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
09:12:48 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
09:12:48 SQL> -- (
09:12:48 SQL> --   SELECT
09:12:48 SQL> --   tkrdate
09:12:48 SQL> --   -- Find corr() tween score and g1 over 8 day period:
09:12:48 SQL> --   ,CORR((score_long - score_short),g1)
09:12:48 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
09:12:48 SQL> --   FROM sc12tkr
09:12:48 SQL> -- )
09:12:48 SQL> -- GROUP BY tkrdate
09:12:48 SQL> -- /
09:12:48 SQL> 
09:12:48 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
09:12:48 SQL> 
09:12:48 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
09:12:48 SQL> 
09:12:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
09:12:48 SQL> 
09:12:48 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
09:12:48   2  SELECT
09:12:48   3  tkr
09:12:48   4  ,ydate
09:12:48   5  ,tkrdate
09:12:48   6  ,trend
09:12:48   7  ,g1
09:12:48   8  ,gatt
09:12:48   9  ,gattn
09:12:48  10  -- Goodness attributes:
09:12:48  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
09:12:48  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
09:12:48  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
09:12:48  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
09:12:48  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
09:12:48  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
09:12:48  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
09:12:48  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
09:12:48  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
09:12:48  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
09:12:48  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
09:12:48  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
09:12:48  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
09:12:48  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
09:12:48  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
09:12:48  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
09:12:48  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
09:12:48  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
09:12:48  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
09:12:48  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
09:12:48  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
09:12:48  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
09:12:48  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
09:12:48  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
09:12:48  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
09:12:48  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
09:12:48  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
09:12:48  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
09:12:48  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
09:12:48  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
09:12:48  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
09:12:48  42  FROM stk16svmspy
09:12:48  43  /

Table created.

Elapsed: 00:00:00.80
09:12:49 SQL> 
09:12:49 SQL> -- rpt
09:12:49 SQL> 
09:12:49 SQL> SELECT
09:12:49   2  tkr
09:12:49   3  ,trend
09:12:49   4  ,gatt
09:12:49   5  ,COUNT(tkr)
09:12:49   6  ,AVG(g1)
09:12:49   7  FROM stk_ms_svmspy
09:12:49   8  GROUP BY tkr,trend,gatt
09:12:49   9  ORDER BY tkr,trend,gatt
09:12:49  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MAR		-1 nup	     2166 -.43620619
MAR		-1 up	     1396 .531010585
MAR		-1	       90
MAR		 1 nup	      525 -.42125388
MAR		 1 up	      218 .551972247
MAR		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
09:12:49 SQL> 
09:12:49 SQL> SELECT
09:12:49   2  tkr
09:12:49   3  ,0+TO_CHAR(ydate,'D')daynum
09:12:49   4  ,COUNT(tkr)
09:12:49   5  ,MIN(ydate),MAX(ydate)
09:12:49   6  FROM stk_ms_svmspy
09:12:49   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
09:12:49   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
09:12:49   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
MAR		 2	  780 2011-01-10 14:30:00 2011-03-28 19:55:00
MAR		 3	  963 2011-01-04 14:30:00 2011-03-29 15:40:00
MAR		 4	  936 2011-01-05 14:30:00 2011-03-23 19:55:00
MAR		 5	  936 2011-01-06 14:30:00 2011-03-24 19:55:00
MAR		 6	  936 2011-01-07 14:30:00 2011-03-25 19:55:00

Elapsed: 00:00:00.01
09:12:49 SQL> 
09:12:49 SQL> -- exit
09:12:49 SQL> @stk10svmd.sql '&1'
09:12:49 SQL> --
09:12:49 SQL> -- stk10svmd.sql
09:12:49 SQL> --
09:12:49 SQL> 
09:12:49 SQL> -- Creates views and tables for demonstrating SVM.
09:12:49 SQL> -- I need to run this after I run stk10.sql
09:12:49 SQL> 
09:12:49 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.07
09:12:49 SQL> 
09:12:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
09:12:49 SQL> 
09:12:49 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
09:12:49   2  SELECT
09:12:49   3  tkr
09:12:49   4  ,ydate
09:12:49   5  ,tkr||ydate tkrdate
09:12:49   6  ,clse
09:12:49   7  ,rownum rnum -- acts as t in my time-series
09:12:49   8  -- Derive some attributes from clse.
09:12:49   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
09:12:49  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
09:12:49  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
09:12:49  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
09:12:49  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
09:12:49  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
09:12:49  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
09:12:49  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
09:12:49  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
09:12:49  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
09:12:49  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
09:12:49  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
09:12:49  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
09:12:49  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
09:12:49  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
09:12:49  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
09:12:49  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
09:12:49  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
09:12:49  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
09:12:49  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
09:12:49  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
09:12:49  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
09:12:49  31  -- ystk21 created here: svmd/cr_ystk21.sql
09:12:49  32  FROM ystk21
09:12:49  33  WHERE UPPER(tkr)='&1'
09:12:49  34  AND ydate > '1990-01-01'
09:12:49  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
09:12:49  36  ORDER BY ydate
09:12:49  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='MAR'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='MAR')

Table created.

Elapsed: 00:00:02.08
09:12:51 SQL> 
09:12:51 SQL> -- rpt
09:12:51 SQL> 
09:12:51 SQL> SELECT
09:12:51   2  tkr
09:12:51   3  ,COUNT(tkr)
09:12:51   4  ,MIN(clse),MAX(clse)
09:12:51   5  ,MIN(avg4),MAX(avg4)
09:12:51   6  ,MIN(ydate),MAX(ydate)
09:12:51   7  FROM stk_svmd10svmspy
09:12:51   8  GROUP BY tkr
09:12:51   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
MAR		4392	   4.59      50.17	 4.69	  49.258 1993-10-13 21:00:00 2011-03-29 21:00:00

Elapsed: 00:00:00.01
09:12:51 SQL> 
09:12:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:12:51 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
09:12:51 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
09:12:51   2  SELECT
09:12:51   3  tkr
09:12:51   4  ,ydate
09:12:51   5  ,tkrdate
09:12:51   6  ,clse
09:12:51   7  ,rnum
09:12:51   8  -- g1 is important. I want to predict g1:
09:12:51   9  ,ld - clse g1
09:12:51  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
09:12:51  11  -- I want more attributes from the ones I derived above:
09:12:51  12  -- clse relation to moving-min
09:12:51  13  ,clse-min3  cm3
09:12:51  14  ,clse-min4  cm4
09:12:51  15  ,clse-min5  cm5
09:12:51  16  ,clse-min6  cm6
09:12:51  17  ,clse-min7  cm7
09:12:51  18  ,clse-min8  cm8
09:12:51  19  ,clse-min9  cm9
09:12:51  20  -- clse relation to moving-avg
09:12:51  21  ,clse-avg3  ca3
09:12:51  22  ,clse-avg4  ca4
09:12:51  23  ,clse-avg5  ca5
09:12:51  24  ,clse-avg6  ca6
09:12:51  25  ,clse-avg7  ca7
09:12:51  26  ,clse-avg8  ca8
09:12:51  27  ,clse-avg9  ca9
09:12:51  28  -- clse relation to moving-max
09:12:51  29  ,clse-max3  cx3
09:12:51  30  ,clse-max4  cx4
09:12:51  31  ,clse-max5  cx5
09:12:51  32  ,clse-max6  cx6
09:12:51  33  ,clse-max7  cx7
09:12:51  34  ,clse-max8  cx8
09:12:51  35  ,clse-max9  cx9
09:12:51  36  -- Derive date related attributes:
09:12:51  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:12:51  38  ,0+TO_CHAR(ydate,'D')d
09:12:51  39  ,0+TO_CHAR(ydate,'W')w
09:12:51  40  -- mpm stands for minutes-past-midnight:
09:12:51  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:12:51  42  -- mph stands for minutes-past-hour:
09:12:51  43  ,0+TO_CHAR(ydate,'MI')mph
09:12:51  44  FROM stk_svmd10svmspy
09:12:51  45  ORDER BY ydate
09:12:51  46  /

Table created.

Elapsed: 00:00:00.18
09:12:51 SQL> 
09:12:51 SQL> -- rpt
09:12:51 SQL> 
09:12:51 SQL> SELECT
09:12:51   2  tkr
09:12:51   3  ,COUNT(tkr)
09:12:51   4  ,MIN(clse),MAX(clse)
09:12:51   5  ,MIN(ydate),MAX(ydate)
09:12:51   6  FROM stk_svmd12
09:12:51   7  GROUP BY tkr
09:12:51   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
MAR		4392	   4.59      50.17 1993-10-13 21:00:00 2011-03-29 21:00:00

Elapsed: 00:00:00.01
09:12:51 SQL> 
09:12:51 SQL> -- Prepare for derivation of NTILE based parameters.
09:12:51 SQL> -- Also derive the "trend" parameter:
09:12:51 SQL> 
09:12:51 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
09:12:51 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
09:12:51   2  SELECT
09:12:51   3  tkr
09:12:51   4  ,ydate
09:12:51   5  ,tkrdate
09:12:51   6  ,clse
09:12:51   7  ,g1
09:12:51   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
09:12:51   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
09:12:51  10  ,CASE WHEN trend IS NULL THEN 1
09:12:51  11  	    WHEN trend =0      THEN 1
09:12:51  12  	    ELSE trend END trend
09:12:51  13  ,cm3
09:12:51  14  ,cm4
09:12:51  15  ,cm5
09:12:51  16  ,cm6
09:12:51  17  ,cm7
09:12:51  18  ,cm8
09:12:51  19  ,cm9
09:12:51  20  ,ca3
09:12:51  21  ,ca4
09:12:51  22  ,ca5
09:12:51  23  ,ca6
09:12:51  24  ,ca7
09:12:51  25  ,ca8
09:12:51  26  ,ca9
09:12:51  27  ,cx3
09:12:51  28  ,cx4
09:12:51  29  ,cx5
09:12:51  30  ,cx6
09:12:51  31  ,cx7
09:12:51  32  ,cx8
09:12:51  33  ,cx9
09:12:51  34  ,hh
09:12:51  35  ,d
09:12:51  36  ,w
09:12:51  37  ,mpm
09:12:51  38  ,mph
09:12:51  39  FROM stk_svmd12
09:12:51  40  -- Guard against divide by 0:
09:12:51  41  WHERE clse > 0
09:12:51  42  ORDER BY ydate
09:12:51  43  /

Table created.

Elapsed: 00:00:00.09
09:12:51 SQL> 
09:12:51 SQL> -- rpt
09:12:51 SQL> 
09:12:51 SQL> SELECT
09:12:51   2  tkr
09:12:51   3  ,trend
09:12:51   4  ,gatt
09:12:51   5  ,COUNT(tkr)
09:12:51   6  ,AVG(g1)
09:12:51   7  FROM stk_svmd14
09:12:51   8  GROUP BY tkr,trend,gatt
09:12:51   9  ORDER BY tkr,trend,gatt
09:12:51  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MAR		  -1 nup       1097 -.27788514
MAR		  -1 up 	903 .380609081
MAR		  -1		  1
MAR		   1 nup       1409 -.24936125
MAR		   1 up 	982 .349205703

Elapsed: 00:00:00.01
09:12:51 SQL> 
09:12:51 SQL> -- Derive NTILE based params:
09:12:51 SQL> 
09:12:51 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.04
09:12:52 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
09:12:52   2  SELECT
09:12:52   3  tkr
09:12:52   4  ,ydate
09:12:52   5  ,tkrdate
09:12:52   6  ,clse
09:12:52   7  ,g1
09:12:52   8  ,gatt
09:12:52   9  ,gattn
09:12:52  10  ,trend
09:12:52  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
09:12:52  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
09:12:52  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
09:12:52  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
09:12:52  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
09:12:52  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
09:12:52  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
09:12:52  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
09:12:52  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
09:12:52  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
09:12:52  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
09:12:52  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
09:12:52  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
09:12:52  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
09:12:52  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
09:12:52  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
09:12:52  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
09:12:52  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
09:12:52  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
09:12:52  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
09:12:52  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
09:12:52  32  ,hh  att21
09:12:52  33  ,d   att22
09:12:52  34  ,w   att23
09:12:52  35  ,mpm att24
09:12:52  36  ,mph att25
09:12:52  37  ,trend att26
09:12:52  38  FROM stk_svmd14
09:12:52  39  ORDER BY ydate
09:12:52  40  /

Table created.

Elapsed: 00:00:00.57
09:12:52 SQL> 
09:12:52 SQL> -- rpt
09:12:52 SQL> 
09:12:52 SQL> SELECT
09:12:52   2  tkr
09:12:52   3  ,trend
09:12:52   4  ,gatt
09:12:52   5  ,COUNT(tkr)
09:12:52   6  ,AVG(g1)
09:12:52   7  FROM stk_svmd16
09:12:52   8  GROUP BY tkr,trend,gatt
09:12:52   9  ORDER BY tkr,trend,gatt
09:12:52  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MAR		  -1 nup       1097 -.27788514
MAR		  -1 up 	903 .380609081
MAR		  -1		  1
MAR		   1 nup       1409 -.24936125
MAR		   1 up 	982 .349205703

Elapsed: 00:00:00.02
09:12:52 SQL> 
09:12:52 SQL> -- Comment out feedback related syntax:
09:12:52 SQL> 
09:12:52 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
09:12:52 SQL> -- SELECT
09:12:52 SQL> -- m.tkr
09:12:52 SQL> -- ,m.ydate
09:12:52 SQL> -- ,m.tkrdate
09:12:52 SQL> -- ,l.score score_long
09:12:52 SQL> -- ,s.score score_short
09:12:52 SQL> -- ,m.g1
09:12:52 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
09:12:52 SQL> -- WHERE l.targ='gatt'
09:12:52 SQL> -- AND	 s.targ='gattn'
09:12:52 SQL> -- AND l.tkrdate = s.tkrdate
09:12:52 SQL> -- AND l.tkrdate = m.tkrdate
09:12:52 SQL> -- -- Speed things up:
09:12:52 SQL> -- AND l.tkr = '&1'
09:12:52 SQL> -- AND s.tkr = '&1'
09:12:52 SQL> -- /
09:12:52 SQL> --
09:12:52 SQL> -- DROP TABLE score_corr_tkr;
09:12:52 SQL> --
09:12:52 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
09:12:52 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
09:12:52 SQL> -- (
09:12:52 SQL> --   SELECT
09:12:52 SQL> --   tkrdate
09:12:52 SQL> --   -- Find corr() tween score and g1 over 8 day period:
09:12:52 SQL> --   ,CORR((score_long - score_short),g1)
09:12:52 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
09:12:52 SQL> --   FROM sc12tkr
09:12:52 SQL> -- )
09:12:52 SQL> -- GROUP BY tkrdate
09:12:52 SQL> -- /
09:12:52 SQL> 
09:12:52 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
09:12:52 SQL> 
09:12:52 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.09
09:12:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
09:12:53 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
09:12:53   2  SELECT
09:12:53   3  tkr
09:12:53   4  ,ydate
09:12:53   5  ,tkrdate
09:12:53   6  ,trend
09:12:53   7  ,g1
09:12:53   8  ,gatt
09:12:53   9  ,gattn
09:12:53  10  -- Goodness attributes:
09:12:53  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
09:12:53  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
09:12:53  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
09:12:53  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
09:12:53  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
09:12:53  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
09:12:53  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
09:12:53  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
09:12:53  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
09:12:53  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
09:12:53  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
09:12:53  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
09:12:53  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
09:12:53  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
09:12:53  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
09:12:53  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
09:12:53  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
09:12:53  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
09:12:53  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
09:12:53  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
09:12:53  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
09:12:53  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
09:12:53  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
09:12:53  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
09:12:53  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
09:12:53  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
09:12:53  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
09:12:53  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
09:12:53  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
09:12:53  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
09:12:53  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
09:12:53  42  FROM stk_svmd16
09:12:53  43  /

Table created.

Elapsed: 00:00:00.90
09:12:54 SQL> 
09:12:54 SQL> -- rpt
09:12:54 SQL> 
09:12:54 SQL> SELECT
09:12:54   2  tkr
09:12:54   3  ,trend
09:12:54   4  ,gatt
09:12:54   5  ,COUNT(tkr)
09:12:54   6  ,AVG(g1)
09:12:54   7  FROM stk_ms_svmd_svmspy
09:12:54   8  GROUP BY tkr,trend,gatt
09:12:54   9  ORDER BY tkr,trend,gatt
09:12:54  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MAR		  -1 nup       1097 -.27788514
MAR		  -1 up 	903 .380609081
MAR		  -1		  1
MAR		   1 nup       1409 -.24936125
MAR		   1 up 	982 .349205703

Elapsed: 00:00:00.01
09:12:54 SQL> 
09:12:54 SQL> SELECT
09:12:54   2  tkr
09:12:54   3  ,COUNT(tkr)
09:12:54   4  ,MIN(ydate),MAX(ydate)
09:12:54   5  FROM stk_ms_svmd_svmspy
09:12:54   6  GROUP BY tkr
09:12:54   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
MAR		4392 1993-10-13 21:00:00 2011-03-29 21:00:00

Elapsed: 00:00:00.01
09:12:54 SQL> 
09:12:54 SQL> -- exit
09:12:54 SQL> 
09:12:54 SQL> 
09:12:54 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.07
09:12:54 SQL> 
09:12:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.13
09:12:54 SQL> 
09:12:54 SQL> CREATE TABLE stk_ms_u COMPRESS AS
09:12:54   2  SELECT * FROM stk_ms_svmspy
09:12:54   3  UNION
09:12:54   4  SELECT * FROM stk_ms_svmd_svmspy
09:12:54   5  /

Table created.

Elapsed: 00:00:00.21
09:12:54 SQL> 
09:12:54 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
