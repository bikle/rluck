
SQL*Plus: Release 11.2.0.1.0 Production on Wed May 11 02:54:35 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:54:35 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
02:54:35 SQL> 
02:54:35 SQL> 02:54:35 SQL> --
02:54:35 SQL> -- stk10u.sql
02:54:35 SQL> --
02:54:35 SQL> 
02:54:35 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
02:54:35 SQL> 
02:54:35 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
02:54:35 SQL> @stk10.sql     '&1'
02:54:35 SQL> --
02:54:35 SQL> -- stk10.sql
02:54:35 SQL> --
02:54:35 SQL> 
02:54:35 SQL> -- Creates views and tables for demonstrating SVM.
02:54:35 SQL> 
02:54:35 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.28
02:54:36 SQL> 
02:54:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
02:54:36 SQL> 
02:54:36 SQL> CREATE TABLE stk10svmspy COMPRESS AS
02:54:36   2  SELECT
02:54:36   3  tkr
02:54:36   4  ,ydate
02:54:36   5  ,tkr||ydate tkrdate
02:54:36   6  ,clse
02:54:36   7  ,clse2
02:54:36   8  ,rownum rnum -- acts as t in my time-series
02:54:36   9  -- g1 is important. I want to predict g1:
02:54:36  10  ,gain1day g1
02:54:36  11  -- Derive some attributes from clse.
02:54:36  12  -- Each row spans 5 minutes.
02:54:36  13  -- The number of rows in 1 day is 24*60/5.
02:54:36  14  -- I want the aggregations to span from 3 days to 9 days:
02:54:36  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
02:54:36  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
02:54:36  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
02:54:36  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
02:54:36  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
02:54:36  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
02:54:36  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
02:54:36  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
02:54:36  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
02:54:36  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
02:54:36  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
02:54:36  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
02:54:36  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
02:54:36  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
02:54:36  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
02:54:36  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
02:54:36  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
02:54:36  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
02:54:36  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
02:54:36  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
02:54:36  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
02:54:36  36  FROM di5min_stk_c2
02:54:36  37  WHERE UPPER(tkr)='&1'
02:54:36  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
02:54:36  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
02:54:36  40  ORDER BY ydate
02:54:36  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='COF'

Table created.

Elapsed: 00:00:02.16
02:54:38 SQL> 
02:54:38 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
02:54:38 SQL> 
02:54:38 SQL> -- rpt
02:54:38 SQL> 
02:54:38 SQL> SELECT
02:54:38   2  tkr
02:54:38   3  ,COUNT(tkr)ccount
02:54:38   4  ,MIN(clse)mnclse,MAX(clse)mxclse
02:54:38   5  -- ,MIN(avg4),MAX(avg4)
02:54:38   6  ,MIN(ydate),MAX(ydate)
02:54:38   7  ,MIN(g1)
02:54:38   8  ,MAX(g1)
02:54:38   9  FROM stk10svmspy
02:54:38  10  GROUP BY tkr
02:54:38  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
COF	      6498	43.23	    55.6 2011-01-04 14:30:00 2011-05-10 15:25:00 -2.3553125	   3.5

Elapsed: 00:00:00.01
02:54:38 SQL> 
02:54:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:54:38 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.20
02:54:38 SQL> CREATE TABLE stk12svmspy COMPRESS AS
02:54:38   2  SELECT
02:54:38   3  tkr
02:54:38   4  ,ydate
02:54:38   5  ,tkrdate
02:54:38   6  ,clse
02:54:38   7  ,rnum
02:54:38   8  ,g1
02:54:38   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
02:54:38  10  -- I want more attributes from the ones I derived above:
02:54:38  11  -- clse relation to moving-min
02:54:38  12  ,clse-min3  cm3
02:54:38  13  ,clse-min4  cm4
02:54:38  14  ,clse-min5  cm5
02:54:38  15  ,clse-min6  cm6
02:54:38  16  ,clse-min7  cm7
02:54:38  17  ,clse-min8  cm8
02:54:38  18  ,clse-min9  cm9
02:54:38  19  -- clse relation to moving-avg
02:54:38  20  ,clse-avg3  ca3
02:54:38  21  ,clse-avg4  ca4
02:54:38  22  ,clse-avg5  ca5
02:54:38  23  ,clse-avg6  ca6
02:54:38  24  ,clse-avg7  ca7
02:54:38  25  ,clse-avg8  ca8
02:54:38  26  ,clse-avg9  ca9
02:54:38  27  -- clse relation to moving-max
02:54:38  28  ,clse-max3  cx3
02:54:38  29  ,clse-max4  cx4
02:54:38  30  ,clse-max5  cx5
02:54:38  31  ,clse-max6  cx6
02:54:38  32  ,clse-max7  cx7
02:54:38  33  ,clse-max8  cx8
02:54:38  34  ,clse-max9  cx9
02:54:38  35  -- Derive date related attributes:
02:54:38  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:54:38  37  ,0+TO_CHAR(ydate,'D')d
02:54:38  38  ,0+TO_CHAR(ydate,'W')w
02:54:38  39  -- mpm stands for minutes-past-midnight:
02:54:38  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:54:38  41  -- mph stands for minutes-past-hour:
02:54:38  42  ,0+TO_CHAR(ydate,'MI')mph
02:54:38  43  FROM stk10svmspy
02:54:38  44  ORDER BY ydate
02:54:38  45  /

Table created.

Elapsed: 00:00:00.18
02:54:38 SQL> 
02:54:38 SQL> -- rpt
02:54:38 SQL> 
02:54:38 SQL> SELECT
02:54:38   2  tkr
02:54:38   3  ,COUNT(tkr)ccount
02:54:38   4  ,MIN(clse)mnclse,MAX(clse)mxclse
02:54:38   5  -- ,MIN(avg4),MAX(avg4)
02:54:38   6  ,MIN(ydate),MAX(ydate)
02:54:38   7  ,MIN(g1)
02:54:38   8  ,AVG(g1)
02:54:38   9  ,MAX(g1)
02:54:38  10  FROM stk12svmspy
02:54:38  11  GROUP BY tkr
02:54:38  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
COF	      6498	43.23	    55.6 2011-01-04 14:30:00 2011-05-10 15:25:00 -2.3553125 .141268311	      3.5

Elapsed: 00:00:00.03
02:54:38 SQL> 
02:54:38 SQL> -- Prepare for derivation of NTILE based parameters.
02:54:38 SQL> -- Also derive the "trend" parameter:
02:54:38 SQL> 
02:54:38 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.15
02:54:39 SQL> CREATE TABLE stk14svmspy COMPRESS AS
02:54:39   2  SELECT
02:54:39   3  tkr
02:54:39   4  ,ydate
02:54:39   5  ,tkrdate
02:54:39   6  ,clse
02:54:39   7  ,g1
02:54:39   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
02:54:39   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
02:54:39  10  ,CASE WHEN trend IS NULL THEN 1
02:54:39  11  	    WHEN trend =0      THEN 1
02:54:39  12  	    ELSE trend END trend
02:54:39  13  ,cm3
02:54:39  14  ,cm4
02:54:39  15  ,cm5
02:54:39  16  ,cm6
02:54:39  17  ,cm7
02:54:39  18  ,cm8
02:54:39  19  ,cm9
02:54:39  20  ,ca3
02:54:39  21  ,ca4
02:54:39  22  ,ca5
02:54:39  23  ,ca6
02:54:39  24  ,ca7
02:54:39  25  ,ca8
02:54:39  26  ,ca9
02:54:39  27  ,cx3
02:54:39  28  ,cx4
02:54:39  29  ,cx5
02:54:39  30  ,cx6
02:54:39  31  ,cx7
02:54:39  32  ,cx8
02:54:39  33  ,cx9
02:54:39  34  ,hh
02:54:39  35  ,d
02:54:39  36  ,w
02:54:39  37  ,mpm
02:54:39  38  ,mph
02:54:39  39  FROM stk12svmspy
02:54:39  40  -- Guard against divide by 0:
02:54:39  41  WHERE clse > 0
02:54:39  42  ORDER BY ydate
02:54:39  43  /

Table created.

Elapsed: 00:00:00.15
02:54:39 SQL> 
02:54:39 SQL> -- rpt
02:54:39 SQL> 
02:54:39 SQL> SELECT
02:54:39   2  tkr
02:54:39   3  ,trend
02:54:39   4  ,gatt
02:54:39   5  ,COUNT(tkr)
02:54:39   6  ,AVG(g1)
02:54:39   7  FROM stk14svmspy
02:54:39   8  GROUP BY tkr,trend,gatt
02:54:39   9  ORDER BY tkr,trend,gatt
02:54:39  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
COF		-1 nup	      704 -.53966851
COF		-1 up	      774 1.07699932
COF		-1	       13
COF		 1 nup	     2701 -.39602061
COF		 1 up	     1995 .745950559
COF		 1	      311

6 rows selected.

Elapsed: 00:00:00.02
02:54:39 SQL> 
02:54:39 SQL> -- Derive NTILE based params:
02:54:39 SQL> 
02:54:39 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.13
02:54:39 SQL> CREATE TABLE stk16svmspy COMPRESS AS
02:54:39   2  SELECT
02:54:39   3  tkr
02:54:39   4  ,ydate
02:54:39   5  ,tkrdate
02:54:39   6  ,clse
02:54:39   7  ,g1
02:54:39   8  ,gatt
02:54:39   9  ,gattn
02:54:39  10  ,trend
02:54:39  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
02:54:39  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
02:54:39  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
02:54:39  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
02:54:39  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
02:54:39  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
02:54:39  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
02:54:39  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
02:54:39  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
02:54:39  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
02:54:39  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
02:54:39  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
02:54:39  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
02:54:39  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
02:54:39  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
02:54:39  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
02:54:39  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
02:54:39  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
02:54:39  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
02:54:39  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
02:54:39  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
02:54:39  32  ,hh  att21
02:54:39  33  ,d   att22
02:54:39  34  ,w   att23
02:54:39  35  ,mpm att24
02:54:39  36  ,mph att25
02:54:39  37  ,trend att26
02:54:39  38  FROM stk14svmspy
02:54:39  39  ORDER BY ydate
02:54:39  40  /

Table created.

Elapsed: 00:00:00.80
02:54:40 SQL> 
02:54:40 SQL> -- rpt
02:54:40 SQL> 
02:54:40 SQL> SELECT
02:54:40   2  tkr
02:54:40   3  ,trend
02:54:40   4  ,gatt
02:54:40   5  ,COUNT(tkr)
02:54:40   6  ,AVG(g1)
02:54:40   7  FROM stk16svmspy
02:54:40   8  GROUP BY tkr,trend,gatt
02:54:40   9  ORDER BY tkr,trend,gatt
02:54:40  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
COF		-1 nup	      704 -.53966851
COF		-1 up	      774 1.07699932
COF		-1	       13
COF		 1 nup	     2701 -.39602061
COF		 1 up	     1995 .745950559
COF		 1	      311

6 rows selected.

Elapsed: 00:00:00.03
02:54:40 SQL> 
02:54:40 SQL> -- Comment out feedback related syntax:
02:54:40 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
02:54:40 SQL> -- SELECT
02:54:40 SQL> -- m.tkr
02:54:40 SQL> -- ,m.ydate
02:54:40 SQL> -- ,m.tkrdate
02:54:40 SQL> -- ,l.score score_long
02:54:40 SQL> -- ,s.score score_short
02:54:40 SQL> -- ,m.g1
02:54:40 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
02:54:40 SQL> -- WHERE l.targ='gatt'
02:54:40 SQL> -- AND	 s.targ='gattn'
02:54:40 SQL> -- AND l.tkrdate = s.tkrdate
02:54:40 SQL> -- AND l.tkrdate = m.tkrdate
02:54:40 SQL> -- -- Speed things up:
02:54:40 SQL> -- AND l.tkr = '&1'
02:54:40 SQL> -- AND s.tkr = '&1'
02:54:40 SQL> -- /
02:54:40 SQL> --
02:54:40 SQL> -- DROP TABLE score_corr_tkr;
02:54:40 SQL> --
02:54:40 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
02:54:40 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
02:54:40 SQL> -- (
02:54:40 SQL> --   SELECT
02:54:40 SQL> --   tkrdate
02:54:40 SQL> --   -- Find corr() tween score and g1 over 8 day period:
02:54:40 SQL> --   ,CORR((score_long - score_short),g1)
02:54:40 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
02:54:40 SQL> --   FROM sc12tkr
02:54:40 SQL> -- )
02:54:40 SQL> -- GROUP BY tkrdate
02:54:40 SQL> -- /
02:54:40 SQL> 
02:54:40 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
02:54:40 SQL> 
02:54:40 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.24
02:54:40 SQL> 
02:54:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.25
02:54:40 SQL> 
02:54:40 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
02:54:40   2  SELECT
02:54:40   3  tkr
02:54:40   4  ,ydate
02:54:40   5  ,tkrdate
02:54:40   6  ,trend
02:54:40   7  ,g1
02:54:40   8  ,gatt
02:54:40   9  ,gattn
02:54:40  10  -- Goodness attributes:
02:54:40  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
02:54:40  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
02:54:40  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
02:54:40  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
02:54:40  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
02:54:40  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
02:54:40  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
02:54:40  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
02:54:40  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
02:54:40  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
02:54:40  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
02:54:40  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
02:54:40  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
02:54:40  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
02:54:40  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
02:54:40  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
02:54:40  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
02:54:40  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
02:54:40  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
02:54:40  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
02:54:40  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
02:54:40  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
02:54:40  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
02:54:40  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
02:54:40  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
02:54:40  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
02:54:40  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
02:54:40  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
02:54:40  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
02:54:40  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
02:54:40  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
02:54:40  42  FROM stk16svmspy
02:54:40  43  /

Table created.

Elapsed: 00:00:01.21
02:54:41 SQL> 
02:54:41 SQL> -- rpt
02:54:41 SQL> 
02:54:41 SQL> SELECT
02:54:41   2  tkr
02:54:41   3  ,trend
02:54:41   4  ,gatt
02:54:41   5  ,COUNT(tkr)
02:54:41   6  ,AVG(g1)
02:54:41   7  FROM stk_ms_svmspy
02:54:41   8  GROUP BY tkr,trend,gatt
02:54:41   9  ORDER BY tkr,trend,gatt
02:54:41  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
COF		-1 nup	      704 -.53966851
COF		-1 up	      774 1.07699932
COF		-1	       13
COF		 1 nup	     2701 -.39602061
COF		 1 up	     1995 .745950559
COF		 1	      311

6 rows selected.

Elapsed: 00:00:00.02
02:54:41 SQL> 
02:54:41 SQL> SELECT
02:54:41   2  tkr
02:54:41   3  ,0+TO_CHAR(ydate,'D')daynum
02:54:41   4  ,COUNT(tkr)
02:54:41   5  ,MIN(ydate),MAX(ydate)
02:54:41   6  FROM stk_ms_svmspy
02:54:41   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
02:54:41   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
02:54:41   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
COF		 2	 1248 2011-01-10 14:30:00 2011-05-09 19:55:00
COF		 3	 1350 2011-01-04 14:30:00 2011-05-10 15:25:00
COF		 4	 1326 2011-01-05 14:30:00 2011-05-04 19:55:00
COF		 5	 1326 2011-01-06 14:30:00 2011-05-05 19:55:00
COF		 6	 1248 2011-01-07 14:30:00 2011-05-06 19:55:00

Elapsed: 00:00:00.00
02:54:41 SQL> 
02:54:41 SQL> -- exit
02:54:41 SQL> @stk10svmd.sql '&1'
02:54:41 SQL> --
02:54:41 SQL> -- stk10svmd.sql
02:54:41 SQL> --
02:54:41 SQL> 
02:54:41 SQL> -- Creates views and tables for demonstrating SVM.
02:54:41 SQL> -- I need to run this after I run stk10.sql
02:54:41 SQL> 
02:54:41 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.13
02:54:42 SQL> 
02:54:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
02:54:42 SQL> 
02:54:42 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
02:54:42   2  SELECT
02:54:42   3  tkr
02:54:42   4  ,ydate
02:54:42   5  ,tkr||ydate tkrdate
02:54:42   6  ,clse
02:54:42   7  ,rownum rnum -- acts as t in my time-series
02:54:42   8  -- Derive some attributes from clse.
02:54:42   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
02:54:42  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
02:54:42  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
02:54:42  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
02:54:42  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
02:54:42  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
02:54:42  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
02:54:42  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
02:54:42  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
02:54:42  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
02:54:42  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
02:54:42  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
02:54:42  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
02:54:42  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
02:54:42  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
02:54:42  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
02:54:42  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
02:54:42  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
02:54:42  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
02:54:42  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
02:54:42  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
02:54:42  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
02:54:42  31  -- ystk21 created here: svmd/cr_ystk21.sql
02:54:42  32  FROM ystk21
02:54:42  33  WHERE UPPER(tkr)='&1'
02:54:42  34  AND ydate > '1990-01-01'
02:54:42  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
02:54:42  36  ORDER BY ydate
02:54:42  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='COF'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='COF')

Table created.

Elapsed: 00:00:00.34
02:54:42 SQL> 
02:54:42 SQL> -- rpt
02:54:42 SQL> 
02:54:42 SQL> SELECT
02:54:42   2  tkr
02:54:42   3  ,COUNT(tkr)
02:54:42   4  ,MIN(clse),MAX(clse)
02:54:42   5  ,MIN(avg4),MAX(avg4)
02:54:42   6  ,MIN(ydate),MAX(ydate)
02:54:42   7  FROM stk_svmd10svmspy
02:54:42   8  GROUP BY tkr
02:54:42   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
COF		4101	   8.31     177.72	9.306	 172.642 1994-11-16 20:00:00 2011-05-09 20:00:00

Elapsed: 00:00:00.02
02:54:42 SQL> 
02:54:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:54:42 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.15
02:54:42 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
02:54:42   2  SELECT
02:54:42   3  tkr
02:54:42   4  ,ydate
02:54:42   5  ,tkrdate
02:54:42   6  ,clse
02:54:42   7  ,rnum
02:54:42   8  -- g1 is important. I want to predict g1:
02:54:42   9  ,ld - clse g1
02:54:42  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
02:54:42  11  -- I want more attributes from the ones I derived above:
02:54:42  12  -- clse relation to moving-min
02:54:42  13  ,clse-min3  cm3
02:54:42  14  ,clse-min4  cm4
02:54:42  15  ,clse-min5  cm5
02:54:42  16  ,clse-min6  cm6
02:54:42  17  ,clse-min7  cm7
02:54:42  18  ,clse-min8  cm8
02:54:42  19  ,clse-min9  cm9
02:54:42  20  -- clse relation to moving-avg
02:54:42  21  ,clse-avg3  ca3
02:54:42  22  ,clse-avg4  ca4
02:54:42  23  ,clse-avg5  ca5
02:54:42  24  ,clse-avg6  ca6
02:54:42  25  ,clse-avg7  ca7
02:54:42  26  ,clse-avg8  ca8
02:54:42  27  ,clse-avg9  ca9
02:54:42  28  -- clse relation to moving-max
02:54:42  29  ,clse-max3  cx3
02:54:42  30  ,clse-max4  cx4
02:54:42  31  ,clse-max5  cx5
02:54:42  32  ,clse-max6  cx6
02:54:42  33  ,clse-max7  cx7
02:54:42  34  ,clse-max8  cx8
02:54:42  35  ,clse-max9  cx9
02:54:42  36  -- Derive date related attributes:
02:54:42  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:54:42  38  ,0+TO_CHAR(ydate,'D')d
02:54:42  39  ,0+TO_CHAR(ydate,'W')w
02:54:42  40  -- mpm stands for minutes-past-midnight:
02:54:42  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:54:42  42  -- mph stands for minutes-past-hour:
02:54:42  43  ,0+TO_CHAR(ydate,'MI')mph
02:54:42  44  FROM stk_svmd10svmspy
02:54:42  45  ORDER BY ydate
02:54:42  46  /

Table created.

Elapsed: 00:00:00.12
02:54:42 SQL> 
02:54:42 SQL> -- rpt
02:54:42 SQL> 
02:54:42 SQL> SELECT
02:54:42   2  tkr
02:54:42   3  ,COUNT(tkr)
02:54:42   4  ,MIN(clse),MAX(clse)
02:54:42   5  ,MIN(ydate),MAX(ydate)
02:54:42   6  FROM stk_svmd12
02:54:42   7  GROUP BY tkr
02:54:42   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
COF		4101	   8.31     177.72 1994-11-16 20:00:00 2011-05-09 20:00:00

Elapsed: 00:00:00.01
02:54:42 SQL> 
02:54:42 SQL> -- Prepare for derivation of NTILE based parameters.
02:54:42 SQL> -- Also derive the "trend" parameter:
02:54:42 SQL> 
02:54:42 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.17
02:54:42 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
02:54:42   2  SELECT
02:54:42   3  tkr
02:54:42   4  ,ydate
02:54:42   5  ,tkrdate
02:54:42   6  ,clse
02:54:42   7  ,g1
02:54:42   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
02:54:42   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
02:54:42  10  ,CASE WHEN trend IS NULL THEN 1
02:54:42  11  	    WHEN trend =0      THEN 1
02:54:42  12  	    ELSE trend END trend
02:54:42  13  ,cm3
02:54:42  14  ,cm4
02:54:42  15  ,cm5
02:54:42  16  ,cm6
02:54:42  17  ,cm7
02:54:42  18  ,cm8
02:54:42  19  ,cm9
02:54:42  20  ,ca3
02:54:42  21  ,ca4
02:54:42  22  ,ca5
02:54:42  23  ,ca6
02:54:42  24  ,ca7
02:54:42  25  ,ca8
02:54:42  26  ,ca9
02:54:42  27  ,cx3
02:54:42  28  ,cx4
02:54:42  29  ,cx5
02:54:42  30  ,cx6
02:54:42  31  ,cx7
02:54:42  32  ,cx8
02:54:42  33  ,cx9
02:54:42  34  ,hh
02:54:42  35  ,d
02:54:42  36  ,w
02:54:42  37  ,mpm
02:54:42  38  ,mph
02:54:42  39  FROM stk_svmd12
02:54:42  40  -- Guard against divide by 0:
02:54:42  41  WHERE clse > 0
02:54:42  42  ORDER BY ydate
02:54:42  43  /

Table created.

Elapsed: 00:00:00.10
02:54:43 SQL> 
02:54:43 SQL> -- rpt
02:54:43 SQL> 
02:54:43 SQL> SELECT
02:54:43   2  tkr
02:54:43   3  ,trend
02:54:43   4  ,gatt
02:54:43   5  ,COUNT(tkr)
02:54:43   6  ,AVG(g1)
02:54:43   7  FROM stk_svmd14
02:54:43   8  GROUP BY tkr,trend,gatt
02:54:43   9  ORDER BY tkr,trend,gatt
02:54:43  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
COF		  -1 nup       1006 -.99117296
COF		  -1 up 	885 1.25107345
COF		  -1		  1
COF		   1 nup       1232 -1.0162013
COF		   1 up 	977 1.20759468

Elapsed: 00:00:00.01
02:54:43 SQL> 
02:54:43 SQL> -- Derive NTILE based params:
02:54:43 SQL> 
02:54:43 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.12
02:54:43 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
02:54:43   2  SELECT
02:54:43   3  tkr
02:54:43   4  ,ydate
02:54:43   5  ,tkrdate
02:54:43   6  ,clse
02:54:43   7  ,g1
02:54:43   8  ,gatt
02:54:43   9  ,gattn
02:54:43  10  ,trend
02:54:43  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
02:54:43  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
02:54:43  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
02:54:43  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
02:54:43  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
02:54:43  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
02:54:43  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
02:54:43  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
02:54:43  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
02:54:43  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
02:54:43  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
02:54:43  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
02:54:43  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
02:54:43  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
02:54:43  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
02:54:43  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
02:54:43  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
02:54:43  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
02:54:43  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
02:54:43  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
02:54:43  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
02:54:43  32  ,hh  att21
02:54:43  33  ,d   att22
02:54:43  34  ,w   att23
02:54:43  35  ,mpm att24
02:54:43  36  ,mph att25
02:54:43  37  ,trend att26
02:54:43  38  FROM stk_svmd14
02:54:43  39  ORDER BY ydate
02:54:43  40  /

Table created.

Elapsed: 00:00:00.47
02:54:43 SQL> 
02:54:43 SQL> -- rpt
02:54:43 SQL> 
02:54:43 SQL> SELECT
02:54:43   2  tkr
02:54:43   3  ,trend
02:54:43   4  ,gatt
02:54:43   5  ,COUNT(tkr)
02:54:43   6  ,AVG(g1)
02:54:43   7  FROM stk_svmd16
02:54:43   8  GROUP BY tkr,trend,gatt
02:54:43   9  ORDER BY tkr,trend,gatt
02:54:43  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
COF		  -1 nup       1006 -.99117296
COF		  -1 up 	885 1.25107345
COF		  -1		  1
COF		   1 nup       1232 -1.0162013
COF		   1 up 	977 1.20759468

Elapsed: 00:00:00.01
02:54:43 SQL> 
02:54:43 SQL> -- Comment out feedback related syntax:
02:54:43 SQL> 
02:54:43 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
02:54:43 SQL> -- SELECT
02:54:43 SQL> -- m.tkr
02:54:43 SQL> -- ,m.ydate
02:54:43 SQL> -- ,m.tkrdate
02:54:43 SQL> -- ,l.score score_long
02:54:43 SQL> -- ,s.score score_short
02:54:43 SQL> -- ,m.g1
02:54:43 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
02:54:43 SQL> -- WHERE l.targ='gatt'
02:54:43 SQL> -- AND	 s.targ='gattn'
02:54:43 SQL> -- AND l.tkrdate = s.tkrdate
02:54:43 SQL> -- AND l.tkrdate = m.tkrdate
02:54:43 SQL> -- -- Speed things up:
02:54:43 SQL> -- AND l.tkr = '&1'
02:54:43 SQL> -- AND s.tkr = '&1'
02:54:43 SQL> -- /
02:54:43 SQL> --
02:54:43 SQL> -- DROP TABLE score_corr_tkr;
02:54:43 SQL> --
02:54:43 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
02:54:43 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
02:54:43 SQL> -- (
02:54:43 SQL> --   SELECT
02:54:43 SQL> --   tkrdate
02:54:43 SQL> --   -- Find corr() tween score and g1 over 8 day period:
02:54:43 SQL> --   ,CORR((score_long - score_short),g1)
02:54:43 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
02:54:43 SQL> --   FROM sc12tkr
02:54:43 SQL> -- )
02:54:43 SQL> -- GROUP BY tkrdate
02:54:43 SQL> -- /
02:54:43 SQL> 
02:54:43 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
02:54:43 SQL> 
02:54:43 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.16
02:54:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
02:54:44 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
02:54:44   2  SELECT
02:54:44   3  tkr
02:54:44   4  ,ydate
02:54:44   5  ,tkrdate
02:54:44   6  ,trend
02:54:44   7  ,g1
02:54:44   8  ,gatt
02:54:44   9  ,gattn
02:54:44  10  -- Goodness attributes:
02:54:44  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
02:54:44  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
02:54:44  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
02:54:44  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
02:54:44  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
02:54:44  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
02:54:44  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
02:54:44  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
02:54:44  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
02:54:44  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
02:54:44  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
02:54:44  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
02:54:44  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
02:54:44  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
02:54:44  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
02:54:44  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
02:54:44  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
02:54:44  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
02:54:44  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
02:54:44  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
02:54:44  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
02:54:44  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
02:54:44  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
02:54:44  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
02:54:44  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
02:54:44  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
02:54:44  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
02:54:44  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
02:54:44  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
02:54:44  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
02:54:44  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
02:54:44  42  FROM stk_svmd16
02:54:44  43  /

Table created.

Elapsed: 00:00:00.75
02:54:44 SQL> 
02:54:44 SQL> -- rpt
02:54:44 SQL> 
02:54:44 SQL> SELECT
02:54:44   2  tkr
02:54:44   3  ,trend
02:54:44   4  ,gatt
02:54:44   5  ,COUNT(tkr)
02:54:44   6  ,AVG(g1)
02:54:44   7  FROM stk_ms_svmd_svmspy
02:54:44   8  GROUP BY tkr,trend,gatt
02:54:44   9  ORDER BY tkr,trend,gatt
02:54:44  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
COF		  -1 nup       1006 -.99117296
COF		  -1 up 	885 1.25107345
COF		  -1		  1
COF		   1 nup       1232 -1.0162013
COF		   1 up 	977 1.20759468

Elapsed: 00:00:00.01
02:54:44 SQL> 
02:54:44 SQL> SELECT
02:54:44   2  tkr
02:54:44   3  ,COUNT(tkr)
02:54:44   4  ,MIN(ydate),MAX(ydate)
02:54:44   5  FROM stk_ms_svmd_svmspy
02:54:44   6  GROUP BY tkr
02:54:44   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
COF		4101 1994-11-16 20:00:00 2011-05-09 20:00:00

Elapsed: 00:00:00.01
02:54:44 SQL> 
02:54:44 SQL> -- exit
02:54:44 SQL> 
02:54:44 SQL> 
02:54:44 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.18
02:54:45 SQL> 
02:54:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
02:54:45 SQL> 
02:54:45 SQL> CREATE TABLE stk_ms_u COMPRESS AS
02:54:45   2  SELECT * FROM stk_ms_svmspy
02:54:45   3  UNION
02:54:45   4  SELECT * FROM stk_ms_svmd_svmspy
02:54:45   5  /

Table created.

Elapsed: 00:00:00.31
02:54:45 SQL> 
02:54:45 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
