
SQL*Plus: Release 11.2.0.1.0 Production on Thu May 19 23:04:19 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:04:19 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:04:19 SQL> 
23:04:19 SQL> 23:04:19 SQL> --
23:04:19 SQL> -- stk10u.sql
23:04:19 SQL> --
23:04:19 SQL> 
23:04:19 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
23:04:19 SQL> 
23:04:19 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
23:04:19 SQL> @stk10.sql     '&1'
23:04:19 SQL> --
23:04:19 SQL> -- stk10.sql
23:04:19 SQL> --
23:04:19 SQL> 
23:04:19 SQL> -- Creates views and tables for demonstrating SVM.
23:04:19 SQL> 
23:04:19 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.12
23:04:19 SQL> 
23:04:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
23:04:20 SQL> 
23:04:20 SQL> CREATE TABLE stk10svmspy COMPRESS AS
23:04:20   2  SELECT
23:04:20   3  tkr
23:04:20   4  ,ydate
23:04:20   5  ,tkr||ydate tkrdate
23:04:20   6  ,clse
23:04:20   7  ,clse2
23:04:20   8  ,rownum rnum -- acts as t in my time-series
23:04:20   9  -- g1 is important. I want to predict g1:
23:04:20  10  ,gain1day g1
23:04:20  11  -- Derive some attributes from clse.
23:04:20  12  -- Each row spans 5 minutes.
23:04:20  13  -- The number of rows in 1 day is 24*60/5.
23:04:20  14  -- I want the aggregations to span from 3 days to 9 days:
23:04:20  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
23:04:20  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
23:04:20  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
23:04:20  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
23:04:20  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
23:04:20  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
23:04:20  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
23:04:20  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
23:04:20  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
23:04:20  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
23:04:20  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
23:04:20  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
23:04:20  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
23:04:20  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
23:04:20  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
23:04:20  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
23:04:20  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
23:04:20  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
23:04:20  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
23:04:20  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
23:04:20  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
23:04:20  36  FROM di5min_stk_c2
23:04:20  37  WHERE UPPER(tkr)='&1'
23:04:20  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
23:04:20  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
23:04:20  40  ORDER BY ydate
23:04:20  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='ADBE'

Table created.

Elapsed: 00:00:01.03
23:04:21 SQL> 
23:04:21 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
23:04:21 SQL> 
23:04:21 SQL> -- rpt
23:04:21 SQL> 
23:04:21 SQL> SELECT
23:04:21   2  tkr
23:04:21   3  ,COUNT(tkr)ccount
23:04:21   4  ,MIN(clse)mnclse,MAX(clse)mxclse
23:04:21   5  -- ,MIN(avg4),MAX(avg4)
23:04:21   6  ,MIN(ydate),MAX(ydate)
23:04:21   7  ,MIN(g1)
23:04:21   8  ,MAX(g1)
23:04:21   9  FROM stk10svmspy
23:04:21  10  GROUP BY tkr
23:04:21  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
ADBE	      7081	30.82	   35.96 2011-01-04 14:30:00 2011-05-19 18:30:00      -2.04	  1.64

Elapsed: 00:00:00.01
23:04:21 SQL> 
23:04:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:04:21 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.11
23:04:21 SQL> CREATE TABLE stk12svmspy COMPRESS AS
23:04:21   2  SELECT
23:04:21   3  tkr
23:04:21   4  ,ydate
23:04:21   5  ,tkrdate
23:04:21   6  ,clse
23:04:21   7  ,rnum
23:04:21   8  ,g1
23:04:21   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
23:04:21  10  -- I want more attributes from the ones I derived above:
23:04:21  11  -- clse relation to moving-min
23:04:21  12  ,clse-min3  cm3
23:04:21  13  ,clse-min4  cm4
23:04:21  14  ,clse-min5  cm5
23:04:21  15  ,clse-min6  cm6
23:04:21  16  ,clse-min7  cm7
23:04:21  17  ,clse-min8  cm8
23:04:21  18  ,clse-min9  cm9
23:04:21  19  -- clse relation to moving-avg
23:04:21  20  ,clse-avg3  ca3
23:04:21  21  ,clse-avg4  ca4
23:04:21  22  ,clse-avg5  ca5
23:04:21  23  ,clse-avg6  ca6
23:04:21  24  ,clse-avg7  ca7
23:04:21  25  ,clse-avg8  ca8
23:04:21  26  ,clse-avg9  ca9
23:04:21  27  -- clse relation to moving-max
23:04:21  28  ,clse-max3  cx3
23:04:21  29  ,clse-max4  cx4
23:04:21  30  ,clse-max5  cx5
23:04:21  31  ,clse-max6  cx6
23:04:21  32  ,clse-max7  cx7
23:04:21  33  ,clse-max8  cx8
23:04:21  34  ,clse-max9  cx9
23:04:21  35  -- Derive date related attributes:
23:04:21  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:04:21  37  ,0+TO_CHAR(ydate,'D')d
23:04:21  38  ,0+TO_CHAR(ydate,'W')w
23:04:21  39  -- mpm stands for minutes-past-midnight:
23:04:21  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:04:21  41  -- mph stands for minutes-past-hour:
23:04:21  42  ,0+TO_CHAR(ydate,'MI')mph
23:04:21  43  FROM stk10svmspy
23:04:21  44  ORDER BY ydate
23:04:21  45  /

Table created.

Elapsed: 00:00:00.19
23:04:21 SQL> 
23:04:21 SQL> -- rpt
23:04:21 SQL> 
23:04:21 SQL> SELECT
23:04:21   2  tkr
23:04:21   3  ,COUNT(tkr)ccount
23:04:21   4  ,MIN(clse)mnclse,MAX(clse)mxclse
23:04:21   5  -- ,MIN(avg4),MAX(avg4)
23:04:21   6  ,MIN(ydate),MAX(ydate)
23:04:21   7  ,MIN(g1)
23:04:21   8  ,AVG(g1)
23:04:21   9  ,MAX(g1)
23:04:21  10  FROM stk12svmspy
23:04:21  11  GROUP BY tkr
23:04:21  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
ADBE	      7081	30.82	   35.96 2011-01-04 14:30:00 2011-05-19 18:30:00      -2.04 .052553747	     1.64

Elapsed: 00:00:00.02
23:04:21 SQL> 
23:04:21 SQL> -- Prepare for derivation of NTILE based parameters.
23:04:21 SQL> -- Also derive the "trend" parameter:
23:04:21 SQL> 
23:04:21 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.17
23:04:21 SQL> CREATE TABLE stk14svmspy COMPRESS AS
23:04:21   2  SELECT
23:04:21   3  tkr
23:04:21   4  ,ydate
23:04:21   5  ,tkrdate
23:04:21   6  ,clse
23:04:21   7  ,g1
23:04:21   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
23:04:21   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
23:04:21  10  ,CASE WHEN trend IS NULL THEN 1
23:04:21  11  	    WHEN trend =0      THEN 1
23:04:21  12  	    ELSE trend END trend
23:04:21  13  ,cm3
23:04:21  14  ,cm4
23:04:21  15  ,cm5
23:04:21  16  ,cm6
23:04:21  17  ,cm7
23:04:21  18  ,cm8
23:04:21  19  ,cm9
23:04:21  20  ,ca3
23:04:21  21  ,ca4
23:04:21  22  ,ca5
23:04:21  23  ,ca6
23:04:21  24  ,ca7
23:04:21  25  ,ca8
23:04:21  26  ,ca9
23:04:21  27  ,cx3
23:04:21  28  ,cx4
23:04:21  29  ,cx5
23:04:21  30  ,cx6
23:04:21  31  ,cx7
23:04:21  32  ,cx8
23:04:21  33  ,cx9
23:04:21  34  ,hh
23:04:21  35  ,d
23:04:21  36  ,w
23:04:21  37  ,mpm
23:04:21  38  ,mph
23:04:21  39  FROM stk12svmspy
23:04:21  40  -- Guard against divide by 0:
23:04:21  41  WHERE clse > 0
23:04:21  42  ORDER BY ydate
23:04:21  43  /

Table created.

Elapsed: 00:00:00.40
23:04:22 SQL> 
23:04:22 SQL> -- rpt
23:04:22 SQL> 
23:04:22 SQL> SELECT
23:04:22   2  tkr
23:04:22   3  ,trend
23:04:22   4  ,gatt
23:04:22   5  ,COUNT(tkr)
23:04:22   6  ,AVG(g1)
23:04:22   7  FROM stk14svmspy
23:04:22   8  GROUP BY tkr,trend,gatt
23:04:22   9  ORDER BY tkr,trend,gatt
23:04:22  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ADBE		-1 nup	     1209 -.31953645
ADBE		-1 up	     1250 .489759525
ADBE		-1	       16
ADBE		 1 nup	     2334 -.32947922
ADBE		 1 up	     1964  .45734742
ADBE		 1	      308

6 rows selected.

Elapsed: 00:00:00.02
23:04:22 SQL> 
23:04:22 SQL> -- Derive NTILE based params:
23:04:22 SQL> 
23:04:22 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.10
23:04:22 SQL> CREATE TABLE stk16svmspy COMPRESS AS
23:04:22   2  SELECT
23:04:22   3  tkr
23:04:22   4  ,ydate
23:04:22   5  ,tkrdate
23:04:22   6  ,clse
23:04:22   7  ,g1
23:04:22   8  ,gatt
23:04:22   9  ,gattn
23:04:22  10  ,trend
23:04:22  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
23:04:22  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
23:04:22  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
23:04:22  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
23:04:22  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
23:04:22  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
23:04:22  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
23:04:22  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
23:04:22  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
23:04:22  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
23:04:22  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
23:04:22  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
23:04:22  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
23:04:22  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
23:04:22  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
23:04:22  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
23:04:22  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
23:04:22  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
23:04:22  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
23:04:22  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
23:04:22  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
23:04:22  32  ,hh  att21
23:04:22  33  ,d   att22
23:04:22  34  ,w   att23
23:04:22  35  ,mpm att24
23:04:22  36  ,mph att25
23:04:22  37  ,trend att26
23:04:22  38  FROM stk14svmspy
23:04:22  39  ORDER BY ydate
23:04:22  40  /

Table created.

Elapsed: 00:00:00.92
23:04:23 SQL> 
23:04:23 SQL> -- rpt
23:04:23 SQL> 
23:04:23 SQL> SELECT
23:04:23   2  tkr
23:04:23   3  ,trend
23:04:23   4  ,gatt
23:04:23   5  ,COUNT(tkr)
23:04:23   6  ,AVG(g1)
23:04:23   7  FROM stk16svmspy
23:04:23   8  GROUP BY tkr,trend,gatt
23:04:23   9  ORDER BY tkr,trend,gatt
23:04:23  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ADBE		-1 nup	     1209 -.31953645
ADBE		-1 up	     1250 .489759525
ADBE		-1	       16
ADBE		 1 nup	     2334 -.32947922
ADBE		 1 up	     1964  .45734742
ADBE		 1	      308

6 rows selected.

Elapsed: 00:00:00.01
23:04:23 SQL> 
23:04:23 SQL> -- Comment out feedback related syntax:
23:04:23 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
23:04:23 SQL> -- SELECT
23:04:23 SQL> -- m.tkr
23:04:23 SQL> -- ,m.ydate
23:04:23 SQL> -- ,m.tkrdate
23:04:23 SQL> -- ,l.score score_long
23:04:23 SQL> -- ,s.score score_short
23:04:23 SQL> -- ,m.g1
23:04:23 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
23:04:23 SQL> -- WHERE l.targ='gatt'
23:04:23 SQL> -- AND	 s.targ='gattn'
23:04:23 SQL> -- AND l.tkrdate = s.tkrdate
23:04:23 SQL> -- AND l.tkrdate = m.tkrdate
23:04:23 SQL> -- -- Speed things up:
23:04:23 SQL> -- AND l.tkr = '&1'
23:04:23 SQL> -- AND s.tkr = '&1'
23:04:23 SQL> -- /
23:04:23 SQL> --
23:04:23 SQL> -- DROP TABLE score_corr_tkr;
23:04:23 SQL> --
23:04:23 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
23:04:23 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
23:04:23 SQL> -- (
23:04:23 SQL> --   SELECT
23:04:23 SQL> --   tkrdate
23:04:23 SQL> --   -- Find corr() tween score and g1 over 8 day period:
23:04:23 SQL> --   ,CORR((score_long - score_short),g1)
23:04:23 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
23:04:23 SQL> --   FROM sc12tkr
23:04:23 SQL> -- )
23:04:23 SQL> -- GROUP BY tkrdate
23:04:23 SQL> -- /
23:04:23 SQL> 
23:04:23 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
23:04:23 SQL> 
23:04:23 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.12
23:04:23 SQL> 
23:04:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
23:04:23 SQL> 
23:04:23 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
23:04:23   2  SELECT
23:04:23   3  tkr
23:04:23   4  ,ydate
23:04:23   5  ,tkrdate
23:04:23   6  ,trend
23:04:23   7  ,g1
23:04:23   8  ,gatt
23:04:23   9  ,gattn
23:04:23  10  -- Goodness attributes:
23:04:23  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
23:04:23  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
23:04:23  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
23:04:23  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
23:04:23  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
23:04:23  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
23:04:23  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
23:04:23  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
23:04:23  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
23:04:23  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
23:04:23  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
23:04:23  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
23:04:23  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
23:04:23  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
23:04:23  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
23:04:23  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
23:04:23  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
23:04:23  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
23:04:23  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
23:04:23  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
23:04:23  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
23:04:23  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
23:04:23  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
23:04:23  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
23:04:23  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
23:04:23  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
23:04:23  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
23:04:23  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
23:04:23  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
23:04:23  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
23:04:23  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
23:04:23  42  FROM stk16svmspy
23:04:23  43  /

Table created.

Elapsed: 00:00:01.64
23:04:25 SQL> 
23:04:25 SQL> -- rpt
23:04:25 SQL> 
23:04:25 SQL> SELECT
23:04:25   2  tkr
23:04:25   3  ,trend
23:04:25   4  ,gatt
23:04:25   5  ,COUNT(tkr)
23:04:25   6  ,AVG(g1)
23:04:25   7  FROM stk_ms_svmspy
23:04:25   8  GROUP BY tkr,trend,gatt
23:04:25   9  ORDER BY tkr,trend,gatt
23:04:25  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ADBE		-1 nup	     1209 -.31953645
ADBE		-1 up	     1250 .489759525
ADBE		-1	       16
ADBE		 1 nup	     2334 -.32947922
ADBE		 1 up	     1964  .45734742
ADBE		 1	      308

6 rows selected.

Elapsed: 00:00:00.02
23:04:25 SQL> 
23:04:25 SQL> SELECT
23:04:25   2  tkr
23:04:25   3  ,0+TO_CHAR(ydate,'D')daynum
23:04:25   4  ,COUNT(tkr)
23:04:25   5  ,MIN(ydate),MAX(ydate)
23:04:25   6  FROM stk_ms_svmspy
23:04:25   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
23:04:25   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
23:04:25   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
ADBE		 2	 1326 2011-01-10 14:30:00 2011-05-16 19:55:00
ADBE		 3	 1482 2011-01-04 14:30:00 2011-05-17 19:55:00
ADBE		 4	 1482 2011-01-05 14:30:00 2011-05-18 19:55:00
ADBE		 5	 1465 2011-01-06 14:30:00 2011-05-19 18:30:00
ADBE		 6	 1326 2011-01-07 14:30:00 2011-05-13 19:55:00

Elapsed: 00:00:00.02
23:04:25 SQL> 
23:04:25 SQL> -- exit
23:04:25 SQL> @stk10svmd.sql '&1'
23:04:25 SQL> --
23:04:25 SQL> -- stk10svmd.sql
23:04:25 SQL> --
23:04:25 SQL> 
23:04:25 SQL> -- Creates views and tables for demonstrating SVM.
23:04:25 SQL> -- I need to run this after I run stk10.sql
23:04:25 SQL> 
23:04:25 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.18
23:04:25 SQL> 
23:04:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
23:04:25 SQL> 
23:04:25 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
23:04:25   2  SELECT
23:04:25   3  tkr
23:04:25   4  ,ydate
23:04:25   5  ,tkr||ydate tkrdate
23:04:25   6  ,clse
23:04:25   7  ,rownum rnum -- acts as t in my time-series
23:04:25   8  -- Derive some attributes from clse.
23:04:25   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
23:04:25  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
23:04:25  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
23:04:25  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
23:04:25  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
23:04:25  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
23:04:25  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
23:04:25  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
23:04:25  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
23:04:25  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
23:04:25  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
23:04:25  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
23:04:25  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
23:04:25  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
23:04:25  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
23:04:25  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
23:04:25  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
23:04:25  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
23:04:25  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
23:04:25  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
23:04:25  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
23:04:25  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
23:04:25  31  -- ystk21 created here: svmd/cr_ystk21.sql
23:04:25  32  FROM ystk21
23:04:25  33  WHERE UPPER(tkr)='&1'
23:04:25  34  AND ydate > '1990-01-01'
23:04:25  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
23:04:25  36  ORDER BY ydate
23:04:25  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='ADBE'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='ADBE')

Table created.

Elapsed: 00:00:00.91
23:04:26 SQL> 
23:04:26 SQL> -- rpt
23:04:26 SQL> 
23:04:26 SQL> SELECT
23:04:26   2  tkr
23:04:26   3  ,COUNT(tkr)
23:04:26   4  ,MIN(clse),MAX(clse)
23:04:26   5  ,MIN(avg4),MAX(avg4)
23:04:26   6  ,MIN(ydate),MAX(ydate)
23:04:26   7  FROM stk_svmd10svmspy
23:04:26   8  GROUP BY tkr
23:04:26   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
ADBE		5340	  15.97     163.44     16.348	 160.038 1990-01-02 20:00:00 2011-05-17 20:00:00

Elapsed: 00:00:00.02
23:04:26 SQL> 
23:04:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:04:26 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.25
23:04:26 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
23:04:26   2  SELECT
23:04:26   3  tkr
23:04:26   4  ,ydate
23:04:26   5  ,tkrdate
23:04:26   6  ,clse
23:04:26   7  ,rnum
23:04:26   8  -- g1 is important. I want to predict g1:
23:04:26   9  ,ld - clse g1
23:04:26  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
23:04:26  11  -- I want more attributes from the ones I derived above:
23:04:26  12  -- clse relation to moving-min
23:04:26  13  ,clse-min3  cm3
23:04:26  14  ,clse-min4  cm4
23:04:26  15  ,clse-min5  cm5
23:04:26  16  ,clse-min6  cm6
23:04:26  17  ,clse-min7  cm7
23:04:26  18  ,clse-min8  cm8
23:04:26  19  ,clse-min9  cm9
23:04:26  20  -- clse relation to moving-avg
23:04:26  21  ,clse-avg3  ca3
23:04:26  22  ,clse-avg4  ca4
23:04:26  23  ,clse-avg5  ca5
23:04:26  24  ,clse-avg6  ca6
23:04:26  25  ,clse-avg7  ca7
23:04:26  26  ,clse-avg8  ca8
23:04:26  27  ,clse-avg9  ca9
23:04:26  28  -- clse relation to moving-max
23:04:26  29  ,clse-max3  cx3
23:04:26  30  ,clse-max4  cx4
23:04:26  31  ,clse-max5  cx5
23:04:26  32  ,clse-max6  cx6
23:04:26  33  ,clse-max7  cx7
23:04:26  34  ,clse-max8  cx8
23:04:26  35  ,clse-max9  cx9
23:04:26  36  -- Derive date related attributes:
23:04:26  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:04:26  38  ,0+TO_CHAR(ydate,'D')d
23:04:26  39  ,0+TO_CHAR(ydate,'W')w
23:04:26  40  -- mpm stands for minutes-past-midnight:
23:04:26  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:04:26  42  -- mph stands for minutes-past-hour:
23:04:26  43  ,0+TO_CHAR(ydate,'MI')mph
23:04:26  44  FROM stk_svmd10svmspy
23:04:26  45  ORDER BY ydate
23:04:26  46  /

Table created.

Elapsed: 00:00:00.21
23:04:27 SQL> 
23:04:27 SQL> -- rpt
23:04:27 SQL> 
23:04:27 SQL> SELECT
23:04:27   2  tkr
23:04:27   3  ,COUNT(tkr)
23:04:27   4  ,MIN(clse),MAX(clse)
23:04:27   5  ,MIN(ydate),MAX(ydate)
23:04:27   6  FROM stk_svmd12
23:04:27   7  GROUP BY tkr
23:04:27   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
ADBE		5340	  15.97     163.44 1990-01-02 20:00:00 2011-05-17 20:00:00

Elapsed: 00:00:00.02
23:04:27 SQL> 
23:04:27 SQL> -- Prepare for derivation of NTILE based parameters.
23:04:27 SQL> -- Also derive the "trend" parameter:
23:04:27 SQL> 
23:04:27 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.12
23:04:27 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
23:04:27   2  SELECT
23:04:27   3  tkr
23:04:27   4  ,ydate
23:04:27   5  ,tkrdate
23:04:27   6  ,clse
23:04:27   7  ,g1
23:04:27   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
23:04:27   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
23:04:27  10  ,CASE WHEN trend IS NULL THEN 1
23:04:27  11  	    WHEN trend =0      THEN 1
23:04:27  12  	    ELSE trend END trend
23:04:27  13  ,cm3
23:04:27  14  ,cm4
23:04:27  15  ,cm5
23:04:27  16  ,cm6
23:04:27  17  ,cm7
23:04:27  18  ,cm8
23:04:27  19  ,cm9
23:04:27  20  ,ca3
23:04:27  21  ,ca4
23:04:27  22  ,ca5
23:04:27  23  ,ca6
23:04:27  24  ,ca7
23:04:27  25  ,ca8
23:04:27  26  ,ca9
23:04:27  27  ,cx3
23:04:27  28  ,cx4
23:04:27  29  ,cx5
23:04:27  30  ,cx6
23:04:27  31  ,cx7
23:04:27  32  ,cx8
23:04:27  33  ,cx9
23:04:27  34  ,hh
23:04:27  35  ,d
23:04:27  36  ,w
23:04:27  37  ,mpm
23:04:27  38  ,mph
23:04:27  39  FROM stk_svmd12
23:04:27  40  -- Guard against divide by 0:
23:04:27  41  WHERE clse > 0
23:04:27  42  ORDER BY ydate
23:04:27  43  /

Table created.

Elapsed: 00:00:00.22
23:04:27 SQL> 
23:04:27 SQL> -- rpt
23:04:27 SQL> 
23:04:27 SQL> SELECT
23:04:27   2  tkr
23:04:27   3  ,trend
23:04:27   4  ,gatt
23:04:27   5  ,COUNT(tkr)
23:04:27   6  ,AVG(g1)
23:04:27   7  FROM stk_svmd14
23:04:27   8  GROUP BY tkr,trend,gatt
23:04:27   9  ORDER BY tkr,trend,gatt
23:04:27  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ADBE		  -1 nup       1363 -.91011739
ADBE		  -1 up        1155 1.20082251
ADBE		   1 nup       1590 -1.0176352
ADBE		   1 up        1231 1.20808286
ADBE		   1		  1

Elapsed: 00:00:00.02
23:04:27 SQL> 
23:04:27 SQL> -- Derive NTILE based params:
23:04:27 SQL> 
23:04:27 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.15
23:04:27 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
23:04:27   2  SELECT
23:04:27   3  tkr
23:04:27   4  ,ydate
23:04:27   5  ,tkrdate
23:04:27   6  ,clse
23:04:27   7  ,g1
23:04:27   8  ,gatt
23:04:27   9  ,gattn
23:04:27  10  ,trend
23:04:27  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
23:04:27  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
23:04:27  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
23:04:27  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
23:04:27  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
23:04:27  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
23:04:27  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
23:04:27  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
23:04:27  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
23:04:27  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
23:04:27  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
23:04:27  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
23:04:27  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
23:04:27  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
23:04:27  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
23:04:27  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
23:04:27  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
23:04:27  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
23:04:27  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
23:04:27  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
23:04:27  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
23:04:27  32  ,hh  att21
23:04:27  33  ,d   att22
23:04:27  34  ,w   att23
23:04:27  35  ,mpm att24
23:04:27  36  ,mph att25
23:04:27  37  ,trend att26
23:04:27  38  FROM stk_svmd14
23:04:27  39  ORDER BY ydate
23:04:27  40  /

Table created.

Elapsed: 00:00:00.81
23:04:28 SQL> 
23:04:28 SQL> -- rpt
23:04:28 SQL> 
23:04:28 SQL> SELECT
23:04:28   2  tkr
23:04:28   3  ,trend
23:04:28   4  ,gatt
23:04:28   5  ,COUNT(tkr)
23:04:28   6  ,AVG(g1)
23:04:28   7  FROM stk_svmd16
23:04:28   8  GROUP BY tkr,trend,gatt
23:04:28   9  ORDER BY tkr,trend,gatt
23:04:28  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ADBE		  -1 nup       1363 -.91011739
ADBE		  -1 up        1155 1.20082251
ADBE		   1 nup       1590 -1.0176352
ADBE		   1 up        1231 1.20808286
ADBE		   1		  1

Elapsed: 00:00:00.02
23:04:28 SQL> 
23:04:28 SQL> -- Comment out feedback related syntax:
23:04:28 SQL> 
23:04:28 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
23:04:28 SQL> -- SELECT
23:04:28 SQL> -- m.tkr
23:04:28 SQL> -- ,m.ydate
23:04:28 SQL> -- ,m.tkrdate
23:04:28 SQL> -- ,l.score score_long
23:04:28 SQL> -- ,s.score score_short
23:04:28 SQL> -- ,m.g1
23:04:28 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
23:04:28 SQL> -- WHERE l.targ='gatt'
23:04:28 SQL> -- AND	 s.targ='gattn'
23:04:28 SQL> -- AND l.tkrdate = s.tkrdate
23:04:28 SQL> -- AND l.tkrdate = m.tkrdate
23:04:28 SQL> -- -- Speed things up:
23:04:28 SQL> -- AND l.tkr = '&1'
23:04:28 SQL> -- AND s.tkr = '&1'
23:04:28 SQL> -- /
23:04:28 SQL> --
23:04:28 SQL> -- DROP TABLE score_corr_tkr;
23:04:28 SQL> --
23:04:28 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
23:04:28 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
23:04:28 SQL> -- (
23:04:28 SQL> --   SELECT
23:04:28 SQL> --   tkrdate
23:04:28 SQL> --   -- Find corr() tween score and g1 over 8 day period:
23:04:28 SQL> --   ,CORR((score_long - score_short),g1)
23:04:28 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
23:04:28 SQL> --   FROM sc12tkr
23:04:28 SQL> -- )
23:04:28 SQL> -- GROUP BY tkrdate
23:04:28 SQL> -- /
23:04:28 SQL> 
23:04:28 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
23:04:28 SQL> 
23:04:28 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.35
23:04:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.67
23:04:29 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
23:04:29   2  SELECT
23:04:29   3  tkr
23:04:29   4  ,ydate
23:04:29   5  ,tkrdate
23:04:29   6  ,trend
23:04:29   7  ,g1
23:04:29   8  ,gatt
23:04:29   9  ,gattn
23:04:29  10  -- Goodness attributes:
23:04:29  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
23:04:29  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
23:04:29  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
23:04:29  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
23:04:29  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
23:04:29  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
23:04:29  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
23:04:29  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
23:04:29  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
23:04:29  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
23:04:29  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
23:04:29  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
23:04:29  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
23:04:29  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
23:04:29  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
23:04:29  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
23:04:29  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
23:04:29  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
23:04:29  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
23:04:29  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
23:04:29  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
23:04:29  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
23:04:29  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
23:04:29  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
23:04:29  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
23:04:29  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
23:04:29  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
23:04:29  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
23:04:29  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
23:04:29  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
23:04:29  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
23:04:29  42  FROM stk_svmd16
23:04:29  43  /

Table created.

Elapsed: 00:00:01.08
23:04:30 SQL> 
23:04:30 SQL> -- rpt
23:04:30 SQL> 
23:04:30 SQL> SELECT
23:04:30   2  tkr
23:04:30   3  ,trend
23:04:30   4  ,gatt
23:04:30   5  ,COUNT(tkr)
23:04:30   6  ,AVG(g1)
23:04:30   7  FROM stk_ms_svmd_svmspy
23:04:30   8  GROUP BY tkr,trend,gatt
23:04:30   9  ORDER BY tkr,trend,gatt
23:04:30  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ADBE		  -1 nup       1363 -.91011739
ADBE		  -1 up        1155 1.20082251
ADBE		   1 nup       1590 -1.0176352
ADBE		   1 up        1231 1.20808286
ADBE		   1		  1

Elapsed: 00:00:00.01
23:04:30 SQL> 
23:04:30 SQL> SELECT
23:04:30   2  tkr
23:04:30   3  ,COUNT(tkr)
23:04:30   4  ,MIN(ydate),MAX(ydate)
23:04:30   5  FROM stk_ms_svmd_svmspy
23:04:30   6  GROUP BY tkr
23:04:30   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
ADBE		5340 1990-01-02 20:00:00 2011-05-17 20:00:00

Elapsed: 00:00:00.01
23:04:30 SQL> 
23:04:30 SQL> -- exit
23:04:30 SQL> 
23:04:30 SQL> 
23:04:30 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.35
23:04:30 SQL> 
23:04:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
23:04:31 SQL> 
23:04:31 SQL> CREATE TABLE stk_ms_u COMPRESS AS
23:04:31   2  SELECT * FROM stk_ms_svmspy
23:04:31   3  UNION
23:04:31   4  SELECT * FROM stk_ms_svmd_svmspy
23:04:31   5  /

Table created.

Elapsed: 00:00:00.42
23:04:31 SQL> 
23:04:31 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
