
SQL*Plus: Release 11.2.0.1.0 Production on Sun May 1 00:26:17 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:26:17 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:26:17 SQL> 
00:26:17 SQL> 00:26:17 SQL> --
00:26:17 SQL> -- stk10u.sql
00:26:17 SQL> --
00:26:17 SQL> 
00:26:17 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
00:26:17 SQL> 
00:26:17 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
00:26:17 SQL> @stk10.sql     '&1'
00:26:17 SQL> --
00:26:17 SQL> -- stk10.sql
00:26:17 SQL> --
00:26:17 SQL> 
00:26:17 SQL> -- Creates views and tables for demonstrating SVM.
00:26:17 SQL> 
00:26:17 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.19
00:26:17 SQL> 
00:26:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
00:26:17 SQL> 
00:26:17 SQL> CREATE TABLE stk10svmspy COMPRESS AS
00:26:17   2  SELECT
00:26:17   3  tkr
00:26:17   4  ,ydate
00:26:17   5  ,tkr||ydate tkrdate
00:26:17   6  ,clse
00:26:17   7  ,clse2
00:26:17   8  ,rownum rnum -- acts as t in my time-series
00:26:17   9  -- g1 is important. I want to predict g1:
00:26:17  10  ,gain1day g1
00:26:17  11  -- Derive some attributes from clse.
00:26:17  12  -- Each row spans 5 minutes.
00:26:17  13  -- The number of rows in 1 day is 24*60/5.
00:26:17  14  -- I want the aggregations to span from 3 days to 9 days:
00:26:17  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
00:26:17  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
00:26:17  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
00:26:17  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
00:26:17  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
00:26:17  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
00:26:17  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
00:26:17  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
00:26:17  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
00:26:17  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
00:26:17  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
00:26:17  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
00:26:17  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
00:26:17  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
00:26:17  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
00:26:17  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
00:26:17  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
00:26:17  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
00:26:17  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
00:26:17  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
00:26:17  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
00:26:17  36  FROM di5min_stk_c2
00:26:17  37  WHERE UPPER(tkr)='&1'
00:26:17  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
00:26:17  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
00:26:17  40  ORDER BY ydate
00:26:17  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='CDE'

Table created.

Elapsed: 00:00:01.43
00:26:18 SQL> 
00:26:18 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
00:26:19 SQL> 
00:26:19 SQL> -- rpt
00:26:19 SQL> 
00:26:19 SQL> SELECT
00:26:19   2  tkr
00:26:19   3  ,COUNT(tkr)ccount
00:26:19   4  ,MIN(clse)mnclse,MAX(clse)mxclse
00:26:19   5  -- ,MIN(avg4),MAX(avg4)
00:26:19   6  ,MIN(ydate),MAX(ydate)
00:26:19   7  ,MIN(g1)
00:26:19   8  ,MAX(g1)
00:26:19   9  FROM stk10svmspy
00:26:19  10  GROUP BY tkr
00:26:19  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
CDE	      5382	22.13	   37.46 2011-01-21 14:30:00 2011-04-29 19:55:00      -3.57	   4.4

Elapsed: 00:00:00.02
00:26:19 SQL> 
00:26:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:26:19 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.05
00:26:19 SQL> CREATE TABLE stk12svmspy COMPRESS AS
00:26:19   2  SELECT
00:26:19   3  tkr
00:26:19   4  ,ydate
00:26:19   5  ,tkrdate
00:26:19   6  ,clse
00:26:19   7  ,rnum
00:26:19   8  ,g1
00:26:19   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
00:26:19  10  -- I want more attributes from the ones I derived above:
00:26:19  11  -- clse relation to moving-min
00:26:19  12  ,clse-min3  cm3
00:26:19  13  ,clse-min4  cm4
00:26:19  14  ,clse-min5  cm5
00:26:19  15  ,clse-min6  cm6
00:26:19  16  ,clse-min7  cm7
00:26:19  17  ,clse-min8  cm8
00:26:19  18  ,clse-min9  cm9
00:26:19  19  -- clse relation to moving-avg
00:26:19  20  ,clse-avg3  ca3
00:26:19  21  ,clse-avg4  ca4
00:26:19  22  ,clse-avg5  ca5
00:26:19  23  ,clse-avg6  ca6
00:26:19  24  ,clse-avg7  ca7
00:26:19  25  ,clse-avg8  ca8
00:26:19  26  ,clse-avg9  ca9
00:26:19  27  -- clse relation to moving-max
00:26:19  28  ,clse-max3  cx3
00:26:19  29  ,clse-max4  cx4
00:26:19  30  ,clse-max5  cx5
00:26:19  31  ,clse-max6  cx6
00:26:19  32  ,clse-max7  cx7
00:26:19  33  ,clse-max8  cx8
00:26:19  34  ,clse-max9  cx9
00:26:19  35  -- Derive date related attributes:
00:26:19  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:26:19  37  ,0+TO_CHAR(ydate,'D')d
00:26:19  38  ,0+TO_CHAR(ydate,'W')w
00:26:19  39  -- mpm stands for minutes-past-midnight:
00:26:19  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:26:19  41  -- mph stands for minutes-past-hour:
00:26:19  42  ,0+TO_CHAR(ydate,'MI')mph
00:26:19  43  FROM stk10svmspy
00:26:19  44  ORDER BY ydate
00:26:19  45  /

Table created.

Elapsed: 00:00:00.16
00:26:19 SQL> 
00:26:19 SQL> -- rpt
00:26:19 SQL> 
00:26:19 SQL> SELECT
00:26:19   2  tkr
00:26:19   3  ,COUNT(tkr)ccount
00:26:19   4  ,MIN(clse)mnclse,MAX(clse)mxclse
00:26:19   5  -- ,MIN(avg4),MAX(avg4)
00:26:19   6  ,MIN(ydate),MAX(ydate)
00:26:19   7  ,MIN(g1)
00:26:19   8  ,AVG(g1)
00:26:19   9  ,MAX(g1)
00:26:19  10  FROM stk12svmspy
00:26:19  11  GROUP BY tkr
00:26:19  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
CDE	      5382	22.13	   37.46 2011-01-21 14:30:00 2011-04-29 19:55:00      -3.57 .150839516	      4.4

Elapsed: 00:00:00.03
00:26:19 SQL> 
00:26:19 SQL> -- Prepare for derivation of NTILE based parameters.
00:26:19 SQL> -- Also derive the "trend" parameter:
00:26:19 SQL> 
00:26:19 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
00:26:19 SQL> CREATE TABLE stk14svmspy COMPRESS AS
00:26:19   2  SELECT
00:26:19   3  tkr
00:26:19   4  ,ydate
00:26:19   5  ,tkrdate
00:26:19   6  ,clse
00:26:19   7  ,g1
00:26:19   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
00:26:19   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
00:26:19  10  ,CASE WHEN trend IS NULL THEN 1
00:26:19  11  	    WHEN trend =0      THEN 1
00:26:19  12  	    ELSE trend END trend
00:26:19  13  ,cm3
00:26:19  14  ,cm4
00:26:19  15  ,cm5
00:26:19  16  ,cm6
00:26:19  17  ,cm7
00:26:19  18  ,cm8
00:26:19  19  ,cm9
00:26:19  20  ,ca3
00:26:19  21  ,ca4
00:26:19  22  ,ca5
00:26:19  23  ,ca6
00:26:19  24  ,ca7
00:26:19  25  ,ca8
00:26:19  26  ,ca9
00:26:19  27  ,cx3
00:26:19  28  ,cx4
00:26:19  29  ,cx5
00:26:19  30  ,cx6
00:26:19  31  ,cx7
00:26:19  32  ,cx8
00:26:19  33  ,cx9
00:26:19  34  ,hh
00:26:19  35  ,d
00:26:19  36  ,w
00:26:19  37  ,mpm
00:26:19  38  ,mph
00:26:19  39  FROM stk12svmspy
00:26:19  40  -- Guard against divide by 0:
00:26:19  41  WHERE clse > 0
00:26:19  42  ORDER BY ydate
00:26:19  43  /

Table created.

Elapsed: 00:00:00.12
00:26:19 SQL> 
00:26:19 SQL> -- rpt
00:26:19 SQL> 
00:26:19 SQL> SELECT
00:26:19   2  tkr
00:26:19   3  ,trend
00:26:19   4  ,gatt
00:26:19   5  ,COUNT(tkr)
00:26:19   6  ,AVG(g1)
00:26:19   7  FROM stk14svmspy
00:26:19   8  GROUP BY tkr,trend,gatt
00:26:19   9  ORDER BY tkr,trend,gatt
00:26:19  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
CDE		-1 nup	      547  -.8535151
CDE		-1 up	      627 .712989665
CDE		-1	      156
CDE		 1 nup	     1863  -.6726033
CDE		 1 up	     2099 .975512121
CDE		 1	       90

6 rows selected.

Elapsed: 00:00:00.01
00:26:19 SQL> 
00:26:19 SQL> -- Derive NTILE based params:
00:26:19 SQL> 
00:26:19 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.09
00:26:19 SQL> CREATE TABLE stk16svmspy COMPRESS AS
00:26:19   2  SELECT
00:26:19   3  tkr
00:26:19   4  ,ydate
00:26:19   5  ,tkrdate
00:26:19   6  ,clse
00:26:19   7  ,g1
00:26:19   8  ,gatt
00:26:19   9  ,gattn
00:26:19  10  ,trend
00:26:19  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
00:26:19  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
00:26:19  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
00:26:19  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
00:26:19  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
00:26:19  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
00:26:19  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
00:26:19  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
00:26:19  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
00:26:19  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
00:26:19  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
00:26:19  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
00:26:19  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
00:26:19  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
00:26:19  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
00:26:19  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
00:26:19  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
00:26:19  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
00:26:19  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
00:26:19  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
00:26:19  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
00:26:19  32  ,hh  att21
00:26:19  33  ,d   att22
00:26:19  34  ,w   att23
00:26:19  35  ,mpm att24
00:26:19  36  ,mph att25
00:26:19  37  ,trend att26
00:26:19  38  FROM stk14svmspy
00:26:19  39  ORDER BY ydate
00:26:19  40  /

Table created.

Elapsed: 00:00:00.68
00:26:20 SQL> 
00:26:20 SQL> -- rpt
00:26:20 SQL> 
00:26:20 SQL> SELECT
00:26:20   2  tkr
00:26:20   3  ,trend
00:26:20   4  ,gatt
00:26:20   5  ,COUNT(tkr)
00:26:20   6  ,AVG(g1)
00:26:20   7  FROM stk16svmspy
00:26:20   8  GROUP BY tkr,trend,gatt
00:26:20   9  ORDER BY tkr,trend,gatt
00:26:20  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
CDE		-1 nup	      547  -.8535151
CDE		-1 up	      627 .712989665
CDE		-1	      156
CDE		 1 nup	     1863  -.6726033
CDE		 1 up	     2099 .975512121
CDE		 1	       90

6 rows selected.

Elapsed: 00:00:00.01
00:26:20 SQL> 
00:26:20 SQL> -- Comment out feedback related syntax:
00:26:20 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
00:26:20 SQL> -- SELECT
00:26:20 SQL> -- m.tkr
00:26:20 SQL> -- ,m.ydate
00:26:20 SQL> -- ,m.tkrdate
00:26:20 SQL> -- ,l.score score_long
00:26:20 SQL> -- ,s.score score_short
00:26:20 SQL> -- ,m.g1
00:26:20 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
00:26:20 SQL> -- WHERE l.targ='gatt'
00:26:20 SQL> -- AND	 s.targ='gattn'
00:26:20 SQL> -- AND l.tkrdate = s.tkrdate
00:26:20 SQL> -- AND l.tkrdate = m.tkrdate
00:26:20 SQL> -- -- Speed things up:
00:26:20 SQL> -- AND l.tkr = '&1'
00:26:20 SQL> -- AND s.tkr = '&1'
00:26:20 SQL> -- /
00:26:20 SQL> --
00:26:20 SQL> -- DROP TABLE score_corr_tkr;
00:26:20 SQL> --
00:26:20 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
00:26:20 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
00:26:20 SQL> -- (
00:26:20 SQL> --   SELECT
00:26:20 SQL> --   tkrdate
00:26:20 SQL> --   -- Find corr() tween score and g1 over 8 day period:
00:26:20 SQL> --   ,CORR((score_long - score_short),g1)
00:26:20 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
00:26:20 SQL> --   FROM sc12tkr
00:26:20 SQL> -- )
00:26:20 SQL> -- GROUP BY tkrdate
00:26:20 SQL> -- /
00:26:20 SQL> 
00:26:20 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
00:26:20 SQL> 
00:26:20 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.03
00:26:20 SQL> 
00:26:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
00:26:20 SQL> 
00:26:20 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
00:26:20   2  SELECT
00:26:20   3  tkr
00:26:20   4  ,ydate
00:26:20   5  ,tkrdate
00:26:20   6  ,trend
00:26:20   7  ,g1
00:26:20   8  ,gatt
00:26:20   9  ,gattn
00:26:20  10  -- Goodness attributes:
00:26:20  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
00:26:20  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
00:26:20  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
00:26:20  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
00:26:20  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
00:26:20  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
00:26:20  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
00:26:20  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
00:26:20  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
00:26:20  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
00:26:20  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
00:26:20  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
00:26:20  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
00:26:20  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
00:26:20  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
00:26:20  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
00:26:20  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
00:26:20  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
00:26:20  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
00:26:20  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
00:26:20  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
00:26:20  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
00:26:20  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
00:26:20  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
00:26:20  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
00:26:20  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
00:26:20  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
00:26:20  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
00:26:20  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
00:26:20  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
00:26:20  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
00:26:20  42  FROM stk16svmspy
00:26:20  43  /

Table created.

Elapsed: 00:00:00.93
00:26:21 SQL> 
00:26:21 SQL> -- rpt
00:26:21 SQL> 
00:26:21 SQL> SELECT
00:26:21   2  tkr
00:26:21   3  ,trend
00:26:21   4  ,gatt
00:26:21   5  ,COUNT(tkr)
00:26:21   6  ,AVG(g1)
00:26:21   7  FROM stk_ms_svmspy
00:26:21   8  GROUP BY tkr,trend,gatt
00:26:21   9  ORDER BY tkr,trend,gatt
00:26:21  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
CDE		-1 nup	      547  -.8535151
CDE		-1 up	      627 .712989665
CDE		-1	      156
CDE		 1 nup	     1863  -.6726033
CDE		 1 up	     2099 .975512121
CDE		 1	       90

6 rows selected.

Elapsed: 00:00:00.02
00:26:21 SQL> 
00:26:21 SQL> SELECT
00:26:21   2  tkr
00:26:21   3  ,0+TO_CHAR(ydate,'D')daynum
00:26:21   4  ,COUNT(tkr)
00:26:21   5  ,MIN(ydate),MAX(ydate)
00:26:21   6  FROM stk_ms_svmspy
00:26:21   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
00:26:21   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
00:26:21   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
CDE		 2	 1014 2011-01-24 14:30:00 2011-04-25 19:55:00
CDE		 3	 1092 2011-01-25 14:30:00 2011-04-26 19:55:00
CDE		 4	 1092 2011-01-26 14:30:00 2011-04-27 19:55:00
CDE		 5	 1092 2011-01-27 14:30:00 2011-04-28 19:55:00
CDE		 6	 1092 2011-01-21 14:30:00 2011-04-29 19:55:00

Elapsed: 00:00:00.01
00:26:21 SQL> 
00:26:21 SQL> -- exit
00:26:21 SQL> @stk10svmd.sql '&1'
00:26:21 SQL> --
00:26:21 SQL> -- stk10svmd.sql
00:26:21 SQL> --
00:26:21 SQL> 
00:26:21 SQL> -- Creates views and tables for demonstrating SVM.
00:26:21 SQL> -- I need to run this after I run stk10.sql
00:26:21 SQL> 
00:26:21 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.06
00:26:21 SQL> 
00:26:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
00:26:21 SQL> 
00:26:21 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
00:26:21   2  SELECT
00:26:21   3  tkr
00:26:21   4  ,ydate
00:26:21   5  ,tkr||ydate tkrdate
00:26:21   6  ,clse
00:26:21   7  ,rownum rnum -- acts as t in my time-series
00:26:21   8  -- Derive some attributes from clse.
00:26:21   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
00:26:21  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
00:26:21  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
00:26:21  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
00:26:21  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
00:26:21  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
00:26:21  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
00:26:21  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
00:26:21  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
00:26:21  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
00:26:21  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
00:26:21  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
00:26:21  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
00:26:21  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
00:26:21  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
00:26:21  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
00:26:21  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
00:26:21  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
00:26:21  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
00:26:21  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
00:26:21  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
00:26:21  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
00:26:21  31  -- ystk21 created here: svmd/cr_ystk21.sql
00:26:21  32  FROM ystk21
00:26:21  33  WHERE UPPER(tkr)='&1'
00:26:21  34  AND ydate > '1990-01-01'
00:26:21  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
00:26:21  36  ORDER BY ydate
00:26:21  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='CDE'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='CDE')

Table created.

Elapsed: 00:00:01.99
00:26:23 SQL> 
00:26:23 SQL> -- rpt
00:26:23 SQL> 
00:26:23 SQL> SELECT
00:26:23   2  tkr
00:26:23   3  ,COUNT(tkr)
00:26:23   4  ,MIN(clse),MAX(clse)
00:26:23   5  ,MIN(avg4),MAX(avg4)
00:26:23   6  ,MIN(ydate),MAX(ydate)
00:26:23   7  FROM stk_svmd10svmspy
00:26:23   8  GROUP BY tkr
00:26:23   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
CDE		5265	    3.6     268.46	 4.56	  264.92 1990-04-12 20:00:00 2011-04-29 20:00:00

Elapsed: 00:00:00.02
00:26:23 SQL> 
00:26:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:26:23 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:06.07
00:26:29 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
00:26:29   2  SELECT
00:26:29   3  tkr
00:26:29   4  ,ydate
00:26:29   5  ,tkrdate
00:26:29   6  ,clse
00:26:29   7  ,rnum
00:26:29   8  -- g1 is important. I want to predict g1:
00:26:29   9  ,ld - clse g1
00:26:29  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
00:26:29  11  -- I want more attributes from the ones I derived above:
00:26:29  12  -- clse relation to moving-min
00:26:29  13  ,clse-min3  cm3
00:26:29  14  ,clse-min4  cm4
00:26:29  15  ,clse-min5  cm5
00:26:29  16  ,clse-min6  cm6
00:26:29  17  ,clse-min7  cm7
00:26:29  18  ,clse-min8  cm8
00:26:29  19  ,clse-min9  cm9
00:26:29  20  -- clse relation to moving-avg
00:26:29  21  ,clse-avg3  ca3
00:26:29  22  ,clse-avg4  ca4
00:26:29  23  ,clse-avg5  ca5
00:26:29  24  ,clse-avg6  ca6
00:26:29  25  ,clse-avg7  ca7
00:26:29  26  ,clse-avg8  ca8
00:26:29  27  ,clse-avg9  ca9
00:26:29  28  -- clse relation to moving-max
00:26:29  29  ,clse-max3  cx3
00:26:29  30  ,clse-max4  cx4
00:26:29  31  ,clse-max5  cx5
00:26:29  32  ,clse-max6  cx6
00:26:29  33  ,clse-max7  cx7
00:26:29  34  ,clse-max8  cx8
00:26:29  35  ,clse-max9  cx9
00:26:29  36  -- Derive date related attributes:
00:26:29  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:26:29  38  ,0+TO_CHAR(ydate,'D')d
00:26:29  39  ,0+TO_CHAR(ydate,'W')w
00:26:29  40  -- mpm stands for minutes-past-midnight:
00:26:29  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:26:29  42  -- mph stands for minutes-past-hour:
00:26:29  43  ,0+TO_CHAR(ydate,'MI')mph
00:26:29  44  FROM stk_svmd10svmspy
00:26:29  45  ORDER BY ydate
00:26:29  46  /

Table created.

Elapsed: 00:00:00.16
00:26:30 SQL> 
00:26:30 SQL> -- rpt
00:26:30 SQL> 
00:26:30 SQL> SELECT
00:26:30   2  tkr
00:26:30   3  ,COUNT(tkr)
00:26:30   4  ,MIN(clse),MAX(clse)
00:26:30   5  ,MIN(ydate),MAX(ydate)
00:26:30   6  FROM stk_svmd12
00:26:30   7  GROUP BY tkr
00:26:30   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
CDE		5265	    3.6     268.46 1990-04-12 20:00:00 2011-04-29 20:00:00

Elapsed: 00:00:00.01
00:26:30 SQL> 
00:26:30 SQL> -- Prepare for derivation of NTILE based parameters.
00:26:30 SQL> -- Also derive the "trend" parameter:
00:26:30 SQL> 
00:26:30 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.34
00:26:30 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
00:26:30   2  SELECT
00:26:30   3  tkr
00:26:30   4  ,ydate
00:26:30   5  ,tkrdate
00:26:30   6  ,clse
00:26:30   7  ,g1
00:26:30   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
00:26:30   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
00:26:30  10  ,CASE WHEN trend IS NULL THEN 1
00:26:30  11  	    WHEN trend =0      THEN 1
00:26:30  12  	    ELSE trend END trend
00:26:30  13  ,cm3
00:26:30  14  ,cm4
00:26:30  15  ,cm5
00:26:30  16  ,cm6
00:26:30  17  ,cm7
00:26:30  18  ,cm8
00:26:30  19  ,cm9
00:26:30  20  ,ca3
00:26:30  21  ,ca4
00:26:30  22  ,ca5
00:26:30  23  ,ca6
00:26:30  24  ,ca7
00:26:30  25  ,ca8
00:26:30  26  ,ca9
00:26:30  27  ,cx3
00:26:30  28  ,cx4
00:26:30  29  ,cx5
00:26:30  30  ,cx6
00:26:30  31  ,cx7
00:26:30  32  ,cx8
00:26:30  33  ,cx9
00:26:30  34  ,hh
00:26:30  35  ,d
00:26:30  36  ,w
00:26:30  37  ,mpm
00:26:30  38  ,mph
00:26:30  39  FROM stk_svmd12
00:26:30  40  -- Guard against divide by 0:
00:26:30  41  WHERE clse > 0
00:26:30  42  ORDER BY ydate
00:26:30  43  /

Table created.

Elapsed: 00:00:00.12
00:26:30 SQL> 
00:26:30 SQL> -- rpt
00:26:30 SQL> 
00:26:30 SQL> SELECT
00:26:30   2  tkr
00:26:30   3  ,trend
00:26:30   4  ,gatt
00:26:30   5  ,COUNT(tkr)
00:26:30   6  ,AVG(g1)
00:26:30   7  FROM stk_svmd14
00:26:30   8  GROUP BY tkr,trend,gatt
00:26:30   9  ORDER BY tkr,trend,gatt
00:26:30  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CDE		  -1 nup       1511 -1.6507743
CDE		  -1 up        1194 2.07510888
CDE		  -1		  1
CDE		   1 nup       1519 -1.6777419
CDE		   1 up        1040 2.27070192

Elapsed: 00:00:00.01
00:26:30 SQL> 
00:26:30 SQL> -- Derive NTILE based params:
00:26:30 SQL> 
00:26:30 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.05
00:26:30 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
00:26:30   2  SELECT
00:26:30   3  tkr
00:26:30   4  ,ydate
00:26:30   5  ,tkrdate
00:26:30   6  ,clse
00:26:30   7  ,g1
00:26:30   8  ,gatt
00:26:30   9  ,gattn
00:26:30  10  ,trend
00:26:30  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
00:26:30  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
00:26:30  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
00:26:30  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
00:26:30  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
00:26:30  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
00:26:30  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
00:26:30  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
00:26:30  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
00:26:30  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
00:26:30  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
00:26:30  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
00:26:30  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
00:26:30  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
00:26:30  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
00:26:30  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
00:26:30  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
00:26:30  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
00:26:30  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
00:26:30  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
00:26:30  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
00:26:30  32  ,hh  att21
00:26:30  33  ,d   att22
00:26:30  34  ,w   att23
00:26:30  35  ,mpm att24
00:26:30  36  ,mph att25
00:26:30  37  ,trend att26
00:26:30  38  FROM stk_svmd14
00:26:30  39  ORDER BY ydate
00:26:30  40  /

Table created.

Elapsed: 00:00:00.61
00:26:31 SQL> 
00:26:31 SQL> -- rpt
00:26:31 SQL> 
00:26:31 SQL> SELECT
00:26:31   2  tkr
00:26:31   3  ,trend
00:26:31   4  ,gatt
00:26:31   5  ,COUNT(tkr)
00:26:31   6  ,AVG(g1)
00:26:31   7  FROM stk_svmd16
00:26:31   8  GROUP BY tkr,trend,gatt
00:26:31   9  ORDER BY tkr,trend,gatt
00:26:31  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CDE		  -1 nup       1511 -1.6507743
CDE		  -1 up        1194 2.07510888
CDE		  -1		  1
CDE		   1 nup       1519 -1.6777419
CDE		   1 up        1040 2.27070192

Elapsed: 00:00:00.00
00:26:31 SQL> 
00:26:31 SQL> -- Comment out feedback related syntax:
00:26:31 SQL> 
00:26:31 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
00:26:31 SQL> -- SELECT
00:26:31 SQL> -- m.tkr
00:26:31 SQL> -- ,m.ydate
00:26:31 SQL> -- ,m.tkrdate
00:26:31 SQL> -- ,l.score score_long
00:26:31 SQL> -- ,s.score score_short
00:26:31 SQL> -- ,m.g1
00:26:31 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
00:26:31 SQL> -- WHERE l.targ='gatt'
00:26:31 SQL> -- AND	 s.targ='gattn'
00:26:31 SQL> -- AND l.tkrdate = s.tkrdate
00:26:31 SQL> -- AND l.tkrdate = m.tkrdate
00:26:31 SQL> -- -- Speed things up:
00:26:31 SQL> -- AND l.tkr = '&1'
00:26:31 SQL> -- AND s.tkr = '&1'
00:26:31 SQL> -- /
00:26:31 SQL> --
00:26:31 SQL> -- DROP TABLE score_corr_tkr;
00:26:31 SQL> --
00:26:31 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
00:26:31 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
00:26:31 SQL> -- (
00:26:31 SQL> --   SELECT
00:26:31 SQL> --   tkrdate
00:26:31 SQL> --   -- Find corr() tween score and g1 over 8 day period:
00:26:31 SQL> --   ,CORR((score_long - score_short),g1)
00:26:31 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
00:26:31 SQL> --   FROM sc12tkr
00:26:31 SQL> -- )
00:26:31 SQL> -- GROUP BY tkrdate
00:26:31 SQL> -- /
00:26:31 SQL> 
00:26:31 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
00:26:31 SQL> 
00:26:31 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.33
00:26:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.27
00:26:31 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
00:26:31   2  SELECT
00:26:31   3  tkr
00:26:31   4  ,ydate
00:26:31   5  ,tkrdate
00:26:31   6  ,trend
00:26:31   7  ,g1
00:26:31   8  ,gatt
00:26:31   9  ,gattn
00:26:31  10  -- Goodness attributes:
00:26:31  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
00:26:31  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
00:26:31  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
00:26:31  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
00:26:31  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
00:26:31  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
00:26:31  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
00:26:31  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
00:26:31  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
00:26:31  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
00:26:31  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
00:26:31  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
00:26:31  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
00:26:31  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
00:26:31  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
00:26:31  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
00:26:31  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
00:26:31  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
00:26:31  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
00:26:31  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
00:26:31  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
00:26:31  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
00:26:31  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
00:26:31  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
00:26:31  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
00:26:31  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
00:26:31  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
00:26:31  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
00:26:31  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
00:26:31  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
00:26:31  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
00:26:31  42  FROM stk_svmd16
00:26:31  43  /

Table created.

Elapsed: 00:00:00.95
00:26:32 SQL> 
00:26:32 SQL> -- rpt
00:26:32 SQL> 
00:26:32 SQL> SELECT
00:26:32   2  tkr
00:26:32   3  ,trend
00:26:32   4  ,gatt
00:26:32   5  ,COUNT(tkr)
00:26:32   6  ,AVG(g1)
00:26:32   7  FROM stk_ms_svmd_svmspy
00:26:32   8  GROUP BY tkr,trend,gatt
00:26:32   9  ORDER BY tkr,trend,gatt
00:26:32  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
CDE		  -1 nup       1511 -1.6507743
CDE		  -1 up        1194 2.07510888
CDE		  -1		  1
CDE		   1 nup       1519 -1.6777419
CDE		   1 up        1040 2.27070192

Elapsed: 00:00:00.01
00:26:32 SQL> 
00:26:32 SQL> SELECT
00:26:32   2  tkr
00:26:32   3  ,COUNT(tkr)
00:26:32   4  ,MIN(ydate),MAX(ydate)
00:26:32   5  FROM stk_ms_svmd_svmspy
00:26:32   6  GROUP BY tkr
00:26:32   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
CDE		5265 1990-04-12 20:00:00 2011-04-29 20:00:00

Elapsed: 00:00:00.00
00:26:32 SQL> 
00:26:32 SQL> -- exit
00:26:32 SQL> 
00:26:32 SQL> 
00:26:32 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.35
00:26:33 SQL> 
00:26:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
00:26:33 SQL> 
00:26:33 SQL> CREATE TABLE stk_ms_u COMPRESS AS
00:26:33   2  SELECT * FROM stk_ms_svmspy
00:26:33   3  UNION
00:26:33   4  SELECT * FROM stk_ms_svmd_svmspy
00:26:33   5  /

Table created.

Elapsed: 00:00:00.39
00:26:33 SQL> 
00:26:33 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
