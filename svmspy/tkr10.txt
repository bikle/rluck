
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 20 18:56:17 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

18:56:17 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
18:56:17 SQL> 
18:56:17 SQL> 18:56:17 SQL> --
18:56:17 SQL> -- stk10u.sql
18:56:17 SQL> --
18:56:17 SQL> 
18:56:17 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
18:56:17 SQL> 
18:56:17 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
18:56:17 SQL> @stk10.sql     '&1'
18:56:17 SQL> --
18:56:17 SQL> -- stk10.sql
18:56:17 SQL> --
18:56:17 SQL> 
18:56:17 SQL> -- Creates views and tables for demonstrating SVM.
18:56:17 SQL> 
18:56:17 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.47
18:56:18 SQL> 
18:56:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
18:56:18 SQL> 
18:56:18 SQL> CREATE TABLE stk10svmspy COMPRESS AS
18:56:18   2  SELECT
18:56:18   3  tkr
18:56:18   4  ,ydate
18:56:18   5  ,tkr||ydate tkrdate
18:56:18   6  ,clse
18:56:18   7  ,clse2
18:56:18   8  ,rownum rnum -- acts as t in my time-series
18:56:18   9  -- g1 is important. I want to predict g1:
18:56:18  10  ,gain1day g1
18:56:18  11  -- Derive some attributes from clse.
18:56:18  12  -- Each row spans 5 minutes.
18:56:18  13  -- The number of rows in 1 day is 24*60/5.
18:56:18  14  -- I want the aggregations to span from 3 days to 9 days:
18:56:18  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
18:56:18  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
18:56:18  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
18:56:18  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
18:56:18  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
18:56:18  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
18:56:18  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
18:56:18  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
18:56:18  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
18:56:18  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
18:56:18  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
18:56:18  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
18:56:18  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
18:56:18  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
18:56:18  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
18:56:18  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
18:56:18  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
18:56:18  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
18:56:18  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
18:56:18  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
18:56:18  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
18:56:18  36  FROM di5min_stk_c2
18:56:18  37  WHERE UPPER(tkr)='&1'
18:56:18  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
18:56:18  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
18:56:18  40  ORDER BY ydate
18:56:18  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='MJN'

Table created.

Elapsed: 00:00:00.21
18:56:18 SQL> 
18:56:18 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
18:56:19 SQL> 
18:56:19 SQL> -- rpt
18:56:19 SQL> 
18:56:19 SQL> SELECT
18:56:19   2  tkr
18:56:19   3  ,COUNT(tkr)ccount
18:56:19   4  ,MIN(clse)mnclse,MAX(clse)mxclse
18:56:19   5  -- ,MIN(avg4),MAX(avg4)
18:56:19   6  ,MIN(ydate),MAX(ydate)
18:56:19   7  ,MIN(g1)
18:56:19   8  ,MAX(g1)
18:56:19   9  FROM stk10svmspy
18:56:19  10  GROUP BY tkr
18:56:19  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
MJN	       911	60.37	   63.29 2011-01-04 14:30:00 2011-01-20 18:50:00      -1.53	  1.16

Elapsed: 00:00:00.01
18:56:19 SQL> 
18:56:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:56:19 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.08
18:56:19 SQL> CREATE TABLE stk12svmspy COMPRESS AS
18:56:19   2  SELECT
18:56:19   3  tkr
18:56:19   4  ,ydate
18:56:19   5  ,tkrdate
18:56:19   6  ,clse
18:56:19   7  ,rnum
18:56:19   8  ,g1
18:56:19   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
18:56:19  10  -- I want more attributes from the ones I derived above:
18:56:19  11  -- clse relation to moving-min
18:56:19  12  ,clse-min3  cm3
18:56:19  13  ,clse-min4  cm4
18:56:19  14  ,clse-min5  cm5
18:56:19  15  ,clse-min6  cm6
18:56:19  16  ,clse-min7  cm7
18:56:19  17  ,clse-min8  cm8
18:56:19  18  ,clse-min9  cm9
18:56:19  19  -- clse relation to moving-avg
18:56:19  20  ,clse-avg3  ca3
18:56:19  21  ,clse-avg4  ca4
18:56:19  22  ,clse-avg5  ca5
18:56:19  23  ,clse-avg6  ca6
18:56:19  24  ,clse-avg7  ca7
18:56:19  25  ,clse-avg8  ca8
18:56:19  26  ,clse-avg9  ca9
18:56:19  27  -- clse relation to moving-max
18:56:19  28  ,clse-max3  cx3
18:56:19  29  ,clse-max4  cx4
18:56:19  30  ,clse-max5  cx5
18:56:19  31  ,clse-max6  cx6
18:56:19  32  ,clse-max7  cx7
18:56:19  33  ,clse-max8  cx8
18:56:19  34  ,clse-max9  cx9
18:56:19  35  -- Derive date related attributes:
18:56:19  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:56:19  37  ,0+TO_CHAR(ydate,'D')d
18:56:19  38  ,0+TO_CHAR(ydate,'W')w
18:56:19  39  -- mpm stands for minutes-past-midnight:
18:56:19  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:56:19  41  -- mph stands for minutes-past-hour:
18:56:19  42  ,0+TO_CHAR(ydate,'MI')mph
18:56:19  43  FROM stk10svmspy
18:56:19  44  ORDER BY ydate
18:56:19  45  /

Table created.

Elapsed: 00:00:00.04
18:56:19 SQL> 
18:56:19 SQL> -- rpt
18:56:19 SQL> 
18:56:19 SQL> SELECT
18:56:19   2  tkr
18:56:19   3  ,COUNT(tkr)ccount
18:56:19   4  ,MIN(clse)mnclse,MAX(clse)mxclse
18:56:19   5  -- ,MIN(avg4),MAX(avg4)
18:56:19   6  ,MIN(ydate),MAX(ydate)
18:56:19   7  ,MIN(g1)
18:56:19   8  ,AVG(g1)
18:56:19   9  ,MAX(g1)
18:56:19  10  FROM stk12svmspy
18:56:19  11  GROUP BY tkr
18:56:19  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
MJN	       911	60.37	   63.29 2011-01-04 14:30:00 2011-01-20 18:50:00      -1.53 .010569536	     1.16

Elapsed: 00:00:00.00
18:56:19 SQL> 
18:56:19 SQL> -- Prepare for derivation of NTILE based parameters.
18:56:19 SQL> -- Also derive the "trend" parameter:
18:56:19 SQL> 
18:56:19 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
18:56:19 SQL> CREATE TABLE stk14svmspy COMPRESS AS
18:56:19   2  SELECT
18:56:19   3  tkr
18:56:19   4  ,ydate
18:56:19   5  ,tkrdate
18:56:19   6  ,clse
18:56:19   7  ,g1
18:56:19   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
18:56:19   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
18:56:19  10  ,CASE WHEN trend IS NULL THEN 1
18:56:19  11  	    WHEN trend =0      THEN 1
18:56:19  12  	    ELSE trend END trend
18:56:19  13  ,cm3
18:56:19  14  ,cm4
18:56:19  15  ,cm5
18:56:19  16  ,cm6
18:56:19  17  ,cm7
18:56:19  18  ,cm8
18:56:19  19  ,cm9
18:56:19  20  ,ca3
18:56:19  21  ,ca4
18:56:19  22  ,ca5
18:56:19  23  ,ca6
18:56:19  24  ,ca7
18:56:19  25  ,ca8
18:56:19  26  ,ca9
18:56:19  27  ,cx3
18:56:19  28  ,cx4
18:56:19  29  ,cx5
18:56:19  30  ,cx6
18:56:19  31  ,cx7
18:56:19  32  ,cx8
18:56:19  33  ,cx9
18:56:19  34  ,hh
18:56:19  35  ,d
18:56:19  36  ,w
18:56:19  37  ,mpm
18:56:19  38  ,mph
18:56:19  39  FROM stk12svmspy
18:56:19  40  -- Guard against divide by 0:
18:56:19  41  WHERE clse > 0
18:56:19  42  ORDER BY ydate
18:56:19  43  /

Table created.

Elapsed: 00:00:00.06
18:56:19 SQL> 
18:56:19 SQL> -- rpt
18:56:19 SQL> 
18:56:19 SQL> SELECT
18:56:19   2  tkr
18:56:19   3  ,trend
18:56:19   4  ,gatt
18:56:19   5  ,COUNT(tkr)
18:56:19   6  ,AVG(g1)
18:56:19   7  FROM stk14svmspy
18:56:19   8  GROUP BY tkr,trend,gatt
18:56:19   9  ORDER BY tkr,trend,gatt
18:56:19  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MJN		-1 nup	      107 -.28476636
MJN		-1 up	      167 .478443114
MJN		-1	       51
MJN		 1 nup	      313 -.41715655
MJN		 1 up	      168  .53047619
MJN		 1	      105

6 rows selected.

Elapsed: 00:00:00.01
18:56:19 SQL> 
18:56:19 SQL> -- Derive NTILE based params:
18:56:19 SQL> 
18:56:19 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.09
18:56:19 SQL> CREATE TABLE stk16svmspy COMPRESS AS
18:56:19   2  SELECT
18:56:19   3  tkr
18:56:19   4  ,ydate
18:56:19   5  ,tkrdate
18:56:19   6  ,clse
18:56:19   7  ,g1
18:56:19   8  ,gatt
18:56:19   9  ,gattn
18:56:19  10  ,trend
18:56:19  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
18:56:19  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
18:56:19  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
18:56:19  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
18:56:19  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
18:56:19  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
18:56:19  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
18:56:19  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
18:56:19  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
18:56:19  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
18:56:19  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
18:56:19  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
18:56:19  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
18:56:19  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
18:56:19  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
18:56:19  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
18:56:19  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
18:56:19  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
18:56:19  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
18:56:19  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
18:56:19  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
18:56:19  32  ,hh  att21
18:56:19  33  ,d   att22
18:56:19  34  ,w   att23
18:56:19  35  ,mpm att24
18:56:19  36  ,mph att25
18:56:19  37  ,trend att26
18:56:19  38  FROM stk14svmspy
18:56:19  39  ORDER BY ydate
18:56:19  40  /

Table created.

Elapsed: 00:00:00.14
18:56:19 SQL> 
18:56:19 SQL> -- rpt
18:56:19 SQL> 
18:56:19 SQL> SELECT
18:56:19   2  tkr
18:56:19   3  ,trend
18:56:19   4  ,gatt
18:56:19   5  ,COUNT(tkr)
18:56:19   6  ,AVG(g1)
18:56:19   7  FROM stk16svmspy
18:56:19   8  GROUP BY tkr,trend,gatt
18:56:19   9  ORDER BY tkr,trend,gatt
18:56:19  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MJN		-1 nup	      107 -.28476636
MJN		-1 up	      167 .478443114
MJN		-1	       51
MJN		 1 nup	      313 -.41715655
MJN		 1 up	      168  .53047619
MJN		 1	      105

6 rows selected.

Elapsed: 00:00:00.01
18:56:19 SQL> 
18:56:19 SQL> -- Now I derive goodness attributes:
18:56:19 SQL> 
18:56:19 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.23
18:56:19 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
18:56:19   2  SELECT
18:56:19   3  tkr
18:56:19   4  ,ydate
18:56:19   5  ,tkrdate
18:56:19   6  ,trend
18:56:19   7  ,g1
18:56:19   8  ,gatt
18:56:19   9  ,gattn
18:56:19  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
18:56:19  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
18:56:19  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
18:56:19  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
18:56:19  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
18:56:19  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
18:56:19  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
18:56:19  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
18:56:19  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
18:56:19  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
18:56:19  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
18:56:19  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
18:56:19  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
18:56:19  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
18:56:19  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
18:56:19  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
18:56:19  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
18:56:19  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
18:56:19  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
18:56:19  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
18:56:19  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
18:56:19  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
18:56:19  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
18:56:19  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
18:56:19  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
18:56:19  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
18:56:19  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
18:56:19  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
18:56:19  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
18:56:19  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
18:56:19  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
18:56:19  41  FROM stk16svmspy
18:56:19  42  /

Table created.

Elapsed: 00:00:00.19
18:56:20 SQL> 
18:56:20 SQL> -- rpt
18:56:20 SQL> 
18:56:20 SQL> SELECT
18:56:20   2  tkr
18:56:20   3  ,trend
18:56:20   4  ,gatt
18:56:20   5  ,COUNT(tkr)
18:56:20   6  ,AVG(g1)
18:56:20   7  FROM stk_ms_svmspy
18:56:20   8  GROUP BY tkr,trend,gatt
18:56:20   9  ORDER BY tkr,trend,gatt
18:56:20  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MJN		-1 nup	      107 -.28476636
MJN		-1 up	      167 .478443114
MJN		-1	       51
MJN		 1 nup	      313 -.41715655
MJN		 1 up	      168  .53047619
MJN		 1	      105

6 rows selected.

Elapsed: 00:00:00.01
18:56:20 SQL> 
18:56:20 SQL> SELECT
18:56:20   2  tkr
18:56:20   3  ,0+TO_CHAR(ydate,'D')daynum
18:56:20   4  ,COUNT(tkr)
18:56:20   5  ,MIN(ydate),MAX(ydate)
18:56:20   6  FROM stk_ms_svmspy
18:56:20   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
18:56:20   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
18:56:20   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
MJN		 2	   78 2011-01-10 14:30:00 2011-01-10 20:55:00
MJN		 3	  234 2011-01-04 14:30:00 2011-01-18 20:55:00
MJN		 4	  234 2011-01-05 14:30:00 2011-01-19 20:55:00
MJN		 5	  209 2011-01-06 14:30:00 2011-01-20 18:50:00
MJN		 6	  156 2011-01-07 14:30:00 2011-01-14 20:55:00

Elapsed: 00:00:00.01
18:56:20 SQL> 
18:56:20 SQL> -- exit
18:56:20 SQL> @stk10svmd.sql '&1'
18:56:20 SQL> --
18:56:20 SQL> -- stk10svmd.sql
18:56:20 SQL> --
18:56:20 SQL> 
18:56:20 SQL> -- Creates views and tables for demonstrating SVM.
18:56:20 SQL> -- I need to run this after I run stk10.sql
18:56:20 SQL> 
18:56:20 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.10
18:56:20 SQL> 
18:56:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
18:56:20 SQL> 
18:56:20 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
18:56:20   2  SELECT
18:56:20   3  tkr
18:56:20   4  ,ydate
18:56:20   5  ,tkr||ydate tkrdate
18:56:20   6  ,clse
18:56:20   7  ,rownum rnum -- acts as t in my time-series
18:56:20   8  -- Derive some attributes from clse.
18:56:20   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
18:56:20  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
18:56:20  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
18:56:20  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
18:56:20  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
18:56:20  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
18:56:20  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
18:56:20  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
18:56:20  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
18:56:20  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
18:56:20  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
18:56:20  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
18:56:20  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
18:56:20  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
18:56:20  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
18:56:20  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
18:56:20  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
18:56:20  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
18:56:20  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
18:56:20  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
18:56:20  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
18:56:20  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
18:56:20  31  FROM ystk
18:56:20  32  WHERE UPPER(tkr)='&1'
18:56:20  33  AND ydate > '1990-01-01'
18:56:20  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
18:56:20  35  ORDER BY ydate
18:56:20  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='MJN'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='MJN')

Table created.

Elapsed: 00:00:00.16
18:56:20 SQL> 
18:56:20 SQL> -- rpt
18:56:20 SQL> 
18:56:20 SQL> SELECT
18:56:20   2  tkr
18:56:20   3  ,COUNT(tkr)
18:56:20   4  ,MIN(clse),MAX(clse)
18:56:20   5  ,MIN(avg4),MAX(avg4)
18:56:20   6  ,MIN(ydate),MAX(ydate)
18:56:20   7  FROM stk_svmd10svmspy
18:56:20   8  GROUP BY tkr
18:56:20   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
MJN		 489	  25.31 	63	25.44	  62.694 2009-02-11 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.00
18:56:20 SQL> 
18:56:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:56:20 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.07
18:56:20 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
18:56:20   2  SELECT
18:56:20   3  tkr
18:56:20   4  ,ydate
18:56:20   5  ,tkrdate
18:56:20   6  ,clse
18:56:20   7  ,rnum
18:56:20   8  -- g1 is important. I want to predict g1:
18:56:20   9  ,ld - clse g1
18:56:20  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
18:56:20  11  -- I want more attributes from the ones I derived above:
18:56:20  12  -- clse relation to moving-min
18:56:20  13  ,clse-min3  cm3
18:56:20  14  ,clse-min4  cm4
18:56:20  15  ,clse-min5  cm5
18:56:20  16  ,clse-min6  cm6
18:56:20  17  ,clse-min7  cm7
18:56:20  18  ,clse-min8  cm8
18:56:20  19  ,clse-min9  cm9
18:56:20  20  -- clse relation to moving-avg
18:56:20  21  ,clse-avg3  ca3
18:56:20  22  ,clse-avg4  ca4
18:56:20  23  ,clse-avg5  ca5
18:56:20  24  ,clse-avg6  ca6
18:56:20  25  ,clse-avg7  ca7
18:56:20  26  ,clse-avg8  ca8
18:56:20  27  ,clse-avg9  ca9
18:56:20  28  -- clse relation to moving-max
18:56:20  29  ,clse-max3  cx3
18:56:20  30  ,clse-max4  cx4
18:56:20  31  ,clse-max5  cx5
18:56:20  32  ,clse-max6  cx6
18:56:20  33  ,clse-max7  cx7
18:56:20  34  ,clse-max8  cx8
18:56:20  35  ,clse-max9  cx9
18:56:20  36  -- Derive date related attributes:
18:56:20  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:56:20  38  ,0+TO_CHAR(ydate,'D')d
18:56:20  39  ,0+TO_CHAR(ydate,'W')w
18:56:20  40  -- mpm stands for minutes-past-midnight:
18:56:20  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:56:20  42  -- mph stands for minutes-past-hour:
18:56:20  43  ,0+TO_CHAR(ydate,'MI')mph
18:56:20  44  FROM stk_svmd10svmspy
18:56:20  45  ORDER BY ydate
18:56:20  46  /

Table created.

Elapsed: 00:00:00.04
18:56:20 SQL> 
18:56:20 SQL> -- rpt
18:56:20 SQL> 
18:56:20 SQL> SELECT
18:56:20   2  tkr
18:56:20   3  ,COUNT(tkr)
18:56:20   4  ,MIN(clse),MAX(clse)
18:56:20   5  ,MIN(ydate),MAX(ydate)
18:56:20   6  FROM stk_svmd12
18:56:20   7  GROUP BY tkr
18:56:20   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
MJN		 489	  25.31 	63 2009-02-11 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.01
18:56:20 SQL> 
18:56:20 SQL> -- Prepare for derivation of NTILE based parameters.
18:56:20 SQL> -- Also derive the "trend" parameter:
18:56:20 SQL> 
18:56:20 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.09
18:56:21 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
18:56:21   2  SELECT
18:56:21   3  tkr
18:56:21   4  ,ydate
18:56:21   5  ,tkrdate
18:56:21   6  ,clse
18:56:21   7  ,g1
18:56:21   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
18:56:21   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
18:56:21  10  ,CASE WHEN trend IS NULL THEN 1
18:56:21  11  	    WHEN trend =0      THEN 1
18:56:21  12  	    ELSE trend END trend
18:56:21  13  ,cm3
18:56:21  14  ,cm4
18:56:21  15  ,cm5
18:56:21  16  ,cm6
18:56:21  17  ,cm7
18:56:21  18  ,cm8
18:56:21  19  ,cm9
18:56:21  20  ,ca3
18:56:21  21  ,ca4
18:56:21  22  ,ca5
18:56:21  23  ,ca6
18:56:21  24  ,ca7
18:56:21  25  ,ca8
18:56:21  26  ,ca9
18:56:21  27  ,cx3
18:56:21  28  ,cx4
18:56:21  29  ,cx5
18:56:21  30  ,cx6
18:56:21  31  ,cx7
18:56:21  32  ,cx8
18:56:21  33  ,cx9
18:56:21  34  ,hh
18:56:21  35  ,d
18:56:21  36  ,w
18:56:21  37  ,mpm
18:56:21  38  ,mph
18:56:21  39  FROM stk_svmd12
18:56:21  40  -- Guard against divide by 0:
18:56:21  41  WHERE clse > 0
18:56:21  42  ORDER BY ydate
18:56:21  43  /

Table created.

Elapsed: 00:00:00.04
18:56:21 SQL> 
18:56:21 SQL> -- rpt
18:56:21 SQL> 
18:56:21 SQL> SELECT
18:56:21   2  tkr
18:56:21   3  ,trend
18:56:21   4  ,gatt
18:56:21   5  ,COUNT(tkr)
18:56:21   6  ,AVG(g1)
18:56:21   7  FROM stk_svmd14
18:56:21   8  GROUP BY tkr,trend,gatt
18:56:21   9  ORDER BY tkr,trend,gatt
18:56:21  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MJN		  -1 nup	 91 -.39879121
MJN		  -1 up 	105 .680857143
MJN		   1 nup	170 -.44329412
MJN		   1 up 	122 .631557377
MJN		   1		  1

Elapsed: 00:00:00.00
18:56:21 SQL> 
18:56:21 SQL> -- Derive NTILE based params:
18:56:21 SQL> 
18:56:21 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.05
18:56:21 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
18:56:21   2  SELECT
18:56:21   3  tkr
18:56:21   4  ,ydate
18:56:21   5  ,tkrdate
18:56:21   6  ,clse
18:56:21   7  ,g1
18:56:21   8  ,gatt
18:56:21   9  ,gattn
18:56:21  10  ,trend
18:56:21  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
18:56:21  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
18:56:21  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
18:56:21  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
18:56:21  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
18:56:21  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
18:56:21  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
18:56:21  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
18:56:21  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
18:56:21  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
18:56:21  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
18:56:21  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
18:56:21  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
18:56:21  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
18:56:21  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
18:56:21  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
18:56:21  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
18:56:21  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
18:56:21  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
18:56:21  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
18:56:21  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
18:56:21  32  ,hh  att21
18:56:21  33  ,d   att22
18:56:21  34  ,w   att23
18:56:21  35  ,mpm att24
18:56:21  36  ,mph att25
18:56:21  37  ,trend att26
18:56:21  38  FROM stk_svmd14
18:56:21  39  ORDER BY ydate
18:56:21  40  /

Table created.

Elapsed: 00:00:00.11
18:56:21 SQL> 
18:56:21 SQL> -- rpt
18:56:21 SQL> 
18:56:21 SQL> SELECT
18:56:21   2  tkr
18:56:21   3  ,trend
18:56:21   4  ,gatt
18:56:21   5  ,COUNT(tkr)
18:56:21   6  ,AVG(g1)
18:56:21   7  FROM stk_svmd16
18:56:21   8  GROUP BY tkr,trend,gatt
18:56:21   9  ORDER BY tkr,trend,gatt
18:56:21  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MJN		  -1 nup	 91 -.39879121
MJN		  -1 up 	105 .680857143
MJN		   1 nup	170 -.44329412
MJN		   1 up 	122 .631557377
MJN		   1		  1

Elapsed: 00:00:00.01
18:56:21 SQL> 
18:56:21 SQL> -- Now I derive goodness attributes:
18:56:21 SQL> 
18:56:21 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.09
18:56:21 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
18:56:21   2  SELECT
18:56:21   3  tkr
18:56:21   4  ,ydate
18:56:21   5  ,tkrdate
18:56:21   6  ,trend
18:56:21   7  ,g1
18:56:21   8  ,gatt
18:56:21   9  ,gattn
18:56:21  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
18:56:21  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
18:56:21  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
18:56:21  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
18:56:21  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
18:56:21  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
18:56:21  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
18:56:21  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
18:56:21  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
18:56:21  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
18:56:21  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
18:56:21  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
18:56:21  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
18:56:21  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
18:56:21  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
18:56:21  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
18:56:21  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
18:56:21  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
18:56:21  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
18:56:21  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
18:56:21  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
18:56:21  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
18:56:21  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
18:56:21  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
18:56:21  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
18:56:21  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
18:56:21  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
18:56:21  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
18:56:21  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
18:56:21  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
18:56:21  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
18:56:21  41  FROM stk_svmd16
18:56:21  42  /

Table created.

Elapsed: 00:00:00.14
18:56:21 SQL> 
18:56:21 SQL> -- rpt
18:56:21 SQL> 
18:56:21 SQL> SELECT
18:56:21   2  tkr
18:56:21   3  ,trend
18:56:21   4  ,gatt
18:56:21   5  ,COUNT(tkr)
18:56:21   6  ,AVG(g1)
18:56:21   7  FROM stk_ms_svmd_svmspy
18:56:21   8  GROUP BY tkr,trend,gatt
18:56:21   9  ORDER BY tkr,trend,gatt
18:56:21  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MJN		  -1 nup	 91 -.39879121
MJN		  -1 up 	105 .680857143
MJN		   1 nup	170 -.44329412
MJN		   1 up 	122 .631557377
MJN		   1		  1

Elapsed: 00:00:00.01
18:56:21 SQL> 
18:56:21 SQL> SELECT
18:56:21   2  tkr
18:56:21   3  ,COUNT(tkr)
18:56:21   4  ,MIN(ydate),MAX(ydate)
18:56:21   5  FROM stk_ms_svmd_svmspy
18:56:21   6  GROUP BY tkr
18:56:21   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
MJN		 489 2009-02-11 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.00
18:56:21 SQL> 
18:56:21 SQL> -- exit
18:56:21 SQL> 
18:56:21 SQL> 
18:56:21 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.04
18:56:21 SQL> 
18:56:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
18:56:22 SQL> 
18:56:22 SQL> CREATE TABLE stk_ms_u COMPRESS AS
18:56:22   2  SELECT * FROM stk_ms_svmspy
18:56:22   3  UNION
18:56:22   4  SELECT * FROM stk_ms_svmd_svmspy
18:56:22   5  /

Table created.

Elapsed: 00:00:00.13
18:56:22 SQL> 
18:56:22 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
