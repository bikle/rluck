
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 13 03:02:36 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:02:36 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:02:36 SQL> 03:02:36 SQL> --
03:02:36 SQL> -- stk10.sql
03:02:36 SQL> --
03:02:36 SQL> 
03:02:36 SQL> -- Creates views and tables for demonstrating SVM.
03:02:36 SQL> 
03:02:36 SQL> -- Get Mon-Thurs
03:02:36 SQL> DROP TABLE stk10p14;

Table dropped.

Elapsed: 00:00:18.23
03:02:54 SQL> 
03:02:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
03:02:54 SQL> 
03:02:54 SQL> CREATE TABLE stk10p14 COMPRESS AS
03:02:54   2  SELECT
03:02:54   3  tkr
03:02:54   4  ,ydate
03:02:54   5  ,clse
03:02:54   6  FROM di5min_stk
03:02:54   7  WHERE UPPER(tkr)='&1'
03:02:54   8  AND 0+TO_CHAR(ydate,'D')BETWEEN 1 AND 4
03:02:54   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
03:02:54  10  ORDER BY ydate
03:02:54  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='TLT'

Table created.

Elapsed: 00:00:00.18
03:02:55 SQL> 
03:02:55 SQL> -- Get Fri
03:02:55 SQL> DROP TABLE stk10p5;

Table dropped.

Elapsed: 00:00:00.14
03:02:55 SQL> 
03:02:55 SQL> CREATE TABLE stk10p5 COMPRESS AS
03:02:55   2  SELECT
03:02:55   3  tkr
03:02:55   4  ,ydate
03:02:55   5  ,clse
03:02:55   6  FROM di5min_stk
03:02:55   7  WHERE UPPER(tkr)='&1'
03:02:55   8  AND 0+TO_CHAR(ydate,'D')=5
03:02:55   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
03:02:55  10  ORDER BY ydate
03:02:55  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='TLT'

Table created.

Elapsed: 00:00:00.10
03:02:55 SQL> 
03:02:55 SQL> -- Get Mon
03:02:55 SQL> DROP TABLE stk10f1;

Table dropped.

Elapsed: 00:00:00.02
03:02:55 SQL> 
03:02:55 SQL> CREATE TABLE stk10f1 COMPRESS AS
03:02:55   2  SELECT
03:02:55   3  tkr
03:02:55   4  ,ydate
03:02:55   5  ,clse
03:02:55   6  FROM di5min_stk
03:02:55   7  WHERE UPPER(tkr)='&1'
03:02:55   8  AND 0+TO_CHAR(ydate,'D')=1
03:02:55   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
03:02:55  10  ORDER BY ydate
03:02:55  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='TLT'

Table created.

Elapsed: 00:00:00.08
03:02:55 SQL> 
03:02:55 SQL> -- Get Tues - Fri
03:02:55 SQL> DROP TABLE stk10f25;

Table dropped.

Elapsed: 00:00:00.04
03:02:55 SQL> 
03:02:55 SQL> CREATE TABLE stk10f25 COMPRESS AS
03:02:55   2  SELECT
03:02:55   3  tkr
03:02:55   4  ,ydate
03:02:55   5  ,clse
03:02:55   6  FROM di5min_stk
03:02:55   7  WHERE UPPER(tkr)='&1'
03:02:55   8  AND 0+TO_CHAR(ydate,'D')BETWEEN 2 AND 5
03:02:55   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
03:02:55  10  ORDER BY ydate
03:02:55  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='TLT'

Table created.

Elapsed: 00:00:00.08
03:02:55 SQL> 
03:02:55 SQL> -- Join em
03:02:55 SQL> DROP TABLE stk10pf;

Table dropped.

Elapsed: 00:00:00.05
03:02:55 SQL> 
03:02:55 SQL> -- Deal with m-thr 1st
03:02:55 SQL> CREATE TABLE stk10pf AS
03:02:55   2  SELECT
03:02:55   3  p.tkr
03:02:55   4  ,p.ydate
03:02:55   5  ,p.clse
03:02:55   6  ,f.clse clse2
03:02:55   7  FROM stk10p14 p, stk10f25 f
03:02:55   8  WHERE p.ydate + 1 = f.ydate
03:02:55   9  /

Table created.

Elapsed: 00:00:00.05
03:02:55 SQL> 
03:02:55 SQL> -- Deal with Fri (day 5 joined with day 1)
03:02:55 SQL> INSERT INTO stk10pf(tkr,ydate,clse,clse2)
03:02:55   2  SELECT
03:02:55   3  p.tkr
03:02:55   4  ,p.ydate
03:02:55   5  ,p.clse
03:02:55   6  ,f.clse clse2
03:02:55   7  FROM stk10p5 p, stk10f1 f
03:02:55   8  WHERE p.ydate + 3 = f.ydate
03:02:55   9  /

0 rows created.

Elapsed: 00:00:00.01
03:02:55 SQL> 
03:02:55 SQL> -- rpt
03:02:55 SQL> select count(*)from stk10pf;

  COUNT(*)
----------
       312

Elapsed: 00:00:00.00
03:02:55 SQL> 
03:02:55 SQL> DROP VIEW stk10;
DROP VIEW stk10
*
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.08
03:02:55 SQL> 
03:02:55 SQL> DROP TABLE stk10;

Table dropped.

Elapsed: 00:00:00.06
03:02:55 SQL> 
03:02:55 SQL> CREATE TABLE stk10 COMPRESS AS
03:02:55   2  SELECT
03:02:55   3  tkr
03:02:55   4  ,ydate
03:02:55   5  ,tkr||ydate tkrdate
03:02:55   6  ,clse
03:02:55   7  ,clse2
03:02:55   8  ,rownum rnum -- acts as t in my time-series
03:02:55   9  -- Derive some attributes from clse.
03:02:55  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
03:02:55  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
03:02:55  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:02:55  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
03:02:55  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:02:55  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
03:02:55  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:02:55  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
03:02:55  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
03:02:55  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:02:55  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
03:02:55  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:02:55  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
03:02:55  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:02:55  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
03:02:55  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
03:02:55  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:02:55  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
03:02:55  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:02:55  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
03:02:55  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:02:55  31  FROM stk10pf
03:02:55  32  WHERE UPPER(tkr)='&1'
03:02:55  33  AND 0+TO_CHAR(ydate,'D')BETWEEN 1 AND 5
03:02:55  34  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
03:02:55  35  ORDER BY ydate
03:02:55  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='TLT'

Table created.

Elapsed: 00:00:00.10
03:02:55 SQL> 
03:02:55 SQL> ANALYZE TABLE stk10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.05
03:02:55 SQL> 
03:02:55 SQL> -- rpt
03:02:55 SQL> 
03:02:55 SQL> SELECT
03:02:55   2  tkr
03:02:55   3  ,COUNT(tkr)
03:02:55   4  ,MIN(clse),MAX(clse)
03:02:55   5  ,MIN(avg4),MAX(avg4)
03:02:55   6  ,MIN(ydate),MAX(ydate)
03:02:55   7  FROM stk10
03:02:55   8  GROUP BY tkr
03:02:55   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
TLT	       312	91.22	   93.74 91.6616327 93.4885714 2011-01-04 14:30:00 2011-01-11 20:55:00

Elapsed: 00:00:00.00
03:02:55 SQL> 
03:02:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:02:55 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.09
03:02:56 SQL> CREATE TABLE stk12 COMPRESS AS
03:02:56   2  SELECT
03:02:56   3  tkr
03:02:56   4  ,ydate
03:02:56   5  ,tkrdate
03:02:56   6  ,clse
03:02:56   7  ,rnum
03:02:56   8  -- g4 is important. I want to predict g4:
03:02:56   9  ,clse2 - clse g4
03:02:56  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
03:02:56  11  -- I want more attributes from the ones I derived above:
03:02:56  12  -- clse relation to moving-min
03:02:56  13  ,clse-min2  cm2
03:02:56  14  ,clse-min3  cm3
03:02:56  15  ,clse-min4  cm4
03:02:56  16  ,clse-min5  cm5
03:02:56  17  ,clse-min6  cm6
03:02:56  18  ,clse-min7  cm7
03:02:56  19  ,clse-min8  cm8
03:02:56  20  -- clse relation to moving-avg
03:02:56  21  ,clse-avg2  ca2
03:02:56  22  ,clse-avg3  ca3
03:02:56  23  ,clse-avg4  ca4
03:02:56  24  ,clse-avg5  ca5
03:02:56  25  ,clse-avg6  ca6
03:02:56  26  ,clse-avg7  ca7
03:02:56  27  ,clse-avg8  ca8
03:02:56  28  -- clse relation to moving-max
03:02:56  29  ,clse-max2  cx2
03:02:56  30  ,clse-max3  cx3
03:02:56  31  ,clse-max4  cx4
03:02:56  32  ,clse-max5  cx5
03:02:56  33  ,clse-max6  cx6
03:02:56  34  ,clse-max7  cx7
03:02:56  35  ,clse-max8  cx8
03:02:56  36  -- Derive date related attributes:
03:02:56  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:02:56  38  ,0+TO_CHAR(ydate,'D')d
03:02:56  39  ,0+TO_CHAR(ydate,'W')w
03:02:56  40  -- mpm stands for minutes-past-midnight:
03:02:56  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:02:56  42  -- mph stands for minutes-past-hour:
03:02:56  43  ,0+TO_CHAR(ydate,'MI')mph
03:02:56  44  FROM stk10
03:02:56  45  ORDER BY ydate
03:02:56  46  /

Table created.

Elapsed: 00:00:00.05
03:02:56 SQL> 
03:02:56 SQL> -- rpt
03:02:56 SQL> 
03:02:56 SQL> SELECT
03:02:56   2  tkr
03:02:56   3  ,COUNT(tkr)
03:02:56   4  ,MIN(clse),MAX(clse)
03:02:56   5  ,MIN(ydate),MAX(ydate)
03:02:56   6  FROM stk12
03:02:56   7  GROUP BY tkr
03:02:56   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
TLT	       312	91.22	   93.74 2011-01-04 14:30:00 2011-01-11 20:55:00

Elapsed: 00:00:00.01
03:02:56 SQL> 
03:02:56 SQL> -- Prepare for derivation of NTILE based parameters.
03:02:56 SQL> -- Also derive the "trend" parameter:
03:02:56 SQL> 
03:02:56 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.05
03:02:56 SQL> CREATE TABLE stk14 COMPRESS AS
03:02:56   2  SELECT
03:02:56   3  tkr
03:02:56   4  ,ydate
03:02:56   5  ,tkrdate
03:02:56   6  ,clse
03:02:56   7  ,g4
03:02:56   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.5/100 THEN 'up' ELSE 'nup' END gatt
03:02:56   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.5/100 THEN 'up' ELSE 'nup' END gattn
03:02:56  10  ,CASE WHEN trend IS NULL THEN 1
03:02:56  11  	    WHEN trend =0      THEN 1
03:02:56  12  	    ELSE trend END trend
03:02:56  13  ,cm2
03:02:56  14  ,cm3
03:02:56  15  ,cm4
03:02:56  16  ,cm5
03:02:56  17  ,cm6
03:02:56  18  ,cm7
03:02:56  19  ,cm8
03:02:56  20  ,ca2
03:02:56  21  ,ca3
03:02:56  22  ,ca4
03:02:56  23  ,ca5
03:02:56  24  ,ca6
03:02:56  25  ,ca7
03:02:56  26  ,ca8
03:02:56  27  ,cx2
03:02:56  28  ,cx3
03:02:56  29  ,cx4
03:02:56  30  ,cx5
03:02:56  31  ,cx6
03:02:56  32  ,cx7
03:02:56  33  ,cx8
03:02:56  34  ,hh
03:02:56  35  ,d
03:02:56  36  ,w
03:02:56  37  ,mpm
03:02:56  38  ,mph
03:02:56  39  FROM stk12
03:02:56  40  -- Guard against divide by 0:
03:02:56  41  WHERE clse > 0
03:02:56  42  ORDER BY ydate
03:02:56  43  /

Table created.

Elapsed: 00:00:00.05
03:02:56 SQL> 
03:02:56 SQL> -- rpt
03:02:56 SQL> 
03:02:56 SQL> SELECT
03:02:56   2  tkr
03:02:56   3  ,trend
03:02:56   4  ,gatt
03:02:56   5  ,COUNT(tkr)
03:02:56   6  ,AVG(g4)
03:02:56   7  FROM stk14
03:02:56   8  GROUP BY tkr,trend,gatt
03:02:56   9  ORDER BY tkr,trend,gatt
03:02:56  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
TLT		-1 nup	      171  -.3852924
TLT		-1 up		2	 .55
TLT		 1 nup	      139 -.89410072

Elapsed: 00:00:00.00
03:02:56 SQL> 
03:02:56 SQL> -- Derive NTILE based params:
03:02:56 SQL> 
03:02:56 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.05
03:02:56 SQL> CREATE TABLE stk16 COMPRESS AS
03:02:56   2  SELECT
03:02:56   3  tkr
03:02:56   4  ,ydate
03:02:56   5  ,tkrdate
03:02:56   6  ,clse
03:02:56   7  ,g4
03:02:56   8  ,gatt
03:02:56   9  ,gattn
03:02:56  10  ,trend
03:02:56  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
03:02:56  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
03:02:56  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
03:02:56  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
03:02:56  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
03:02:56  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
03:02:56  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
03:02:56  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
03:02:56  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
03:02:56  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
03:02:56  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
03:02:56  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
03:02:56  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
03:02:56  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
03:02:56  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
03:02:56  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
03:02:56  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
03:02:56  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
03:02:56  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
03:02:56  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
03:02:56  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
03:02:56  32  ,hh  att21
03:02:56  33  ,d   att22
03:02:56  34  ,w   att23
03:02:56  35  ,mpm att24
03:02:56  36  ,mph att25
03:02:56  37  ,trend att26
03:02:56  38  FROM stk14
03:02:56  39  ORDER BY ydate
03:02:56  40  /

Table created.

Elapsed: 00:00:00.05
03:02:56 SQL> 
03:02:56 SQL> -- rpt
03:02:56 SQL> 
03:02:56 SQL> SELECT
03:02:56   2  tkr
03:02:56   3  ,trend
03:02:56   4  ,gatt
03:02:56   5  ,COUNT(tkr)
03:02:56   6  ,AVG(g4)
03:02:56   7  FROM stk16
03:02:56   8  GROUP BY tkr,trend,gatt
03:02:56   9  ORDER BY tkr,trend,gatt
03:02:56  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
TLT		-1 nup	      171  -.3852924
TLT		-1 up		2	 .55
TLT		 1 nup	      139 -.89410072

Elapsed: 00:00:00.00
03:02:56 SQL> 
03:02:56 SQL> -- Now I derive goodness attributes:
03:02:56 SQL> 
03:02:56 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.04
03:02:56 SQL> CREATE TABLE stk_ms COMPRESS AS
03:02:56   2  SELECT
03:02:56   3  tkr
03:02:56   4  ,ydate
03:02:56   5  ,tkrdate
03:02:56   6  ,trend
03:02:56   7  ,g4
03:02:56   8  ,gatt
03:02:56   9  ,gattn
03:02:56  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
03:02:56  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
03:02:56  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
03:02:56  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
03:02:56  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
03:02:56  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
03:02:56  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
03:02:56  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
03:02:56  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
03:02:56  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
03:02:56  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
03:02:56  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
03:02:56  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
03:02:56  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
03:02:56  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
03:02:56  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
03:02:56  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
03:02:56  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
03:02:56  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
03:02:56  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
03:02:56  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
03:02:56  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
03:02:56  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
03:02:56  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
03:02:56  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
03:02:56  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
03:02:56  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
03:02:56  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
03:02:56  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
03:02:56  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
03:02:56  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
03:02:56  41  FROM stk16
03:02:56  42  /

Table created.

Elapsed: 00:00:00.13
03:02:56 SQL> 
03:02:56 SQL> -- rpt
03:02:56 SQL> 
03:02:56 SQL> SELECT
03:02:56   2  tkr
03:02:56   3  ,trend
03:02:56   4  ,gatt
03:02:56   5  ,COUNT(tkr)
03:02:56   6  ,AVG(g4)
03:02:56   7  FROM stk_ms
03:02:56   8  GROUP BY tkr,trend,gatt
03:02:56   9  ORDER BY tkr,trend,gatt
03:02:56  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
TLT		-1 nup	      171  -.3852924
TLT		-1 up		2	 .55
TLT		 1 nup	      139 -.89410072

Elapsed: 00:00:00.01
03:02:56 SQL> 
03:02:56 SQL> SELECT
03:02:56   2  tkr
03:02:56   3  ,COUNT(tkr)
03:02:56   4  ,MIN(ydate),MAX(ydate)
03:02:56   5  FROM stk_ms
03:02:56   6  GROUP BY tkr
03:02:56   7  /

TKR	COUNT(TKR) MIN(YDATE)	       MAX(YDATE)
------- ---------- ------------------- -------------------
TLT	       312 2011-01-04 14:30:00 2011-01-11 20:55:00

Elapsed: 00:00:00.00
03:02:56 SQL> 
03:02:56 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
