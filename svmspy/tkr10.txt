
SQL*Plus: Release 11.2.0.1.0 Production on Wed Apr 20 15:03:03 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:03:03 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:03:03 SQL> 
15:03:03 SQL> 15:03:03 SQL> --
15:03:03 SQL> -- stk10u.sql
15:03:03 SQL> --
15:03:03 SQL> 
15:03:03 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
15:03:03 SQL> 
15:03:03 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
15:03:03 SQL> @stk10.sql     '&1'
15:03:03 SQL> --
15:03:03 SQL> -- stk10.sql
15:03:03 SQL> --
15:03:03 SQL> 
15:03:03 SQL> -- Creates views and tables for demonstrating SVM.
15:03:03 SQL> 
15:03:03 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.14
15:03:03 SQL> 
15:03:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
15:03:04 SQL> 
15:03:04 SQL> CREATE TABLE stk10svmspy COMPRESS AS
15:03:04   2  SELECT
15:03:04   3  tkr
15:03:04   4  ,ydate
15:03:04   5  ,tkr||ydate tkrdate
15:03:04   6  ,clse
15:03:04   7  ,clse2
15:03:04   8  ,rownum rnum -- acts as t in my time-series
15:03:04   9  -- g1 is important. I want to predict g1:
15:03:04  10  ,gain1day g1
15:03:04  11  -- Derive some attributes from clse.
15:03:04  12  -- Each row spans 5 minutes.
15:03:04  13  -- The number of rows in 1 day is 24*60/5.
15:03:04  14  -- I want the aggregations to span from 3 days to 9 days:
15:03:04  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
15:03:04  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
15:03:04  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
15:03:04  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
15:03:04  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
15:03:04  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
15:03:04  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
15:03:04  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
15:03:04  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
15:03:04  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
15:03:04  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
15:03:04  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
15:03:04  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
15:03:04  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
15:03:04  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
15:03:04  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
15:03:04  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
15:03:04  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
15:03:04  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
15:03:04  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
15:03:04  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
15:03:04  36  FROM di5min_stk_c2
15:03:04  37  WHERE UPPER(tkr)='&1'
15:03:04  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
15:03:04  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
15:03:04  40  ORDER BY ydate
15:03:04  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='FSLR'

Table created.

Elapsed: 00:00:00.97
15:03:05 SQL> 
15:03:05 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
15:03:05 SQL> 
15:03:05 SQL> -- rpt
15:03:05 SQL> 
15:03:05 SQL> SELECT
15:03:05   2  tkr
15:03:05   3  ,COUNT(tkr)ccount
15:03:05   4  ,MIN(clse)mnclse,MAX(clse)mxclse
15:03:05   5  -- ,MIN(avg4),MAX(avg4)
15:03:05   6  ,MIN(ydate),MAX(ydate)
15:03:05   7  ,MIN(g1)
15:03:05   8  ,MAX(g1)
15:03:05   9  FROM stk10svmspy
15:03:05  10  GROUP BY tkr
15:03:05  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
FSLR	      5790     130.64	     174 2011-01-04 14:30:00 2011-04-20 14:55:00     -10.73	 12.54

Elapsed: 00:00:00.00
15:03:05 SQL> 
15:03:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:03:05 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.15
15:03:05 SQL> CREATE TABLE stk12svmspy COMPRESS AS
15:03:05   2  SELECT
15:03:05   3  tkr
15:03:05   4  ,ydate
15:03:05   5  ,tkrdate
15:03:05   6  ,clse
15:03:05   7  ,rnum
15:03:05   8  ,g1
15:03:05   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
15:03:05  10  -- I want more attributes from the ones I derived above:
15:03:05  11  -- clse relation to moving-min
15:03:05  12  ,clse-min3  cm3
15:03:05  13  ,clse-min4  cm4
15:03:05  14  ,clse-min5  cm5
15:03:05  15  ,clse-min6  cm6
15:03:05  16  ,clse-min7  cm7
15:03:05  17  ,clse-min8  cm8
15:03:05  18  ,clse-min9  cm9
15:03:05  19  -- clse relation to moving-avg
15:03:05  20  ,clse-avg3  ca3
15:03:05  21  ,clse-avg4  ca4
15:03:05  22  ,clse-avg5  ca5
15:03:05  23  ,clse-avg6  ca6
15:03:05  24  ,clse-avg7  ca7
15:03:05  25  ,clse-avg8  ca8
15:03:05  26  ,clse-avg9  ca9
15:03:05  27  -- clse relation to moving-max
15:03:05  28  ,clse-max3  cx3
15:03:05  29  ,clse-max4  cx4
15:03:05  30  ,clse-max5  cx5
15:03:05  31  ,clse-max6  cx6
15:03:05  32  ,clse-max7  cx7
15:03:05  33  ,clse-max8  cx8
15:03:05  34  ,clse-max9  cx9
15:03:05  35  -- Derive date related attributes:
15:03:05  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:03:05  37  ,0+TO_CHAR(ydate,'D')d
15:03:05  38  ,0+TO_CHAR(ydate,'W')w
15:03:05  39  -- mpm stands for minutes-past-midnight:
15:03:05  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:03:05  41  -- mph stands for minutes-past-hour:
15:03:05  42  ,0+TO_CHAR(ydate,'MI')mph
15:03:05  43  FROM stk10svmspy
15:03:05  44  ORDER BY ydate
15:03:05  45  /

Table created.

Elapsed: 00:00:00.19
15:03:05 SQL> 
15:03:05 SQL> -- rpt
15:03:05 SQL> 
15:03:05 SQL> SELECT
15:03:05   2  tkr
15:03:05   3  ,COUNT(tkr)ccount
15:03:05   4  ,MIN(clse)mnclse,MAX(clse)mxclse
15:03:05   5  -- ,MIN(avg4),MAX(avg4)
15:03:05   6  ,MIN(ydate),MAX(ydate)
15:03:05   7  ,MIN(g1)
15:03:05   8  ,AVG(g1)
15:03:05   9  ,MAX(g1)
15:03:05  10  FROM stk12svmspy
15:03:05  11  GROUP BY tkr
15:03:05  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
FSLR	      5790     130.64	     174 2011-01-04 14:30:00 2011-04-20 14:55:00     -10.73 .025055355	    12.54

Elapsed: 00:00:00.02
15:03:05 SQL> 
15:03:05 SQL> -- Prepare for derivation of NTILE based parameters.
15:03:05 SQL> -- Also derive the "trend" parameter:
15:03:05 SQL> 
15:03:05 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.02
15:03:05 SQL> CREATE TABLE stk14svmspy COMPRESS AS
15:03:05   2  SELECT
15:03:05   3  tkr
15:03:05   4  ,ydate
15:03:05   5  ,tkrdate
15:03:05   6  ,clse
15:03:05   7  ,g1
15:03:05   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
15:03:05   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
15:03:05  10  ,CASE WHEN trend IS NULL THEN 1
15:03:05  11  	    WHEN trend =0      THEN 1
15:03:05  12  	    ELSE trend END trend
15:03:05  13  ,cm3
15:03:05  14  ,cm4
15:03:05  15  ,cm5
15:03:05  16  ,cm6
15:03:05  17  ,cm7
15:03:05  18  ,cm8
15:03:05  19  ,cm9
15:03:05  20  ,ca3
15:03:05  21  ,ca4
15:03:05  22  ,ca5
15:03:05  23  ,ca6
15:03:05  24  ,ca7
15:03:05  25  ,ca8
15:03:05  26  ,ca9
15:03:05  27  ,cx3
15:03:05  28  ,cx4
15:03:05  29  ,cx5
15:03:05  30  ,cx6
15:03:05  31  ,cx7
15:03:05  32  ,cx8
15:03:05  33  ,cx9
15:03:05  34  ,hh
15:03:05  35  ,d
15:03:05  36  ,w
15:03:05  37  ,mpm
15:03:05  38  ,mph
15:03:05  39  FROM stk12svmspy
15:03:05  40  -- Guard against divide by 0:
15:03:05  41  WHERE clse > 0
15:03:05  42  ORDER BY ydate
15:03:05  43  /

Table created.

Elapsed: 00:00:00.11
15:03:05 SQL> 
15:03:05 SQL> -- rpt
15:03:05 SQL> 
15:03:05 SQL> SELECT
15:03:05   2  tkr
15:03:05   3  ,trend
15:03:05   4  ,gatt
15:03:05   5  ,COUNT(tkr)
15:03:05   6  ,AVG(g1)
15:03:05   7  FROM stk14svmspy
15:03:05   8  GROUP BY tkr,trend,gatt
15:03:05   9  ORDER BY tkr,trend,gatt
15:03:05  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
FSLR		-1 nup	     1560 -2.3177726
FSLR		-1 up	      555 3.06687044
FSLR		-1	       90
FSLR		 1 nup	     1636 -2.3771991
FSLR		 1 up	     1793 3.31378519
FSLR		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
15:03:05 SQL> 
15:03:05 SQL> -- Derive NTILE based params:
15:03:05 SQL> 
15:03:05 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.03
15:03:05 SQL> CREATE TABLE stk16svmspy COMPRESS AS
15:03:05   2  SELECT
15:03:05   3  tkr
15:03:05   4  ,ydate
15:03:05   5  ,tkrdate
15:03:05   6  ,clse
15:03:05   7  ,g1
15:03:05   8  ,gatt
15:03:05   9  ,gattn
15:03:05  10  ,trend
15:03:05  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
15:03:05  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
15:03:05  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
15:03:05  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
15:03:05  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
15:03:05  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
15:03:05  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
15:03:05  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
15:03:05  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
15:03:05  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
15:03:05  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
15:03:05  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
15:03:05  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
15:03:05  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
15:03:05  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
15:03:05  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
15:03:05  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
15:03:05  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
15:03:05  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
15:03:05  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
15:03:05  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
15:03:05  32  ,hh  att21
15:03:05  33  ,d   att22
15:03:05  34  ,w   att23
15:03:05  35  ,mpm att24
15:03:05  36  ,mph att25
15:03:05  37  ,trend att26
15:03:05  38  FROM stk14svmspy
15:03:05  39  ORDER BY ydate
15:03:05  40  /

Table created.

Elapsed: 00:00:00.74
15:03:06 SQL> 
15:03:06 SQL> -- rpt
15:03:06 SQL> 
15:03:06 SQL> SELECT
15:03:06   2  tkr
15:03:06   3  ,trend
15:03:06   4  ,gatt
15:03:06   5  ,COUNT(tkr)
15:03:06   6  ,AVG(g1)
15:03:06   7  FROM stk16svmspy
15:03:06   8  GROUP BY tkr,trend,gatt
15:03:06   9  ORDER BY tkr,trend,gatt
15:03:06  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
FSLR		-1 nup	     1560 -2.3177726
FSLR		-1 up	      555 3.06687044
FSLR		-1	       90
FSLR		 1 nup	     1636 -2.3771991
FSLR		 1 up	     1793 3.31378519
FSLR		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
15:03:06 SQL> 
15:03:06 SQL> -- Comment out feedback related syntax:
15:03:06 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
15:03:06 SQL> -- SELECT
15:03:06 SQL> -- m.tkr
15:03:06 SQL> -- ,m.ydate
15:03:06 SQL> -- ,m.tkrdate
15:03:06 SQL> -- ,l.score score_long
15:03:06 SQL> -- ,s.score score_short
15:03:06 SQL> -- ,m.g1
15:03:06 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
15:03:06 SQL> -- WHERE l.targ='gatt'
15:03:06 SQL> -- AND	 s.targ='gattn'
15:03:06 SQL> -- AND l.tkrdate = s.tkrdate
15:03:06 SQL> -- AND l.tkrdate = m.tkrdate
15:03:06 SQL> -- -- Speed things up:
15:03:06 SQL> -- AND l.tkr = '&1'
15:03:06 SQL> -- AND s.tkr = '&1'
15:03:06 SQL> -- /
15:03:06 SQL> --
15:03:06 SQL> -- DROP TABLE score_corr_tkr;
15:03:06 SQL> --
15:03:06 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
15:03:06 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
15:03:06 SQL> -- (
15:03:06 SQL> --   SELECT
15:03:06 SQL> --   tkrdate
15:03:06 SQL> --   -- Find corr() tween score and g1 over 8 day period:
15:03:06 SQL> --   ,CORR((score_long - score_short),g1)
15:03:06 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
15:03:06 SQL> --   FROM sc12tkr
15:03:06 SQL> -- )
15:03:06 SQL> -- GROUP BY tkrdate
15:03:06 SQL> -- /
15:03:06 SQL> 
15:03:06 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
15:03:06 SQL> 
15:03:06 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.14
15:03:06 SQL> 
15:03:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
15:03:07 SQL> 
15:03:07 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
15:03:07   2  SELECT
15:03:07   3  tkr
15:03:07   4  ,ydate
15:03:07   5  ,tkrdate
15:03:07   6  ,trend
15:03:07   7  ,g1
15:03:07   8  ,gatt
15:03:07   9  ,gattn
15:03:07  10  -- Goodness attributes:
15:03:07  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
15:03:07  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
15:03:07  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
15:03:07  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
15:03:07  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
15:03:07  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
15:03:07  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
15:03:07  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
15:03:07  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
15:03:07  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
15:03:07  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
15:03:07  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
15:03:07  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
15:03:07  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
15:03:07  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
15:03:07  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
15:03:07  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
15:03:07  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
15:03:07  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
15:03:07  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
15:03:07  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
15:03:07  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
15:03:07  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
15:03:07  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
15:03:07  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
15:03:07  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
15:03:07  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
15:03:07  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
15:03:07  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
15:03:07  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
15:03:07  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
15:03:07  42  FROM stk16svmspy
15:03:07  43  /

Table created.

Elapsed: 00:00:01.05
15:03:08 SQL> 
15:03:08 SQL> -- rpt
15:03:08 SQL> 
15:03:08 SQL> SELECT
15:03:08   2  tkr
15:03:08   3  ,trend
15:03:08   4  ,gatt
15:03:08   5  ,COUNT(tkr)
15:03:08   6  ,AVG(g1)
15:03:08   7  FROM stk_ms_svmspy
15:03:08   8  GROUP BY tkr,trend,gatt
15:03:08   9  ORDER BY tkr,trend,gatt
15:03:08  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
FSLR		-1 nup	     1560 -2.3177726
FSLR		-1 up	      555 3.06687044
FSLR		-1	       90
FSLR		 1 nup	     1636 -2.3771991
FSLR		 1 up	     1793 3.31378519
FSLR		 1	      156

6 rows selected.

Elapsed: 00:00:00.02
15:03:08 SQL> 
15:03:08 SQL> SELECT
15:03:08   2  tkr
15:03:08   3  ,0+TO_CHAR(ydate,'D')daynum
15:03:08   4  ,COUNT(tkr)
15:03:08   5  ,MIN(ydate),MAX(ydate)
15:03:08   6  FROM stk_ms_svmspy
15:03:08   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
15:03:08   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
15:03:08   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
FSLR		 2	 1014 2011-01-10 14:30:00 2011-04-18 19:55:00
FSLR		 3	 1248 2011-01-04 14:30:00 2011-04-19 19:55:00
FSLR		 4	 1188 2011-01-05 14:30:00 2011-04-20 14:55:00
FSLR		 5	 1170 2011-01-06 14:30:00 2011-04-14 19:55:00
FSLR		 6	 1170 2011-01-07 14:30:00 2011-04-15 19:55:00

Elapsed: 00:00:00.01
15:03:08 SQL> 
15:03:08 SQL> -- exit
15:03:08 SQL> @stk10svmd.sql '&1'
15:03:08 SQL> --
15:03:08 SQL> -- stk10svmd.sql
15:03:08 SQL> --
15:03:08 SQL> 
15:03:08 SQL> -- Creates views and tables for demonstrating SVM.
15:03:08 SQL> -- I need to run this after I run stk10.sql
15:03:08 SQL> 
15:03:08 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.05
15:03:08 SQL> 
15:03:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
15:03:08 SQL> 
15:03:08 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
15:03:08   2  SELECT
15:03:08   3  tkr
15:03:08   4  ,ydate
15:03:08   5  ,tkr||ydate tkrdate
15:03:08   6  ,clse
15:03:08   7  ,rownum rnum -- acts as t in my time-series
15:03:08   8  -- Derive some attributes from clse.
15:03:08   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
15:03:08  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
15:03:08  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
15:03:08  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
15:03:08  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
15:03:08  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
15:03:08  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
15:03:08  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
15:03:08  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
15:03:08  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
15:03:08  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
15:03:08  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
15:03:08  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
15:03:08  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
15:03:08  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
15:03:08  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
15:03:08  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
15:03:08  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
15:03:08  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
15:03:08  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
15:03:08  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
15:03:08  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
15:03:08  31  -- ystk21 created here: svmd/cr_ystk21.sql
15:03:08  32  FROM ystk21
15:03:08  33  WHERE UPPER(tkr)='&1'
15:03:08  34  AND ydate > '1990-01-01'
15:03:08  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
15:03:08  36  ORDER BY ydate
15:03:08  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='FSLR'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='FSLR')

Table created.

Elapsed: 00:00:02.08
15:03:10 SQL> 
15:03:10 SQL> -- rpt
15:03:10 SQL> 
15:03:10 SQL> SELECT
15:03:10   2  tkr
15:03:10   3  ,COUNT(tkr)
15:03:10   4  ,MIN(clse),MAX(clse)
15:03:10   5  ,MIN(avg4),MAX(avg4)
15:03:10   6  ,MIN(ydate),MAX(ydate)
15:03:10   7  FROM stk_svmd10svmspy
15:03:10   8  GROUP BY tkr
15:03:10   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
FSLR		1065	   24.6     311.14	24.74	 305.148 2006-11-17 20:00:00 2011-04-19 20:00:00

Elapsed: 00:00:00.01
15:03:10 SQL> 
15:03:10 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:03:10 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:05.13
15:03:15 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
15:03:15   2  SELECT
15:03:15   3  tkr
15:03:15   4  ,ydate
15:03:15   5  ,tkrdate
15:03:15   6  ,clse
15:03:15   7  ,rnum
15:03:15   8  -- g1 is important. I want to predict g1:
15:03:15   9  ,ld - clse g1
15:03:15  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
15:03:15  11  -- I want more attributes from the ones I derived above:
15:03:15  12  -- clse relation to moving-min
15:03:15  13  ,clse-min3  cm3
15:03:15  14  ,clse-min4  cm4
15:03:15  15  ,clse-min5  cm5
15:03:15  16  ,clse-min6  cm6
15:03:15  17  ,clse-min7  cm7
15:03:15  18  ,clse-min8  cm8
15:03:15  19  ,clse-min9  cm9
15:03:15  20  -- clse relation to moving-avg
15:03:15  21  ,clse-avg3  ca3
15:03:15  22  ,clse-avg4  ca4
15:03:15  23  ,clse-avg5  ca5
15:03:15  24  ,clse-avg6  ca6
15:03:15  25  ,clse-avg7  ca7
15:03:15  26  ,clse-avg8  ca8
15:03:15  27  ,clse-avg9  ca9
15:03:15  28  -- clse relation to moving-max
15:03:15  29  ,clse-max3  cx3
15:03:15  30  ,clse-max4  cx4
15:03:15  31  ,clse-max5  cx5
15:03:15  32  ,clse-max6  cx6
15:03:15  33  ,clse-max7  cx7
15:03:15  34  ,clse-max8  cx8
15:03:15  35  ,clse-max9  cx9
15:03:15  36  -- Derive date related attributes:
15:03:15  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:03:15  38  ,0+TO_CHAR(ydate,'D')d
15:03:15  39  ,0+TO_CHAR(ydate,'W')w
15:03:15  40  -- mpm stands for minutes-past-midnight:
15:03:15  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:03:15  42  -- mph stands for minutes-past-hour:
15:03:15  43  ,0+TO_CHAR(ydate,'MI')mph
15:03:15  44  FROM stk_svmd10svmspy
15:03:15  45  ORDER BY ydate
15:03:15  46  /

Table created.

Elapsed: 00:00:00.16
15:03:15 SQL> 
15:03:15 SQL> -- rpt
15:03:15 SQL> 
15:03:15 SQL> SELECT
15:03:15   2  tkr
15:03:15   3  ,COUNT(tkr)
15:03:15   4  ,MIN(clse),MAX(clse)
15:03:15   5  ,MIN(ydate),MAX(ydate)
15:03:15   6  FROM stk_svmd12
15:03:15   7  GROUP BY tkr
15:03:15   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
FSLR		1065	   24.6     311.14 2006-11-17 20:00:00 2011-04-19 20:00:00

Elapsed: 00:00:00.01
15:03:15 SQL> 
15:03:15 SQL> -- Prepare for derivation of NTILE based parameters.
15:03:15 SQL> -- Also derive the "trend" parameter:
15:03:15 SQL> 
15:03:15 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:03.31
15:03:18 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
15:03:18   2  SELECT
15:03:18   3  tkr
15:03:18   4  ,ydate
15:03:18   5  ,tkrdate
15:03:18   6  ,clse
15:03:18   7  ,g1
15:03:18   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
15:03:18   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
15:03:18  10  ,CASE WHEN trend IS NULL THEN 1
15:03:18  11  	    WHEN trend =0      THEN 1
15:03:18  12  	    ELSE trend END trend
15:03:18  13  ,cm3
15:03:18  14  ,cm4
15:03:18  15  ,cm5
15:03:18  16  ,cm6
15:03:18  17  ,cm7
15:03:18  18  ,cm8
15:03:18  19  ,cm9
15:03:18  20  ,ca3
15:03:18  21  ,ca4
15:03:18  22  ,ca5
15:03:18  23  ,ca6
15:03:18  24  ,ca7
15:03:18  25  ,ca8
15:03:18  26  ,ca9
15:03:18  27  ,cx3
15:03:18  28  ,cx4
15:03:18  29  ,cx5
15:03:18  30  ,cx6
15:03:18  31  ,cx7
15:03:18  32  ,cx8
15:03:18  33  ,cx9
15:03:18  34  ,hh
15:03:18  35  ,d
15:03:18  36  ,w
15:03:18  37  ,mpm
15:03:18  38  ,mph
15:03:18  39  FROM stk_svmd12
15:03:18  40  -- Guard against divide by 0:
15:03:18  41  WHERE clse > 0
15:03:18  42  ORDER BY ydate
15:03:18  43  /

Table created.

Elapsed: 00:00:00.09
15:03:19 SQL> 
15:03:19 SQL> -- rpt
15:03:19 SQL> 
15:03:19 SQL> SELECT
15:03:19   2  tkr
15:03:19   3  ,trend
15:03:19   4  ,gatt
15:03:19   5  ,COUNT(tkr)
15:03:19   6  ,AVG(g1)
15:03:19   7  FROM stk_svmd14
15:03:19   8  GROUP BY tkr,trend,gatt
15:03:19   9  ORDER BY tkr,trend,gatt
15:03:19  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FSLR		  -1 nup	253 -4.8373123
FSLR		  -1 up 	238	  5.23
FSLR		  -1		  1
FSLR		   1 nup	299 -3.8794649
FSLR		   1 up 	274 4.55686131

Elapsed: 00:00:00.01
15:03:19 SQL> 
15:03:19 SQL> -- Derive NTILE based params:
15:03:19 SQL> 
15:03:19 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.03
15:03:19 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
15:03:19   2  SELECT
15:03:19   3  tkr
15:03:19   4  ,ydate
15:03:19   5  ,tkrdate
15:03:19   6  ,clse
15:03:19   7  ,g1
15:03:19   8  ,gatt
15:03:19   9  ,gattn
15:03:19  10  ,trend
15:03:19  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
15:03:19  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
15:03:19  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
15:03:19  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
15:03:19  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
15:03:19  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
15:03:19  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
15:03:19  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
15:03:19  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
15:03:19  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
15:03:19  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
15:03:19  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
15:03:19  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
15:03:19  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
15:03:19  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
15:03:19  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
15:03:19  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
15:03:19  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
15:03:19  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
15:03:19  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
15:03:19  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
15:03:19  32  ,hh  att21
15:03:19  33  ,d   att22
15:03:19  34  ,w   att23
15:03:19  35  ,mpm att24
15:03:19  36  ,mph att25
15:03:19  37  ,trend att26
15:03:19  38  FROM stk_svmd14
15:03:19  39  ORDER BY ydate
15:03:19  40  /

Table created.

Elapsed: 00:00:00.16
15:03:19 SQL> 
15:03:19 SQL> -- rpt
15:03:19 SQL> 
15:03:19 SQL> SELECT
15:03:19   2  tkr
15:03:19   3  ,trend
15:03:19   4  ,gatt
15:03:19   5  ,COUNT(tkr)
15:03:19   6  ,AVG(g1)
15:03:19   7  FROM stk_svmd16
15:03:19   8  GROUP BY tkr,trend,gatt
15:03:19   9  ORDER BY tkr,trend,gatt
15:03:19  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FSLR		  -1 nup	253 -4.8373123
FSLR		  -1 up 	238	  5.23
FSLR		  -1		  1
FSLR		   1 nup	299 -3.8794649
FSLR		   1 up 	274 4.55686131

Elapsed: 00:00:00.01
15:03:19 SQL> 
15:03:19 SQL> -- Comment out feedback related syntax:
15:03:19 SQL> 
15:03:19 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
15:03:19 SQL> -- SELECT
15:03:19 SQL> -- m.tkr
15:03:19 SQL> -- ,m.ydate
15:03:19 SQL> -- ,m.tkrdate
15:03:19 SQL> -- ,l.score score_long
15:03:19 SQL> -- ,s.score score_short
15:03:19 SQL> -- ,m.g1
15:03:19 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
15:03:19 SQL> -- WHERE l.targ='gatt'
15:03:19 SQL> -- AND	 s.targ='gattn'
15:03:19 SQL> -- AND l.tkrdate = s.tkrdate
15:03:19 SQL> -- AND l.tkrdate = m.tkrdate
15:03:19 SQL> -- -- Speed things up:
15:03:19 SQL> -- AND l.tkr = '&1'
15:03:19 SQL> -- AND s.tkr = '&1'
15:03:19 SQL> -- /
15:03:19 SQL> --
15:03:19 SQL> -- DROP TABLE score_corr_tkr;
15:03:19 SQL> --
15:03:19 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
15:03:19 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
15:03:19 SQL> -- (
15:03:19 SQL> --   SELECT
15:03:19 SQL> --   tkrdate
15:03:19 SQL> --   -- Find corr() tween score and g1 over 8 day period:
15:03:19 SQL> --   ,CORR((score_long - score_short),g1)
15:03:19 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
15:03:19 SQL> --   FROM sc12tkr
15:03:19 SQL> -- )
15:03:19 SQL> -- GROUP BY tkrdate
15:03:19 SQL> -- /
15:03:19 SQL> 
15:03:19 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
15:03:19 SQL> 
15:03:19 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.03
15:03:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
15:03:19 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
15:03:19   2  SELECT
15:03:19   3  tkr
15:03:19   4  ,ydate
15:03:19   5  ,tkrdate
15:03:19   6  ,trend
15:03:19   7  ,g1
15:03:19   8  ,gatt
15:03:19   9  ,gattn
15:03:19  10  -- Goodness attributes:
15:03:19  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
15:03:19  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
15:03:19  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
15:03:19  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
15:03:19  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
15:03:19  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
15:03:19  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
15:03:19  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
15:03:19  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
15:03:19  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
15:03:19  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
15:03:19  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
15:03:19  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
15:03:19  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
15:03:19  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
15:03:19  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
15:03:19  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
15:03:19  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
15:03:19  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
15:03:19  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
15:03:19  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
15:03:19  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
15:03:19  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
15:03:19  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
15:03:19  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
15:03:19  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
15:03:19  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
15:03:19  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
15:03:19  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
15:03:19  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
15:03:19  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
15:03:19  42  FROM stk_svmd16
15:03:19  43  /

Table created.

Elapsed: 00:00:00.26
15:03:19 SQL> 
15:03:19 SQL> -- rpt
15:03:19 SQL> 
15:03:19 SQL> SELECT
15:03:19   2  tkr
15:03:19   3  ,trend
15:03:19   4  ,gatt
15:03:19   5  ,COUNT(tkr)
15:03:19   6  ,AVG(g1)
15:03:19   7  FROM stk_ms_svmd_svmspy
15:03:19   8  GROUP BY tkr,trend,gatt
15:03:19   9  ORDER BY tkr,trend,gatt
15:03:19  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FSLR		  -1 nup	253 -4.8373123
FSLR		  -1 up 	238	  5.23
FSLR		  -1		  1
FSLR		   1 nup	299 -3.8794649
FSLR		   1 up 	274 4.55686131

Elapsed: 00:00:00.01
15:03:19 SQL> 
15:03:19 SQL> SELECT
15:03:19   2  tkr
15:03:19   3  ,COUNT(tkr)
15:03:19   4  ,MIN(ydate),MAX(ydate)
15:03:19   5  FROM stk_ms_svmd_svmspy
15:03:19   6  GROUP BY tkr
15:03:19   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
FSLR		1065 2006-11-17 20:00:00 2011-04-19 20:00:00

Elapsed: 00:00:00.01
15:03:19 SQL> 
15:03:19 SQL> -- exit
15:03:19 SQL> 
15:03:19 SQL> 
15:03:19 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.06
15:03:19 SQL> 
15:03:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
15:03:20 SQL> 
15:03:20 SQL> CREATE TABLE stk_ms_u COMPRESS AS
15:03:20   2  SELECT * FROM stk_ms_svmspy
15:03:20   3  UNION
15:03:20   4  SELECT * FROM stk_ms_svmd_svmspy
15:03:20   5  /

Table created.

Elapsed: 00:00:00.17
15:03:20 SQL> 
15:03:20 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
