
SQL*Plus: Release 11.2.0.1.0 Production on Tue Jan 18 06:42:11 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:42:12 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:42:12 SQL> 
06:42:12 SQL> 06:42:12 SQL> --
06:42:12 SQL> -- stk10u.sql
06:42:12 SQL> --
06:42:12 SQL> 
06:42:12 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
06:42:12 SQL> 
06:42:12 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
06:42:12 SQL> @stk10.sql     '&1'
06:42:12 SQL> --
06:42:12 SQL> -- stk10.sql
06:42:12 SQL> --
06:42:12 SQL> 
06:42:12 SQL> -- Creates views and tables for demonstrating SVM.
06:42:12 SQL> 
06:42:12 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:01.77
06:42:14 SQL> 
06:42:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
06:42:14 SQL> 
06:42:14 SQL> CREATE TABLE stk10svmspy COMPRESS AS
06:42:14   2  SELECT
06:42:14   3  tkr
06:42:14   4  ,ydate
06:42:14   5  ,tkr||ydate tkrdate
06:42:14   6  ,clse
06:42:14   7  ,clse2
06:42:14   8  ,rownum rnum -- acts as t in my time-series
06:42:14   9  -- g1 is important. I want to predict g1:
06:42:14  10  ,gain1day g1
06:42:14  11  -- Derive some attributes from clse.
06:42:14  12  -- Each row spans 5 minutes.
06:42:14  13  -- The number of rows in 1 day is 24*60/5.
06:42:14  14  -- I want the aggregations to span from 3 days to 9 days:
06:42:14  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
06:42:14  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
06:42:14  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
06:42:14  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
06:42:14  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
06:42:14  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
06:42:14  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
06:42:14  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
06:42:14  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
06:42:14  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
06:42:14  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
06:42:14  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
06:42:14  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
06:42:14  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
06:42:14  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
06:42:14  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
06:42:14  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
06:42:14  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
06:42:14  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
06:42:14  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
06:42:14  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
06:42:14  36  FROM di5min_stk_c2
06:42:14  37  WHERE UPPER(tkr)='&1'
06:42:14  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
06:42:14  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
06:42:14  40  ORDER BY ydate
06:42:14  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:02.15
06:42:16 SQL> 
06:42:16 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
06:42:16 SQL> 
06:42:16 SQL> -- rpt
06:42:16 SQL> 
06:42:16 SQL> SELECT
06:42:16   2  tkr
06:42:16   3  ,COUNT(tkr)ccount
06:42:16   4  ,MIN(clse)mnclse,MAX(clse)mxclse
06:42:16   5  -- ,MIN(avg4),MAX(avg4)
06:42:16   6  ,MIN(ydate),MAX(ydate)
06:42:16   7  ,MIN(g1)
06:42:16   8  ,MAX(g1)
06:42:16   9  FROM stk10svmspy
06:42:16  10  GROUP BY tkr
06:42:16  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
XLB	       702	37.74	  39.085 2011-01-04 14:30:00 2011-01-14 20:55:00       -.67	    .8

Elapsed: 00:00:00.01
06:42:16 SQL> 
06:42:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:42:16 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.09
06:42:17 SQL> CREATE TABLE stk12svmspy COMPRESS AS
06:42:17   2  SELECT
06:42:17   3  tkr
06:42:17   4  ,ydate
06:42:17   5  ,tkrdate
06:42:17   6  ,clse
06:42:17   7  ,rnum
06:42:17   8  ,g1
06:42:17   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:42:17  10  -- I want more attributes from the ones I derived above:
06:42:17  11  -- clse relation to moving-min
06:42:17  12  ,clse-min3  cm3
06:42:17  13  ,clse-min4  cm4
06:42:17  14  ,clse-min5  cm5
06:42:17  15  ,clse-min6  cm6
06:42:17  16  ,clse-min7  cm7
06:42:17  17  ,clse-min8  cm8
06:42:17  18  ,clse-min9  cm9
06:42:17  19  -- clse relation to moving-avg
06:42:17  20  ,clse-avg3  ca3
06:42:17  21  ,clse-avg4  ca4
06:42:17  22  ,clse-avg5  ca5
06:42:17  23  ,clse-avg6  ca6
06:42:17  24  ,clse-avg7  ca7
06:42:17  25  ,clse-avg8  ca8
06:42:17  26  ,clse-avg9  ca9
06:42:17  27  -- clse relation to moving-max
06:42:17  28  ,clse-max3  cx3
06:42:17  29  ,clse-max4  cx4
06:42:17  30  ,clse-max5  cx5
06:42:17  31  ,clse-max6  cx6
06:42:17  32  ,clse-max7  cx7
06:42:17  33  ,clse-max8  cx8
06:42:17  34  ,clse-max9  cx9
06:42:17  35  -- Derive date related attributes:
06:42:17  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:42:17  37  ,0+TO_CHAR(ydate,'D')d
06:42:17  38  ,0+TO_CHAR(ydate,'W')w
06:42:17  39  -- mpm stands for minutes-past-midnight:
06:42:17  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:42:17  41  -- mph stands for minutes-past-hour:
06:42:17  42  ,0+TO_CHAR(ydate,'MI')mph
06:42:17  43  FROM stk10svmspy
06:42:17  44  ORDER BY ydate
06:42:17  45  /

Table created.

Elapsed: 00:00:00.05
06:42:17 SQL> 
06:42:17 SQL> -- rpt
06:42:17 SQL> 
06:42:17 SQL> SELECT
06:42:17   2  tkr
06:42:17   3  ,COUNT(tkr)ccount
06:42:17   4  ,MIN(clse)mnclse,MAX(clse)mxclse
06:42:17   5  -- ,MIN(avg4),MAX(avg4)
06:42:17   6  ,MIN(ydate),MAX(ydate)
06:42:17   7  ,MIN(g1)
06:42:17   8  ,AVG(g1)
06:42:17   9  ,MAX(g1)
06:42:17  10  FROM stk12svmspy
06:42:17  11  GROUP BY tkr
06:42:17  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
XLB	       702	37.74	  39.085 2011-01-04 14:30:00 2011-01-14 20:55:00       -.67 .036025641	       .8

Elapsed: 00:00:00.02
06:42:17 SQL> 
06:42:17 SQL> -- Prepare for derivation of NTILE based parameters.
06:42:17 SQL> -- Also derive the "trend" parameter:
06:42:17 SQL> 
06:42:17 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.05
06:42:17 SQL> CREATE TABLE stk14svmspy COMPRESS AS
06:42:17   2  SELECT
06:42:17   3  tkr
06:42:17   4  ,ydate
06:42:17   5  ,tkrdate
06:42:17   6  ,clse
06:42:17   7  ,g1
06:42:17   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
06:42:17   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
06:42:17  10  ,CASE WHEN trend IS NULL THEN 1
06:42:17  11  	    WHEN trend =0      THEN 1
06:42:17  12  	    ELSE trend END trend
06:42:17  13  ,cm3
06:42:17  14  ,cm4
06:42:17  15  ,cm5
06:42:17  16  ,cm6
06:42:17  17  ,cm7
06:42:17  18  ,cm8
06:42:17  19  ,cm9
06:42:17  20  ,ca3
06:42:17  21  ,ca4
06:42:17  22  ,ca5
06:42:17  23  ,ca6
06:42:17  24  ,ca7
06:42:17  25  ,ca8
06:42:17  26  ,ca9
06:42:17  27  ,cx3
06:42:17  28  ,cx4
06:42:17  29  ,cx5
06:42:17  30  ,cx6
06:42:17  31  ,cx7
06:42:17  32  ,cx8
06:42:17  33  ,cx9
06:42:17  34  ,hh
06:42:17  35  ,d
06:42:17  36  ,w
06:42:17  37  ,mpm
06:42:17  38  ,mph
06:42:17  39  FROM stk12svmspy
06:42:17  40  -- Guard against divide by 0:
06:42:17  41  WHERE clse > 0
06:42:17  42  ORDER BY ydate
06:42:17  43  /

Table created.

Elapsed: 00:00:00.08
06:42:17 SQL> 
06:42:17 SQL> -- rpt
06:42:17 SQL> 
06:42:17 SQL> SELECT
06:42:17   2  tkr
06:42:17   3  ,trend
06:42:17   4  ,gatt
06:42:17   5  ,COUNT(tkr)
06:42:17   6  ,AVG(g1)
06:42:17   7  FROM stk14svmspy
06:42:17   8  GROUP BY tkr,trend,gatt
06:42:17   9  ORDER BY tkr,trend,gatt
06:42:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
XLB		-1 nup	      103 -.10087379
XLB		-1 up	      141 .342624113
XLB		-1	       12
XLB		 1 nup	      279 -.18734767
XLB		 1 up	      101 .364653465
XLB		 1	       66

6 rows selected.

Elapsed: 00:00:00.02
06:42:17 SQL> 
06:42:17 SQL> -- Derive NTILE based params:
06:42:17 SQL> 
06:42:17 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.06
06:42:17 SQL> CREATE TABLE stk16svmspy COMPRESS AS
06:42:17   2  SELECT
06:42:17   3  tkr
06:42:17   4  ,ydate
06:42:17   5  ,tkrdate
06:42:17   6  ,clse
06:42:17   7  ,g1
06:42:17   8  ,gatt
06:42:17   9  ,gattn
06:42:17  10  ,trend
06:42:17  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
06:42:17  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
06:42:17  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
06:42:17  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
06:42:17  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
06:42:17  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
06:42:17  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
06:42:17  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
06:42:17  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
06:42:17  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
06:42:17  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
06:42:17  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
06:42:17  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
06:42:17  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
06:42:17  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
06:42:17  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
06:42:17  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
06:42:17  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
06:42:17  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
06:42:17  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
06:42:17  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
06:42:17  32  ,hh  att21
06:42:17  33  ,d   att22
06:42:17  34  ,w   att23
06:42:17  35  ,mpm att24
06:42:17  36  ,mph att25
06:42:17  37  ,trend att26
06:42:17  38  FROM stk14svmspy
06:42:17  39  ORDER BY ydate
06:42:17  40  /

Table created.

Elapsed: 00:00:00.17
06:42:17 SQL> 
06:42:17 SQL> -- rpt
06:42:17 SQL> 
06:42:17 SQL> SELECT
06:42:17   2  tkr
06:42:17   3  ,trend
06:42:17   4  ,gatt
06:42:17   5  ,COUNT(tkr)
06:42:17   6  ,AVG(g1)
06:42:17   7  FROM stk16svmspy
06:42:17   8  GROUP BY tkr,trend,gatt
06:42:17   9  ORDER BY tkr,trend,gatt
06:42:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
XLB		-1 nup	      103 -.10087379
XLB		-1 up	      141 .342624113
XLB		-1	       12
XLB		 1 nup	      279 -.18734767
XLB		 1 up	      101 .364653465
XLB		 1	       66

6 rows selected.

Elapsed: 00:00:00.00
06:42:17 SQL> 
06:42:17 SQL> -- Now I derive goodness attributes:
06:42:17 SQL> 
06:42:17 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
06:42:17 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
06:42:17   2  SELECT
06:42:17   3  tkr
06:42:17   4  ,ydate
06:42:17   5  ,tkrdate
06:42:17   6  ,trend
06:42:17   7  ,g1
06:42:17   8  ,gatt
06:42:17   9  ,gattn
06:42:17  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
06:42:17  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
06:42:17  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
06:42:17  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
06:42:17  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
06:42:17  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
06:42:17  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
06:42:17  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
06:42:17  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
06:42:17  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
06:42:17  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
06:42:17  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
06:42:17  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
06:42:17  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
06:42:17  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
06:42:17  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
06:42:17  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
06:42:17  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
06:42:17  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
06:42:17  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
06:42:17  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
06:42:17  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
06:42:17  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
06:42:17  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
06:42:17  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
06:42:17  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
06:42:17  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
06:42:17  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:42:17  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
06:42:17  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
06:42:17  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
06:42:17  41  FROM stk16svmspy
06:42:17  42  /

Table created.

Elapsed: 00:00:00.16
06:42:17 SQL> 
06:42:17 SQL> -- rpt
06:42:17 SQL> 
06:42:17 SQL> SELECT
06:42:17   2  tkr
06:42:17   3  ,trend
06:42:17   4  ,gatt
06:42:17   5  ,COUNT(tkr)
06:42:17   6  ,AVG(g1)
06:42:17   7  FROM stk_ms_svmspy
06:42:17   8  GROUP BY tkr,trend,gatt
06:42:17   9  ORDER BY tkr,trend,gatt
06:42:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
XLB		-1 nup	      103 -.10087379
XLB		-1 up	      141 .342624113
XLB		-1	       12
XLB		 1 nup	      279 -.18734767
XLB		 1 up	      101 .364653465
XLB		 1	       66

6 rows selected.

Elapsed: 00:00:00.01
06:42:17 SQL> 
06:42:17 SQL> SELECT
06:42:17   2  tkr
06:42:17   3  ,0+TO_CHAR(ydate,'D')daynum
06:42:17   4  ,COUNT(tkr)
06:42:17   5  ,MIN(ydate),MAX(ydate)
06:42:17   6  FROM stk_ms_svmspy
06:42:17   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
06:42:17   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
06:42:17   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
XLB		 2	   78 2011-01-10 14:30:00 2011-01-10 20:55:00
XLB		 3	  156 2011-01-04 14:30:00 2011-01-11 20:55:00
XLB		 4	  156 2011-01-05 14:30:00 2011-01-12 20:55:00
XLB		 5	  156 2011-01-06 14:30:00 2011-01-13 20:55:00
XLB		 6	  156 2011-01-07 14:30:00 2011-01-14 20:55:00

Elapsed: 00:00:00.00
06:42:17 SQL> 
06:42:17 SQL> -- exit
06:42:17 SQL> @stk10svmd.sql '&1'
06:42:17 SQL> --
06:42:17 SQL> -- stk10svmd.sql
06:42:17 SQL> --
06:42:17 SQL> 
06:42:17 SQL> -- Creates views and tables for demonstrating SVM.
06:42:17 SQL> -- I need to run this after I run stk10.sql
06:42:17 SQL> 
06:42:17 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.07
06:42:17 SQL> 
06:42:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
06:42:18 SQL> 
06:42:18 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
06:42:18   2  SELECT
06:42:18   3  tkr
06:42:18   4  ,ydate
06:42:18   5  ,tkr||ydate tkrdate
06:42:18   6  ,clse
06:42:18   7  ,rownum rnum -- acts as t in my time-series
06:42:18   8  -- Derive some attributes from clse.
06:42:18   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
06:42:18  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
06:42:18  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
06:42:18  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
06:42:18  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
06:42:18  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
06:42:18  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
06:42:18  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
06:42:18  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
06:42:18  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
06:42:18  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
06:42:18  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
06:42:18  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
06:42:18  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
06:42:18  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
06:42:18  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
06:42:18  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
06:42:18  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
06:42:18  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
06:42:18  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
06:42:18  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
06:42:18  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
06:42:18  31  FROM ystk
06:42:18  32  WHERE UPPER(tkr)='&1'
06:42:18  33  AND ydate > '1990-01-01'
06:42:18  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
06:42:18  35  ORDER BY ydate
06:42:18  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='XLB'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='XLB')

Table created.

Elapsed: 00:00:01.91
06:42:20 SQL> 
06:42:20 SQL> -- rpt
06:42:20 SQL> 
06:42:20 SQL> SELECT
06:42:20   2  tkr
06:42:20   3  ,COUNT(tkr)
06:42:20   4  ,MIN(clse),MAX(clse)
06:42:20   5  ,MIN(avg4),MAX(avg4)
06:42:20   6  ,MIN(ydate),MAX(ydate)
06:42:20   7  FROM stk_svmd10svmspy
06:42:20   8  GROUP BY tkr
06:42:20   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
XLB		3036	  13.95      43.17     14.088	   42.75 1998-12-22 00:00:00 2011-01-14 00:00:00

Elapsed: 00:00:00.02
06:42:20 SQL> 
06:42:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:42:20 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.05
06:42:20 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
06:42:20   2  SELECT
06:42:20   3  tkr
06:42:20   4  ,ydate
06:42:20   5  ,tkrdate
06:42:20   6  ,clse
06:42:20   7  ,rnum
06:42:20   8  -- g1 is important. I want to predict g1:
06:42:20   9  ,ld - clse g1
06:42:20  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:42:20  11  -- I want more attributes from the ones I derived above:
06:42:20  12  -- clse relation to moving-min
06:42:20  13  ,clse-min3  cm3
06:42:20  14  ,clse-min4  cm4
06:42:20  15  ,clse-min5  cm5
06:42:20  16  ,clse-min6  cm6
06:42:20  17  ,clse-min7  cm7
06:42:20  18  ,clse-min8  cm8
06:42:20  19  ,clse-min9  cm9
06:42:20  20  -- clse relation to moving-avg
06:42:20  21  ,clse-avg3  ca3
06:42:20  22  ,clse-avg4  ca4
06:42:20  23  ,clse-avg5  ca5
06:42:20  24  ,clse-avg6  ca6
06:42:20  25  ,clse-avg7  ca7
06:42:20  26  ,clse-avg8  ca8
06:42:20  27  ,clse-avg9  ca9
06:42:20  28  -- clse relation to moving-max
06:42:20  29  ,clse-max3  cx3
06:42:20  30  ,clse-max4  cx4
06:42:20  31  ,clse-max5  cx5
06:42:20  32  ,clse-max6  cx6
06:42:20  33  ,clse-max7  cx7
06:42:20  34  ,clse-max8  cx8
06:42:20  35  ,clse-max9  cx9
06:42:20  36  -- Derive date related attributes:
06:42:20  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:42:20  38  ,0+TO_CHAR(ydate,'D')d
06:42:20  39  ,0+TO_CHAR(ydate,'W')w
06:42:20  40  -- mpm stands for minutes-past-midnight:
06:42:20  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:42:20  42  -- mph stands for minutes-past-hour:
06:42:20  43  ,0+TO_CHAR(ydate,'MI')mph
06:42:20  44  FROM stk_svmd10svmspy
06:42:20  45  ORDER BY ydate
06:42:20  46  /

Table created.

Elapsed: 00:00:00.10
06:42:20 SQL> 
06:42:20 SQL> -- rpt
06:42:20 SQL> 
06:42:20 SQL> SELECT
06:42:20   2  tkr
06:42:20   3  ,COUNT(tkr)
06:42:20   4  ,MIN(clse),MAX(clse)
06:42:20   5  ,MIN(ydate),MAX(ydate)
06:42:20   6  FROM stk_svmd12
06:42:20   7  GROUP BY tkr
06:42:20   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
XLB		3036	  13.95      43.17 1998-12-22 00:00:00 2011-01-14 00:00:00

Elapsed: 00:00:00.00
06:42:20 SQL> 
06:42:20 SQL> -- Prepare for derivation of NTILE based parameters.
06:42:20 SQL> -- Also derive the "trend" parameter:
06:42:20 SQL> 
06:42:20 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
06:42:20 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
06:42:20   2  SELECT
06:42:20   3  tkr
06:42:20   4  ,ydate
06:42:20   5  ,tkrdate
06:42:20   6  ,clse
06:42:20   7  ,g1
06:42:20   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
06:42:20   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
06:42:20  10  ,CASE WHEN trend IS NULL THEN 1
06:42:20  11  	    WHEN trend =0      THEN 1
06:42:20  12  	    ELSE trend END trend
06:42:20  13  ,cm3
06:42:20  14  ,cm4
06:42:20  15  ,cm5
06:42:20  16  ,cm6
06:42:20  17  ,cm7
06:42:20  18  ,cm8
06:42:20  19  ,cm9
06:42:20  20  ,ca3
06:42:20  21  ,ca4
06:42:20  22  ,ca5
06:42:20  23  ,ca6
06:42:20  24  ,ca7
06:42:20  25  ,ca8
06:42:20  26  ,ca9
06:42:20  27  ,cx3
06:42:20  28  ,cx4
06:42:20  29  ,cx5
06:42:20  30  ,cx6
06:42:20  31  ,cx7
06:42:20  32  ,cx8
06:42:20  33  ,cx9
06:42:20  34  ,hh
06:42:20  35  ,d
06:42:20  36  ,w
06:42:20  37  ,mpm
06:42:20  38  ,mph
06:42:20  39  FROM stk_svmd12
06:42:20  40  -- Guard against divide by 0:
06:42:20  41  WHERE clse > 0
06:42:20  42  ORDER BY ydate
06:42:20  43  /

Table created.

Elapsed: 00:00:00.14
06:42:20 SQL> 
06:42:20 SQL> -- rpt
06:42:20 SQL> 
06:42:20 SQL> SELECT
06:42:20   2  tkr
06:42:20   3  ,trend
06:42:20   4  ,gatt
06:42:20   5  ,COUNT(tkr)
06:42:20   6  ,AVG(g1)
06:42:20   7  FROM stk_svmd14
06:42:20   8  GROUP BY tkr,trend,gatt
06:42:20   9  ORDER BY tkr,trend,gatt
06:42:20  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XLB		  -1 nup	737 -.27690638
XLB		  -1 up 	603 .381542289
XLB		   1 nup       1027  -.2175073
XLB		   1 up 	668 .328817365
XLB		   1		  1

Elapsed: 00:00:00.01
06:42:20 SQL> 
06:42:20 SQL> -- Derive NTILE based params:
06:42:20 SQL> 
06:42:20 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.06
06:42:20 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
06:42:20   2  SELECT
06:42:20   3  tkr
06:42:20   4  ,ydate
06:42:20   5  ,tkrdate
06:42:20   6  ,clse
06:42:20   7  ,g1
06:42:20   8  ,gatt
06:42:20   9  ,gattn
06:42:20  10  ,trend
06:42:20  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
06:42:20  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
06:42:20  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
06:42:20  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
06:42:20  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
06:42:20  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
06:42:20  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
06:42:20  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
06:42:20  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
06:42:20  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
06:42:20  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
06:42:20  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
06:42:20  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
06:42:20  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
06:42:20  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
06:42:20  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
06:42:20  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
06:42:20  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
06:42:20  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
06:42:20  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
06:42:20  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
06:42:20  32  ,hh  att21
06:42:20  33  ,d   att22
06:42:20  34  ,w   att23
06:42:20  35  ,mpm att24
06:42:20  36  ,mph att25
06:42:20  37  ,trend att26
06:42:20  38  FROM stk_svmd14
06:42:20  39  ORDER BY ydate
06:42:20  40  /

Table created.

Elapsed: 00:00:00.35
06:42:20 SQL> 
06:42:20 SQL> -- rpt
06:42:20 SQL> 
06:42:20 SQL> SELECT
06:42:20   2  tkr
06:42:20   3  ,trend
06:42:20   4  ,gatt
06:42:20   5  ,COUNT(tkr)
06:42:20   6  ,AVG(g1)
06:42:20   7  FROM stk_svmd16
06:42:20   8  GROUP BY tkr,trend,gatt
06:42:20   9  ORDER BY tkr,trend,gatt
06:42:20  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XLB		  -1 nup	737 -.27690638
XLB		  -1 up 	603 .381542289
XLB		   1 nup       1027  -.2175073
XLB		   1 up 	668 .328817365
XLB		   1		  1

Elapsed: 00:00:00.01
06:42:20 SQL> 
06:42:20 SQL> -- Now I derive goodness attributes:
06:42:20 SQL> 
06:42:20 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.06
06:42:20 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
06:42:20   2  SELECT
06:42:20   3  tkr
06:42:20   4  ,ydate
06:42:20   5  ,tkrdate
06:42:20   6  ,trend
06:42:20   7  ,g1
06:42:20   8  ,gatt
06:42:20   9  ,gattn
06:42:20  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
06:42:20  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
06:42:20  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
06:42:20  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
06:42:20  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
06:42:20  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
06:42:20  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
06:42:20  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
06:42:20  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
06:42:20  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
06:42:20  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
06:42:20  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
06:42:20  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
06:42:20  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
06:42:20  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
06:42:20  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
06:42:20  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
06:42:20  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
06:42:20  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
06:42:20  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
06:42:20  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
06:42:20  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
06:42:20  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
06:42:20  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
06:42:20  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
06:42:20  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
06:42:20  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
06:42:20  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:42:20  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
06:42:20  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
06:42:20  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
06:42:20  41  FROM stk_svmd16
06:42:20  42  /

Table created.

Elapsed: 00:00:00.58
06:42:21 SQL> 
06:42:21 SQL> -- rpt
06:42:21 SQL> 
06:42:21 SQL> SELECT
06:42:21   2  tkr
06:42:21   3  ,trend
06:42:21   4  ,gatt
06:42:21   5  ,COUNT(tkr)
06:42:21   6  ,AVG(g1)
06:42:21   7  FROM stk_ms_svmd_svmspy
06:42:21   8  GROUP BY tkr,trend,gatt
06:42:21   9  ORDER BY tkr,trend,gatt
06:42:21  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XLB		  -1 nup	737 -.27690638
XLB		  -1 up 	603 .381542289
XLB		   1 nup       1027  -.2175073
XLB		   1 up 	668 .328817365
XLB		   1		  1

Elapsed: 00:00:00.02
06:42:21 SQL> 
06:42:21 SQL> SELECT
06:42:21   2  tkr
06:42:21   3  ,COUNT(tkr)
06:42:21   4  ,MIN(ydate),MAX(ydate)
06:42:21   5  FROM stk_ms_svmd_svmspy
06:42:21   6  GROUP BY tkr
06:42:21   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
XLB		3036 1998-12-22 00:00:00 2011-01-14 00:00:00

Elapsed: 00:00:00.00
06:42:21 SQL> 
06:42:21 SQL> -- exit
06:42:21 SQL> 
06:42:21 SQL> 
06:42:21 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.10
06:42:21 SQL> 
06:42:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
06:42:21 SQL> 
06:42:21 SQL> CREATE TABLE stk_ms_u COMPRESS AS
06:42:21   2  SELECT * FROM stk_ms_svmspy
06:42:21   3  UNION
06:42:21   4  SELECT * FROM stk_ms_svmd_svmspy
06:42:21   5  /

Table created.

Elapsed: 00:00:00.10
06:42:22 SQL> 
06:42:22 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
