
SQL*Plus: Release 11.2.0.1.0 Production on Wed Apr 27 13:21:14 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

13:21:14 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
13:21:14 SQL> 
13:21:14 SQL> 13:21:14 SQL> --
13:21:14 SQL> -- stk10u.sql
13:21:14 SQL> --
13:21:14 SQL> 
13:21:14 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
13:21:14 SQL> 
13:21:14 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
13:21:14 SQL> @stk10.sql     '&1'
13:21:14 SQL> --
13:21:14 SQL> -- stk10.sql
13:21:14 SQL> --
13:21:14 SQL> 
13:21:14 SQL> -- Creates views and tables for demonstrating SVM.
13:21:14 SQL> 
13:21:14 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.15
13:21:14 SQL> 
13:21:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
13:21:14 SQL> 
13:21:14 SQL> CREATE TABLE stk10svmspy COMPRESS AS
13:21:14   2  SELECT
13:21:14   3  tkr
13:21:14   4  ,ydate
13:21:14   5  ,tkr||ydate tkrdate
13:21:14   6  ,clse
13:21:14   7  ,clse2
13:21:14   8  ,rownum rnum -- acts as t in my time-series
13:21:14   9  -- g1 is important. I want to predict g1:
13:21:14  10  ,gain1day g1
13:21:14  11  -- Derive some attributes from clse.
13:21:14  12  -- Each row spans 5 minutes.
13:21:14  13  -- The number of rows in 1 day is 24*60/5.
13:21:14  14  -- I want the aggregations to span from 3 days to 9 days:
13:21:14  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
13:21:14  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
13:21:14  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
13:21:14  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
13:21:14  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
13:21:14  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
13:21:14  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
13:21:14  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
13:21:14  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
13:21:14  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
13:21:14  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
13:21:14  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
13:21:14  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
13:21:14  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
13:21:14  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
13:21:14  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
13:21:14  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
13:21:14  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
13:21:14  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
13:21:14  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
13:21:14  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
13:21:14  36  FROM di5min_stk_c2
13:21:14  37  WHERE UPPER(tkr)='&1'
13:21:14  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
13:21:14  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
13:21:14  40  ORDER BY ydate
13:21:14  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='AXP'

Table created.

Elapsed: 00:00:00.80
13:21:15 SQL> 
13:21:15 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
13:21:15 SQL> 
13:21:15 SQL> -- rpt
13:21:15 SQL> 
13:21:15 SQL> SELECT
13:21:15   2  tkr
13:21:15   3  ,COUNT(tkr)ccount
13:21:15   4  ,MIN(clse)mnclse,MAX(clse)mxclse
13:21:15   5  -- ,MIN(avg4),MAX(avg4)
13:21:15   6  ,MIN(ydate),MAX(ydate)
13:21:15   7  ,MIN(g1)
13:21:15   8  ,MAX(g1)
13:21:15   9  FROM stk10svmspy
13:21:15  10  GROUP BY tkr
13:21:15  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
AXP	      6084	42.31	   47.49 2011-01-04 14:30:00 2011-04-26 19:55:00      -1.67	  1.92

Elapsed: 00:00:00.02
13:21:15 SQL> 
13:21:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
13:21:15 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.05
13:21:16 SQL> CREATE TABLE stk12svmspy COMPRESS AS
13:21:16   2  SELECT
13:21:16   3  tkr
13:21:16   4  ,ydate
13:21:16   5  ,tkrdate
13:21:16   6  ,clse
13:21:16   7  ,rnum
13:21:16   8  ,g1
13:21:16   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
13:21:16  10  -- I want more attributes from the ones I derived above:
13:21:16  11  -- clse relation to moving-min
13:21:16  12  ,clse-min3  cm3
13:21:16  13  ,clse-min4  cm4
13:21:16  14  ,clse-min5  cm5
13:21:16  15  ,clse-min6  cm6
13:21:16  16  ,clse-min7  cm7
13:21:16  17  ,clse-min8  cm8
13:21:16  18  ,clse-min9  cm9
13:21:16  19  -- clse relation to moving-avg
13:21:16  20  ,clse-avg3  ca3
13:21:16  21  ,clse-avg4  ca4
13:21:16  22  ,clse-avg5  ca5
13:21:16  23  ,clse-avg6  ca6
13:21:16  24  ,clse-avg7  ca7
13:21:16  25  ,clse-avg8  ca8
13:21:16  26  ,clse-avg9  ca9
13:21:16  27  -- clse relation to moving-max
13:21:16  28  ,clse-max3  cx3
13:21:16  29  ,clse-max4  cx4
13:21:16  30  ,clse-max5  cx5
13:21:16  31  ,clse-max6  cx6
13:21:16  32  ,clse-max7  cx7
13:21:16  33  ,clse-max8  cx8
13:21:16  34  ,clse-max9  cx9
13:21:16  35  -- Derive date related attributes:
13:21:16  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:21:16  37  ,0+TO_CHAR(ydate,'D')d
13:21:16  38  ,0+TO_CHAR(ydate,'W')w
13:21:16  39  -- mpm stands for minutes-past-midnight:
13:21:16  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:21:16  41  -- mph stands for minutes-past-hour:
13:21:16  42  ,0+TO_CHAR(ydate,'MI')mph
13:21:16  43  FROM stk10svmspy
13:21:16  44  ORDER BY ydate
13:21:16  45  /

Table created.

Elapsed: 00:00:00.18
13:21:16 SQL> 
13:21:16 SQL> -- rpt
13:21:16 SQL> 
13:21:16 SQL> SELECT
13:21:16   2  tkr
13:21:16   3  ,COUNT(tkr)ccount
13:21:16   4  ,MIN(clse)mnclse,MAX(clse)mxclse
13:21:16   5  -- ,MIN(avg4),MAX(avg4)
13:21:16   6  ,MIN(ydate),MAX(ydate)
13:21:16   7  ,MIN(g1)
13:21:16   8  ,AVG(g1)
13:21:16   9  ,MAX(g1)
13:21:16  10  FROM stk12svmspy
13:21:16  11  GROUP BY tkr
13:21:16  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
AXP	      6084	42.31	   47.49 2011-01-04 14:30:00 2011-04-26 19:55:00      -1.67 .045893867	     1.92

Elapsed: 00:00:00.02
13:21:16 SQL> 
13:21:16 SQL> -- Prepare for derivation of NTILE based parameters.
13:21:16 SQL> -- Also derive the "trend" parameter:
13:21:16 SQL> 
13:21:16 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.03
13:21:16 SQL> CREATE TABLE stk14svmspy COMPRESS AS
13:21:16   2  SELECT
13:21:16   3  tkr
13:21:16   4  ,ydate
13:21:16   5  ,tkrdate
13:21:16   6  ,clse
13:21:16   7  ,g1
13:21:16   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
13:21:16   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
13:21:16  10  ,CASE WHEN trend IS NULL THEN 1
13:21:16  11  	    WHEN trend =0      THEN 1
13:21:16  12  	    ELSE trend END trend
13:21:16  13  ,cm3
13:21:16  14  ,cm4
13:21:16  15  ,cm5
13:21:16  16  ,cm6
13:21:16  17  ,cm7
13:21:16  18  ,cm8
13:21:16  19  ,cm9
13:21:16  20  ,ca3
13:21:16  21  ,ca4
13:21:16  22  ,ca5
13:21:16  23  ,ca6
13:21:16  24  ,ca7
13:21:16  25  ,ca8
13:21:16  26  ,ca9
13:21:16  27  ,cx3
13:21:16  28  ,cx4
13:21:16  29  ,cx5
13:21:16  30  ,cx6
13:21:16  31  ,cx7
13:21:16  32  ,cx8
13:21:16  33  ,cx9
13:21:16  34  ,hh
13:21:16  35  ,d
13:21:16  36  ,w
13:21:16  37  ,mpm
13:21:16  38  ,mph
13:21:16  39  FROM stk12svmspy
13:21:16  40  -- Guard against divide by 0:
13:21:16  41  WHERE clse > 0
13:21:16  42  ORDER BY ydate
13:21:16  43  /

Table created.

Elapsed: 00:00:00.14
13:21:16 SQL> 
13:21:16 SQL> -- rpt
13:21:16 SQL> 
13:21:16 SQL> SELECT
13:21:16   2  tkr
13:21:16   3  ,trend
13:21:16   4  ,gatt
13:21:16   5  ,COUNT(tkr)
13:21:16   6  ,AVG(g1)
13:21:16   7  FROM stk14svmspy
13:21:16   8  GROUP BY tkr,trend,gatt
13:21:16   9  ORDER BY tkr,trend,gatt
13:21:16  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AXP		-1 nup	     1165 -.30806893
AXP		-1 up	      955  .69941359
AXP		-1	       12
AXP		 1 nup	     2226 -.34130706
AXP		 1 up	     1414 .505699081
AXP		 1	      312

6 rows selected.

Elapsed: 00:00:00.01
13:21:16 SQL> 
13:21:16 SQL> -- Derive NTILE based params:
13:21:16 SQL> 
13:21:16 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
13:21:16 SQL> CREATE TABLE stk16svmspy COMPRESS AS
13:21:16   2  SELECT
13:21:16   3  tkr
13:21:16   4  ,ydate
13:21:16   5  ,tkrdate
13:21:16   6  ,clse
13:21:16   7  ,g1
13:21:16   8  ,gatt
13:21:16   9  ,gattn
13:21:16  10  ,trend
13:21:16  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
13:21:16  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
13:21:16  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
13:21:16  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
13:21:16  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
13:21:16  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
13:21:16  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
13:21:16  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
13:21:16  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
13:21:16  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
13:21:16  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
13:21:16  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
13:21:16  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
13:21:16  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
13:21:16  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
13:21:16  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
13:21:16  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
13:21:16  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
13:21:16  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
13:21:16  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
13:21:16  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
13:21:16  32  ,hh  att21
13:21:16  33  ,d   att22
13:21:16  34  ,w   att23
13:21:16  35  ,mpm att24
13:21:16  36  ,mph att25
13:21:16  37  ,trend att26
13:21:16  38  FROM stk14svmspy
13:21:16  39  ORDER BY ydate
13:21:16  40  /

Table created.

Elapsed: 00:00:00.80
13:21:17 SQL> 
13:21:17 SQL> -- rpt
13:21:17 SQL> 
13:21:17 SQL> SELECT
13:21:17   2  tkr
13:21:17   3  ,trend
13:21:17   4  ,gatt
13:21:17   5  ,COUNT(tkr)
13:21:17   6  ,AVG(g1)
13:21:17   7  FROM stk16svmspy
13:21:17   8  GROUP BY tkr,trend,gatt
13:21:17   9  ORDER BY tkr,trend,gatt
13:21:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AXP		-1 nup	     1165 -.30806893
AXP		-1 up	      955  .69941359
AXP		-1	       12
AXP		 1 nup	     2226 -.34130706
AXP		 1 up	     1414 .505699081
AXP		 1	      312

6 rows selected.

Elapsed: 00:00:00.02
13:21:17 SQL> 
13:21:17 SQL> -- Comment out feedback related syntax:
13:21:17 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
13:21:17 SQL> -- SELECT
13:21:17 SQL> -- m.tkr
13:21:17 SQL> -- ,m.ydate
13:21:17 SQL> -- ,m.tkrdate
13:21:17 SQL> -- ,l.score score_long
13:21:17 SQL> -- ,s.score score_short
13:21:17 SQL> -- ,m.g1
13:21:17 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
13:21:17 SQL> -- WHERE l.targ='gatt'
13:21:17 SQL> -- AND	 s.targ='gattn'
13:21:17 SQL> -- AND l.tkrdate = s.tkrdate
13:21:17 SQL> -- AND l.tkrdate = m.tkrdate
13:21:17 SQL> -- -- Speed things up:
13:21:17 SQL> -- AND l.tkr = '&1'
13:21:17 SQL> -- AND s.tkr = '&1'
13:21:17 SQL> -- /
13:21:17 SQL> --
13:21:17 SQL> -- DROP TABLE score_corr_tkr;
13:21:17 SQL> --
13:21:17 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
13:21:17 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
13:21:17 SQL> -- (
13:21:17 SQL> --   SELECT
13:21:17 SQL> --   tkrdate
13:21:17 SQL> --   -- Find corr() tween score and g1 over 8 day period:
13:21:17 SQL> --   ,CORR((score_long - score_short),g1)
13:21:17 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
13:21:17 SQL> --   FROM sc12tkr
13:21:17 SQL> -- )
13:21:17 SQL> -- GROUP BY tkrdate
13:21:17 SQL> -- /
13:21:17 SQL> 
13:21:17 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
13:21:17 SQL> 
13:21:17 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
13:21:17 SQL> 
13:21:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
13:21:17 SQL> 
13:21:17 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
13:21:17   2  SELECT
13:21:17   3  tkr
13:21:17   4  ,ydate
13:21:17   5  ,tkrdate
13:21:17   6  ,trend
13:21:17   7  ,g1
13:21:17   8  ,gatt
13:21:17   9  ,gattn
13:21:17  10  -- Goodness attributes:
13:21:17  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
13:21:17  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
13:21:17  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
13:21:17  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
13:21:17  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
13:21:17  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
13:21:17  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
13:21:17  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
13:21:17  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
13:21:17  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
13:21:17  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
13:21:17  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
13:21:17  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
13:21:17  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
13:21:17  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
13:21:17  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
13:21:17  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
13:21:17  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
13:21:17  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
13:21:17  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
13:21:17  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
13:21:17  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
13:21:17  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
13:21:17  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
13:21:17  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
13:21:17  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
13:21:17  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
13:21:17  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
13:21:17  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
13:21:17  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
13:21:17  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
13:21:17  42  FROM stk16svmspy
13:21:17  43  /

Table created.

Elapsed: 00:00:01.12
13:21:18 SQL> 
13:21:18 SQL> -- rpt
13:21:18 SQL> 
13:21:18 SQL> SELECT
13:21:18   2  tkr
13:21:18   3  ,trend
13:21:18   4  ,gatt
13:21:18   5  ,COUNT(tkr)
13:21:18   6  ,AVG(g1)
13:21:18   7  FROM stk_ms_svmspy
13:21:18   8  GROUP BY tkr,trend,gatt
13:21:18   9  ORDER BY tkr,trend,gatt
13:21:18  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AXP		-1 nup	     1165 -.30806893
AXP		-1 up	      955  .69941359
AXP		-1	       12
AXP		 1 nup	     2226 -.34130706
AXP		 1 up	     1414 .505699081
AXP		 1	      312

6 rows selected.

Elapsed: 00:00:00.02
13:21:18 SQL> 
13:21:18 SQL> SELECT
13:21:18   2  tkr
13:21:18   3  ,0+TO_CHAR(ydate,'D')daynum
13:21:18   4  ,COUNT(tkr)
13:21:18   5  ,MIN(ydate),MAX(ydate)
13:21:18   6  FROM stk_ms_svmspy
13:21:18   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
13:21:18   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
13:21:18   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
AXP		 2	 1092 2011-01-10 14:30:00 2011-04-25 19:55:00
AXP		 3	 1326 2011-01-04 14:30:00 2011-04-26 19:55:00
AXP		 4	 1248 2011-01-05 14:30:00 2011-04-20 19:55:00
AXP		 5	 1248 2011-01-06 14:30:00 2011-04-21 19:55:00
AXP		 6	 1170 2011-01-07 14:30:00 2011-04-15 19:55:00

Elapsed: 00:00:00.01
13:21:18 SQL> 
13:21:18 SQL> -- exit
13:21:18 SQL> @stk10svmd.sql '&1'
13:21:18 SQL> --
13:21:18 SQL> -- stk10svmd.sql
13:21:18 SQL> --
13:21:18 SQL> 
13:21:18 SQL> -- Creates views and tables for demonstrating SVM.
13:21:18 SQL> -- I need to run this after I run stk10.sql
13:21:18 SQL> 
13:21:18 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.06
13:21:18 SQL> 
13:21:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
13:21:19 SQL> 
13:21:19 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
13:21:19   2  SELECT
13:21:19   3  tkr
13:21:19   4  ,ydate
13:21:19   5  ,tkr||ydate tkrdate
13:21:19   6  ,clse
13:21:19   7  ,rownum rnum -- acts as t in my time-series
13:21:19   8  -- Derive some attributes from clse.
13:21:19   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
13:21:19  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
13:21:19  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
13:21:19  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
13:21:19  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
13:21:19  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
13:21:19  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
13:21:19  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
13:21:19  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
13:21:19  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
13:21:19  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
13:21:19  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
13:21:19  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
13:21:19  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
13:21:19  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
13:21:19  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
13:21:19  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
13:21:19  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
13:21:19  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
13:21:19  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
13:21:19  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
13:21:19  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
13:21:19  31  -- ystk21 created here: svmd/cr_ystk21.sql
13:21:19  32  FROM ystk21
13:21:19  33  WHERE UPPER(tkr)='&1'
13:21:19  34  AND ydate > '1990-01-01'
13:21:19  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
13:21:19  36  ORDER BY ydate
13:21:19  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='AXP'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='AXP')

Table created.

Elapsed: 00:00:00.39
13:21:19 SQL> 
13:21:19 SQL> -- rpt
13:21:19 SQL> 
13:21:19 SQL> SELECT
13:21:19   2  tkr
13:21:19   3  ,COUNT(tkr)
13:21:19   4  ,MIN(clse),MAX(clse)
13:21:19   5  ,MIN(avg4),MAX(avg4)
13:21:19   6  ,MIN(ydate),MAX(ydate)
13:21:19   7  FROM stk_svmd10svmspy
13:21:19   8  GROUP BY tkr
13:21:19   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
AXP		5326	   3.08      60.51	3.238	  59.914 1990-01-02 20:00:00 2011-04-25 20:00:00

Elapsed: 00:00:00.02
13:21:19 SQL> 
13:21:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
13:21:19 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
13:21:19 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
13:21:19   2  SELECT
13:21:19   3  tkr
13:21:19   4  ,ydate
13:21:19   5  ,tkrdate
13:21:19   6  ,clse
13:21:19   7  ,rnum
13:21:19   8  -- g1 is important. I want to predict g1:
13:21:19   9  ,ld - clse g1
13:21:19  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
13:21:19  11  -- I want more attributes from the ones I derived above:
13:21:19  12  -- clse relation to moving-min
13:21:19  13  ,clse-min3  cm3
13:21:19  14  ,clse-min4  cm4
13:21:19  15  ,clse-min5  cm5
13:21:19  16  ,clse-min6  cm6
13:21:19  17  ,clse-min7  cm7
13:21:19  18  ,clse-min8  cm8
13:21:19  19  ,clse-min9  cm9
13:21:19  20  -- clse relation to moving-avg
13:21:19  21  ,clse-avg3  ca3
13:21:19  22  ,clse-avg4  ca4
13:21:19  23  ,clse-avg5  ca5
13:21:19  24  ,clse-avg6  ca6
13:21:19  25  ,clse-avg7  ca7
13:21:19  26  ,clse-avg8  ca8
13:21:19  27  ,clse-avg9  ca9
13:21:19  28  -- clse relation to moving-max
13:21:19  29  ,clse-max3  cx3
13:21:19  30  ,clse-max4  cx4
13:21:19  31  ,clse-max5  cx5
13:21:19  32  ,clse-max6  cx6
13:21:19  33  ,clse-max7  cx7
13:21:19  34  ,clse-max8  cx8
13:21:19  35  ,clse-max9  cx9
13:21:19  36  -- Derive date related attributes:
13:21:19  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:21:19  38  ,0+TO_CHAR(ydate,'D')d
13:21:19  39  ,0+TO_CHAR(ydate,'W')w
13:21:19  40  -- mpm stands for minutes-past-midnight:
13:21:19  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:21:19  42  -- mph stands for minutes-past-hour:
13:21:19  43  ,0+TO_CHAR(ydate,'MI')mph
13:21:19  44  FROM stk_svmd10svmspy
13:21:19  45  ORDER BY ydate
13:21:19  46  /

Table created.

Elapsed: 00:00:00.17
13:21:19 SQL> 
13:21:19 SQL> -- rpt
13:21:19 SQL> 
13:21:19 SQL> SELECT
13:21:19   2  tkr
13:21:19   3  ,COUNT(tkr)
13:21:19   4  ,MIN(clse),MAX(clse)
13:21:19   5  ,MIN(ydate),MAX(ydate)
13:21:19   6  FROM stk_svmd12
13:21:19   7  GROUP BY tkr
13:21:19   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
AXP		5326	   3.08      60.51 1990-01-02 20:00:00 2011-04-25 20:00:00

Elapsed: 00:00:00.02
13:21:19 SQL> 
13:21:19 SQL> -- Prepare for derivation of NTILE based parameters.
13:21:19 SQL> -- Also derive the "trend" parameter:
13:21:19 SQL> 
13:21:19 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
13:21:19 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
13:21:19   2  SELECT
13:21:19   3  tkr
13:21:19   4  ,ydate
13:21:19   5  ,tkrdate
13:21:19   6  ,clse
13:21:19   7  ,g1
13:21:19   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
13:21:19   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
13:21:19  10  ,CASE WHEN trend IS NULL THEN 1
13:21:19  11  	    WHEN trend =0      THEN 1
13:21:19  12  	    ELSE trend END trend
13:21:19  13  ,cm3
13:21:19  14  ,cm4
13:21:19  15  ,cm5
13:21:19  16  ,cm6
13:21:19  17  ,cm7
13:21:19  18  ,cm8
13:21:19  19  ,cm9
13:21:19  20  ,ca3
13:21:19  21  ,ca4
13:21:19  22  ,ca5
13:21:19  23  ,ca6
13:21:19  24  ,ca7
13:21:19  25  ,ca8
13:21:19  26  ,ca9
13:21:19  27  ,cx3
13:21:19  28  ,cx4
13:21:19  29  ,cx5
13:21:19  30  ,cx6
13:21:19  31  ,cx7
13:21:19  32  ,cx8
13:21:19  33  ,cx9
13:21:19  34  ,hh
13:21:19  35  ,d
13:21:19  36  ,w
13:21:19  37  ,mpm
13:21:19  38  ,mph
13:21:19  39  FROM stk_svmd12
13:21:19  40  -- Guard against divide by 0:
13:21:19  41  WHERE clse > 0
13:21:19  42  ORDER BY ydate
13:21:19  43  /

Table created.

Elapsed: 00:00:00.11
13:21:19 SQL> 
13:21:19 SQL> -- rpt
13:21:19 SQL> 
13:21:19 SQL> SELECT
13:21:19   2  tkr
13:21:19   3  ,trend
13:21:19   4  ,gatt
13:21:19   5  ,COUNT(tkr)
13:21:19   6  ,AVG(g1)
13:21:19   7  FROM stk_svmd14
13:21:19   8  GROUP BY tkr,trend,gatt
13:21:19   9  ORDER BY tkr,trend,gatt
13:21:19  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AXP		  -1 nup       1336  -.3666991
AXP		  -1 up        1147 .512938099
AXP		   1 nup       1686 -.33414591
AXP		   1 up        1156 .437733564
AXP		   1		  1

Elapsed: 00:00:00.01
13:21:19 SQL> 
13:21:19 SQL> -- Derive NTILE based params:
13:21:19 SQL> 
13:21:19 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.04
13:21:19 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
13:21:19   2  SELECT
13:21:19   3  tkr
13:21:19   4  ,ydate
13:21:19   5  ,tkrdate
13:21:19   6  ,clse
13:21:19   7  ,g1
13:21:19   8  ,gatt
13:21:19   9  ,gattn
13:21:19  10  ,trend
13:21:19  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
13:21:19  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
13:21:19  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
13:21:19  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
13:21:19  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
13:21:19  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
13:21:19  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
13:21:19  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
13:21:19  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
13:21:19  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
13:21:19  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
13:21:19  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
13:21:19  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
13:21:19  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
13:21:19  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
13:21:19  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
13:21:19  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
13:21:19  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
13:21:19  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
13:21:19  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
13:21:19  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
13:21:19  32  ,hh  att21
13:21:19  33  ,d   att22
13:21:19  34  ,w   att23
13:21:19  35  ,mpm att24
13:21:19  36  ,mph att25
13:21:19  37  ,trend att26
13:21:19  38  FROM stk_svmd14
13:21:19  39  ORDER BY ydate
13:21:19  40  /

Table created.

Elapsed: 00:00:00.64
13:21:20 SQL> 
13:21:20 SQL> -- rpt
13:21:20 SQL> 
13:21:20 SQL> SELECT
13:21:20   2  tkr
13:21:20   3  ,trend
13:21:20   4  ,gatt
13:21:20   5  ,COUNT(tkr)
13:21:20   6  ,AVG(g1)
13:21:20   7  FROM stk_svmd16
13:21:20   8  GROUP BY tkr,trend,gatt
13:21:20   9  ORDER BY tkr,trend,gatt
13:21:20  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AXP		  -1 nup       1336  -.3666991
AXP		  -1 up        1147 .512938099
AXP		   1 nup       1686 -.33414591
AXP		   1 up        1156 .437733564
AXP		   1		  1

Elapsed: 00:00:00.01
13:21:20 SQL> 
13:21:20 SQL> -- Comment out feedback related syntax:
13:21:20 SQL> 
13:21:20 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
13:21:20 SQL> -- SELECT
13:21:20 SQL> -- m.tkr
13:21:20 SQL> -- ,m.ydate
13:21:20 SQL> -- ,m.tkrdate
13:21:20 SQL> -- ,l.score score_long
13:21:20 SQL> -- ,s.score score_short
13:21:20 SQL> -- ,m.g1
13:21:20 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
13:21:20 SQL> -- WHERE l.targ='gatt'
13:21:20 SQL> -- AND	 s.targ='gattn'
13:21:20 SQL> -- AND l.tkrdate = s.tkrdate
13:21:20 SQL> -- AND l.tkrdate = m.tkrdate
13:21:20 SQL> -- -- Speed things up:
13:21:20 SQL> -- AND l.tkr = '&1'
13:21:20 SQL> -- AND s.tkr = '&1'
13:21:20 SQL> -- /
13:21:20 SQL> --
13:21:20 SQL> -- DROP TABLE score_corr_tkr;
13:21:20 SQL> --
13:21:20 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
13:21:20 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
13:21:20 SQL> -- (
13:21:20 SQL> --   SELECT
13:21:20 SQL> --   tkrdate
13:21:20 SQL> --   -- Find corr() tween score and g1 over 8 day period:
13:21:20 SQL> --   ,CORR((score_long - score_short),g1)
13:21:20 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
13:21:20 SQL> --   FROM sc12tkr
13:21:20 SQL> -- )
13:21:20 SQL> -- GROUP BY tkrdate
13:21:20 SQL> -- /
13:21:20 SQL> 
13:21:20 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
13:21:20 SQL> 
13:21:20 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.07
13:21:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
13:21:20 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
13:21:20   2  SELECT
13:21:20   3  tkr
13:21:20   4  ,ydate
13:21:20   5  ,tkrdate
13:21:20   6  ,trend
13:21:20   7  ,g1
13:21:20   8  ,gatt
13:21:20   9  ,gattn
13:21:20  10  -- Goodness attributes:
13:21:20  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
13:21:20  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
13:21:20  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
13:21:20  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
13:21:20  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
13:21:20  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
13:21:20  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
13:21:20  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
13:21:20  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
13:21:20  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
13:21:20  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
13:21:20  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
13:21:20  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
13:21:20  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
13:21:20  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
13:21:20  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
13:21:20  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
13:21:20  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
13:21:20  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
13:21:20  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
13:21:20  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
13:21:20  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
13:21:20  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
13:21:20  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
13:21:20  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
13:21:20  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
13:21:20  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
13:21:20  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
13:21:20  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
13:21:20  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
13:21:20  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
13:21:20  42  FROM stk_svmd16
13:21:20  43  /

Table created.

Elapsed: 00:00:01.00
13:21:21 SQL> 
13:21:21 SQL> -- rpt
13:21:21 SQL> 
13:21:21 SQL> SELECT
13:21:21   2  tkr
13:21:21   3  ,trend
13:21:21   4  ,gatt
13:21:21   5  ,COUNT(tkr)
13:21:21   6  ,AVG(g1)
13:21:21   7  FROM stk_ms_svmd_svmspy
13:21:21   8  GROUP BY tkr,trend,gatt
13:21:21   9  ORDER BY tkr,trend,gatt
13:21:21  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AXP		  -1 nup       1336  -.3666991
AXP		  -1 up        1147 .512938099
AXP		   1 nup       1686 -.33414591
AXP		   1 up        1156 .437733564
AXP		   1		  1

Elapsed: 00:00:00.01
13:21:21 SQL> 
13:21:21 SQL> SELECT
13:21:21   2  tkr
13:21:21   3  ,COUNT(tkr)
13:21:21   4  ,MIN(ydate),MAX(ydate)
13:21:21   5  FROM stk_ms_svmd_svmspy
13:21:21   6  GROUP BY tkr
13:21:21   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
AXP		5326 1990-01-02 20:00:00 2011-04-25 20:00:00

Elapsed: 00:00:00.00
13:21:21 SQL> 
13:21:21 SQL> -- exit
13:21:21 SQL> 
13:21:21 SQL> 
13:21:21 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.17
13:21:22 SQL> 
13:21:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
13:21:22 SQL> 
13:21:22 SQL> CREATE TABLE stk_ms_u COMPRESS AS
13:21:22   2  SELECT * FROM stk_ms_svmspy
13:21:22   3  UNION
13:21:22   4  SELECT * FROM stk_ms_svmd_svmspy
13:21:22   5  /

Table created.

Elapsed: 00:00:00.23
13:21:22 SQL> 
13:21:22 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
