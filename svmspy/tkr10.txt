
SQL*Plus: Release 11.2.0.1.0 Production on Sun Apr 10 03:29:23 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:29:23 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:29:23 SQL> 
03:29:23 SQL> 03:29:23 SQL> --
03:29:23 SQL> -- stk10u.sql
03:29:23 SQL> --
03:29:23 SQL> 
03:29:23 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
03:29:23 SQL> 
03:29:23 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
03:29:23 SQL> @stk10.sql     '&1'
03:29:23 SQL> --
03:29:23 SQL> -- stk10.sql
03:29:23 SQL> --
03:29:23 SQL> 
03:29:23 SQL> -- Creates views and tables for demonstrating SVM.
03:29:23 SQL> 
03:29:23 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.10
03:29:23 SQL> 
03:29:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.12
03:29:23 SQL> 
03:29:23 SQL> CREATE TABLE stk10svmspy COMPRESS AS
03:29:23   2  SELECT
03:29:23   3  tkr
03:29:23   4  ,ydate
03:29:23   5  ,tkr||ydate tkrdate
03:29:23   6  ,clse
03:29:23   7  ,clse2
03:29:23   8  ,rownum rnum -- acts as t in my time-series
03:29:23   9  -- g1 is important. I want to predict g1:
03:29:23  10  ,gain1day g1
03:29:23  11  -- Derive some attributes from clse.
03:29:23  12  -- Each row spans 5 minutes.
03:29:23  13  -- The number of rows in 1 day is 24*60/5.
03:29:23  14  -- I want the aggregations to span from 3 days to 9 days:
03:29:23  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
03:29:23  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
03:29:23  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
03:29:23  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
03:29:23  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
03:29:23  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
03:29:23  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
03:29:23  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
03:29:23  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
03:29:23  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
03:29:23  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
03:29:23  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
03:29:23  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
03:29:23  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
03:29:23  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
03:29:23  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
03:29:23  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
03:29:23  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
03:29:23  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
03:29:23  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
03:29:23  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
03:29:23  36  FROM di5min_stk_c2
03:29:23  37  WHERE UPPER(tkr)='&1'
03:29:23  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
03:29:23  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
03:29:23  40  ORDER BY ydate
03:29:23  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='UPS'

Table created.

Elapsed: 00:00:00.90
03:29:24 SQL> 
03:29:24 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
03:29:24 SQL> 
03:29:24 SQL> -- rpt
03:29:24 SQL> 
03:29:24 SQL> SELECT
03:29:24   2  tkr
03:29:24   3  ,COUNT(tkr)ccount
03:29:24   4  ,MIN(clse)mnclse,MAX(clse)mxclse
03:29:24   5  -- ,MIN(avg4),MAX(avg4)
03:29:24   6  ,MIN(ydate),MAX(ydate)
03:29:24   7  ,MIN(g1)
03:29:24   8  ,MAX(g1)
03:29:24   9  FROM stk10svmspy
03:29:24  10  GROUP BY tkr
03:29:24  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
UPS	      5226	70.24	   76.97 2011-01-04 14:30:00 2011-04-08 19:55:00 -2.3556763	  4.15

Elapsed: 00:00:00.02
03:29:24 SQL> 
03:29:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:29:24 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.23
03:29:25 SQL> CREATE TABLE stk12svmspy COMPRESS AS
03:29:25   2  SELECT
03:29:25   3  tkr
03:29:25   4  ,ydate
03:29:25   5  ,tkrdate
03:29:25   6  ,clse
03:29:25   7  ,rnum
03:29:25   8  ,g1
03:29:25   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
03:29:25  10  -- I want more attributes from the ones I derived above:
03:29:25  11  -- clse relation to moving-min
03:29:25  12  ,clse-min3  cm3
03:29:25  13  ,clse-min4  cm4
03:29:25  14  ,clse-min5  cm5
03:29:25  15  ,clse-min6  cm6
03:29:25  16  ,clse-min7  cm7
03:29:25  17  ,clse-min8  cm8
03:29:25  18  ,clse-min9  cm9
03:29:25  19  -- clse relation to moving-avg
03:29:25  20  ,clse-avg3  ca3
03:29:25  21  ,clse-avg4  ca4
03:29:25  22  ,clse-avg5  ca5
03:29:25  23  ,clse-avg6  ca6
03:29:25  24  ,clse-avg7  ca7
03:29:25  25  ,clse-avg8  ca8
03:29:25  26  ,clse-avg9  ca9
03:29:25  27  -- clse relation to moving-max
03:29:25  28  ,clse-max3  cx3
03:29:25  29  ,clse-max4  cx4
03:29:25  30  ,clse-max5  cx5
03:29:25  31  ,clse-max6  cx6
03:29:25  32  ,clse-max7  cx7
03:29:25  33  ,clse-max8  cx8
03:29:25  34  ,clse-max9  cx9
03:29:25  35  -- Derive date related attributes:
03:29:25  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:29:25  37  ,0+TO_CHAR(ydate,'D')d
03:29:25  38  ,0+TO_CHAR(ydate,'W')w
03:29:25  39  -- mpm stands for minutes-past-midnight:
03:29:25  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:29:25  41  -- mph stands for minutes-past-hour:
03:29:25  42  ,0+TO_CHAR(ydate,'MI')mph
03:29:25  43  FROM stk10svmspy
03:29:25  44  ORDER BY ydate
03:29:25  45  /

Table created.

Elapsed: 00:00:00.20
03:29:25 SQL> 
03:29:25 SQL> -- rpt
03:29:25 SQL> 
03:29:25 SQL> SELECT
03:29:25   2  tkr
03:29:25   3  ,COUNT(tkr)ccount
03:29:25   4  ,MIN(clse)mnclse,MAX(clse)mxclse
03:29:25   5  -- ,MIN(avg4),MAX(avg4)
03:29:25   6  ,MIN(ydate),MAX(ydate)
03:29:25   7  ,MIN(g1)
03:29:25   8  ,AVG(g1)
03:29:25   9  ,MAX(g1)
03:29:25  10  FROM stk12svmspy
03:29:25  11  GROUP BY tkr
03:29:25  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
UPS	      5226	70.24	   76.97 2011-01-04 14:30:00 2011-04-08 19:55:00 -2.3556763 .033150626	     4.15

Elapsed: 00:00:00.02
03:29:25 SQL> 
03:29:25 SQL> -- Prepare for derivation of NTILE based parameters.
03:29:25 SQL> -- Also derive the "trend" parameter:
03:29:25 SQL> 
03:29:25 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.05
03:29:25 SQL> CREATE TABLE stk14svmspy COMPRESS AS
03:29:25   2  SELECT
03:29:25   3  tkr
03:29:25   4  ,ydate
03:29:25   5  ,tkrdate
03:29:25   6  ,clse
03:29:25   7  ,g1
03:29:25   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
03:29:25   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
03:29:25  10  ,CASE WHEN trend IS NULL THEN 1
03:29:25  11  	    WHEN trend =0      THEN 1
03:29:25  12  	    ELSE trend END trend
03:29:25  13  ,cm3
03:29:25  14  ,cm4
03:29:25  15  ,cm5
03:29:25  16  ,cm6
03:29:25  17  ,cm7
03:29:25  18  ,cm8
03:29:25  19  ,cm9
03:29:25  20  ,ca3
03:29:25  21  ,ca4
03:29:25  22  ,ca5
03:29:25  23  ,ca6
03:29:25  24  ,ca7
03:29:25  25  ,ca8
03:29:25  26  ,ca9
03:29:25  27  ,cx3
03:29:25  28  ,cx4
03:29:25  29  ,cx5
03:29:25  30  ,cx6
03:29:25  31  ,cx7
03:29:25  32  ,cx8
03:29:25  33  ,cx9
03:29:25  34  ,hh
03:29:25  35  ,d
03:29:25  36  ,w
03:29:25  37  ,mpm
03:29:25  38  ,mph
03:29:25  39  FROM stk12svmspy
03:29:25  40  -- Guard against divide by 0:
03:29:25  41  WHERE clse > 0
03:29:25  42  ORDER BY ydate
03:29:25  43  /

Table created.

Elapsed: 00:00:00.16
03:29:25 SQL> 
03:29:25 SQL> -- rpt
03:29:25 SQL> 
03:29:25 SQL> SELECT
03:29:25   2  tkr
03:29:25   3  ,trend
03:29:25   4  ,gatt
03:29:25   5  ,COUNT(tkr)
03:29:25   6  ,AVG(g1)
03:29:25   7  FROM stk14svmspy
03:29:25   8  GROUP BY tkr,trend,gatt
03:29:25   9  ORDER BY tkr,trend,gatt
03:29:25  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
UPS		-1 nup	     1389 -.51244072
UPS		-1 up	     1044 .959676752
UPS		-1	       19
UPS		 1 nup	     1825 -.32970237
UPS		 1 up	      722 .660214083
UPS		 1	      227

6 rows selected.

Elapsed: 00:00:00.02
03:29:25 SQL> 
03:29:25 SQL> -- Derive NTILE based params:
03:29:25 SQL> 
03:29:25 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.05
03:29:25 SQL> CREATE TABLE stk16svmspy COMPRESS AS
03:29:25   2  SELECT
03:29:25   3  tkr
03:29:25   4  ,ydate
03:29:25   5  ,tkrdate
03:29:25   6  ,clse
03:29:25   7  ,g1
03:29:25   8  ,gatt
03:29:25   9  ,gattn
03:29:25  10  ,trend
03:29:25  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
03:29:25  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
03:29:25  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
03:29:25  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
03:29:25  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
03:29:25  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
03:29:25  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
03:29:25  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
03:29:25  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
03:29:25  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
03:29:25  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
03:29:25  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
03:29:25  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
03:29:25  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
03:29:25  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
03:29:25  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
03:29:25  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
03:29:25  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
03:29:25  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
03:29:25  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
03:29:25  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
03:29:25  32  ,hh  att21
03:29:25  33  ,d   att22
03:29:25  34  ,w   att23
03:29:25  35  ,mpm att24
03:29:25  36  ,mph att25
03:29:25  37  ,trend att26
03:29:25  38  FROM stk14svmspy
03:29:25  39  ORDER BY ydate
03:29:25  40  /

Table created.

Elapsed: 00:00:00.77
03:29:26 SQL> 
03:29:26 SQL> -- rpt
03:29:26 SQL> 
03:29:26 SQL> SELECT
03:29:26   2  tkr
03:29:26   3  ,trend
03:29:26   4  ,gatt
03:29:26   5  ,COUNT(tkr)
03:29:26   6  ,AVG(g1)
03:29:26   7  FROM stk16svmspy
03:29:26   8  GROUP BY tkr,trend,gatt
03:29:26   9  ORDER BY tkr,trend,gatt
03:29:26  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
UPS		-1 nup	     1389 -.51244072
UPS		-1 up	     1044 .959676752
UPS		-1	       19
UPS		 1 nup	     1825 -.32970237
UPS		 1 up	      722 .660214083
UPS		 1	      227

6 rows selected.

Elapsed: 00:00:00.01
03:29:26 SQL> 
03:29:26 SQL> -- Comment out feedback related syntax:
03:29:26 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
03:29:26 SQL> -- SELECT
03:29:26 SQL> -- m.tkr
03:29:26 SQL> -- ,m.ydate
03:29:26 SQL> -- ,m.tkrdate
03:29:26 SQL> -- ,l.score score_long
03:29:26 SQL> -- ,s.score score_short
03:29:26 SQL> -- ,m.g1
03:29:26 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
03:29:26 SQL> -- WHERE l.targ='gatt'
03:29:26 SQL> -- AND	 s.targ='gattn'
03:29:26 SQL> -- AND l.tkrdate = s.tkrdate
03:29:26 SQL> -- AND l.tkrdate = m.tkrdate
03:29:26 SQL> -- -- Speed things up:
03:29:26 SQL> -- AND l.tkr = '&1'
03:29:26 SQL> -- AND s.tkr = '&1'
03:29:26 SQL> -- /
03:29:26 SQL> --
03:29:26 SQL> -- DROP TABLE score_corr_tkr;
03:29:26 SQL> --
03:29:26 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
03:29:26 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
03:29:26 SQL> -- (
03:29:26 SQL> --   SELECT
03:29:26 SQL> --   tkrdate
03:29:26 SQL> --   -- Find corr() tween score and g1 over 8 day period:
03:29:26 SQL> --   ,CORR((score_long - score_short),g1)
03:29:26 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
03:29:26 SQL> --   FROM sc12tkr
03:29:26 SQL> -- )
03:29:26 SQL> -- GROUP BY tkrdate
03:29:26 SQL> -- /
03:29:26 SQL> 
03:29:26 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
03:29:26 SQL> 
03:29:26 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.16
03:29:26 SQL> 
03:29:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
03:29:26 SQL> 
03:29:26 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
03:29:26   2  SELECT
03:29:26   3  tkr
03:29:26   4  ,ydate
03:29:26   5  ,tkrdate
03:29:26   6  ,trend
03:29:26   7  ,g1
03:29:26   8  ,gatt
03:29:26   9  ,gattn
03:29:26  10  -- Goodness attributes:
03:29:26  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
03:29:26  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
03:29:26  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
03:29:26  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
03:29:26  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
03:29:26  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
03:29:26  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
03:29:26  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
03:29:26  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
03:29:26  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
03:29:26  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
03:29:26  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
03:29:26  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
03:29:26  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
03:29:26  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
03:29:26  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
03:29:26  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
03:29:26  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
03:29:26  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
03:29:26  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
03:29:26  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
03:29:26  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
03:29:26  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
03:29:26  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
03:29:26  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
03:29:26  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
03:29:26  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
03:29:26  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
03:29:26  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
03:29:26  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
03:29:26  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
03:29:26  42  FROM stk16svmspy
03:29:26  43  /

Table created.

Elapsed: 00:00:00.96
03:29:27 SQL> 
03:29:27 SQL> -- rpt
03:29:27 SQL> 
03:29:27 SQL> SELECT
03:29:27   2  tkr
03:29:27   3  ,trend
03:29:27   4  ,gatt
03:29:27   5  ,COUNT(tkr)
03:29:27   6  ,AVG(g1)
03:29:27   7  FROM stk_ms_svmspy
03:29:27   8  GROUP BY tkr,trend,gatt
03:29:27   9  ORDER BY tkr,trend,gatt
03:29:27  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
UPS		-1 nup	     1389 -.51244072
UPS		-1 up	     1044 .959676752
UPS		-1	       19
UPS		 1 nup	     1825 -.32970237
UPS		 1 up	      722 .660214083
UPS		 1	      227

6 rows selected.

Elapsed: 00:00:00.02
03:29:27 SQL> 
03:29:27 SQL> SELECT
03:29:27   2  tkr
03:29:27   3  ,0+TO_CHAR(ydate,'D')daynum
03:29:27   4  ,COUNT(tkr)
03:29:27   5  ,MIN(ydate),MAX(ydate)
03:29:27   6  FROM stk_ms_svmspy
03:29:27   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
03:29:27   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
03:29:27   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
UPS		 2	  858 2011-01-10 14:30:00 2011-04-04 19:55:00
UPS		 3	 1092 2011-01-04 14:30:00 2011-04-05 19:55:00
UPS		 4	 1092 2011-01-05 14:30:00 2011-04-06 19:55:00
UPS		 5	 1092 2011-01-06 14:30:00 2011-04-07 19:55:00
UPS		 6	 1092 2011-01-07 14:30:00 2011-04-08 19:55:00

Elapsed: 00:00:00.01
03:29:27 SQL> 
03:29:27 SQL> -- exit
03:29:27 SQL> @stk10svmd.sql '&1'
03:29:27 SQL> --
03:29:27 SQL> -- stk10svmd.sql
03:29:27 SQL> --
03:29:27 SQL> 
03:29:27 SQL> -- Creates views and tables for demonstrating SVM.
03:29:27 SQL> -- I need to run this after I run stk10.sql
03:29:27 SQL> 
03:29:27 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.11
03:29:28 SQL> 
03:29:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.14
03:29:28 SQL> 
03:29:28 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
03:29:28   2  SELECT
03:29:28   3  tkr
03:29:28   4  ,ydate
03:29:28   5  ,tkr||ydate tkrdate
03:29:28   6  ,clse
03:29:28   7  ,rownum rnum -- acts as t in my time-series
03:29:28   8  -- Derive some attributes from clse.
03:29:28   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
03:29:28  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
03:29:28  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
03:29:28  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
03:29:28  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
03:29:28  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
03:29:28  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
03:29:28  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
03:29:28  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
03:29:28  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
03:29:28  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
03:29:28  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
03:29:28  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
03:29:28  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
03:29:28  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
03:29:28  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
03:29:28  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
03:29:28  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
03:29:28  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
03:29:28  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
03:29:28  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
03:29:28  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
03:29:28  31  -- ystk21 created here: svmd/cr_ystk21.sql
03:29:28  32  FROM ystk21
03:29:28  33  WHERE UPPER(tkr)='&1'
03:29:28  34  AND ydate > '1990-01-01'
03:29:28  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
03:29:28  36  ORDER BY ydate
03:29:28  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='UPS'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='UPS')

Table created.

Elapsed: 00:00:04.18
03:29:32 SQL> 
03:29:32 SQL> -- rpt
03:29:32 SQL> 
03:29:32 SQL> SELECT
03:29:32   2  tkr
03:29:32   3  ,COUNT(tkr)
03:29:32   4  ,MIN(clse),MAX(clse)
03:29:32   5  ,MIN(avg4),MAX(avg4)
03:29:32   6  ,MIN(ydate),MAX(ydate)
03:29:32   7  FROM stk_svmd10svmspy
03:29:32   8  GROUP BY tkr
03:29:32   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
UPS		2864	  36.03      76.47	37.03	  75.612 1999-11-10 21:00:00 2011-04-08 21:00:00

Elapsed: 00:00:00.02
03:29:32 SQL> 
03:29:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:29:32 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:09.41
03:29:41 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
03:29:41   2  SELECT
03:29:41   3  tkr
03:29:41   4  ,ydate
03:29:41   5  ,tkrdate
03:29:41   6  ,clse
03:29:41   7  ,rnum
03:29:41   8  -- g1 is important. I want to predict g1:
03:29:41   9  ,ld - clse g1
03:29:41  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
03:29:41  11  -- I want more attributes from the ones I derived above:
03:29:41  12  -- clse relation to moving-min
03:29:41  13  ,clse-min3  cm3
03:29:41  14  ,clse-min4  cm4
03:29:41  15  ,clse-min5  cm5
03:29:41  16  ,clse-min6  cm6
03:29:41  17  ,clse-min7  cm7
03:29:41  18  ,clse-min8  cm8
03:29:41  19  ,clse-min9  cm9
03:29:41  20  -- clse relation to moving-avg
03:29:41  21  ,clse-avg3  ca3
03:29:41  22  ,clse-avg4  ca4
03:29:41  23  ,clse-avg5  ca5
03:29:41  24  ,clse-avg6  ca6
03:29:41  25  ,clse-avg7  ca7
03:29:41  26  ,clse-avg8  ca8
03:29:41  27  ,clse-avg9  ca9
03:29:41  28  -- clse relation to moving-max
03:29:41  29  ,clse-max3  cx3
03:29:41  30  ,clse-max4  cx4
03:29:41  31  ,clse-max5  cx5
03:29:41  32  ,clse-max6  cx6
03:29:41  33  ,clse-max7  cx7
03:29:41  34  ,clse-max8  cx8
03:29:41  35  ,clse-max9  cx9
03:29:41  36  -- Derive date related attributes:
03:29:41  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:29:41  38  ,0+TO_CHAR(ydate,'D')d
03:29:41  39  ,0+TO_CHAR(ydate,'W')w
03:29:41  40  -- mpm stands for minutes-past-midnight:
03:29:41  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:29:41  42  -- mph stands for minutes-past-hour:
03:29:41  43  ,0+TO_CHAR(ydate,'MI')mph
03:29:41  44  FROM stk_svmd10svmspy
03:29:41  45  ORDER BY ydate
03:29:41  46  /

Table created.

Elapsed: 00:00:00.33
03:29:42 SQL> 
03:29:42 SQL> -- rpt
03:29:42 SQL> 
03:29:42 SQL> SELECT
03:29:42   2  tkr
03:29:42   3  ,COUNT(tkr)
03:29:42   4  ,MIN(clse),MAX(clse)
03:29:42   5  ,MIN(ydate),MAX(ydate)
03:29:42   6  FROM stk_svmd12
03:29:42   7  GROUP BY tkr
03:29:42   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
UPS		2864	  36.03      76.47 1999-11-10 21:00:00 2011-04-08 21:00:00

Elapsed: 00:00:00.02
03:29:42 SQL> 
03:29:42 SQL> -- Prepare for derivation of NTILE based parameters.
03:29:42 SQL> -- Also derive the "trend" parameter:
03:29:42 SQL> 
03:29:42 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.35
03:29:42 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
03:29:42   2  SELECT
03:29:42   3  tkr
03:29:42   4  ,ydate
03:29:42   5  ,tkrdate
03:29:42   6  ,clse
03:29:42   7  ,g1
03:29:42   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
03:29:42   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
03:29:42  10  ,CASE WHEN trend IS NULL THEN 1
03:29:42  11  	    WHEN trend =0      THEN 1
03:29:42  12  	    ELSE trend END trend
03:29:42  13  ,cm3
03:29:42  14  ,cm4
03:29:42  15  ,cm5
03:29:42  16  ,cm6
03:29:42  17  ,cm7
03:29:42  18  ,cm8
03:29:42  19  ,cm9
03:29:42  20  ,ca3
03:29:42  21  ,ca4
03:29:42  22  ,ca5
03:29:42  23  ,ca6
03:29:42  24  ,ca7
03:29:42  25  ,ca8
03:29:42  26  ,ca9
03:29:42  27  ,cx3
03:29:42  28  ,cx4
03:29:42  29  ,cx5
03:29:42  30  ,cx6
03:29:42  31  ,cx7
03:29:42  32  ,cx8
03:29:42  33  ,cx9
03:29:42  34  ,hh
03:29:42  35  ,d
03:29:42  36  ,w
03:29:42  37  ,mpm
03:29:42  38  ,mph
03:29:42  39  FROM stk_svmd12
03:29:42  40  -- Guard against divide by 0:
03:29:42  41  WHERE clse > 0
03:29:42  42  ORDER BY ydate
03:29:42  43  /

Table created.

Elapsed: 00:00:00.30
03:29:42 SQL> 
03:29:42 SQL> -- rpt
03:29:42 SQL> 
03:29:42 SQL> SELECT
03:29:42   2  tkr
03:29:42   3  ,trend
03:29:42   4  ,gatt
03:29:42   5  ,COUNT(tkr)
03:29:42   6  ,AVG(g1)
03:29:42   7  FROM stk_svmd14
03:29:42   8  GROUP BY tkr,trend,gatt
03:29:42   9  ORDER BY tkr,trend,gatt
03:29:42  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
UPS		  -1 nup	810 -.46538272
UPS		  -1 up 	517 .823636364
UPS		  -1		  1
UPS		   1 nup	990 -.42390909
UPS		   1 up 	546 .714945055

Elapsed: 00:00:00.01
03:29:42 SQL> 
03:29:42 SQL> -- Derive NTILE based params:
03:29:42 SQL> 
03:29:42 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.11
03:29:42 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
03:29:42   2  SELECT
03:29:42   3  tkr
03:29:42   4  ,ydate
03:29:42   5  ,tkrdate
03:29:42   6  ,clse
03:29:42   7  ,g1
03:29:42   8  ,gatt
03:29:42   9  ,gattn
03:29:42  10  ,trend
03:29:42  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
03:29:42  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
03:29:42  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
03:29:42  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
03:29:42  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
03:29:42  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
03:29:42  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
03:29:42  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
03:29:42  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
03:29:42  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
03:29:42  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
03:29:42  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
03:29:42  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
03:29:42  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
03:29:42  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
03:29:42  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
03:29:42  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
03:29:42  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
03:29:42  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
03:29:42  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
03:29:42  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
03:29:42  32  ,hh  att21
03:29:42  33  ,d   att22
03:29:42  34  ,w   att23
03:29:42  35  ,mpm att24
03:29:42  36  ,mph att25
03:29:42  37  ,trend att26
03:29:42  38  FROM stk_svmd14
03:29:42  39  ORDER BY ydate
03:29:42  40  /

Table created.

Elapsed: 00:00:00.39
03:29:43 SQL> 
03:29:43 SQL> -- rpt
03:29:43 SQL> 
03:29:43 SQL> SELECT
03:29:43   2  tkr
03:29:43   3  ,trend
03:29:43   4  ,gatt
03:29:43   5  ,COUNT(tkr)
03:29:43   6  ,AVG(g1)
03:29:43   7  FROM stk_svmd16
03:29:43   8  GROUP BY tkr,trend,gatt
03:29:43   9  ORDER BY tkr,trend,gatt
03:29:43  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
UPS		  -1 nup	810 -.46538272
UPS		  -1 up 	517 .823636364
UPS		  -1		  1
UPS		   1 nup	990 -.42390909
UPS		   1 up 	546 .714945055

Elapsed: 00:00:00.00
03:29:43 SQL> 
03:29:43 SQL> -- Comment out feedback related syntax:
03:29:43 SQL> 
03:29:43 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
03:29:43 SQL> -- SELECT
03:29:43 SQL> -- m.tkr
03:29:43 SQL> -- ,m.ydate
03:29:43 SQL> -- ,m.tkrdate
03:29:43 SQL> -- ,l.score score_long
03:29:43 SQL> -- ,s.score score_short
03:29:43 SQL> -- ,m.g1
03:29:43 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
03:29:43 SQL> -- WHERE l.targ='gatt'
03:29:43 SQL> -- AND	 s.targ='gattn'
03:29:43 SQL> -- AND l.tkrdate = s.tkrdate
03:29:43 SQL> -- AND l.tkrdate = m.tkrdate
03:29:43 SQL> -- -- Speed things up:
03:29:43 SQL> -- AND l.tkr = '&1'
03:29:43 SQL> -- AND s.tkr = '&1'
03:29:43 SQL> -- /
03:29:43 SQL> --
03:29:43 SQL> -- DROP TABLE score_corr_tkr;
03:29:43 SQL> --
03:29:43 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
03:29:43 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
03:29:43 SQL> -- (
03:29:43 SQL> --   SELECT
03:29:43 SQL> --   tkrdate
03:29:43 SQL> --   -- Find corr() tween score and g1 over 8 day period:
03:29:43 SQL> --   ,CORR((score_long - score_short),g1)
03:29:43 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
03:29:43 SQL> --   FROM sc12tkr
03:29:43 SQL> -- )
03:29:43 SQL> -- GROUP BY tkrdate
03:29:43 SQL> -- /
03:29:43 SQL> 
03:29:43 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
03:29:43 SQL> 
03:29:43 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
03:29:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.75
03:29:44 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
03:29:44   2  SELECT
03:29:44   3  tkr
03:29:44   4  ,ydate
03:29:44   5  ,tkrdate
03:29:44   6  ,trend
03:29:44   7  ,g1
03:29:44   8  ,gatt
03:29:44   9  ,gattn
03:29:44  10  -- Goodness attributes:
03:29:44  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
03:29:44  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
03:29:44  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
03:29:44  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
03:29:44  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
03:29:44  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
03:29:44  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
03:29:44  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
03:29:44  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
03:29:44  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
03:29:44  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
03:29:44  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
03:29:44  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
03:29:44  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
03:29:44  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
03:29:44  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
03:29:44  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
03:29:44  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
03:29:44  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
03:29:44  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
03:29:44  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
03:29:44  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
03:29:44  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
03:29:44  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
03:29:44  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
03:29:44  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
03:29:44  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
03:29:44  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
03:29:44  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
03:29:44  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
03:29:44  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
03:29:44  42  FROM stk_svmd16
03:29:44  43  /

Table created.

Elapsed: 00:00:00.72
03:29:44 SQL> 
03:29:44 SQL> -- rpt
03:29:44 SQL> 
03:29:44 SQL> SELECT
03:29:44   2  tkr
03:29:44   3  ,trend
03:29:44   4  ,gatt
03:29:44   5  ,COUNT(tkr)
03:29:44   6  ,AVG(g1)
03:29:44   7  FROM stk_ms_svmd_svmspy
03:29:44   8  GROUP BY tkr,trend,gatt
03:29:44   9  ORDER BY tkr,trend,gatt
03:29:44  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
UPS		  -1 nup	810 -.46538272
UPS		  -1 up 	517 .823636364
UPS		  -1		  1
UPS		   1 nup	990 -.42390909
UPS		   1 up 	546 .714945055

Elapsed: 00:00:00.01
03:29:44 SQL> 
03:29:44 SQL> SELECT
03:29:44   2  tkr
03:29:44   3  ,COUNT(tkr)
03:29:44   4  ,MIN(ydate),MAX(ydate)
03:29:44   5  FROM stk_ms_svmd_svmspy
03:29:44   6  GROUP BY tkr
03:29:44   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
UPS		2864 1999-11-10 21:00:00 2011-04-08 21:00:00

Elapsed: 00:00:00.01
03:29:44 SQL> 
03:29:44 SQL> -- exit
03:29:44 SQL> 
03:29:44 SQL> 
03:29:44 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.06
03:29:44 SQL> 
03:29:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
03:29:45 SQL> 
03:29:45 SQL> CREATE TABLE stk_ms_u COMPRESS AS
03:29:45   2  SELECT * FROM stk_ms_svmspy
03:29:45   3  UNION
03:29:45   4  SELECT * FROM stk_ms_svmd_svmspy
03:29:45   5  /

Table created.

Elapsed: 00:00:00.19
03:29:45 SQL> 
03:29:45 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
