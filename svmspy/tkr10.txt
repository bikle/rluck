
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 16 21:03:27 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:03:27 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:03:27 SQL> 
21:03:27 SQL> 21:03:27 SQL> --
21:03:27 SQL> -- stk10u.sql
21:03:27 SQL> --
21:03:27 SQL> 
21:03:27 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
21:03:27 SQL> 
21:03:27 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
21:03:27 SQL> @stk10.sql     '&1'
21:03:27 SQL> --
21:03:27 SQL> -- stk10.sql
21:03:27 SQL> --
21:03:27 SQL> 
21:03:27 SQL> -- Creates views and tables for demonstrating SVM.
21:03:27 SQL> 
21:03:27 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.31
21:03:28 SQL> 
21:03:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
21:03:28 SQL> 
21:03:28 SQL> CREATE TABLE stk10svmspy COMPRESS AS
21:03:28   2  SELECT
21:03:28   3  tkr
21:03:28   4  ,ydate
21:03:28   5  ,tkr||ydate tkrdate
21:03:28   6  ,clse
21:03:28   7  ,clse2
21:03:28   8  ,rownum rnum -- acts as t in my time-series
21:03:28   9  -- g1 is important. I want to predict g1:
21:03:28  10  ,gain1day g1
21:03:28  11  -- Derive some attributes from clse.
21:03:28  12  -- Each row spans 5 minutes.
21:03:28  13  -- The number of rows in 1 day is 24*60/5.
21:03:28  14  -- I want the aggregations to span from 3 days to 9 days:
21:03:28  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
21:03:28  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
21:03:28  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
21:03:28  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
21:03:28  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
21:03:28  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
21:03:28  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
21:03:28  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
21:03:28  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
21:03:28  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
21:03:28  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
21:03:28  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
21:03:28  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
21:03:28  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
21:03:28  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
21:03:28  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
21:03:28  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
21:03:28  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
21:03:28  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
21:03:28  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
21:03:28  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
21:03:28  36  FROM di5min_stk_c2
21:03:28  37  WHERE UPPER(tkr)='&1'
21:03:28  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
21:03:28  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
21:03:28  40  ORDER BY ydate
21:03:28  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='QQQQ'

Table created.

Elapsed: 00:00:03.40
21:03:31 SQL> 
21:03:31 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.18
21:03:32 SQL> 
21:03:32 SQL> -- rpt
21:03:32 SQL> 
21:03:32 SQL> SELECT
21:03:32   2  tkr
21:03:32   3  ,COUNT(tkr)ccount
21:03:32   4  ,MIN(clse)mnclse,MAX(clse)mxclse
21:03:32   5  -- ,MIN(avg4),MAX(avg4)
21:03:32   6  ,MIN(ydate),MAX(ydate)
21:03:32   7  ,MIN(g1)
21:03:32   8  ,MAX(g1)
21:03:32   9  FROM stk10svmspy
21:03:32  10  GROUP BY tkr
21:03:32  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
QQQQ	     24815	 40.7	   57.01 2009-10-28 18:10:00 2011-01-14 20:55:00      -3.15	   2.5

Elapsed: 00:00:00.04
21:03:32 SQL> 
21:03:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:03:32 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.27
21:03:33 SQL> CREATE TABLE stk12svmspy COMPRESS AS
21:03:33   2  SELECT
21:03:33   3  tkr
21:03:33   4  ,ydate
21:03:33   5  ,tkrdate
21:03:33   6  ,clse
21:03:33   7  ,rnum
21:03:33   8  ,g1
21:03:33   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
21:03:33  10  -- I want more attributes from the ones I derived above:
21:03:33  11  -- clse relation to moving-min
21:03:33  12  ,clse-min3  cm3
21:03:33  13  ,clse-min4  cm4
21:03:33  14  ,clse-min5  cm5
21:03:33  15  ,clse-min6  cm6
21:03:33  16  ,clse-min7  cm7
21:03:33  17  ,clse-min8  cm8
21:03:33  18  ,clse-min9  cm9
21:03:33  19  -- clse relation to moving-avg
21:03:33  20  ,clse-avg3  ca3
21:03:33  21  ,clse-avg4  ca4
21:03:33  22  ,clse-avg5  ca5
21:03:33  23  ,clse-avg6  ca6
21:03:33  24  ,clse-avg7  ca7
21:03:33  25  ,clse-avg8  ca8
21:03:33  26  ,clse-avg9  ca9
21:03:33  27  -- clse relation to moving-max
21:03:33  28  ,clse-max3  cx3
21:03:33  29  ,clse-max4  cx4
21:03:33  30  ,clse-max5  cx5
21:03:33  31  ,clse-max6  cx6
21:03:33  32  ,clse-max7  cx7
21:03:33  33  ,clse-max8  cx8
21:03:33  34  ,clse-max9  cx9
21:03:33  35  -- Derive date related attributes:
21:03:33  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:03:33  37  ,0+TO_CHAR(ydate,'D')d
21:03:33  38  ,0+TO_CHAR(ydate,'W')w
21:03:33  39  -- mpm stands for minutes-past-midnight:
21:03:33  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:03:33  41  -- mph stands for minutes-past-hour:
21:03:33  42  ,0+TO_CHAR(ydate,'MI')mph
21:03:33  43  FROM stk10svmspy
21:03:33  44  ORDER BY ydate
21:03:33  45  /

Table created.

Elapsed: 00:00:00.68
21:03:33 SQL> 
21:03:33 SQL> -- rpt
21:03:33 SQL> 
21:03:33 SQL> SELECT
21:03:33   2  tkr
21:03:33   3  ,COUNT(tkr)ccount
21:03:33   4  ,MIN(clse)mnclse,MAX(clse)mxclse
21:03:33   5  -- ,MIN(avg4),MAX(avg4)
21:03:33   6  ,MIN(ydate),MAX(ydate)
21:03:33   7  ,MIN(g1)
21:03:33   8  ,AVG(g1)
21:03:33   9  ,MAX(g1)
21:03:33  10  FROM stk12svmspy
21:03:33  11  GROUP BY tkr
21:03:33  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
QQQQ	     24815	 40.7	   57.01 2009-10-28 18:10:00 2011-01-14 20:55:00      -3.15 .051300183	      2.5

Elapsed: 00:00:00.05
21:03:33 SQL> 
21:03:33 SQL> -- Prepare for derivation of NTILE based parameters.
21:03:33 SQL> -- Also derive the "trend" parameter:
21:03:33 SQL> 
21:03:33 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.20
21:03:34 SQL> CREATE TABLE stk14svmspy COMPRESS AS
21:03:34   2  SELECT
21:03:34   3  tkr
21:03:34   4  ,ydate
21:03:34   5  ,tkrdate
21:03:34   6  ,clse
21:03:34   7  ,g1
21:03:34   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
21:03:34   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
21:03:34  10  ,CASE WHEN trend IS NULL THEN 1
21:03:34  11  	    WHEN trend =0      THEN 1
21:03:34  12  	    ELSE trend END trend
21:03:34  13  ,cm3
21:03:34  14  ,cm4
21:03:34  15  ,cm5
21:03:34  16  ,cm6
21:03:34  17  ,cm7
21:03:34  18  ,cm8
21:03:34  19  ,cm9
21:03:34  20  ,ca3
21:03:34  21  ,ca4
21:03:34  22  ,ca5
21:03:34  23  ,ca6
21:03:34  24  ,ca7
21:03:34  25  ,ca8
21:03:34  26  ,ca9
21:03:34  27  ,cx3
21:03:34  28  ,cx4
21:03:34  29  ,cx5
21:03:34  30  ,cx6
21:03:34  31  ,cx7
21:03:34  32  ,cx8
21:03:34  33  ,cx9
21:03:34  34  ,hh
21:03:34  35  ,d
21:03:34  36  ,w
21:03:34  37  ,mpm
21:03:34  38  ,mph
21:03:34  39  FROM stk12svmspy
21:03:34  40  -- Guard against divide by 0:
21:03:34  41  WHERE clse > 0
21:03:34  42  ORDER BY ydate
21:03:34  43  /

Table created.

Elapsed: 00:00:00.33
21:03:34 SQL> 
21:03:34 SQL> -- rpt
21:03:34 SQL> 
21:03:34 SQL> SELECT
21:03:34   2  tkr
21:03:34   3  ,trend
21:03:34   4  ,gatt
21:03:34   5  ,COUNT(tkr)
21:03:34   6  ,AVG(g1)
21:03:34   7  FROM stk14svmspy
21:03:34   8  GROUP BY tkr,trend,gatt
21:03:34   9  ORDER BY tkr,trend,gatt
21:03:34  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     4335 -.42757555
QQQQ		-1 up	     3394 .574138922
QQQQ		-1	       20
QQQQ		 1 nup	     9725 -.20173535
QQQQ		 1 up	     7131 .438648682
QQQQ		 1	      210

6 rows selected.

Elapsed: 00:00:00.03
21:03:34 SQL> 
21:03:34 SQL> -- Derive NTILE based params:
21:03:34 SQL> 
21:03:34 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.17
21:03:34 SQL> CREATE TABLE stk16svmspy COMPRESS AS
21:03:34   2  SELECT
21:03:34   3  tkr
21:03:34   4  ,ydate
21:03:34   5  ,tkrdate
21:03:34   6  ,clse
21:03:34   7  ,g1
21:03:34   8  ,gatt
21:03:34   9  ,gattn
21:03:34  10  ,trend
21:03:34  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
21:03:34  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
21:03:34  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
21:03:34  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
21:03:34  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
21:03:34  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
21:03:34  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
21:03:34  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
21:03:34  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
21:03:34  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
21:03:34  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
21:03:34  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
21:03:34  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
21:03:34  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
21:03:34  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
21:03:34  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
21:03:34  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
21:03:34  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
21:03:34  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
21:03:34  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
21:03:34  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
21:03:34  32  ,hh  att21
21:03:34  33  ,d   att22
21:03:34  34  ,w   att23
21:03:34  35  ,mpm att24
21:03:34  36  ,mph att25
21:03:34  37  ,trend att26
21:03:34  38  FROM stk14svmspy
21:03:34  39  ORDER BY ydate
21:03:34  40  /

Table created.

Elapsed: 00:00:02.86
21:03:37 SQL> 
21:03:37 SQL> -- rpt
21:03:37 SQL> 
21:03:37 SQL> SELECT
21:03:37   2  tkr
21:03:37   3  ,trend
21:03:37   4  ,gatt
21:03:37   5  ,COUNT(tkr)
21:03:37   6  ,AVG(g1)
21:03:37   7  FROM stk16svmspy
21:03:37   8  GROUP BY tkr,trend,gatt
21:03:37   9  ORDER BY tkr,trend,gatt
21:03:37  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     4335 -.42757555
QQQQ		-1 up	     3394 .574138922
QQQQ		-1	       20
QQQQ		 1 nup	     9725 -.20173535
QQQQ		 1 up	     7131 .438648682
QQQQ		 1	      210

6 rows selected.

Elapsed: 00:00:00.04
21:03:37 SQL> 
21:03:37 SQL> -- Now I derive goodness attributes:
21:03:37 SQL> 
21:03:37 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.21
21:03:37 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
21:03:37   2  SELECT
21:03:37   3  tkr
21:03:37   4  ,ydate
21:03:37   5  ,tkrdate
21:03:37   6  ,trend
21:03:37   7  ,g1
21:03:37   8  ,gatt
21:03:37   9  ,gattn
21:03:37  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
21:03:37  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
21:03:37  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
21:03:37  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
21:03:37  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
21:03:37  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
21:03:37  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
21:03:37  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
21:03:37  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
21:03:37  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
21:03:37  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
21:03:37  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
21:03:37  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
21:03:37  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
21:03:37  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
21:03:37  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
21:03:37  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
21:03:37  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
21:03:37  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
21:03:37  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
21:03:37  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
21:03:37  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
21:03:37  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
21:03:37  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
21:03:37  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
21:03:37  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
21:03:37  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
21:03:37  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
21:03:37  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
21:03:37  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
21:03:37  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
21:03:37  41  FROM stk16svmspy
21:03:37  42  /

Table created.

Elapsed: 00:00:03.75
21:03:41 SQL> 
21:03:41 SQL> -- rpt
21:03:41 SQL> 
21:03:41 SQL> SELECT
21:03:41   2  tkr
21:03:41   3  ,trend
21:03:41   4  ,gatt
21:03:41   5  ,COUNT(tkr)
21:03:41   6  ,AVG(g1)
21:03:41   7  FROM stk_ms_svmspy
21:03:41   8  GROUP BY tkr,trend,gatt
21:03:41   9  ORDER BY tkr,trend,gatt
21:03:41  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     4335 -.42757555
QQQQ		-1 up	     3394 .574138922
QQQQ		-1	       20
QQQQ		 1 nup	     9725 -.20173535
QQQQ		 1 up	     7131 .438648682
QQQQ		 1	      210

6 rows selected.

Elapsed: 00:00:00.03
21:03:41 SQL> 
21:03:41 SQL> SELECT
21:03:41   2  tkr
21:03:41   3  ,0+TO_CHAR(ydate,'D')daynum
21:03:41   4  ,COUNT(tkr)
21:03:41   5  ,MIN(ydate),MAX(ydate)
21:03:41   6  FROM stk_ms_svmspy
21:03:41   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
21:03:41   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
21:03:41   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
QQQQ		 2	 4922 2009-11-02 13:25:00 2011-01-10 20:55:00
QQQQ		 3	 4926 2009-11-03 13:25:00 2011-01-11 20:55:00
QQQQ		 4	 4921 2009-10-28 18:10:00 2011-01-12 20:55:00
QQQQ		 5	 5018 2009-10-29 13:25:00 2011-01-13 20:55:00
QQQQ		 6	 5028 2009-10-30 13:25:00 2011-01-14 20:55:00

Elapsed: 00:00:00.03
21:03:41 SQL> 
21:03:41 SQL> -- exit
21:03:41 SQL> @stk10svmd.sql '&1'
21:03:41 SQL> --
21:03:41 SQL> -- stk10svmd.sql
21:03:41 SQL> --
21:03:41 SQL> 
21:03:41 SQL> -- Creates views and tables for demonstrating SVM.
21:03:41 SQL> -- I need to run this after I run stk10.sql
21:03:41 SQL> 
21:03:41 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.13
21:03:41 SQL> 
21:03:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
21:03:42 SQL> 
21:03:42 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
21:03:42   2  SELECT
21:03:42   3  tkr
21:03:42   4  ,ydate
21:03:42   5  ,tkr||ydate tkrdate
21:03:42   6  ,clse
21:03:42   7  ,rownum rnum -- acts as t in my time-series
21:03:42   8  -- Derive some attributes from clse.
21:03:42   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
21:03:42  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
21:03:42  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
21:03:42  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
21:03:42  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
21:03:42  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
21:03:42  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
21:03:42  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
21:03:42  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
21:03:42  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
21:03:42  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
21:03:42  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
21:03:42  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
21:03:42  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
21:03:42  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
21:03:42  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
21:03:42  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
21:03:42  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
21:03:42  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
21:03:42  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
21:03:42  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
21:03:42  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
21:03:42  31  FROM ystk
21:03:42  32  WHERE UPPER(tkr)='&1'
21:03:42  33  AND ydate > '1990-01-01'
21:03:42  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
21:03:42  35  ORDER BY ydate
21:03:42  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='QQQQ'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='QQQQ')

Table created.

Elapsed: 00:00:00.23
21:03:42 SQL> 
21:03:42 SQL> -- rpt
21:03:42 SQL> 
21:03:42 SQL> SELECT
21:03:42   2  tkr
21:03:42   3  ,COUNT(tkr)
21:03:42   4  ,MIN(clse),MAX(clse)
21:03:42   5  ,MIN(avg4),MAX(avg4)
21:03:42   6  ,MIN(ydate),MAX(ydate)
21:03:42   7  FROM stk_svmd10svmspy
21:03:42   8  GROUP BY tkr
21:03:42   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
QQQQ		2984	  19.35     113.59     19.586	 111.912 1999-03-10 00:00:00 2011-01-14 00:00:00

Elapsed: 00:00:00.02
21:03:42 SQL> 
21:03:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:03:42 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.18
21:03:42 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
21:03:42   2  SELECT
21:03:42   3  tkr
21:03:42   4  ,ydate
21:03:42   5  ,tkrdate
21:03:42   6  ,clse
21:03:42   7  ,rnum
21:03:42   8  -- g1 is important. I want to predict g1:
21:03:42   9  ,ld - clse g1
21:03:42  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
21:03:42  11  -- I want more attributes from the ones I derived above:
21:03:42  12  -- clse relation to moving-min
21:03:42  13  ,clse-min3  cm3
21:03:42  14  ,clse-min4  cm4
21:03:42  15  ,clse-min5  cm5
21:03:42  16  ,clse-min6  cm6
21:03:42  17  ,clse-min7  cm7
21:03:42  18  ,clse-min8  cm8
21:03:42  19  ,clse-min9  cm9
21:03:42  20  -- clse relation to moving-avg
21:03:42  21  ,clse-avg3  ca3
21:03:42  22  ,clse-avg4  ca4
21:03:42  23  ,clse-avg5  ca5
21:03:42  24  ,clse-avg6  ca6
21:03:42  25  ,clse-avg7  ca7
21:03:42  26  ,clse-avg8  ca8
21:03:42  27  ,clse-avg9  ca9
21:03:42  28  -- clse relation to moving-max
21:03:42  29  ,clse-max3  cx3
21:03:42  30  ,clse-max4  cx4
21:03:42  31  ,clse-max5  cx5
21:03:42  32  ,clse-max6  cx6
21:03:42  33  ,clse-max7  cx7
21:03:42  34  ,clse-max8  cx8
21:03:42  35  ,clse-max9  cx9
21:03:42  36  -- Derive date related attributes:
21:03:42  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:03:42  38  ,0+TO_CHAR(ydate,'D')d
21:03:42  39  ,0+TO_CHAR(ydate,'W')w
21:03:42  40  -- mpm stands for minutes-past-midnight:
21:03:42  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:03:42  42  -- mph stands for minutes-past-hour:
21:03:42  43  ,0+TO_CHAR(ydate,'MI')mph
21:03:42  44  FROM stk_svmd10svmspy
21:03:42  45  ORDER BY ydate
21:03:42  46  /

Table created.

Elapsed: 00:00:00.10
21:03:42 SQL> 
21:03:42 SQL> -- rpt
21:03:42 SQL> 
21:03:42 SQL> SELECT
21:03:42   2  tkr
21:03:42   3  ,COUNT(tkr)
21:03:42   4  ,MIN(clse),MAX(clse)
21:03:42   5  ,MIN(ydate),MAX(ydate)
21:03:42   6  FROM stk_svmd12
21:03:42   7  GROUP BY tkr
21:03:42   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
QQQQ		2984	  19.35     113.59 1999-03-10 00:00:00 2011-01-14 00:00:00

Elapsed: 00:00:00.02
21:03:42 SQL> 
21:03:42 SQL> -- Prepare for derivation of NTILE based parameters.
21:03:42 SQL> -- Also derive the "trend" parameter:
21:03:42 SQL> 
21:03:42 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.13
21:03:42 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
21:03:42   2  SELECT
21:03:42   3  tkr
21:03:42   4  ,ydate
21:03:42   5  ,tkrdate
21:03:42   6  ,clse
21:03:42   7  ,g1
21:03:42   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
21:03:42   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
21:03:42  10  ,CASE WHEN trend IS NULL THEN 1
21:03:42  11  	    WHEN trend =0      THEN 1
21:03:42  12  	    ELSE trend END trend
21:03:42  13  ,cm3
21:03:42  14  ,cm4
21:03:42  15  ,cm5
21:03:42  16  ,cm6
21:03:42  17  ,cm7
21:03:42  18  ,cm8
21:03:42  19  ,cm9
21:03:42  20  ,ca3
21:03:42  21  ,ca4
21:03:42  22  ,ca5
21:03:42  23  ,ca6
21:03:42  24  ,ca7
21:03:42  25  ,ca8
21:03:42  26  ,ca9
21:03:42  27  ,cx3
21:03:42  28  ,cx4
21:03:42  29  ,cx5
21:03:42  30  ,cx6
21:03:42  31  ,cx7
21:03:42  32  ,cx8
21:03:42  33  ,cx9
21:03:42  34  ,hh
21:03:42  35  ,d
21:03:42  36  ,w
21:03:42  37  ,mpm
21:03:42  38  ,mph
21:03:42  39  FROM stk_svmd12
21:03:42  40  -- Guard against divide by 0:
21:03:42  41  WHERE clse > 0
21:03:42  42  ORDER BY ydate
21:03:42  43  /

Table created.

Elapsed: 00:00:00.13
21:03:42 SQL> 
21:03:42 SQL> -- rpt
21:03:42 SQL> 
21:03:42 SQL> SELECT
21:03:42   2  tkr
21:03:42   3  ,trend
21:03:42   4  ,gatt
21:03:42   5  ,COUNT(tkr)
21:03:42   6  ,AVG(g1)
21:03:42   7  FROM stk_svmd14
21:03:42   8  GROUP BY tkr,trend,gatt
21:03:42   9  ORDER BY tkr,trend,gatt
21:03:42  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
QQQQ		  -1 nup	755 -.67590728
QQQQ		  -1 up 	622 .854581994
QQQQ		   1 nup	933 -.50375134
QQQQ		   1 up 	673 .678306092
QQQQ		   1		  1

Elapsed: 00:00:00.02
21:03:42 SQL> 
21:03:42 SQL> -- Derive NTILE based params:
21:03:42 SQL> 
21:03:42 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.11
21:03:42 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
21:03:42   2  SELECT
21:03:42   3  tkr
21:03:42   4  ,ydate
21:03:42   5  ,tkrdate
21:03:42   6  ,clse
21:03:42   7  ,g1
21:03:42   8  ,gatt
21:03:42   9  ,gattn
21:03:42  10  ,trend
21:03:42  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
21:03:42  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
21:03:42  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
21:03:42  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
21:03:42  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
21:03:42  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
21:03:42  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
21:03:42  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
21:03:42  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
21:03:42  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
21:03:42  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
21:03:42  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
21:03:42  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
21:03:42  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
21:03:42  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
21:03:42  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
21:03:42  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
21:03:42  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
21:03:42  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
21:03:42  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
21:03:42  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
21:03:42  32  ,hh  att21
21:03:42  33  ,d   att22
21:03:42  34  ,w   att23
21:03:42  35  ,mpm att24
21:03:42  36  ,mph att25
21:03:42  37  ,trend att26
21:03:42  38  FROM stk_svmd14
21:03:42  39  ORDER BY ydate
21:03:42  40  /

Table created.

Elapsed: 00:00:00.43
21:03:43 SQL> 
21:03:43 SQL> -- rpt
21:03:43 SQL> 
21:03:43 SQL> SELECT
21:03:43   2  tkr
21:03:43   3  ,trend
21:03:43   4  ,gatt
21:03:43   5  ,COUNT(tkr)
21:03:43   6  ,AVG(g1)
21:03:43   7  FROM stk_svmd16
21:03:43   8  GROUP BY tkr,trend,gatt
21:03:43   9  ORDER BY tkr,trend,gatt
21:03:43  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
QQQQ		  -1 nup	755 -.67590728
QQQQ		  -1 up 	622 .854581994
QQQQ		   1 nup	933 -.50375134
QQQQ		   1 up 	673 .678306092
QQQQ		   1		  1

Elapsed: 00:00:00.02
21:03:43 SQL> 
21:03:43 SQL> -- Now I derive goodness attributes:
21:03:43 SQL> 
21:03:43 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.12
21:03:43 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
21:03:43   2  SELECT
21:03:43   3  tkr
21:03:43   4  ,ydate
21:03:43   5  ,tkrdate
21:03:43   6  ,trend
21:03:43   7  ,g1
21:03:43   8  ,gatt
21:03:43   9  ,gattn
21:03:43  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
21:03:43  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
21:03:43  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
21:03:43  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
21:03:43  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
21:03:43  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
21:03:43  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
21:03:43  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
21:03:43  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
21:03:43  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
21:03:43  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
21:03:43  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
21:03:43  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
21:03:43  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
21:03:43  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
21:03:43  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
21:03:43  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
21:03:43  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
21:03:43  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
21:03:43  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
21:03:43  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
21:03:43  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
21:03:43  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
21:03:43  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
21:03:43  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
21:03:43  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
21:03:43  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
21:03:43  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
21:03:43  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
21:03:43  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
21:03:43  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
21:03:43  41  FROM stk_svmd16
21:03:43  42  /

Table created.

Elapsed: 00:00:00.54
21:03:44 SQL> 
21:03:44 SQL> -- rpt
21:03:44 SQL> 
21:03:44 SQL> SELECT
21:03:44   2  tkr
21:03:44   3  ,trend
21:03:44   4  ,gatt
21:03:44   5  ,COUNT(tkr)
21:03:44   6  ,AVG(g1)
21:03:44   7  FROM stk_ms_svmd_svmspy
21:03:44   8  GROUP BY tkr,trend,gatt
21:03:44   9  ORDER BY tkr,trend,gatt
21:03:44  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
QQQQ		  -1 nup	755 -.67590728
QQQQ		  -1 up 	622 .854581994
QQQQ		   1 nup	933 -.50375134
QQQQ		   1 up 	673 .678306092
QQQQ		   1		  1

Elapsed: 00:00:00.01
21:03:44 SQL> 
21:03:44 SQL> SELECT
21:03:44   2  tkr
21:03:44   3  ,COUNT(tkr)
21:03:44   4  ,MIN(ydate),MAX(ydate)
21:03:44   5  FROM stk_ms_svmd_svmspy
21:03:44   6  GROUP BY tkr
21:03:44   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
QQQQ		2984 1999-03-10 00:00:00 2011-01-14 00:00:00

Elapsed: 00:00:00.00
21:03:44 SQL> 
21:03:44 SQL> -- exit
21:03:44 SQL> 
21:03:44 SQL> 
21:03:44 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.17
21:03:44 SQL> 
21:03:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
21:03:44 SQL> 
21:03:44 SQL> CREATE TABLE stk_ms_u COMPRESS AS
21:03:44   2  SELECT * FROM stk_ms_svmspy
21:03:44   3  UNION
21:03:44   4  SELECT * FROM stk_ms_svmd_svmspy
21:03:44   5  /

Table created.

Elapsed: 00:00:00.42
21:03:45 SQL> 
21:03:45 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
