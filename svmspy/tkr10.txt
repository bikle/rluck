
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 16 00:04:26 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:04:26 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:04:26 SQL> 
00:04:26 SQL> 00:04:26 SQL> --
00:04:26 SQL> -- stk10.sql
00:04:26 SQL> --
00:04:26 SQL> 
00:04:26 SQL> -- Creates views and tables for demonstrating SVM.
00:04:26 SQL> 
00:04:26 SQL> DROP VIEW stk10;
DROP VIEW stk10
*
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.00
00:04:26 SQL> 
00:04:26 SQL> DROP TABLE stk10;

Table dropped.

Elapsed: 00:00:00.23
00:04:26 SQL> 
00:04:26 SQL> CREATE TABLE stk10 COMPRESS AS
00:04:26   2  SELECT
00:04:26   3  tkr
00:04:26   4  ,ydate
00:04:26   5  ,tkr||ydate tkrdate
00:04:26   6  ,clse
00:04:26   7  ,clse2
00:04:26   8  ,gain1day
00:04:26   9  ,rownum rnum -- acts as t in my time-series
00:04:26  10  -- Derive some attributes from clse.
00:04:26  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
00:04:26  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
00:04:26  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:04:26  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
00:04:26  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:04:26  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
00:04:26  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:04:26  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
00:04:26  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
00:04:26  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:04:26  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
00:04:26  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:04:26  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
00:04:26  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:04:26  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
00:04:26  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
00:04:26  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:04:26  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
00:04:26  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:04:26  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
00:04:26  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:04:26  32  FROM di5min_stk_c2
00:04:26  33  WHERE UPPER(tkr)='&1'
00:04:26  34  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
00:04:26  35  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
00:04:26  36  ORDER BY ydate
00:04:26  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='GOOG'

Table created.

Elapsed: 00:00:01.28
00:04:28 SQL> 
00:04:28 SQL> ANALYZE TABLE stk10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.11
00:04:29 SQL> 
00:04:29 SQL> -- rpt
00:04:29 SQL> 
00:04:29 SQL> SELECT
00:04:29   2  tkr
00:04:29   3  ,COUNT(tkr)
00:04:29   4  ,MIN(clse),MAX(clse)
00:04:29   5  ,MIN(avg4),MAX(avg4)
00:04:29   6  ,MIN(ydate),MAX(ydate)
00:04:29   7  FROM stk10
00:04:29   8  GROUP BY tkr
00:04:29   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
GOOG	     24813	434.6	  629.82 436.437245 628.088367 2009-10-28 18:10:00 2011-01-14 20:55:00

Elapsed: 00:00:00.03
00:04:29 SQL> 
00:04:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:04:29 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.25
00:04:29 SQL> CREATE TABLE stk12 COMPRESS AS
00:04:29   2  SELECT
00:04:29   3  tkr
00:04:29   4  ,ydate
00:04:29   5  ,tkrdate
00:04:29   6  ,clse
00:04:29   7  ,rnum
00:04:29   8  -- g4 is important. I want to predict g4:
00:04:29   9  ,gain1day g4
00:04:29  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
00:04:29  11  -- I want more attributes from the ones I derived above:
00:04:29  12  -- clse relation to moving-min
00:04:29  13  ,clse-min2  cm2
00:04:29  14  ,clse-min3  cm3
00:04:29  15  ,clse-min4  cm4
00:04:29  16  ,clse-min5  cm5
00:04:29  17  ,clse-min6  cm6
00:04:29  18  ,clse-min7  cm7
00:04:29  19  ,clse-min8  cm8
00:04:29  20  -- clse relation to moving-avg
00:04:29  21  ,clse-avg2  ca2
00:04:29  22  ,clse-avg3  ca3
00:04:29  23  ,clse-avg4  ca4
00:04:29  24  ,clse-avg5  ca5
00:04:29  25  ,clse-avg6  ca6
00:04:29  26  ,clse-avg7  ca7
00:04:29  27  ,clse-avg8  ca8
00:04:29  28  -- clse relation to moving-max
00:04:29  29  ,clse-max2  cx2
00:04:29  30  ,clse-max3  cx3
00:04:29  31  ,clse-max4  cx4
00:04:29  32  ,clse-max5  cx5
00:04:29  33  ,clse-max6  cx6
00:04:29  34  ,clse-max7  cx7
00:04:29  35  ,clse-max8  cx8
00:04:29  36  -- Derive date related attributes:
00:04:29  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:04:29  38  ,0+TO_CHAR(ydate,'D')d
00:04:29  39  ,0+TO_CHAR(ydate,'W')w
00:04:29  40  -- mpm stands for minutes-past-midnight:
00:04:29  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:04:29  42  -- mph stands for minutes-past-hour:
00:04:29  43  ,0+TO_CHAR(ydate,'MI')mph
00:04:29  44  FROM stk10
00:04:29  45  ORDER BY ydate
00:04:29  46  /

Table created.

Elapsed: 00:00:00.78
00:04:30 SQL> 
00:04:30 SQL> -- rpt
00:04:30 SQL> 
00:04:30 SQL> SELECT
00:04:30   2  tkr
00:04:30   3  ,COUNT(tkr)
00:04:30   4  ,MIN(clse),MAX(clse)
00:04:30   5  ,MIN(ydate),MAX(ydate)
00:04:30   6  FROM stk12
00:04:30   7  GROUP BY tkr
00:04:30   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
GOOG	     24813	434.6	  629.82 2009-10-28 18:10:00 2011-01-14 20:55:00

Elapsed: 00:00:00.04
00:04:30 SQL> 
00:04:30 SQL> -- Prepare for derivation of NTILE based parameters.
00:04:30 SQL> -- Also derive the "trend" parameter:
00:04:30 SQL> 
00:04:30 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.22
00:04:30 SQL> CREATE TABLE stk14 COMPRESS AS
00:04:30   2  SELECT
00:04:30   3  tkr
00:04:30   4  ,ydate
00:04:30   5  ,tkrdate
00:04:30   6  ,clse
00:04:30   7  ,g4
00:04:30   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.5/100 THEN 'up' ELSE 'nup' END gatt
00:04:30   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.5/100 THEN 'up' ELSE 'nup' END gattn
00:04:30  10  ,CASE WHEN trend IS NULL THEN 1
00:04:30  11  	    WHEN trend =0      THEN 1
00:04:30  12  	    ELSE trend END trend
00:04:30  13  ,cm2
00:04:30  14  ,cm3
00:04:30  15  ,cm4
00:04:30  16  ,cm5
00:04:30  17  ,cm6
00:04:30  18  ,cm7
00:04:30  19  ,cm8
00:04:30  20  ,ca2
00:04:30  21  ,ca3
00:04:30  22  ,ca4
00:04:30  23  ,ca5
00:04:30  24  ,ca6
00:04:30  25  ,ca7
00:04:30  26  ,ca8
00:04:30  27  ,cx2
00:04:30  28  ,cx3
00:04:30  29  ,cx4
00:04:30  30  ,cx5
00:04:30  31  ,cx6
00:04:30  32  ,cx7
00:04:30  33  ,cx8
00:04:30  34  ,hh
00:04:30  35  ,d
00:04:30  36  ,w
00:04:30  37  ,mpm
00:04:30  38  ,mph
00:04:30  39  FROM stk12
00:04:30  40  -- Guard against divide by 0:
00:04:30  41  WHERE clse > 0
00:04:30  42  ORDER BY ydate
00:04:30  43  /

Table created.

Elapsed: 00:00:00.35
00:04:30 SQL> 
00:04:30 SQL> -- rpt
00:04:30 SQL> 
00:04:30 SQL> SELECT
00:04:30   2  tkr
00:04:30   3  ,trend
00:04:30   4  ,gatt
00:04:30   5  ,COUNT(tkr)
00:04:30   6  ,AVG(g4)
00:04:30   7  FROM stk14
00:04:30   8  GROUP BY tkr,trend,gatt
00:04:30   9  ORDER BY tkr,trend,gatt
00:04:30  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
GOOG		-1 nup	     8089 -3.7036823
GOOG		-1 up	     4128 8.87728546
GOOG		-1	       99
GOOG		 1 nup	     8441 -3.6986156
GOOG		 1 up	     3924  8.0458731
GOOG		 1	      132

6 rows selected.

Elapsed: 00:00:00.04
00:04:31 SQL> 
00:04:31 SQL> -- Derive NTILE based params:
00:04:31 SQL> 
00:04:31 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.19
00:04:31 SQL> CREATE TABLE stk16 COMPRESS AS
00:04:31   2  SELECT
00:04:31   3  tkr
00:04:31   4  ,ydate
00:04:31   5  ,tkrdate
00:04:31   6  ,clse
00:04:31   7  ,g4
00:04:31   8  ,gatt
00:04:31   9  ,gattn
00:04:31  10  ,trend
00:04:31  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
00:04:31  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
00:04:31  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
00:04:31  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
00:04:31  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
00:04:31  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
00:04:31  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
00:04:31  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
00:04:31  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
00:04:31  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
00:04:31  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
00:04:31  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
00:04:31  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
00:04:31  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
00:04:31  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
00:04:31  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
00:04:31  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
00:04:31  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
00:04:31  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
00:04:31  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
00:04:31  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
00:04:31  32  ,hh  att21
00:04:31  33  ,d   att22
00:04:31  34  ,w   att23
00:04:31  35  ,mpm att24
00:04:31  36  ,mph att25
00:04:31  37  ,trend att26
00:04:31  38  FROM stk14
00:04:31  39  ORDER BY ydate
00:04:31  40  /

Table created.

Elapsed: 00:00:02.85
00:04:34 SQL> 
00:04:34 SQL> -- rpt
00:04:34 SQL> 
00:04:34 SQL> SELECT
00:04:34   2  tkr
00:04:34   3  ,trend
00:04:34   4  ,gatt
00:04:34   5  ,COUNT(tkr)
00:04:34   6  ,AVG(g4)
00:04:34   7  FROM stk16
00:04:34   8  GROUP BY tkr,trend,gatt
00:04:34   9  ORDER BY tkr,trend,gatt
00:04:34  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
GOOG		-1 nup	     8089 -3.7036823
GOOG		-1 up	     4128 8.87728546
GOOG		-1	       99
GOOG		 1 nup	     8441 -3.6986156
GOOG		 1 up	     3924  8.0458731
GOOG		 1	      132

6 rows selected.

Elapsed: 00:00:00.03
00:04:34 SQL> 
00:04:34 SQL> -- Now I derive goodness attributes:
00:04:34 SQL> 
00:04:34 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.23
00:04:34 SQL> CREATE TABLE stk_ms COMPRESS AS
00:04:34   2  SELECT
00:04:34   3  tkr
00:04:34   4  ,ydate
00:04:34   5  ,tkrdate
00:04:34   6  ,trend
00:04:34   7  ,g4
00:04:34   8  ,gatt
00:04:34   9  ,gattn
00:04:34  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
00:04:34  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
00:04:34  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
00:04:34  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
00:04:34  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
00:04:34  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
00:04:34  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
00:04:34  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
00:04:34  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
00:04:34  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
00:04:34  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
00:04:34  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
00:04:34  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
00:04:34  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
00:04:34  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
00:04:34  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
00:04:34  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
00:04:34  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
00:04:34  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
00:04:34  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
00:04:34  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
00:04:34  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
00:04:34  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
00:04:34  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
00:04:34  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
00:04:34  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
00:04:34  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
00:04:34  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
00:04:34  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
00:04:34  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
00:04:34  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
00:04:34  41  FROM stk16
00:04:34  42  /

Table created.

Elapsed: 00:00:03.95
00:04:38 SQL> 
00:04:38 SQL> -- rpt
00:04:38 SQL> 
00:04:38 SQL> SELECT
00:04:38   2  tkr
00:04:38   3  ,trend
00:04:38   4  ,gatt
00:04:38   5  ,COUNT(tkr)
00:04:38   6  ,AVG(g4)
00:04:38   7  FROM stk_ms
00:04:38   8  GROUP BY tkr,trend,gatt
00:04:38   9  ORDER BY tkr,trend,gatt
00:04:38  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
GOOG		-1 nup	     8089 -3.7036823
GOOG		-1 up	     4128 8.87728546
GOOG		-1	       99
GOOG		 1 nup	     8441 -3.6986156
GOOG		 1 up	     3924  8.0458731
GOOG		 1	      132

6 rows selected.

Elapsed: 00:00:00.02
00:04:38 SQL> 
00:04:38 SQL> SELECT
00:04:38   2  tkr
00:04:38   3  ,0+TO_CHAR(ydate,'D')daynum
00:04:38   4  ,COUNT(tkr)
00:04:38   5  ,MIN(ydate),MAX(ydate)
00:04:38   6  FROM stk_ms
00:04:38   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
00:04:38   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
00:04:38   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
GOOG		 2	 4922 2009-11-02 13:25:00 2011-01-10 20:55:00
GOOG		 3	 4925 2009-11-03 13:25:00 2011-01-11 20:55:00
GOOG		 4	 4920 2009-10-28 18:10:00 2011-01-12 20:55:00
GOOG		 5	 5018 2009-10-29 13:25:00 2011-01-13 20:55:00
GOOG		 6	 5028 2009-10-30 13:25:00 2011-01-14 20:55:00

Elapsed: 00:00:00.03
00:04:38 SQL> 
00:04:38 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
