
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 23 19:34:11 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

19:34:11 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
19:34:11 SQL> 
19:34:11 SQL> 19:34:11 SQL> --
19:34:11 SQL> -- stk10u.sql
19:34:11 SQL> --
19:34:11 SQL> 
19:34:11 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
19:34:11 SQL> 
19:34:11 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
19:34:11 SQL> @stk10.sql     '&1'
19:34:11 SQL> --
19:34:11 SQL> -- stk10.sql
19:34:11 SQL> --
19:34:11 SQL> 
19:34:11 SQL> -- Creates views and tables for demonstrating SVM.
19:34:11 SQL> 
19:34:11 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.23
19:34:11 SQL> 
19:34:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.16
19:34:11 SQL> 
19:34:11 SQL> CREATE TABLE stk10svmspy COMPRESS AS
19:34:11   2  SELECT
19:34:11   3  tkr
19:34:11   4  ,ydate
19:34:11   5  ,tkr||ydate tkrdate
19:34:11   6  ,clse
19:34:11   7  ,clse2
19:34:11   8  ,rownum rnum -- acts as t in my time-series
19:34:11   9  -- g1 is important. I want to predict g1:
19:34:11  10  ,gain1day g1
19:34:11  11  -- Derive some attributes from clse.
19:34:11  12  -- Each row spans 5 minutes.
19:34:11  13  -- The number of rows in 1 day is 24*60/5.
19:34:11  14  -- I want the aggregations to span from 3 days to 9 days:
19:34:11  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
19:34:11  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
19:34:11  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
19:34:11  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
19:34:11  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
19:34:11  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
19:34:11  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
19:34:11  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
19:34:11  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
19:34:11  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
19:34:11  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
19:34:11  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
19:34:11  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
19:34:11  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
19:34:11  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
19:34:11  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
19:34:11  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
19:34:11  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
19:34:11  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
19:34:11  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
19:34:11  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
19:34:11  36  FROM di5min_stk_c2
19:34:11  37  WHERE UPPER(tkr)='&1'
19:34:11  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
19:34:11  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
19:34:11  40  ORDER BY ydate
19:34:11  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='BHP'

Table created.

Elapsed: 00:00:01.46
19:34:13 SQL> 
19:34:13 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
19:34:13 SQL> 
19:34:13 SQL> -- rpt
19:34:13 SQL> 
19:34:13 SQL> SELECT
19:34:13   2  tkr
19:34:13   3  ,COUNT(tkr)ccount
19:34:13   4  ,MIN(clse)mnclse,MAX(clse)mxclse
19:34:13   5  -- ,MIN(avg4),MAX(avg4)
19:34:13   6  ,MIN(ydate),MAX(ydate)
19:34:13   7  ,MIN(g1)
19:34:13   8  ,MAX(g1)
19:34:13   9  FROM stk10svmspy
19:34:13  10  GROUP BY tkr
19:34:13  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
BHP	      1014	87.11	    92.7 2011-01-04 14:30:00 2011-01-21 20:55:00      -3.76	   2.4

Elapsed: 00:00:00.00
19:34:13 SQL> 
19:34:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:34:13 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.15
19:34:13 SQL> CREATE TABLE stk12svmspy COMPRESS AS
19:34:13   2  SELECT
19:34:13   3  tkr
19:34:13   4  ,ydate
19:34:13   5  ,tkrdate
19:34:13   6  ,clse
19:34:13   7  ,rnum
19:34:13   8  ,g1
19:34:13   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
19:34:13  10  -- I want more attributes from the ones I derived above:
19:34:13  11  -- clse relation to moving-min
19:34:13  12  ,clse-min3  cm3
19:34:13  13  ,clse-min4  cm4
19:34:13  14  ,clse-min5  cm5
19:34:13  15  ,clse-min6  cm6
19:34:13  16  ,clse-min7  cm7
19:34:13  17  ,clse-min8  cm8
19:34:13  18  ,clse-min9  cm9
19:34:13  19  -- clse relation to moving-avg
19:34:13  20  ,clse-avg3  ca3
19:34:13  21  ,clse-avg4  ca4
19:34:13  22  ,clse-avg5  ca5
19:34:13  23  ,clse-avg6  ca6
19:34:13  24  ,clse-avg7  ca7
19:34:13  25  ,clse-avg8  ca8
19:34:13  26  ,clse-avg9  ca9
19:34:13  27  -- clse relation to moving-max
19:34:13  28  ,clse-max3  cx3
19:34:13  29  ,clse-max4  cx4
19:34:13  30  ,clse-max5  cx5
19:34:13  31  ,clse-max6  cx6
19:34:13  32  ,clse-max7  cx7
19:34:13  33  ,clse-max8  cx8
19:34:13  34  ,clse-max9  cx9
19:34:13  35  -- Derive date related attributes:
19:34:13  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:34:13  37  ,0+TO_CHAR(ydate,'D')d
19:34:13  38  ,0+TO_CHAR(ydate,'W')w
19:34:13  39  -- mpm stands for minutes-past-midnight:
19:34:13  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:34:13  41  -- mph stands for minutes-past-hour:
19:34:13  42  ,0+TO_CHAR(ydate,'MI')mph
19:34:13  43  FROM stk10svmspy
19:34:13  44  ORDER BY ydate
19:34:13  45  /

Table created.

Elapsed: 00:00:00.20
19:34:13 SQL> 
19:34:13 SQL> -- rpt
19:34:13 SQL> 
19:34:13 SQL> SELECT
19:34:13   2  tkr
19:34:13   3  ,COUNT(tkr)ccount
19:34:13   4  ,MIN(clse)mnclse,MAX(clse)mxclse
19:34:13   5  -- ,MIN(avg4),MAX(avg4)
19:34:13   6  ,MIN(ydate),MAX(ydate)
19:34:13   7  ,MIN(g1)
19:34:13   8  ,AVG(g1)
19:34:13   9  ,MAX(g1)
19:34:13  10  FROM stk12svmspy
19:34:13  11  GROUP BY tkr
19:34:13  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
BHP	      1014	87.11	    92.7 2011-01-04 14:30:00 2011-01-21 20:55:00      -3.76 -.39423077	      2.4

Elapsed: 00:00:00.01
19:34:13 SQL> 
19:34:13 SQL> -- Prepare for derivation of NTILE based parameters.
19:34:13 SQL> -- Also derive the "trend" parameter:
19:34:13 SQL> 
19:34:13 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.06
19:34:13 SQL> CREATE TABLE stk14svmspy COMPRESS AS
19:34:13   2  SELECT
19:34:13   3  tkr
19:34:13   4  ,ydate
19:34:13   5  ,tkrdate
19:34:13   6  ,clse
19:34:13   7  ,g1
19:34:13   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
19:34:13   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
19:34:13  10  ,CASE WHEN trend IS NULL THEN 1
19:34:13  11  	    WHEN trend =0      THEN 1
19:34:13  12  	    ELSE trend END trend
19:34:13  13  ,cm3
19:34:13  14  ,cm4
19:34:13  15  ,cm5
19:34:13  16  ,cm6
19:34:13  17  ,cm7
19:34:13  18  ,cm8
19:34:13  19  ,cm9
19:34:13  20  ,ca3
19:34:13  21  ,ca4
19:34:13  22  ,ca5
19:34:13  23  ,ca6
19:34:13  24  ,ca7
19:34:13  25  ,ca8
19:34:13  26  ,ca9
19:34:13  27  ,cx3
19:34:13  28  ,cx4
19:34:13  29  ,cx5
19:34:13  30  ,cx6
19:34:13  31  ,cx7
19:34:13  32  ,cx8
19:34:13  33  ,cx9
19:34:13  34  ,hh
19:34:13  35  ,d
19:34:13  36  ,w
19:34:13  37  ,mpm
19:34:13  38  ,mph
19:34:13  39  FROM stk12svmspy
19:34:13  40  -- Guard against divide by 0:
19:34:13  41  WHERE clse > 0
19:34:13  42  ORDER BY ydate
19:34:13  43  /

Table created.

Elapsed: 00:00:00.05
19:34:14 SQL> 
19:34:14 SQL> -- rpt
19:34:14 SQL> 
19:34:14 SQL> SELECT
19:34:14   2  tkr
19:34:14   3  ,trend
19:34:14   4  ,gatt
19:34:14   5  ,COUNT(tkr)
19:34:14   6  ,AVG(g1)
19:34:14   7  FROM stk14svmspy
19:34:14   8  GROUP BY tkr,trend,gatt
19:34:14   9  ORDER BY tkr,trend,gatt
19:34:14  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BHP		-1 nup	      302 -.78688742
BHP		-1 up	      230 1.01126087
BHP		-1	       82
BHP		 1 nup	      282 -1.2809574
BHP		 1 up	       44 .637045455
BHP		 1	       74

6 rows selected.

Elapsed: 00:00:00.01
19:34:14 SQL> 
19:34:14 SQL> -- Derive NTILE based params:
19:34:14 SQL> 
19:34:14 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.08
19:34:14 SQL> CREATE TABLE stk16svmspy COMPRESS AS
19:34:14   2  SELECT
19:34:14   3  tkr
19:34:14   4  ,ydate
19:34:14   5  ,tkrdate
19:34:14   6  ,clse
19:34:14   7  ,g1
19:34:14   8  ,gatt
19:34:14   9  ,gattn
19:34:14  10  ,trend
19:34:14  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
19:34:14  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
19:34:14  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
19:34:14  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
19:34:14  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
19:34:14  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
19:34:14  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
19:34:14  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
19:34:14  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
19:34:14  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
19:34:14  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
19:34:14  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
19:34:14  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
19:34:14  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
19:34:14  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
19:34:14  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
19:34:14  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
19:34:14  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
19:34:14  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
19:34:14  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
19:34:14  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
19:34:14  32  ,hh  att21
19:34:14  33  ,d   att22
19:34:14  34  ,w   att23
19:34:14  35  ,mpm att24
19:34:14  36  ,mph att25
19:34:14  37  ,trend att26
19:34:14  38  FROM stk14svmspy
19:34:14  39  ORDER BY ydate
19:34:14  40  /

Table created.

Elapsed: 00:00:00.16
19:34:14 SQL> 
19:34:14 SQL> -- rpt
19:34:14 SQL> 
19:34:14 SQL> SELECT
19:34:14   2  tkr
19:34:14   3  ,trend
19:34:14   4  ,gatt
19:34:14   5  ,COUNT(tkr)
19:34:14   6  ,AVG(g1)
19:34:14   7  FROM stk16svmspy
19:34:14   8  GROUP BY tkr,trend,gatt
19:34:14   9  ORDER BY tkr,trend,gatt
19:34:14  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BHP		-1 nup	      302 -.78688742
BHP		-1 up	      230 1.01126087
BHP		-1	       82
BHP		 1 nup	      282 -1.2809574
BHP		 1 up	       44 .637045455
BHP		 1	       74

6 rows selected.

Elapsed: 00:00:00.01
19:34:14 SQL> 
19:34:14 SQL> -- Now I derive goodness attributes:
19:34:14 SQL> 
19:34:14 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
19:34:14 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
19:34:14   2  SELECT
19:34:14   3  tkr
19:34:14   4  ,ydate
19:34:14   5  ,tkrdate
19:34:14   6  ,trend
19:34:14   7  ,g1
19:34:14   8  ,gatt
19:34:14   9  ,gattn
19:34:14  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
19:34:14  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
19:34:14  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
19:34:14  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
19:34:14  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
19:34:14  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
19:34:14  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
19:34:14  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
19:34:14  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
19:34:14  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
19:34:14  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
19:34:14  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
19:34:14  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
19:34:14  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
19:34:14  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
19:34:14  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
19:34:14  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
19:34:14  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
19:34:14  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
19:34:14  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
19:34:14  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
19:34:14  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
19:34:14  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
19:34:14  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
19:34:14  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
19:34:14  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
19:34:14  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
19:34:14  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
19:34:14  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
19:34:14  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
19:34:14  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
19:34:14  41  FROM stk16svmspy
19:34:14  42  /

Table created.

Elapsed: 00:00:00.20
19:34:14 SQL> 
19:34:14 SQL> -- rpt
19:34:14 SQL> 
19:34:14 SQL> SELECT
19:34:14   2  tkr
19:34:14   3  ,trend
19:34:14   4  ,gatt
19:34:14   5  ,COUNT(tkr)
19:34:14   6  ,AVG(g1)
19:34:14   7  FROM stk_ms_svmspy
19:34:14   8  GROUP BY tkr,trend,gatt
19:34:14   9  ORDER BY tkr,trend,gatt
19:34:14  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BHP		-1 nup	      302 -.78688742
BHP		-1 up	      230 1.01126087
BHP		-1	       82
BHP		 1 nup	      282 -1.2809574
BHP		 1 up	       44 .637045455
BHP		 1	       74

6 rows selected.

Elapsed: 00:00:00.01
19:34:14 SQL> 
19:34:14 SQL> SELECT
19:34:14   2  tkr
19:34:14   3  ,0+TO_CHAR(ydate,'D')daynum
19:34:14   4  ,COUNT(tkr)
19:34:14   5  ,MIN(ydate),MAX(ydate)
19:34:14   6  FROM stk_ms_svmspy
19:34:14   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
19:34:14   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
19:34:14   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
BHP		 2	   78 2011-01-10 14:30:00 2011-01-10 20:55:00
BHP		 3	  234 2011-01-04 14:30:00 2011-01-18 20:55:00
BHP		 4	  234 2011-01-05 14:30:00 2011-01-19 20:55:00
BHP		 5	  234 2011-01-06 14:30:00 2011-01-20 20:55:00
BHP		 6	  234 2011-01-07 14:30:00 2011-01-21 20:55:00

Elapsed: 00:00:00.01
19:34:14 SQL> 
19:34:14 SQL> -- exit
19:34:14 SQL> @stk10svmd.sql '&1'
19:34:14 SQL> --
19:34:14 SQL> -- stk10svmd.sql
19:34:14 SQL> --
19:34:14 SQL> 
19:34:14 SQL> -- Creates views and tables for demonstrating SVM.
19:34:14 SQL> -- I need to run this after I run stk10.sql
19:34:14 SQL> 
19:34:14 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.09
19:34:14 SQL> 
19:34:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
19:34:14 SQL> 
19:34:14 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
19:34:14   2  SELECT
19:34:14   3  tkr
19:34:14   4  ,ydate
19:34:14   5  ,tkr||ydate tkrdate
19:34:14   6  ,clse
19:34:14   7  ,rownum rnum -- acts as t in my time-series
19:34:14   8  -- Derive some attributes from clse.
19:34:14   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
19:34:14  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
19:34:14  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
19:34:14  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
19:34:14  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
19:34:14  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
19:34:14  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
19:34:14  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
19:34:14  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
19:34:14  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
19:34:14  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
19:34:14  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
19:34:14  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
19:34:14  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
19:34:14  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
19:34:14  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
19:34:14  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
19:34:14  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
19:34:14  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
19:34:14  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
19:34:14  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
19:34:14  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
19:34:14  31  FROM ystk
19:34:14  32  WHERE UPPER(tkr)='&1'
19:34:14  33  AND ydate > '1990-01-01'
19:34:14  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
19:34:14  35  ORDER BY ydate
19:34:14  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='BHP'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='BHP')

Table created.

Elapsed: 00:00:02.19
19:34:17 SQL> 
19:34:17 SQL> -- rpt
19:34:17 SQL> 
19:34:17 SQL> SELECT
19:34:17   2  tkr
19:34:17   3  ,COUNT(tkr)
19:34:17   4  ,MIN(clse),MAX(clse)
19:34:17   5  ,MIN(avg4),MAX(avg4)
19:34:17   6  ,MIN(ydate),MAX(ydate)
19:34:17   7  FROM stk_svmd10svmspy
19:34:17   8  GROUP BY tkr
19:34:17   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
BHP		5309	   2.68      92.92	2.712	  92.684 1990-01-02 00:00:00 2011-01-21 00:00:00

Elapsed: 00:00:00.02
19:34:17 SQL> 
19:34:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:34:17 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:04.29
19:34:21 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
19:34:21   2  SELECT
19:34:21   3  tkr
19:34:21   4  ,ydate
19:34:21   5  ,tkrdate
19:34:21   6  ,clse
19:34:21   7  ,rnum
19:34:21   8  -- g1 is important. I want to predict g1:
19:34:21   9  ,ld - clse g1
19:34:21  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
19:34:21  11  -- I want more attributes from the ones I derived above:
19:34:21  12  -- clse relation to moving-min
19:34:21  13  ,clse-min3  cm3
19:34:21  14  ,clse-min4  cm4
19:34:21  15  ,clse-min5  cm5
19:34:21  16  ,clse-min6  cm6
19:34:21  17  ,clse-min7  cm7
19:34:21  18  ,clse-min8  cm8
19:34:21  19  ,clse-min9  cm9
19:34:21  20  -- clse relation to moving-avg
19:34:21  21  ,clse-avg3  ca3
19:34:21  22  ,clse-avg4  ca4
19:34:21  23  ,clse-avg5  ca5
19:34:21  24  ,clse-avg6  ca6
19:34:21  25  ,clse-avg7  ca7
19:34:21  26  ,clse-avg8  ca8
19:34:21  27  ,clse-avg9  ca9
19:34:21  28  -- clse relation to moving-max
19:34:21  29  ,clse-max3  cx3
19:34:21  30  ,clse-max4  cx4
19:34:21  31  ,clse-max5  cx5
19:34:21  32  ,clse-max6  cx6
19:34:21  33  ,clse-max7  cx7
19:34:21  34  ,clse-max8  cx8
19:34:21  35  ,clse-max9  cx9
19:34:21  36  -- Derive date related attributes:
19:34:21  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:34:21  38  ,0+TO_CHAR(ydate,'D')d
19:34:21  39  ,0+TO_CHAR(ydate,'W')w
19:34:21  40  -- mpm stands for minutes-past-midnight:
19:34:21  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:34:21  42  -- mph stands for minutes-past-hour:
19:34:21  43  ,0+TO_CHAR(ydate,'MI')mph
19:34:21  44  FROM stk_svmd10svmspy
19:34:21  45  ORDER BY ydate
19:34:21  46  /

Table created.

Elapsed: 00:00:00.15
19:34:21 SQL> 
19:34:21 SQL> -- rpt
19:34:21 SQL> 
19:34:21 SQL> SELECT
19:34:21   2  tkr
19:34:21   3  ,COUNT(tkr)
19:34:21   4  ,MIN(clse),MAX(clse)
19:34:21   5  ,MIN(ydate),MAX(ydate)
19:34:21   6  FROM stk_svmd12
19:34:21   7  GROUP BY tkr
19:34:21   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
BHP		5309	   2.68      92.92 1990-01-02 00:00:00 2011-01-21 00:00:00

Elapsed: 00:00:00.02
19:34:21 SQL> 
19:34:21 SQL> -- Prepare for derivation of NTILE based parameters.
19:34:21 SQL> -- Also derive the "trend" parameter:
19:34:21 SQL> 
19:34:21 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.39
19:34:22 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
19:34:22   2  SELECT
19:34:22   3  tkr
19:34:22   4  ,ydate
19:34:22   5  ,tkrdate
19:34:22   6  ,clse
19:34:22   7  ,g1
19:34:22   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
19:34:22   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
19:34:22  10  ,CASE WHEN trend IS NULL THEN 1
19:34:22  11  	    WHEN trend =0      THEN 1
19:34:22  12  	    ELSE trend END trend
19:34:22  13  ,cm3
19:34:22  14  ,cm4
19:34:22  15  ,cm5
19:34:22  16  ,cm6
19:34:22  17  ,cm7
19:34:22  18  ,cm8
19:34:22  19  ,cm9
19:34:22  20  ,ca3
19:34:22  21  ,ca4
19:34:22  22  ,ca5
19:34:22  23  ,ca6
19:34:22  24  ,ca7
19:34:22  25  ,ca8
19:34:22  26  ,ca9
19:34:22  27  ,cx3
19:34:22  28  ,cx4
19:34:22  29  ,cx5
19:34:22  30  ,cx6
19:34:22  31  ,cx7
19:34:22  32  ,cx8
19:34:22  33  ,cx9
19:34:22  34  ,hh
19:34:22  35  ,d
19:34:22  36  ,w
19:34:22  37  ,mpm
19:34:22  38  ,mph
19:34:22  39  FROM stk_svmd12
19:34:22  40  -- Guard against divide by 0:
19:34:22  41  WHERE clse > 0
19:34:22  42  ORDER BY ydate
19:34:22  43  /

Table created.

Elapsed: 00:00:00.18
19:34:22 SQL> 
19:34:22 SQL> -- rpt
19:34:22 SQL> 
19:34:22 SQL> SELECT
19:34:22   2  tkr
19:34:22   3  ,trend
19:34:22   4  ,gatt
19:34:22   5  ,COUNT(tkr)
19:34:22   6  ,AVG(g1)
19:34:22   7  FROM stk_svmd14
19:34:22   8  GROUP BY tkr,trend,gatt
19:34:22   9  ORDER BY tkr,trend,gatt
19:34:22  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BHP		  -1 nup       1373 -.32903132
BHP		  -1 up        1035 .454376812
BHP		  -1		  1
BHP		   1 nup       1624  -.2984298
BHP		   1 up        1276 .432068966

Elapsed: 00:00:00.02
19:34:22 SQL> 
19:34:22 SQL> -- Derive NTILE based params:
19:34:22 SQL> 
19:34:22 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.06
19:34:22 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
19:34:22   2  SELECT
19:34:22   3  tkr
19:34:22   4  ,ydate
19:34:22   5  ,tkrdate
19:34:22   6  ,clse
19:34:22   7  ,g1
19:34:22   8  ,gatt
19:34:22   9  ,gattn
19:34:22  10  ,trend
19:34:22  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
19:34:22  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
19:34:22  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
19:34:22  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
19:34:22  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
19:34:22  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
19:34:22  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
19:34:22  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
19:34:22  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
19:34:22  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
19:34:22  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
19:34:22  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
19:34:22  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
19:34:22  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
19:34:22  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
19:34:22  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
19:34:22  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
19:34:22  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
19:34:22  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
19:34:22  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
19:34:22  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
19:34:22  32  ,hh  att21
19:34:22  33  ,d   att22
19:34:22  34  ,w   att23
19:34:22  35  ,mpm att24
19:34:22  36  ,mph att25
19:34:22  37  ,trend att26
19:34:22  38  FROM stk_svmd14
19:34:22  39  ORDER BY ydate
19:34:22  40  /

Table created.

Elapsed: 00:00:00.58
19:34:22 SQL> 
19:34:22 SQL> -- rpt
19:34:22 SQL> 
19:34:22 SQL> SELECT
19:34:22   2  tkr
19:34:22   3  ,trend
19:34:22   4  ,gatt
19:34:22   5  ,COUNT(tkr)
19:34:22   6  ,AVG(g1)
19:34:22   7  FROM stk_svmd16
19:34:22   8  GROUP BY tkr,trend,gatt
19:34:22   9  ORDER BY tkr,trend,gatt
19:34:22  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BHP		  -1 nup       1373 -.32903132
BHP		  -1 up        1035 .454376812
BHP		  -1		  1
BHP		   1 nup       1624  -.2984298
BHP		   1 up        1276 .432068966

Elapsed: 00:00:00.02
19:34:22 SQL> 
19:34:22 SQL> -- Now I derive goodness attributes:
19:34:22 SQL> 
19:34:22 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.11
19:34:22 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
19:34:22   2  SELECT
19:34:22   3  tkr
19:34:22   4  ,ydate
19:34:22   5  ,tkrdate
19:34:22   6  ,trend
19:34:22   7  ,g1
19:34:22   8  ,gatt
19:34:22   9  ,gattn
19:34:22  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
19:34:22  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
19:34:22  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
19:34:22  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
19:34:22  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
19:34:22  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
19:34:22  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
19:34:22  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
19:34:22  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
19:34:22  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
19:34:22  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
19:34:22  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
19:34:22  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
19:34:22  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
19:34:22  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
19:34:22  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
19:34:22  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
19:34:22  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
19:34:22  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
19:34:22  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
19:34:22  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
19:34:22  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
19:34:22  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
19:34:22  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
19:34:22  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
19:34:22  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
19:34:22  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
19:34:22  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
19:34:22  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
19:34:22  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
19:34:22  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
19:34:22  41  FROM stk_svmd16
19:34:22  42  /

Table created.

Elapsed: 00:00:00.94
19:34:23 SQL> 
19:34:23 SQL> -- rpt
19:34:23 SQL> 
19:34:23 SQL> SELECT
19:34:23   2  tkr
19:34:23   3  ,trend
19:34:23   4  ,gatt
19:34:23   5  ,COUNT(tkr)
19:34:23   6  ,AVG(g1)
19:34:23   7  FROM stk_ms_svmd_svmspy
19:34:23   8  GROUP BY tkr,trend,gatt
19:34:23   9  ORDER BY tkr,trend,gatt
19:34:23  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BHP		  -1 nup       1373 -.32903132
BHP		  -1 up        1035 .454376812
BHP		  -1		  1
BHP		   1 nup       1624  -.2984298
BHP		   1 up        1276 .432068966

Elapsed: 00:00:00.02
19:34:23 SQL> 
19:34:23 SQL> SELECT
19:34:23   2  tkr
19:34:23   3  ,COUNT(tkr)
19:34:23   4  ,MIN(ydate),MAX(ydate)
19:34:23   5  FROM stk_ms_svmd_svmspy
19:34:23   6  GROUP BY tkr
19:34:23   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
BHP		5309 1990-01-02 00:00:00 2011-01-21 00:00:00

Elapsed: 00:00:00.02
19:34:23 SQL> 
19:34:23 SQL> -- exit
19:34:23 SQL> 
19:34:23 SQL> 
19:34:23 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.13
19:34:24 SQL> 
19:34:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
19:34:24 SQL> 
19:34:24 SQL> CREATE TABLE stk_ms_u COMPRESS AS
19:34:24   2  SELECT * FROM stk_ms_svmspy
19:34:24   3  UNION
19:34:24   4  SELECT * FROM stk_ms_svmd_svmspy
19:34:24   5  /

Table created.

Elapsed: 00:00:00.27
19:34:24 SQL> 
19:34:24 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
