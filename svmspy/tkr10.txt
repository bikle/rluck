
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 27 23:02:38 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:02:38 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:02:38 SQL> 
23:02:38 SQL> 23:02:38 SQL> --
23:02:38 SQL> -- stk10u.sql
23:02:38 SQL> --
23:02:38 SQL> 
23:02:38 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
23:02:38 SQL> 
23:02:38 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
23:02:38 SQL> @stk10.sql     '&1'
23:02:38 SQL> --
23:02:38 SQL> -- stk10.sql
23:02:38 SQL> --
23:02:38 SQL> 
23:02:38 SQL> -- Creates views and tables for demonstrating SVM.
23:02:38 SQL> 
23:02:38 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.15
23:02:39 SQL> 
23:02:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
23:02:39 SQL> 
23:02:39 SQL> CREATE TABLE stk10svmspy COMPRESS AS
23:02:39   2  SELECT
23:02:39   3  tkr
23:02:39   4  ,ydate
23:02:39   5  ,tkr||ydate tkrdate
23:02:39   6  ,clse
23:02:39   7  ,clse2
23:02:39   8  ,rownum rnum -- acts as t in my time-series
23:02:39   9  -- g1 is important. I want to predict g1:
23:02:39  10  ,gain1day g1
23:02:39  11  -- Derive some attributes from clse.
23:02:39  12  -- Each row spans 5 minutes.
23:02:39  13  -- The number of rows in 1 day is 24*60/5.
23:02:39  14  -- I want the aggregations to span from 3 days to 9 days:
23:02:39  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
23:02:39  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
23:02:39  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
23:02:39  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
23:02:39  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
23:02:39  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
23:02:39  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
23:02:39  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
23:02:39  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
23:02:39  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
23:02:39  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
23:02:39  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
23:02:39  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
23:02:39  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
23:02:39  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
23:02:39  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
23:02:39  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
23:02:39  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
23:02:39  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
23:02:39  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
23:02:39  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
23:02:39  36  FROM di5min_stk_c2
23:02:39  37  WHERE UPPER(tkr)='&1'
23:02:39  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
23:02:39  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
23:02:39  40  ORDER BY ydate
23:02:39  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='WFMI'

Table created.

Elapsed: 00:00:00.28
23:02:39 SQL> 
23:02:39 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.07
23:02:39 SQL> 
23:02:39 SQL> -- rpt
23:02:39 SQL> 
23:02:39 SQL> SELECT
23:02:39   2  tkr
23:02:39   3  ,COUNT(tkr)ccount
23:02:39   4  ,MIN(clse)mnclse,MAX(clse)mxclse
23:02:39   5  -- ,MIN(avg4),MAX(avg4)
23:02:39   6  ,MIN(ydate),MAX(ydate)
23:02:39   7  ,MIN(g1)
23:02:39   8  ,MAX(g1)
23:02:39   9  FROM stk10svmspy
23:02:39  10  GROUP BY tkr
23:02:39  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
WFMI	      1326	47.85	   53.35 2011-01-04 14:30:00 2011-01-27 20:55:00      -1.19	  2.66

Elapsed: 00:00:00.00
23:02:39 SQL> 
23:02:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:02:39 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.09
23:02:39 SQL> CREATE TABLE stk12svmspy COMPRESS AS
23:02:39   2  SELECT
23:02:39   3  tkr
23:02:39   4  ,ydate
23:02:39   5  ,tkrdate
23:02:39   6  ,clse
23:02:39   7  ,rnum
23:02:39   8  ,g1
23:02:39   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
23:02:39  10  -- I want more attributes from the ones I derived above:
23:02:39  11  -- clse relation to moving-min
23:02:39  12  ,clse-min3  cm3
23:02:39  13  ,clse-min4  cm4
23:02:39  14  ,clse-min5  cm5
23:02:39  15  ,clse-min6  cm6
23:02:39  16  ,clse-min7  cm7
23:02:39  17  ,clse-min8  cm8
23:02:39  18  ,clse-min9  cm9
23:02:39  19  -- clse relation to moving-avg
23:02:39  20  ,clse-avg3  ca3
23:02:39  21  ,clse-avg4  ca4
23:02:39  22  ,clse-avg5  ca5
23:02:39  23  ,clse-avg6  ca6
23:02:39  24  ,clse-avg7  ca7
23:02:39  25  ,clse-avg8  ca8
23:02:39  26  ,clse-avg9  ca9
23:02:39  27  -- clse relation to moving-max
23:02:39  28  ,clse-max3  cx3
23:02:39  29  ,clse-max4  cx4
23:02:39  30  ,clse-max5  cx5
23:02:39  31  ,clse-max6  cx6
23:02:39  32  ,clse-max7  cx7
23:02:39  33  ,clse-max8  cx8
23:02:39  34  ,clse-max9  cx9
23:02:39  35  -- Derive date related attributes:
23:02:39  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:02:39  37  ,0+TO_CHAR(ydate,'D')d
23:02:39  38  ,0+TO_CHAR(ydate,'W')w
23:02:39  39  -- mpm stands for minutes-past-midnight:
23:02:39  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:02:39  41  -- mph stands for minutes-past-hour:
23:02:39  42  ,0+TO_CHAR(ydate,'MI')mph
23:02:39  43  FROM stk10svmspy
23:02:39  44  ORDER BY ydate
23:02:39  45  /

Table created.

Elapsed: 00:00:00.06
23:02:39 SQL> 
23:02:39 SQL> -- rpt
23:02:39 SQL> 
23:02:39 SQL> SELECT
23:02:39   2  tkr
23:02:39   3  ,COUNT(tkr)ccount
23:02:39   4  ,MIN(clse)mnclse,MAX(clse)mxclse
23:02:39   5  -- ,MIN(avg4),MAX(avg4)
23:02:39   6  ,MIN(ydate),MAX(ydate)
23:02:39   7  ,MIN(g1)
23:02:39   8  ,AVG(g1)
23:02:39   9  ,MAX(g1)
23:02:39  10  FROM stk12svmspy
23:02:39  11  GROUP BY tkr
23:02:39  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
WFMI	      1326	47.85	   53.35 2011-01-04 14:30:00 2011-01-27 20:55:00      -1.19 .161478632	     2.66

Elapsed: 00:00:00.02
23:02:39 SQL> 
23:02:39 SQL> -- Prepare for derivation of NTILE based parameters.
23:02:39 SQL> -- Also derive the "trend" parameter:
23:02:39 SQL> 
23:02:39 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.22
23:02:39 SQL> CREATE TABLE stk14svmspy COMPRESS AS
23:02:39   2  SELECT
23:02:39   3  tkr
23:02:39   4  ,ydate
23:02:39   5  ,tkrdate
23:02:39   6  ,clse
23:02:39   7  ,g1
23:02:39   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
23:02:39   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
23:02:39  10  ,CASE WHEN trend IS NULL THEN 1
23:02:39  11  	    WHEN trend =0      THEN 1
23:02:39  12  	    ELSE trend END trend
23:02:39  13  ,cm3
23:02:39  14  ,cm4
23:02:39  15  ,cm5
23:02:39  16  ,cm6
23:02:39  17  ,cm7
23:02:39  18  ,cm8
23:02:39  19  ,cm9
23:02:39  20  ,ca3
23:02:39  21  ,ca4
23:02:39  22  ,ca5
23:02:39  23  ,ca6
23:02:39  24  ,ca7
23:02:39  25  ,ca8
23:02:39  26  ,ca9
23:02:39  27  ,cx3
23:02:39  28  ,cx4
23:02:39  29  ,cx5
23:02:39  30  ,cx6
23:02:39  31  ,cx7
23:02:39  32  ,cx8
23:02:39  33  ,cx9
23:02:39  34  ,hh
23:02:39  35  ,d
23:02:39  36  ,w
23:02:39  37  ,mpm
23:02:39  38  ,mph
23:02:39  39  FROM stk12svmspy
23:02:39  40  -- Guard against divide by 0:
23:02:39  41  WHERE clse > 0
23:02:39  42  ORDER BY ydate
23:02:39  43  /

Table created.

Elapsed: 00:00:00.06
23:02:39 SQL> 
23:02:39 SQL> -- rpt
23:02:39 SQL> 
23:02:39 SQL> SELECT
23:02:39   2  tkr
23:02:39   3  ,trend
23:02:39   4  ,gatt
23:02:39   5  ,COUNT(tkr)
23:02:39   6  ,AVG(g1)
23:02:39   7  FROM stk14svmspy
23:02:39   8  GROUP BY tkr,trend,gatt
23:02:39   9  ORDER BY tkr,trend,gatt
23:02:39  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
WFMI		-1 nup	      123  -.2700813
WFMI		-1 up	      173 .642485549
WFMI		 1 nup	      550 -.35526591
WFMI		 1 up	      324 .945667438
WFMI		 1	      156

Elapsed: 00:00:00.01
23:02:39 SQL> 
23:02:39 SQL> -- Derive NTILE based params:
23:02:39 SQL> 
23:02:39 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.06
23:02:39 SQL> CREATE TABLE stk16svmspy COMPRESS AS
23:02:39   2  SELECT
23:02:39   3  tkr
23:02:39   4  ,ydate
23:02:39   5  ,tkrdate
23:02:39   6  ,clse
23:02:39   7  ,g1
23:02:39   8  ,gatt
23:02:39   9  ,gattn
23:02:39  10  ,trend
23:02:39  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
23:02:39  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
23:02:39  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
23:02:39  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
23:02:39  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
23:02:39  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
23:02:39  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
23:02:39  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
23:02:39  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
23:02:39  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
23:02:39  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
23:02:39  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
23:02:39  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
23:02:39  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
23:02:39  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
23:02:39  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
23:02:39  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
23:02:39  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
23:02:39  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
23:02:39  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
23:02:39  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
23:02:39  32  ,hh  att21
23:02:39  33  ,d   att22
23:02:39  34  ,w   att23
23:02:39  35  ,mpm att24
23:02:39  36  ,mph att25
23:02:39  37  ,trend att26
23:02:39  38  FROM stk14svmspy
23:02:39  39  ORDER BY ydate
23:02:39  40  /

Table created.

Elapsed: 00:00:00.21
23:02:40 SQL> 
23:02:40 SQL> -- rpt
23:02:40 SQL> 
23:02:40 SQL> SELECT
23:02:40   2  tkr
23:02:40   3  ,trend
23:02:40   4  ,gatt
23:02:40   5  ,COUNT(tkr)
23:02:40   6  ,AVG(g1)
23:02:40   7  FROM stk16svmspy
23:02:40   8  GROUP BY tkr,trend,gatt
23:02:40   9  ORDER BY tkr,trend,gatt
23:02:40  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
WFMI		-1 nup	      123  -.2700813
WFMI		-1 up	      173 .642485549
WFMI		 1 nup	      550 -.35526591
WFMI		 1 up	      324 .945667438
WFMI		 1	      156

Elapsed: 00:00:00.01
23:02:40 SQL> 
23:02:40 SQL> 
23:02:40 SQL> CREATE OR REPLACE VIEW sc12tkr AS
23:02:40   2  SELECT
23:02:40   3  m.tkr
23:02:40   4  ,m.ydate
23:02:40   5  ,m.tkrdate
23:02:40   6  ,l.score score_long
23:02:40   7  ,s.score score_short
23:02:40   8  ,m.g1
23:02:40   9  FROM stkscores l,stkscores s,stk16svmspy m
23:02:40  10  WHERE l.targ='gatt'
23:02:40  11  AND   s.targ='gattn'
23:02:40  12  AND l.tkrdate = s.tkrdate
23:02:40  13  AND l.tkrdate = m.tkrdate
23:02:40  14  -- Speed things up:
23:02:40  15  AND l.tkr = '&1'
23:02:40  16  AND s.tkr = '&1'
23:02:40  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'WFMI'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'WFMI'

View created.

Elapsed: 00:00:00.06
23:02:40 SQL> 
23:02:40 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.04
23:02:40 SQL> 
23:02:40 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
23:02:40   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
23:02:40   3  (
23:02:40   4  	SELECT
23:02:40   5  	tkrdate
23:02:40   6  	-- Find corr() tween score and g1 over 8 day period:
23:02:40   7  	,CORR((score_long - score_short),g1)
23:02:40   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
23:02:40   9  	FROM sc12tkr
23:02:40  10  )
23:02:40  11  GROUP BY tkrdate
23:02:40  12  /

Table created.

Elapsed: 00:00:00.13
23:02:40 SQL> 
23:02:40 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
23:02:40 SQL> 
23:02:40 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.13
23:02:40 SQL> 
23:02:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
23:02:40 SQL> 
23:02:40 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
23:02:40   2  SELECT
23:02:40   3  tkr
23:02:40   4  ,ydate
23:02:40   5  ,s.tkrdate
23:02:40   6  ,trend
23:02:40   7  ,g1
23:02:40   8  ,gatt
23:02:40   9  ,gattn
23:02:40  10  -- Recent CORR()tween scores and gains:
23:02:40  11  ,NVL(sc_corr,0)sc_corr
23:02:40  12  -- Goodness attributes:
23:02:40  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
23:02:40  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
23:02:40  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
23:02:40  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
23:02:40  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
23:02:40  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
23:02:40  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
23:02:40  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
23:02:40  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
23:02:40  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
23:02:40  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
23:02:40  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
23:02:40  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
23:02:40  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
23:02:40  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
23:02:40  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
23:02:40  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
23:02:40  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
23:02:40  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
23:02:40  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
23:02:40  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
23:02:40  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
23:02:40  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
23:02:40  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
23:02:40  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
23:02:40  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
23:02:40  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
23:02:40  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
23:02:40  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
23:02:40  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
23:02:40  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
23:02:40  44  FROM stk16svmspy s,score_corr_tkr c
23:02:40  45  WHERE s.tkrdate = c.tkrdate(+)
23:02:40  46  /

Table created.

Elapsed: 00:00:00.26
23:02:41 SQL> 
23:02:41 SQL> -- rpt
23:02:41 SQL> 
23:02:41 SQL> SELECT
23:02:41   2  tkr
23:02:41   3  ,trend
23:02:41   4  ,gatt
23:02:41   5  ,COUNT(tkr)
23:02:41   6  ,AVG(g1)
23:02:41   7  ,AVG(sc_corr)
23:02:41   8  FROM stk_ms_svmspy
23:02:41   9  GROUP BY tkr,trend,gatt
23:02:41  10  ORDER BY tkr,trend,gatt
23:02:41  11  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
------- ---------- --- ---------- ---------- ------------
WFMI		-1 nup	      123  -.2700813   .440461519
WFMI		-1 up	      173 .642485549   .391039869
WFMI		 1 nup	      550 -.35526591   .141502336
WFMI		 1 up	      324 .945667438   .138759988
WFMI		 1	      156	       .084277192

Elapsed: 00:00:00.00
23:02:41 SQL> 
23:02:41 SQL> SELECT
23:02:41   2  tkr
23:02:41   3  ,0+TO_CHAR(ydate,'D')daynum
23:02:41   4  ,COUNT(tkr)
23:02:41   5  ,MIN(ydate),MAX(ydate)
23:02:41   6  FROM stk_ms_svmspy
23:02:41   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
23:02:41   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
23:02:41   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
WFMI		 2	  156 2011-01-10 14:30:00 2011-01-24 20:55:00
WFMI		 3	  312 2011-01-04 14:30:00 2011-01-25 20:55:00
WFMI		 4	  312 2011-01-05 14:30:00 2011-01-26 20:55:00
WFMI		 5	  312 2011-01-06 14:30:00 2011-01-27 20:55:00
WFMI		 6	  234 2011-01-07 14:30:00 2011-01-21 20:55:00

Elapsed: 00:00:00.00
23:02:41 SQL> 
23:02:41 SQL> -- exit
23:02:41 SQL> @stk10svmd.sql '&1'
23:02:41 SQL> --
23:02:41 SQL> -- stk10svmd.sql
23:02:41 SQL> --
23:02:41 SQL> 
23:02:41 SQL> -- Creates views and tables for demonstrating SVM.
23:02:41 SQL> -- I need to run this after I run stk10.sql
23:02:41 SQL> 
23:02:41 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.15
23:02:41 SQL> 
23:02:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
23:02:41 SQL> 
23:02:41 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
23:02:41   2  SELECT
23:02:41   3  tkr
23:02:41   4  ,ydate
23:02:41   5  ,tkr||ydate tkrdate
23:02:41   6  ,clse
23:02:41   7  ,rownum rnum -- acts as t in my time-series
23:02:41   8  -- Derive some attributes from clse.
23:02:41   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
23:02:41  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
23:02:41  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
23:02:41  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
23:02:41  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
23:02:41  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
23:02:41  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
23:02:41  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
23:02:41  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
23:02:41  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
23:02:41  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
23:02:41  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
23:02:41  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
23:02:41  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
23:02:41  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
23:02:41  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
23:02:41  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
23:02:41  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
23:02:41  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
23:02:41  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
23:02:41  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
23:02:41  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
23:02:41  31  -- ystk21 created here: svmd/cr_ystk21.sql
23:02:41  32  FROM ystk21
23:02:41  33  WHERE UPPER(tkr)='&1'
23:02:41  34  AND ydate > '1990-01-01'
23:02:41  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
23:02:41  36  ORDER BY ydate
23:02:41  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='WFMI'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='WFMI')

Table created.

Elapsed: 00:00:00.35
23:02:41 SQL> 
23:02:41 SQL> -- rpt
23:02:41 SQL> 
23:02:41 SQL> SELECT
23:02:41   2  tkr
23:02:41   3  ,COUNT(tkr)
23:02:41   4  ,MIN(clse),MAX(clse)
23:02:41   5  ,MIN(avg4),MAX(avg4)
23:02:41   6  ,MIN(ydate),MAX(ydate)
23:02:41   7  FROM stk_svmd10svmspy
23:02:41   8  GROUP BY tkr
23:02:41   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
WFMI		4791	   1.71      73.52	1.944	  72.502 1992-01-23 21:00:00 2011-01-26 21:00:00

Elapsed: 00:00:00.02
23:02:41 SQL> 
23:02:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:02:41 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.13
23:02:41 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
23:02:41   2  SELECT
23:02:41   3  tkr
23:02:41   4  ,ydate
23:02:41   5  ,tkrdate
23:02:41   6  ,clse
23:02:41   7  ,rnum
23:02:41   8  -- g1 is important. I want to predict g1:
23:02:41   9  ,ld - clse g1
23:02:41  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
23:02:41  11  -- I want more attributes from the ones I derived above:
23:02:41  12  -- clse relation to moving-min
23:02:41  13  ,clse-min3  cm3
23:02:41  14  ,clse-min4  cm4
23:02:41  15  ,clse-min5  cm5
23:02:41  16  ,clse-min6  cm6
23:02:41  17  ,clse-min7  cm7
23:02:41  18  ,clse-min8  cm8
23:02:41  19  ,clse-min9  cm9
23:02:41  20  -- clse relation to moving-avg
23:02:41  21  ,clse-avg3  ca3
23:02:41  22  ,clse-avg4  ca4
23:02:41  23  ,clse-avg5  ca5
23:02:41  24  ,clse-avg6  ca6
23:02:41  25  ,clse-avg7  ca7
23:02:41  26  ,clse-avg8  ca8
23:02:41  27  ,clse-avg9  ca9
23:02:41  28  -- clse relation to moving-max
23:02:41  29  ,clse-max3  cx3
23:02:41  30  ,clse-max4  cx4
23:02:41  31  ,clse-max5  cx5
23:02:41  32  ,clse-max6  cx6
23:02:41  33  ,clse-max7  cx7
23:02:41  34  ,clse-max8  cx8
23:02:41  35  ,clse-max9  cx9
23:02:41  36  -- Derive date related attributes:
23:02:41  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:02:41  38  ,0+TO_CHAR(ydate,'D')d
23:02:41  39  ,0+TO_CHAR(ydate,'W')w
23:02:41  40  -- mpm stands for minutes-past-midnight:
23:02:41  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:02:41  42  -- mph stands for minutes-past-hour:
23:02:41  43  ,0+TO_CHAR(ydate,'MI')mph
23:02:41  44  FROM stk_svmd10svmspy
23:02:41  45  ORDER BY ydate
23:02:41  46  /

Table created.

Elapsed: 00:00:00.14
23:02:41 SQL> 
23:02:41 SQL> -- rpt
23:02:41 SQL> 
23:02:41 SQL> SELECT
23:02:41   2  tkr
23:02:41   3  ,COUNT(tkr)
23:02:41   4  ,MIN(clse),MAX(clse)
23:02:41   5  ,MIN(ydate),MAX(ydate)
23:02:41   6  FROM stk_svmd12
23:02:41   7  GROUP BY tkr
23:02:41   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
WFMI		4791	   1.71      73.52 1992-01-23 21:00:00 2011-01-26 21:00:00

Elapsed: 00:00:00.01
23:02:42 SQL> 
23:02:42 SQL> -- Prepare for derivation of NTILE based parameters.
23:02:42 SQL> -- Also derive the "trend" parameter:
23:02:42 SQL> 
23:02:42 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.18
23:02:42 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
23:02:42   2  SELECT
23:02:42   3  tkr
23:02:42   4  ,ydate
23:02:42   5  ,tkrdate
23:02:42   6  ,clse
23:02:42   7  ,g1
23:02:42   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
23:02:42   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
23:02:42  10  ,CASE WHEN trend IS NULL THEN 1
23:02:42  11  	    WHEN trend =0      THEN 1
23:02:42  12  	    ELSE trend END trend
23:02:42  13  ,cm3
23:02:42  14  ,cm4
23:02:42  15  ,cm5
23:02:42  16  ,cm6
23:02:42  17  ,cm7
23:02:42  18  ,cm8
23:02:42  19  ,cm9
23:02:42  20  ,ca3
23:02:42  21  ,ca4
23:02:42  22  ,ca5
23:02:42  23  ,ca6
23:02:42  24  ,ca7
23:02:42  25  ,ca8
23:02:42  26  ,ca9
23:02:42  27  ,cx3
23:02:42  28  ,cx4
23:02:42  29  ,cx5
23:02:42  30  ,cx6
23:02:42  31  ,cx7
23:02:42  32  ,cx8
23:02:42  33  ,cx9
23:02:42  34  ,hh
23:02:42  35  ,d
23:02:42  36  ,w
23:02:42  37  ,mpm
23:02:42  38  ,mph
23:02:42  39  FROM stk_svmd12
23:02:42  40  -- Guard against divide by 0:
23:02:42  41  WHERE clse > 0
23:02:42  42  ORDER BY ydate
23:02:42  43  /

Table created.

Elapsed: 00:00:00.10
23:02:42 SQL> 
23:02:42 SQL> -- rpt
23:02:42 SQL> 
23:02:42 SQL> SELECT
23:02:42   2  tkr
23:02:42   3  ,trend
23:02:42   4  ,gatt
23:02:42   5  ,COUNT(tkr)
23:02:42   6  ,AVG(g1)
23:02:42   7  FROM stk_svmd14
23:02:42   8  GROUP BY tkr,trend,gatt
23:02:42   9  ORDER BY tkr,trend,gatt
23:02:42  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
WFMI		  -1 nup       1242 -.30862319
WFMI		  -1 up        1020 .382362745
WFMI		  -1		  1
WFMI		   1 nup       1468 -.27576975
WFMI		   1 up        1060 .421962264

Elapsed: 00:00:00.01
23:02:42 SQL> 
23:02:42 SQL> -- Derive NTILE based params:
23:02:42 SQL> 
23:02:42 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.13
23:02:42 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
23:02:42   2  SELECT
23:02:42   3  tkr
23:02:42   4  ,ydate
23:02:42   5  ,tkrdate
23:02:42   6  ,clse
23:02:42   7  ,g1
23:02:42   8  ,gatt
23:02:42   9  ,gattn
23:02:42  10  ,trend
23:02:42  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
23:02:42  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
23:02:42  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
23:02:42  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
23:02:42  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
23:02:42  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
23:02:42  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
23:02:42  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
23:02:42  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
23:02:42  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
23:02:42  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
23:02:42  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
23:02:42  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
23:02:42  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
23:02:42  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
23:02:42  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
23:02:42  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
23:02:42  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
23:02:42  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
23:02:42  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
23:02:42  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
23:02:42  32  ,hh  att21
23:02:42  33  ,d   att22
23:02:42  34  ,w   att23
23:02:42  35  ,mpm att24
23:02:42  36  ,mph att25
23:02:42  37  ,trend att26
23:02:42  38  FROM stk_svmd14
23:02:42  39  ORDER BY ydate
23:02:42  40  /

Table created.

Elapsed: 00:00:00.51
23:02:42 SQL> 
23:02:42 SQL> -- rpt
23:02:42 SQL> 
23:02:42 SQL> SELECT
23:02:42   2  tkr
23:02:42   3  ,trend
23:02:42   4  ,gatt
23:02:42   5  ,COUNT(tkr)
23:02:42   6  ,AVG(g1)
23:02:42   7  FROM stk_svmd16
23:02:42   8  GROUP BY tkr,trend,gatt
23:02:42   9  ORDER BY tkr,trend,gatt
23:02:42  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
WFMI		  -1 nup       1242 -.30862319
WFMI		  -1 up        1020 .382362745
WFMI		  -1		  1
WFMI		   1 nup       1468 -.27576975
WFMI		   1 up        1060 .421962264

Elapsed: 00:00:00.01
23:02:42 SQL> 
23:02:42 SQL> 
23:02:42 SQL> CREATE OR REPLACE VIEW sc12tkr AS
23:02:42   2  SELECT
23:02:42   3  m.tkr
23:02:42   4  ,m.ydate
23:02:42   5  ,m.tkrdate
23:02:42   6  ,l.score score_long
23:02:42   7  ,s.score score_short
23:02:42   8  ,m.g1
23:02:42   9  FROM stkscores l,stkscores s,stk_svmd16 m
23:02:42  10  WHERE l.targ='gatt'
23:02:42  11  AND   s.targ='gattn'
23:02:42  12  AND l.tkrdate = s.tkrdate
23:02:42  13  AND l.tkrdate = m.tkrdate
23:02:42  14  -- Speed things up:
23:02:42  15  AND l.tkr = '&1'
23:02:42  16  AND s.tkr = '&1'
23:02:42  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'WFMI'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'WFMI'

View created.

Elapsed: 00:00:00.04
23:02:42 SQL> 
23:02:42 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.07
23:02:43 SQL> 
23:02:43 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
23:02:43   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
23:02:43   3  (
23:02:43   4  	SELECT
23:02:43   5  	tkrdate
23:02:43   6  	-- Find corr() tween score and g1 over 8 day period:
23:02:43   7  	,CORR((score_long - score_short),g1)
23:02:43   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
23:02:43   9  	FROM sc12tkr
23:02:43  10  )
23:02:43  11  GROUP BY tkrdate
23:02:43  12  /

Table created.

Elapsed: 00:00:00.12
23:02:43 SQL> 
23:02:43 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
23:02:43 SQL> 
23:02:43 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.19
23:02:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
23:02:43 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
23:02:43   2  SELECT
23:02:43   3  tkr
23:02:43   4  ,ydate
23:02:43   5  ,s.tkrdate
23:02:43   6  ,trend
23:02:43   7  ,g1
23:02:43   8  ,gatt
23:02:43   9  ,gattn
23:02:43  10  -- Recent CORR()tween scores and gains:
23:02:43  11  ,NVL(sc_corr,0)sc_corr
23:02:43  12  -- Goodness attributes:
23:02:43  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
23:02:43  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
23:02:43  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
23:02:43  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
23:02:43  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
23:02:43  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
23:02:43  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
23:02:43  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
23:02:43  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
23:02:43  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
23:02:43  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
23:02:43  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
23:02:43  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
23:02:43  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
23:02:43  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
23:02:43  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
23:02:43  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
23:02:43  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
23:02:43  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
23:02:43  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
23:02:43  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
23:02:43  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
23:02:43  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
23:02:43  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
23:02:43  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
23:02:43  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
23:02:43  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
23:02:43  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
23:02:43  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
23:02:43  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
23:02:43  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
23:02:43  44  FROM stk_svmd16 s,score_corr_tkr c
23:02:43  45  WHERE s.tkrdate = c.tkrdate(+)
23:02:43  46  /

Table created.

Elapsed: 00:00:00.92
23:02:44 SQL> 
23:02:44 SQL> -- rpt
23:02:44 SQL> 
23:02:44 SQL> SELECT
23:02:44   2  tkr
23:02:44   3  ,trend
23:02:44   4  ,gatt
23:02:44   5  ,COUNT(tkr)
23:02:44   6  ,AVG(g1)
23:02:44   7  ,AVG(sc_corr)
23:02:44   8  FROM stk_ms_svmd_svmspy
23:02:44   9  GROUP BY tkr,trend,gatt
23:02:44  10  ORDER BY tkr,trend,gatt
23:02:44  11  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ------------
WFMI		  -1 nup       1242 -.30862319		  0
WFMI		  -1 up        1020 .382362745		  0
WFMI		  -1		  1			  0
WFMI		   1 nup       1468 -.27576975		  0
WFMI		   1 up        1060 .421962264		  0

Elapsed: 00:00:00.01
23:02:44 SQL> 
23:02:44 SQL> SELECT
23:02:44   2  tkr
23:02:44   3  ,COUNT(tkr)
23:02:44   4  ,MIN(ydate),MAX(ydate)
23:02:44   5  FROM stk_ms_svmd_svmspy
23:02:44   6  GROUP BY tkr
23:02:44   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
WFMI		4791 1992-01-23 21:00:00 2011-01-26 21:00:00

Elapsed: 00:00:00.01
23:02:44 SQL> 
23:02:44 SQL> -- exit
23:02:44 SQL> 
23:02:44 SQL> 
23:02:44 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.20
23:02:44 SQL> 
23:02:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
23:02:44 SQL> 
23:02:44 SQL> CREATE TABLE stk_ms_u COMPRESS AS
23:02:44   2  SELECT * FROM stk_ms_svmspy
23:02:44   3  UNION
23:02:44   4  SELECT * FROM stk_ms_svmd_svmspy
23:02:44   5  /

Table created.

Elapsed: 00:00:00.19
23:02:45 SQL> 
23:02:45 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
