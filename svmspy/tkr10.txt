
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 20 12:00:04 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

12:00:04 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
12:00:04 SQL> 
12:00:04 SQL> 12:00:04 SQL> --
12:00:04 SQL> -- stk10u.sql
12:00:04 SQL> --
12:00:04 SQL> 
12:00:04 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
12:00:04 SQL> 
12:00:04 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
12:00:04 SQL> @stk10.sql     '&1'
12:00:04 SQL> --
12:00:04 SQL> -- stk10.sql
12:00:04 SQL> --
12:00:04 SQL> 
12:00:04 SQL> -- Creates views and tables for demonstrating SVM.
12:00:04 SQL> 
12:00:04 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:02.02
12:00:06 SQL> 
12:00:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
12:00:06 SQL> 
12:00:06 SQL> CREATE TABLE stk10svmspy COMPRESS AS
12:00:06   2  SELECT
12:00:06   3  tkr
12:00:06   4  ,ydate
12:00:06   5  ,tkr||ydate tkrdate
12:00:06   6  ,clse
12:00:06   7  ,clse2
12:00:06   8  ,rownum rnum -- acts as t in my time-series
12:00:06   9  -- g1 is important. I want to predict g1:
12:00:06  10  ,gain1day g1
12:00:06  11  -- Derive some attributes from clse.
12:00:06  12  -- Each row spans 5 minutes.
12:00:06  13  -- The number of rows in 1 day is 24*60/5.
12:00:06  14  -- I want the aggregations to span from 3 days to 9 days:
12:00:06  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
12:00:06  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
12:00:06  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
12:00:06  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
12:00:06  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
12:00:06  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
12:00:06  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
12:00:06  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
12:00:06  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
12:00:06  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
12:00:06  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
12:00:06  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
12:00:06  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
12:00:06  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
12:00:06  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
12:00:06  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
12:00:06  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
12:00:06  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
12:00:06  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
12:00:06  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
12:00:06  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
12:00:06  36  FROM di5min_stk_c2
12:00:06  37  WHERE UPPER(tkr)='&1'
12:00:06  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
12:00:06  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
12:00:06  40  ORDER BY ydate
12:00:06  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='MET'

Table created.

Elapsed: 00:00:00.22
12:00:07 SQL> 
12:00:07 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.03
12:00:07 SQL> 
12:00:07 SQL> -- rpt
12:00:07 SQL> 
12:00:07 SQL> SELECT
12:00:07   2  tkr
12:00:07   3  ,COUNT(tkr)ccount
12:00:07   4  ,MIN(clse)mnclse,MAX(clse)mxclse
12:00:07   5  -- ,MIN(avg4),MAX(avg4)
12:00:07   6  ,MIN(ydate),MAX(ydate)
12:00:07   7  ,MIN(g1)
12:00:07   8  ,MAX(g1)
12:00:07   9  FROM stk10svmspy
12:00:07  10  GROUP BY tkr
12:00:07  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
MET	       858	45.07	   46.95 2011-01-04 14:30:00 2011-01-19 20:55:00      -1.72	  1.25

Elapsed: 00:00:00.01
12:00:07 SQL> 
12:00:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:00:07 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.04
12:00:07 SQL> CREATE TABLE stk12svmspy COMPRESS AS
12:00:07   2  SELECT
12:00:07   3  tkr
12:00:07   4  ,ydate
12:00:07   5  ,tkrdate
12:00:07   6  ,clse
12:00:07   7  ,rnum
12:00:07   8  ,g1
12:00:07   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
12:00:07  10  -- I want more attributes from the ones I derived above:
12:00:07  11  -- clse relation to moving-min
12:00:07  12  ,clse-min3  cm3
12:00:07  13  ,clse-min4  cm4
12:00:07  14  ,clse-min5  cm5
12:00:07  15  ,clse-min6  cm6
12:00:07  16  ,clse-min7  cm7
12:00:07  17  ,clse-min8  cm8
12:00:07  18  ,clse-min9  cm9
12:00:07  19  -- clse relation to moving-avg
12:00:07  20  ,clse-avg3  ca3
12:00:07  21  ,clse-avg4  ca4
12:00:07  22  ,clse-avg5  ca5
12:00:07  23  ,clse-avg6  ca6
12:00:07  24  ,clse-avg7  ca7
12:00:07  25  ,clse-avg8  ca8
12:00:07  26  ,clse-avg9  ca9
12:00:07  27  -- clse relation to moving-max
12:00:07  28  ,clse-max3  cx3
12:00:07  29  ,clse-max4  cx4
12:00:07  30  ,clse-max5  cx5
12:00:07  31  ,clse-max6  cx6
12:00:07  32  ,clse-max7  cx7
12:00:07  33  ,clse-max8  cx8
12:00:07  34  ,clse-max9  cx9
12:00:07  35  -- Derive date related attributes:
12:00:07  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:00:07  37  ,0+TO_CHAR(ydate,'D')d
12:00:07  38  ,0+TO_CHAR(ydate,'W')w
12:00:07  39  -- mpm stands for minutes-past-midnight:
12:00:07  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:00:07  41  -- mph stands for minutes-past-hour:
12:00:07  42  ,0+TO_CHAR(ydate,'MI')mph
12:00:07  43  FROM stk10svmspy
12:00:07  44  ORDER BY ydate
12:00:07  45  /

Table created.

Elapsed: 00:00:00.06
12:00:07 SQL> 
12:00:07 SQL> -- rpt
12:00:07 SQL> 
12:00:07 SQL> SELECT
12:00:07   2  tkr
12:00:07   3  ,COUNT(tkr)ccount
12:00:07   4  ,MIN(clse)mnclse,MAX(clse)mxclse
12:00:07   5  -- ,MIN(avg4),MAX(avg4)
12:00:07   6  ,MIN(ydate),MAX(ydate)
12:00:07   7  ,MIN(g1)
12:00:07   8  ,AVG(g1)
12:00:07   9  ,MAX(g1)
12:00:07  10  FROM stk12svmspy
12:00:07  11  GROUP BY tkr
12:00:07  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
MET	       858	45.07	   46.95 2011-01-04 14:30:00 2011-01-19 20:55:00      -1.72 -.00650285	     1.25

Elapsed: 00:00:00.01
12:00:07 SQL> 
12:00:07 SQL> -- Prepare for derivation of NTILE based parameters.
12:00:07 SQL> -- Also derive the "trend" parameter:
12:00:07 SQL> 
12:00:07 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
12:00:07 SQL> CREATE TABLE stk14svmspy COMPRESS AS
12:00:07   2  SELECT
12:00:07   3  tkr
12:00:07   4  ,ydate
12:00:07   5  ,tkrdate
12:00:07   6  ,clse
12:00:07   7  ,g1
12:00:07   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
12:00:07   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
12:00:07  10  ,CASE WHEN trend IS NULL THEN 1
12:00:07  11  	    WHEN trend =0      THEN 1
12:00:07  12  	    ELSE trend END trend
12:00:07  13  ,cm3
12:00:07  14  ,cm4
12:00:07  15  ,cm5
12:00:07  16  ,cm6
12:00:07  17  ,cm7
12:00:07  18  ,cm8
12:00:07  19  ,cm9
12:00:07  20  ,ca3
12:00:07  21  ,ca4
12:00:07  22  ,ca5
12:00:07  23  ,ca6
12:00:07  24  ,ca7
12:00:07  25  ,ca8
12:00:07  26  ,ca9
12:00:07  27  ,cx3
12:00:07  28  ,cx4
12:00:07  29  ,cx5
12:00:07  30  ,cx6
12:00:07  31  ,cx7
12:00:07  32  ,cx8
12:00:07  33  ,cx9
12:00:07  34  ,hh
12:00:07  35  ,d
12:00:07  36  ,w
12:00:07  37  ,mpm
12:00:07  38  ,mph
12:00:07  39  FROM stk12svmspy
12:00:07  40  -- Guard against divide by 0:
12:00:07  41  WHERE clse > 0
12:00:07  42  ORDER BY ydate
12:00:07  43  /

Table created.

Elapsed: 00:00:00.08
12:00:07 SQL> 
12:00:07 SQL> -- rpt
12:00:07 SQL> 
12:00:07 SQL> SELECT
12:00:07   2  tkr
12:00:07   3  ,trend
12:00:07   4  ,gatt
12:00:07   5  ,COUNT(tkr)
12:00:07   6  ,AVG(g1)
12:00:07   7  FROM stk14svmspy
12:00:07   8  GROUP BY tkr,trend,gatt
12:00:07   9  ORDER BY tkr,trend,gatt
12:00:07  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MET		-1 nup	       58 -.31189655
MET		-1 up	      268 .580970149
MET		-1	       81
MET		 1 nup	      301 -.58840532
MET		 1 up	       75      .4658
MET		 1	       75

6 rows selected.

Elapsed: 00:00:00.00
12:00:07 SQL> 
12:00:07 SQL> -- Derive NTILE based params:
12:00:07 SQL> 
12:00:07 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
12:00:07 SQL> CREATE TABLE stk16svmspy COMPRESS AS
12:00:07   2  SELECT
12:00:07   3  tkr
12:00:07   4  ,ydate
12:00:07   5  ,tkrdate
12:00:07   6  ,clse
12:00:07   7  ,g1
12:00:07   8  ,gatt
12:00:07   9  ,gattn
12:00:07  10  ,trend
12:00:07  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
12:00:07  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
12:00:07  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
12:00:07  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
12:00:07  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
12:00:07  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
12:00:07  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
12:00:07  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
12:00:07  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
12:00:07  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
12:00:07  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
12:00:07  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
12:00:07  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
12:00:07  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
12:00:07  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
12:00:07  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
12:00:07  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
12:00:07  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
12:00:07  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
12:00:07  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
12:00:07  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
12:00:07  32  ,hh  att21
12:00:07  33  ,d   att22
12:00:07  34  ,w   att23
12:00:07  35  ,mpm att24
12:00:07  36  ,mph att25
12:00:07  37  ,trend att26
12:00:07  38  FROM stk14svmspy
12:00:07  39  ORDER BY ydate
12:00:07  40  /

Table created.

Elapsed: 00:00:00.18
12:00:07 SQL> 
12:00:07 SQL> -- rpt
12:00:07 SQL> 
12:00:07 SQL> SELECT
12:00:07   2  tkr
12:00:07   3  ,trend
12:00:07   4  ,gatt
12:00:07   5  ,COUNT(tkr)
12:00:07   6  ,AVG(g1)
12:00:07   7  FROM stk16svmspy
12:00:07   8  GROUP BY tkr,trend,gatt
12:00:07   9  ORDER BY tkr,trend,gatt
12:00:07  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MET		-1 nup	       58 -.31189655
MET		-1 up	      268 .580970149
MET		-1	       81
MET		 1 nup	      301 -.58840532
MET		 1 up	       75      .4658
MET		 1	       75

6 rows selected.

Elapsed: 00:00:00.00
12:00:07 SQL> 
12:00:07 SQL> -- Now I derive goodness attributes:
12:00:07 SQL> 
12:00:07 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.05
12:00:07 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
12:00:07   2  SELECT
12:00:07   3  tkr
12:00:07   4  ,ydate
12:00:07   5  ,tkrdate
12:00:07   6  ,trend
12:00:07   7  ,g1
12:00:07   8  ,gatt
12:00:07   9  ,gattn
12:00:07  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
12:00:07  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
12:00:07  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
12:00:07  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
12:00:07  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
12:00:07  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
12:00:07  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
12:00:07  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
12:00:07  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
12:00:07  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
12:00:07  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
12:00:07  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
12:00:07  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
12:00:07  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
12:00:07  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
12:00:07  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
12:00:07  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
12:00:07  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
12:00:07  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
12:00:07  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
12:00:07  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
12:00:07  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
12:00:07  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
12:00:07  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
12:00:07  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
12:00:07  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
12:00:07  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
12:00:07  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
12:00:07  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
12:00:07  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
12:00:07  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
12:00:07  41  FROM stk16svmspy
12:00:07  42  /

Table created.

Elapsed: 00:00:00.17
12:00:07 SQL> 
12:00:07 SQL> -- rpt
12:00:07 SQL> 
12:00:07 SQL> SELECT
12:00:07   2  tkr
12:00:07   3  ,trend
12:00:07   4  ,gatt
12:00:07   5  ,COUNT(tkr)
12:00:07   6  ,AVG(g1)
12:00:07   7  FROM stk_ms_svmspy
12:00:07   8  GROUP BY tkr,trend,gatt
12:00:07   9  ORDER BY tkr,trend,gatt
12:00:07  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MET		-1 nup	       58 -.31189655
MET		-1 up	      268 .580970149
MET		-1	       81
MET		 1 nup	      301 -.58840532
MET		 1 up	       75      .4658
MET		 1	       75

6 rows selected.

Elapsed: 00:00:00.01
12:00:07 SQL> 
12:00:07 SQL> SELECT
12:00:07   2  tkr
12:00:07   3  ,0+TO_CHAR(ydate,'D')daynum
12:00:07   4  ,COUNT(tkr)
12:00:07   5  ,MIN(ydate),MAX(ydate)
12:00:07   6  FROM stk_ms_svmspy
12:00:07   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
12:00:07   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
12:00:07   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
MET		 2	   78 2011-01-10 14:30:00 2011-01-10 20:55:00
MET		 3	  234 2011-01-04 14:30:00 2011-01-18 20:55:00
MET		 4	  234 2011-01-05 14:30:00 2011-01-19 20:55:00
MET		 5	  156 2011-01-06 14:30:00 2011-01-13 20:55:00
MET		 6	  156 2011-01-07 14:30:00 2011-01-14 20:55:00

Elapsed: 00:00:00.01
12:00:07 SQL> 
12:00:07 SQL> -- exit
12:00:07 SQL> @stk10svmd.sql '&1'
12:00:07 SQL> --
12:00:07 SQL> -- stk10svmd.sql
12:00:07 SQL> --
12:00:07 SQL> 
12:00:07 SQL> -- Creates views and tables for demonstrating SVM.
12:00:07 SQL> -- I need to run this after I run stk10.sql
12:00:07 SQL> 
12:00:07 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.09
12:00:07 SQL> 
12:00:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
12:00:08 SQL> 
12:00:08 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
12:00:08   2  SELECT
12:00:08   3  tkr
12:00:08   4  ,ydate
12:00:08   5  ,tkr||ydate tkrdate
12:00:08   6  ,clse
12:00:08   7  ,rownum rnum -- acts as t in my time-series
12:00:08   8  -- Derive some attributes from clse.
12:00:08   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
12:00:08  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
12:00:08  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
12:00:08  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
12:00:08  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
12:00:08  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
12:00:08  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
12:00:08  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
12:00:08  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
12:00:08  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
12:00:08  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
12:00:08  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
12:00:08  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
12:00:08  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
12:00:08  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
12:00:08  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
12:00:08  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
12:00:08  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
12:00:08  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
12:00:08  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
12:00:08  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
12:00:08  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
12:00:08  31  FROM ystk
12:00:08  32  WHERE UPPER(tkr)='&1'
12:00:08  33  AND ydate > '1990-01-01'
12:00:08  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
12:00:08  35  ORDER BY ydate
12:00:08  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='MET'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='MET')

Table created.

Elapsed: 00:00:00.27
12:00:08 SQL> 
12:00:08 SQL> -- rpt
12:00:08 SQL> 
12:00:08 SQL> SELECT
12:00:08   2  tkr
12:00:08   3  ,COUNT(tkr)
12:00:08   4  ,MIN(clse),MAX(clse)
12:00:08   5  ,MIN(avg4),MAX(avg4)
12:00:08   6  ,MIN(ydate),MAX(ydate)
12:00:08   7  FROM stk_svmd10svmspy
12:00:08   8  GROUP BY tkr
12:00:08   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
MET		2655	  11.63      65.94     12.538	  65.494 2000-06-23 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.01
12:00:08 SQL> 
12:00:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:00:08 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
12:00:08 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
12:00:08   2  SELECT
12:00:08   3  tkr
12:00:08   4  ,ydate
12:00:08   5  ,tkrdate
12:00:08   6  ,clse
12:00:08   7  ,rnum
12:00:08   8  -- g1 is important. I want to predict g1:
12:00:08   9  ,ld - clse g1
12:00:08  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
12:00:08  11  -- I want more attributes from the ones I derived above:
12:00:08  12  -- clse relation to moving-min
12:00:08  13  ,clse-min3  cm3
12:00:08  14  ,clse-min4  cm4
12:00:08  15  ,clse-min5  cm5
12:00:08  16  ,clse-min6  cm6
12:00:08  17  ,clse-min7  cm7
12:00:08  18  ,clse-min8  cm8
12:00:08  19  ,clse-min9  cm9
12:00:08  20  -- clse relation to moving-avg
12:00:08  21  ,clse-avg3  ca3
12:00:08  22  ,clse-avg4  ca4
12:00:08  23  ,clse-avg5  ca5
12:00:08  24  ,clse-avg6  ca6
12:00:08  25  ,clse-avg7  ca7
12:00:08  26  ,clse-avg8  ca8
12:00:08  27  ,clse-avg9  ca9
12:00:08  28  -- clse relation to moving-max
12:00:08  29  ,clse-max3  cx3
12:00:08  30  ,clse-max4  cx4
12:00:08  31  ,clse-max5  cx5
12:00:08  32  ,clse-max6  cx6
12:00:08  33  ,clse-max7  cx7
12:00:08  34  ,clse-max8  cx8
12:00:08  35  ,clse-max9  cx9
12:00:08  36  -- Derive date related attributes:
12:00:08  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:00:08  38  ,0+TO_CHAR(ydate,'D')d
12:00:08  39  ,0+TO_CHAR(ydate,'W')w
12:00:08  40  -- mpm stands for minutes-past-midnight:
12:00:08  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:00:08  42  -- mph stands for minutes-past-hour:
12:00:08  43  ,0+TO_CHAR(ydate,'MI')mph
12:00:08  44  FROM stk_svmd10svmspy
12:00:08  45  ORDER BY ydate
12:00:08  46  /

Table created.

Elapsed: 00:00:00.10
12:00:08 SQL> 
12:00:08 SQL> -- rpt
12:00:08 SQL> 
12:00:08 SQL> SELECT
12:00:08   2  tkr
12:00:08   3  ,COUNT(tkr)
12:00:08   4  ,MIN(clse),MAX(clse)
12:00:08   5  ,MIN(ydate),MAX(ydate)
12:00:08   6  FROM stk_svmd12
12:00:08   7  GROUP BY tkr
12:00:08   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
MET		2655	  11.63      65.94 2000-06-23 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.01
12:00:08 SQL> 
12:00:08 SQL> -- Prepare for derivation of NTILE based parameters.
12:00:08 SQL> -- Also derive the "trend" parameter:
12:00:08 SQL> 
12:00:08 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
12:00:08 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
12:00:08   2  SELECT
12:00:08   3  tkr
12:00:08   4  ,ydate
12:00:08   5  ,tkrdate
12:00:08   6  ,clse
12:00:08   7  ,g1
12:00:08   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
12:00:08   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
12:00:08  10  ,CASE WHEN trend IS NULL THEN 1
12:00:08  11  	    WHEN trend =0      THEN 1
12:00:08  12  	    ELSE trend END trend
12:00:08  13  ,cm3
12:00:08  14  ,cm4
12:00:08  15  ,cm5
12:00:08  16  ,cm6
12:00:08  17  ,cm7
12:00:08  18  ,cm8
12:00:08  19  ,cm9
12:00:08  20  ,ca3
12:00:08  21  ,ca4
12:00:08  22  ,ca5
12:00:08  23  ,ca6
12:00:08  24  ,ca7
12:00:08  25  ,ca8
12:00:08  26  ,ca9
12:00:08  27  ,cx3
12:00:08  28  ,cx4
12:00:08  29  ,cx5
12:00:08  30  ,cx6
12:00:08  31  ,cx7
12:00:08  32  ,cx8
12:00:08  33  ,cx9
12:00:08  34  ,hh
12:00:08  35  ,d
12:00:08  36  ,w
12:00:08  37  ,mpm
12:00:08  38  ,mph
12:00:08  39  FROM stk_svmd12
12:00:08  40  -- Guard against divide by 0:
12:00:08  41  WHERE clse > 0
12:00:08  42  ORDER BY ydate
12:00:08  43  /

Table created.

Elapsed: 00:00:00.09
12:00:08 SQL> 
12:00:08 SQL> -- rpt
12:00:08 SQL> 
12:00:08 SQL> SELECT
12:00:08   2  tkr
12:00:08   3  ,trend
12:00:08   4  ,gatt
12:00:08   5  ,COUNT(tkr)
12:00:08   6  ,AVG(g1)
12:00:08   7  FROM stk_svmd14
12:00:08   8  GROUP BY tkr,trend,gatt
12:00:08   9  ORDER BY tkr,trend,gatt
12:00:08  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MET		  -1 nup	663 -.54193062
MET		  -1 up 	555 .740108108
MET		   1 nup	863 -.47235226
MET		   1 up 	573 .671727749
MET		   1		  1

Elapsed: 00:00:00.00
12:00:08 SQL> 
12:00:08 SQL> -- Derive NTILE based params:
12:00:08 SQL> 
12:00:08 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.05
12:00:08 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
12:00:08   2  SELECT
12:00:08   3  tkr
12:00:08   4  ,ydate
12:00:08   5  ,tkrdate
12:00:08   6  ,clse
12:00:08   7  ,g1
12:00:08   8  ,gatt
12:00:08   9  ,gattn
12:00:08  10  ,trend
12:00:08  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
12:00:08  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
12:00:08  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
12:00:08  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
12:00:08  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
12:00:08  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
12:00:08  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
12:00:08  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
12:00:08  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
12:00:08  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
12:00:08  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
12:00:08  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
12:00:08  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
12:00:08  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
12:00:08  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
12:00:08  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
12:00:08  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
12:00:08  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
12:00:08  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
12:00:08  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
12:00:08  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
12:00:08  32  ,hh  att21
12:00:08  33  ,d   att22
12:00:08  34  ,w   att23
12:00:08  35  ,mpm att24
12:00:08  36  ,mph att25
12:00:08  37  ,trend att26
12:00:08  38  FROM stk_svmd14
12:00:08  39  ORDER BY ydate
12:00:08  40  /

Table created.

Elapsed: 00:00:00.31
12:00:09 SQL> 
12:00:09 SQL> -- rpt
12:00:09 SQL> 
12:00:09 SQL> SELECT
12:00:09   2  tkr
12:00:09   3  ,trend
12:00:09   4  ,gatt
12:00:09   5  ,COUNT(tkr)
12:00:09   6  ,AVG(g1)
12:00:09   7  FROM stk_svmd16
12:00:09   8  GROUP BY tkr,trend,gatt
12:00:09   9  ORDER BY tkr,trend,gatt
12:00:09  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MET		  -1 nup	663 -.54193062
MET		  -1 up 	555 .740108108
MET		   1 nup	863 -.47235226
MET		   1 up 	573 .671727749
MET		   1		  1

Elapsed: 00:00:00.01
12:00:09 SQL> 
12:00:09 SQL> -- Now I derive goodness attributes:
12:00:09 SQL> 
12:00:09 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.14
12:00:09 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
12:00:09   2  SELECT
12:00:09   3  tkr
12:00:09   4  ,ydate
12:00:09   5  ,tkrdate
12:00:09   6  ,trend
12:00:09   7  ,g1
12:00:09   8  ,gatt
12:00:09   9  ,gattn
12:00:09  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
12:00:09  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
12:00:09  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
12:00:09  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
12:00:09  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
12:00:09  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
12:00:09  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
12:00:09  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
12:00:09  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
12:00:09  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
12:00:09  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
12:00:09  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
12:00:09  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
12:00:09  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
12:00:09  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
12:00:09  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
12:00:09  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
12:00:09  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
12:00:09  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
12:00:09  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
12:00:09  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
12:00:09  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
12:00:09  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
12:00:09  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
12:00:09  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
12:00:09  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
12:00:09  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
12:00:09  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
12:00:09  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
12:00:09  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
12:00:09  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
12:00:09  41  FROM stk_svmd16
12:00:09  42  /

Table created.

Elapsed: 00:00:00.93
12:00:10 SQL> 
12:00:10 SQL> -- rpt
12:00:10 SQL> 
12:00:10 SQL> SELECT
12:00:10   2  tkr
12:00:10   3  ,trend
12:00:10   4  ,gatt
12:00:10   5  ,COUNT(tkr)
12:00:10   6  ,AVG(g1)
12:00:10   7  FROM stk_ms_svmd_svmspy
12:00:10   8  GROUP BY tkr,trend,gatt
12:00:10   9  ORDER BY tkr,trend,gatt
12:00:10  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MET		  -1 nup	663 -.54193062
MET		  -1 up 	555 .740108108
MET		   1 nup	863 -.47235226
MET		   1 up 	573 .671727749
MET		   1		  1

Elapsed: 00:00:00.00
12:00:10 SQL> 
12:00:10 SQL> SELECT
12:00:10   2  tkr
12:00:10   3  ,COUNT(tkr)
12:00:10   4  ,MIN(ydate),MAX(ydate)
12:00:10   5  FROM stk_ms_svmd_svmspy
12:00:10   6  GROUP BY tkr
12:00:10   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
MET		2655 2000-06-23 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.01
12:00:10 SQL> 
12:00:10 SQL> -- exit
12:00:10 SQL> 
12:00:10 SQL> 
12:00:10 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.07
12:00:10 SQL> 
12:00:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
12:00:10 SQL> 
12:00:10 SQL> CREATE TABLE stk_ms_u COMPRESS AS
12:00:10   2  SELECT * FROM stk_ms_svmspy
12:00:10   3  UNION
12:00:10   4  SELECT * FROM stk_ms_svmd_svmspy
12:00:10   5  /

Table created.

Elapsed: 00:00:00.09
12:00:10 SQL> 
12:00:10 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
