
SQL*Plus: Release 11.2.0.1.0 Production on Mon Apr 4 07:36:50 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:36:50 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:36:50 SQL> 
07:36:50 SQL> 07:36:50 SQL> --
07:36:50 SQL> -- stk10u.sql
07:36:50 SQL> --
07:36:50 SQL> 
07:36:50 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
07:36:50 SQL> 
07:36:50 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
07:36:50 SQL> @stk10.sql     '&1'
07:36:50 SQL> --
07:36:50 SQL> -- stk10.sql
07:36:50 SQL> --
07:36:50 SQL> 
07:36:50 SQL> -- Creates views and tables for demonstrating SVM.
07:36:50 SQL> 
07:36:50 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.46
07:36:51 SQL> 
07:36:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
07:36:51 SQL> 
07:36:51 SQL> CREATE TABLE stk10svmspy COMPRESS AS
07:36:51   2  SELECT
07:36:51   3  tkr
07:36:51   4  ,ydate
07:36:51   5  ,tkr||ydate tkrdate
07:36:51   6  ,clse
07:36:51   7  ,clse2
07:36:51   8  ,rownum rnum -- acts as t in my time-series
07:36:51   9  -- g1 is important. I want to predict g1:
07:36:51  10  ,gain1day g1
07:36:51  11  -- Derive some attributes from clse.
07:36:51  12  -- Each row spans 5 minutes.
07:36:51  13  -- The number of rows in 1 day is 24*60/5.
07:36:51  14  -- I want the aggregations to span from 3 days to 9 days:
07:36:51  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
07:36:51  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
07:36:51  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
07:36:51  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
07:36:51  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
07:36:51  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
07:36:51  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
07:36:51  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
07:36:51  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
07:36:51  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
07:36:51  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
07:36:51  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
07:36:51  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
07:36:51  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
07:36:51  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
07:36:51  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
07:36:51  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
07:36:51  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
07:36:51  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
07:36:51  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
07:36:51  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
07:36:51  36  FROM di5min_stk_c2
07:36:51  37  WHERE UPPER(tkr)='&1'
07:36:51  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
07:36:51  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
07:36:51  40  ORDER BY ydate
07:36:51  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='ALL'

Table created.

Elapsed: 00:00:02.05
07:36:53 SQL> 
07:36:53 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
07:36:53 SQL> 
07:36:53 SQL> -- rpt
07:36:53 SQL> 
07:36:53 SQL> SELECT
07:36:53   2  tkr
07:36:53   3  ,COUNT(tkr)ccount
07:36:53   4  ,MIN(clse)mnclse,MAX(clse)mxclse
07:36:53   5  -- ,MIN(avg4),MAX(avg4)
07:36:53   6  ,MIN(ydate),MAX(ydate)
07:36:53   7  ,MIN(g1)
07:36:53   8  ,MAX(g1)
07:36:53   9  FROM stk10svmspy
07:36:53  10  GROUP BY tkr
07:36:53  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
ALL	      4836	30.47	   32.61 2011-01-04 14:30:00 2011-04-01 19:55:00      -1.62	   .83

Elapsed: 00:00:00.02
07:36:53 SQL> 
07:36:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:36:53 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.05
07:36:53 SQL> CREATE TABLE stk12svmspy COMPRESS AS
07:36:53   2  SELECT
07:36:53   3  tkr
07:36:53   4  ,ydate
07:36:53   5  ,tkrdate
07:36:53   6  ,clse
07:36:53   7  ,rnum
07:36:53   8  ,g1
07:36:53   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
07:36:53  10  -- I want more attributes from the ones I derived above:
07:36:53  11  -- clse relation to moving-min
07:36:53  12  ,clse-min3  cm3
07:36:53  13  ,clse-min4  cm4
07:36:53  14  ,clse-min5  cm5
07:36:53  15  ,clse-min6  cm6
07:36:53  16  ,clse-min7  cm7
07:36:53  17  ,clse-min8  cm8
07:36:53  18  ,clse-min9  cm9
07:36:53  19  -- clse relation to moving-avg
07:36:53  20  ,clse-avg3  ca3
07:36:53  21  ,clse-avg4  ca4
07:36:53  22  ,clse-avg5  ca5
07:36:53  23  ,clse-avg6  ca6
07:36:53  24  ,clse-avg7  ca7
07:36:53  25  ,clse-avg8  ca8
07:36:53  26  ,clse-avg9  ca9
07:36:53  27  -- clse relation to moving-max
07:36:53  28  ,clse-max3  cx3
07:36:53  29  ,clse-max4  cx4
07:36:53  30  ,clse-max5  cx5
07:36:53  31  ,clse-max6  cx6
07:36:53  32  ,clse-max7  cx7
07:36:53  33  ,clse-max8  cx8
07:36:53  34  ,clse-max9  cx9
07:36:53  35  -- Derive date related attributes:
07:36:53  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:36:53  37  ,0+TO_CHAR(ydate,'D')d
07:36:53  38  ,0+TO_CHAR(ydate,'W')w
07:36:53  39  -- mpm stands for minutes-past-midnight:
07:36:53  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:36:53  41  -- mph stands for minutes-past-hour:
07:36:53  42  ,0+TO_CHAR(ydate,'MI')mph
07:36:53  43  FROM stk10svmspy
07:36:53  44  ORDER BY ydate
07:36:53  45  /

Table created.

Elapsed: 00:00:00.16
07:36:53 SQL> 
07:36:53 SQL> -- rpt
07:36:53 SQL> 
07:36:53 SQL> SELECT
07:36:53   2  tkr
07:36:53   3  ,COUNT(tkr)ccount
07:36:53   4  ,MIN(clse)mnclse,MAX(clse)mxclse
07:36:53   5  -- ,MIN(avg4),MAX(avg4)
07:36:53   6  ,MIN(ydate),MAX(ydate)
07:36:53   7  ,MIN(g1)
07:36:53   8  ,AVG(g1)
07:36:53   9  ,MAX(g1)
07:36:53  10  FROM stk12svmspy
07:36:53  11  GROUP BY tkr
07:36:53  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
ALL	      4836	30.47	   32.61 2011-01-04 14:30:00 2011-04-01 19:55:00      -1.62 -.00998257	      .83

Elapsed: 00:00:00.04
07:36:54 SQL> 
07:36:54 SQL> -- Prepare for derivation of NTILE based parameters.
07:36:54 SQL> -- Also derive the "trend" parameter:
07:36:54 SQL> 
07:36:54 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.05
07:36:54 SQL> CREATE TABLE stk14svmspy COMPRESS AS
07:36:54   2  SELECT
07:36:54   3  tkr
07:36:54   4  ,ydate
07:36:54   5  ,tkrdate
07:36:54   6  ,clse
07:36:54   7  ,g1
07:36:54   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
07:36:54   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
07:36:54  10  ,CASE WHEN trend IS NULL THEN 1
07:36:54  11  	    WHEN trend =0      THEN 1
07:36:54  12  	    ELSE trend END trend
07:36:54  13  ,cm3
07:36:54  14  ,cm4
07:36:54  15  ,cm5
07:36:54  16  ,cm6
07:36:54  17  ,cm7
07:36:54  18  ,cm8
07:36:54  19  ,cm9
07:36:54  20  ,ca3
07:36:54  21  ,ca4
07:36:54  22  ,ca5
07:36:54  23  ,ca6
07:36:54  24  ,ca7
07:36:54  25  ,ca8
07:36:54  26  ,ca9
07:36:54  27  ,cx3
07:36:54  28  ,cx4
07:36:54  29  ,cx5
07:36:54  30  ,cx6
07:36:54  31  ,cx7
07:36:54  32  ,cx8
07:36:54  33  ,cx9
07:36:54  34  ,hh
07:36:54  35  ,d
07:36:54  36  ,w
07:36:54  37  ,mpm
07:36:54  38  ,mph
07:36:54  39  FROM stk12svmspy
07:36:54  40  -- Guard against divide by 0:
07:36:54  41  WHERE clse > 0
07:36:54  42  ORDER BY ydate
07:36:54  43  /

Table created.

Elapsed: 00:00:00.14
07:36:54 SQL> 
07:36:54 SQL> -- rpt
07:36:54 SQL> 
07:36:54 SQL> SELECT
07:36:54   2  tkr
07:36:54   3  ,trend
07:36:54   4  ,gatt
07:36:54   5  ,COUNT(tkr)
07:36:54   6  ,AVG(g1)
07:36:54   7  FROM stk14svmspy
07:36:54   8  GROUP BY tkr,trend,gatt
07:36:54   9  ORDER BY tkr,trend,gatt
07:36:54  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ALL		-1 nup	     1487  -.1969878
ALL		-1 up	     1116 .317905582
ALL		-1	      150
ALL		 1 nup	     1256 -.28566332
ALL		 1 up	      731 .343517593
ALL		 1	       96

6 rows selected.

Elapsed: 00:00:00.00
07:36:54 SQL> 
07:36:54 SQL> -- Derive NTILE based params:
07:36:54 SQL> 
07:36:54 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.05
07:36:54 SQL> CREATE TABLE stk16svmspy COMPRESS AS
07:36:54   2  SELECT
07:36:54   3  tkr
07:36:54   4  ,ydate
07:36:54   5  ,tkrdate
07:36:54   6  ,clse
07:36:54   7  ,g1
07:36:54   8  ,gatt
07:36:54   9  ,gattn
07:36:54  10  ,trend
07:36:54  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
07:36:54  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
07:36:54  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
07:36:54  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
07:36:54  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
07:36:54  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
07:36:54  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
07:36:54  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
07:36:54  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
07:36:54  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
07:36:54  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
07:36:54  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
07:36:54  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
07:36:54  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
07:36:54  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
07:36:54  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
07:36:54  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
07:36:54  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
07:36:54  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
07:36:54  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
07:36:54  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
07:36:54  32  ,hh  att21
07:36:54  33  ,d   att22
07:36:54  34  ,w   att23
07:36:54  35  ,mpm att24
07:36:54  36  ,mph att25
07:36:54  37  ,trend att26
07:36:54  38  FROM stk14svmspy
07:36:54  39  ORDER BY ydate
07:36:54  40  /

Table created.

Elapsed: 00:00:00.60
07:36:54 SQL> 
07:36:54 SQL> -- rpt
07:36:54 SQL> 
07:36:54 SQL> SELECT
07:36:54   2  tkr
07:36:54   3  ,trend
07:36:54   4  ,gatt
07:36:54   5  ,COUNT(tkr)
07:36:54   6  ,AVG(g1)
07:36:54   7  FROM stk16svmspy
07:36:54   8  GROUP BY tkr,trend,gatt
07:36:54   9  ORDER BY tkr,trend,gatt
07:36:54  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ALL		-1 nup	     1487  -.1969878
ALL		-1 up	     1116 .317905582
ALL		-1	      150
ALL		 1 nup	     1256 -.28566332
ALL		 1 up	      731 .343517593
ALL		 1	       96

6 rows selected.

Elapsed: 00:00:00.01
07:36:54 SQL> 
07:36:54 SQL> -- Comment out feedback related syntax:
07:36:54 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
07:36:54 SQL> -- SELECT
07:36:54 SQL> -- m.tkr
07:36:54 SQL> -- ,m.ydate
07:36:54 SQL> -- ,m.tkrdate
07:36:54 SQL> -- ,l.score score_long
07:36:54 SQL> -- ,s.score score_short
07:36:54 SQL> -- ,m.g1
07:36:54 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
07:36:54 SQL> -- WHERE l.targ='gatt'
07:36:54 SQL> -- AND	 s.targ='gattn'
07:36:54 SQL> -- AND l.tkrdate = s.tkrdate
07:36:54 SQL> -- AND l.tkrdate = m.tkrdate
07:36:54 SQL> -- -- Speed things up:
07:36:54 SQL> -- AND l.tkr = '&1'
07:36:54 SQL> -- AND s.tkr = '&1'
07:36:54 SQL> -- /
07:36:54 SQL> --
07:36:54 SQL> -- DROP TABLE score_corr_tkr;
07:36:54 SQL> --
07:36:54 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
07:36:54 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
07:36:54 SQL> -- (
07:36:54 SQL> --   SELECT
07:36:54 SQL> --   tkrdate
07:36:54 SQL> --   -- Find corr() tween score and g1 over 8 day period:
07:36:54 SQL> --   ,CORR((score_long - score_short),g1)
07:36:54 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
07:36:54 SQL> --   FROM sc12tkr
07:36:54 SQL> -- )
07:36:54 SQL> -- GROUP BY tkrdate
07:36:54 SQL> -- /
07:36:54 SQL> 
07:36:54 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
07:36:54 SQL> 
07:36:54 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.07
07:36:54 SQL> 
07:36:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
07:36:55 SQL> 
07:36:55 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
07:36:55   2  SELECT
07:36:55   3  tkr
07:36:55   4  ,ydate
07:36:55   5  ,tkrdate
07:36:55   6  ,trend
07:36:55   7  ,g1
07:36:55   8  ,gatt
07:36:55   9  ,gattn
07:36:55  10  -- Goodness attributes:
07:36:55  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
07:36:55  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
07:36:55  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
07:36:55  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
07:36:55  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
07:36:55  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
07:36:55  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
07:36:55  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
07:36:55  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
07:36:55  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
07:36:55  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
07:36:55  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
07:36:55  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
07:36:55  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
07:36:55  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
07:36:55  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
07:36:55  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
07:36:55  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
07:36:55  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
07:36:55  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
07:36:55  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
07:36:55  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
07:36:55  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
07:36:55  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
07:36:55  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
07:36:55  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
07:36:55  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
07:36:55  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
07:36:55  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
07:36:55  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
07:36:55  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
07:36:55  42  FROM stk16svmspy
07:36:55  43  /

Table created.

Elapsed: 00:00:00.88
07:36:56 SQL> 
07:36:56 SQL> -- rpt
07:36:56 SQL> 
07:36:56 SQL> SELECT
07:36:56   2  tkr
07:36:56   3  ,trend
07:36:56   4  ,gatt
07:36:56   5  ,COUNT(tkr)
07:36:56   6  ,AVG(g1)
07:36:56   7  FROM stk_ms_svmspy
07:36:56   8  GROUP BY tkr,trend,gatt
07:36:56   9  ORDER BY tkr,trend,gatt
07:36:56  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ALL		-1 nup	     1487  -.1969878
ALL		-1 up	     1116 .317905582
ALL		-1	      150
ALL		 1 nup	     1256 -.28566332
ALL		 1 up	      731 .343517593
ALL		 1	       96

6 rows selected.

Elapsed: 00:00:00.01
07:36:56 SQL> 
07:36:56 SQL> SELECT
07:36:56   2  tkr
07:36:56   3  ,0+TO_CHAR(ydate,'D')daynum
07:36:56   4  ,COUNT(tkr)
07:36:56   5  ,MIN(ydate),MAX(ydate)
07:36:56   6  FROM stk_ms_svmspy
07:36:56   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
07:36:56   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
07:36:56   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
ALL		 2	  780 2011-01-10 14:30:00 2011-03-28 19:55:00
ALL		 3	 1014 2011-01-04 14:30:00 2011-03-29 19:55:00
ALL		 4	 1014 2011-01-05 14:30:00 2011-03-30 19:55:00
ALL		 5	 1014 2011-01-06 14:30:00 2011-03-31 19:55:00
ALL		 6	 1014 2011-01-07 14:30:00 2011-04-01 19:55:00

Elapsed: 00:00:00.01
07:36:56 SQL> 
07:36:56 SQL> -- exit
07:36:56 SQL> @stk10svmd.sql '&1'
07:36:56 SQL> --
07:36:56 SQL> -- stk10svmd.sql
07:36:56 SQL> --
07:36:56 SQL> 
07:36:56 SQL> -- Creates views and tables for demonstrating SVM.
07:36:56 SQL> -- I need to run this after I run stk10.sql
07:36:56 SQL> 
07:36:56 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.05
07:36:56 SQL> 
07:36:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
07:36:56 SQL> 
07:36:56 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
07:36:56   2  SELECT
07:36:56   3  tkr
07:36:56   4  ,ydate
07:36:56   5  ,tkr||ydate tkrdate
07:36:56   6  ,clse
07:36:56   7  ,rownum rnum -- acts as t in my time-series
07:36:56   8  -- Derive some attributes from clse.
07:36:56   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
07:36:56  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
07:36:56  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
07:36:56  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
07:36:56  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
07:36:56  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
07:36:56  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
07:36:56  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
07:36:56  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
07:36:56  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
07:36:56  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
07:36:56  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
07:36:56  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
07:36:56  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
07:36:56  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
07:36:56  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
07:36:56  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
07:36:56  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
07:36:56  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
07:36:56  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
07:36:56  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
07:36:56  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
07:36:56  31  -- ystk21 created here: svmd/cr_ystk21.sql
07:36:56  32  FROM ystk21
07:36:56  33  WHERE UPPER(tkr)='&1'
07:36:56  34  AND ydate > '1990-01-01'
07:36:56  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
07:36:56  36  ORDER BY ydate
07:36:56  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='ALL'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='ALL')

Table created.

Elapsed: 00:00:02.35
07:36:58 SQL> 
07:36:58 SQL> -- rpt
07:36:58 SQL> 
07:36:58 SQL> SELECT
07:36:58   2  tkr
07:36:58   3  ,COUNT(tkr)
07:36:58   4  ,MIN(clse),MAX(clse)
07:36:58   5  ,MIN(avg4),MAX(avg4)
07:36:58   6  ,MIN(ydate),MAX(ydate)
07:36:58   7  FROM stk_svmd10svmspy
07:36:58   8  GROUP BY tkr
07:36:58   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
ALL		4493	    7.6      57.44	7.784	  57.196 1993-06-03 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
07:36:58 SQL> 
07:36:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:36:58 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.07
07:36:58 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
07:36:58   2  SELECT
07:36:58   3  tkr
07:36:58   4  ,ydate
07:36:58   5  ,tkrdate
07:36:58   6  ,clse
07:36:58   7  ,rnum
07:36:58   8  -- g1 is important. I want to predict g1:
07:36:58   9  ,ld - clse g1
07:36:58  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
07:36:58  11  -- I want more attributes from the ones I derived above:
07:36:58  12  -- clse relation to moving-min
07:36:58  13  ,clse-min3  cm3
07:36:58  14  ,clse-min4  cm4
07:36:58  15  ,clse-min5  cm5
07:36:58  16  ,clse-min6  cm6
07:36:58  17  ,clse-min7  cm7
07:36:58  18  ,clse-min8  cm8
07:36:58  19  ,clse-min9  cm9
07:36:58  20  -- clse relation to moving-avg
07:36:58  21  ,clse-avg3  ca3
07:36:58  22  ,clse-avg4  ca4
07:36:58  23  ,clse-avg5  ca5
07:36:58  24  ,clse-avg6  ca6
07:36:58  25  ,clse-avg7  ca7
07:36:58  26  ,clse-avg8  ca8
07:36:58  27  ,clse-avg9  ca9
07:36:58  28  -- clse relation to moving-max
07:36:58  29  ,clse-max3  cx3
07:36:58  30  ,clse-max4  cx4
07:36:58  31  ,clse-max5  cx5
07:36:58  32  ,clse-max6  cx6
07:36:58  33  ,clse-max7  cx7
07:36:58  34  ,clse-max8  cx8
07:36:58  35  ,clse-max9  cx9
07:36:58  36  -- Derive date related attributes:
07:36:58  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:36:58  38  ,0+TO_CHAR(ydate,'D')d
07:36:58  39  ,0+TO_CHAR(ydate,'W')w
07:36:58  40  -- mpm stands for minutes-past-midnight:
07:36:58  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:36:58  42  -- mph stands for minutes-past-hour:
07:36:58  43  ,0+TO_CHAR(ydate,'MI')mph
07:36:58  44  FROM stk_svmd10svmspy
07:36:58  45  ORDER BY ydate
07:36:58  46  /

Table created.

Elapsed: 00:00:00.13
07:36:58 SQL> 
07:36:58 SQL> -- rpt
07:36:58 SQL> 
07:36:58 SQL> SELECT
07:36:58   2  tkr
07:36:58   3  ,COUNT(tkr)
07:36:58   4  ,MIN(clse),MAX(clse)
07:36:58   5  ,MIN(ydate),MAX(ydate)
07:36:58   6  FROM stk_svmd12
07:36:58   7  GROUP BY tkr
07:36:58   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
ALL		4493	    7.6      57.44 1993-06-03 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
07:36:58 SQL> 
07:36:58 SQL> -- Prepare for derivation of NTILE based parameters.
07:36:58 SQL> -- Also derive the "trend" parameter:
07:36:58 SQL> 
07:36:58 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.06
07:36:58 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
07:36:58   2  SELECT
07:36:58   3  tkr
07:36:58   4  ,ydate
07:36:58   5  ,tkrdate
07:36:58   6  ,clse
07:36:58   7  ,g1
07:36:58   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
07:36:58   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
07:36:58  10  ,CASE WHEN trend IS NULL THEN 1
07:36:58  11  	    WHEN trend =0      THEN 1
07:36:58  12  	    ELSE trend END trend
07:36:58  13  ,cm3
07:36:58  14  ,cm4
07:36:58  15  ,cm5
07:36:58  16  ,cm6
07:36:58  17  ,cm7
07:36:58  18  ,cm8
07:36:58  19  ,cm9
07:36:58  20  ,ca3
07:36:58  21  ,ca4
07:36:58  22  ,ca5
07:36:58  23  ,ca6
07:36:58  24  ,ca7
07:36:58  25  ,ca8
07:36:58  26  ,ca9
07:36:58  27  ,cx3
07:36:58  28  ,cx4
07:36:58  29  ,cx5
07:36:58  30  ,cx6
07:36:58  31  ,cx7
07:36:58  32  ,cx8
07:36:58  33  ,cx9
07:36:58  34  ,hh
07:36:58  35  ,d
07:36:58  36  ,w
07:36:58  37  ,mpm
07:36:58  38  ,mph
07:36:58  39  FROM stk_svmd12
07:36:58  40  -- Guard against divide by 0:
07:36:58  41  WHERE clse > 0
07:36:58  42  ORDER BY ydate
07:36:58  43  /

Table created.

Elapsed: 00:00:00.11
07:36:59 SQL> 
07:36:59 SQL> -- rpt
07:36:59 SQL> 
07:36:59 SQL> SELECT
07:36:59   2  tkr
07:36:59   3  ,trend
07:36:59   4  ,gatt
07:36:59   5  ,COUNT(tkr)
07:36:59   6  ,AVG(g1)
07:36:59   7  FROM stk_svmd14
07:36:59   8  GROUP BY tkr,trend,gatt
07:36:59   9  ORDER BY tkr,trend,gatt
07:36:59  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ALL		  -1 nup       1161 -.33157623
ALL		  -1 up 	908	   .47
ALL		   1 nup       1445 -.29412457
ALL		   1 up 	978 .414202454
ALL		   1		  1

Elapsed: 00:00:00.01
07:36:59 SQL> 
07:36:59 SQL> -- Derive NTILE based params:
07:36:59 SQL> 
07:36:59 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.04
07:36:59 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
07:36:59   2  SELECT
07:36:59   3  tkr
07:36:59   4  ,ydate
07:36:59   5  ,tkrdate
07:36:59   6  ,clse
07:36:59   7  ,g1
07:36:59   8  ,gatt
07:36:59   9  ,gattn
07:36:59  10  ,trend
07:36:59  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
07:36:59  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
07:36:59  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
07:36:59  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
07:36:59  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
07:36:59  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
07:36:59  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
07:36:59  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
07:36:59  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
07:36:59  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
07:36:59  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
07:36:59  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
07:36:59  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
07:36:59  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
07:36:59  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
07:36:59  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
07:36:59  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
07:36:59  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
07:36:59  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
07:36:59  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
07:36:59  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
07:36:59  32  ,hh  att21
07:36:59  33  ,d   att22
07:36:59  34  ,w   att23
07:36:59  35  ,mpm att24
07:36:59  36  ,mph att25
07:36:59  37  ,trend att26
07:36:59  38  FROM stk_svmd14
07:36:59  39  ORDER BY ydate
07:36:59  40  /

Table created.

Elapsed: 00:00:00.55
07:36:59 SQL> 
07:36:59 SQL> -- rpt
07:36:59 SQL> 
07:36:59 SQL> SELECT
07:36:59   2  tkr
07:36:59   3  ,trend
07:36:59   4  ,gatt
07:36:59   5  ,COUNT(tkr)
07:36:59   6  ,AVG(g1)
07:36:59   7  FROM stk_svmd16
07:36:59   8  GROUP BY tkr,trend,gatt
07:36:59   9  ORDER BY tkr,trend,gatt
07:36:59  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ALL		  -1 nup       1161 -.33157623
ALL		  -1 up 	908	   .47
ALL		   1 nup       1445 -.29412457
ALL		   1 up 	978 .414202454
ALL		   1		  1

Elapsed: 00:00:00.02
07:36:59 SQL> 
07:36:59 SQL> -- Comment out feedback related syntax:
07:36:59 SQL> 
07:36:59 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
07:36:59 SQL> -- SELECT
07:36:59 SQL> -- m.tkr
07:36:59 SQL> -- ,m.ydate
07:36:59 SQL> -- ,m.tkrdate
07:36:59 SQL> -- ,l.score score_long
07:36:59 SQL> -- ,s.score score_short
07:36:59 SQL> -- ,m.g1
07:36:59 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
07:36:59 SQL> -- WHERE l.targ='gatt'
07:36:59 SQL> -- AND	 s.targ='gattn'
07:36:59 SQL> -- AND l.tkrdate = s.tkrdate
07:36:59 SQL> -- AND l.tkrdate = m.tkrdate
07:36:59 SQL> -- -- Speed things up:
07:36:59 SQL> -- AND l.tkr = '&1'
07:36:59 SQL> -- AND s.tkr = '&1'
07:36:59 SQL> -- /
07:36:59 SQL> --
07:36:59 SQL> -- DROP TABLE score_corr_tkr;
07:36:59 SQL> --
07:36:59 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
07:36:59 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
07:36:59 SQL> -- (
07:36:59 SQL> --   SELECT
07:36:59 SQL> --   tkrdate
07:36:59 SQL> --   -- Find corr() tween score and g1 over 8 day period:
07:36:59 SQL> --   ,CORR((score_long - score_short),g1)
07:36:59 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
07:36:59 SQL> --   FROM sc12tkr
07:36:59 SQL> -- )
07:36:59 SQL> -- GROUP BY tkrdate
07:36:59 SQL> -- /
07:36:59 SQL> 
07:36:59 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
07:36:59 SQL> 
07:36:59 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.05
07:36:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
07:37:00 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
07:37:00   2  SELECT
07:37:00   3  tkr
07:37:00   4  ,ydate
07:37:00   5  ,tkrdate
07:37:00   6  ,trend
07:37:00   7  ,g1
07:37:00   8  ,gatt
07:37:00   9  ,gattn
07:37:00  10  -- Goodness attributes:
07:37:00  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
07:37:00  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
07:37:00  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
07:37:00  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
07:37:00  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
07:37:00  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
07:37:00  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
07:37:00  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
07:37:00  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
07:37:00  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
07:37:00  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
07:37:00  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
07:37:00  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
07:37:00  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
07:37:00  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
07:37:00  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
07:37:00  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
07:37:00  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
07:37:00  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
07:37:00  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
07:37:00  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
07:37:00  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
07:37:00  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
07:37:00  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
07:37:00  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
07:37:00  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
07:37:00  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
07:37:00  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
07:37:00  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
07:37:00  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
07:37:00  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
07:37:00  42  FROM stk_svmd16
07:37:00  43  /

Table created.

Elapsed: 00:00:00.83
07:37:00 SQL> 
07:37:00 SQL> -- rpt
07:37:00 SQL> 
07:37:00 SQL> SELECT
07:37:00   2  tkr
07:37:00   3  ,trend
07:37:00   4  ,gatt
07:37:00   5  ,COUNT(tkr)
07:37:00   6  ,AVG(g1)
07:37:00   7  FROM stk_ms_svmd_svmspy
07:37:00   8  GROUP BY tkr,trend,gatt
07:37:00   9  ORDER BY tkr,trend,gatt
07:37:00  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ALL		  -1 nup       1161 -.33157623
ALL		  -1 up 	908	   .47
ALL		   1 nup       1445 -.29412457
ALL		   1 up 	978 .414202454
ALL		   1		  1

Elapsed: 00:00:00.01
07:37:00 SQL> 
07:37:00 SQL> SELECT
07:37:00   2  tkr
07:37:00   3  ,COUNT(tkr)
07:37:00   4  ,MIN(ydate),MAX(ydate)
07:37:00   5  FROM stk_ms_svmd_svmspy
07:37:00   6  GROUP BY tkr
07:37:00   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
ALL		4493 1993-06-03 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
07:37:00 SQL> 
07:37:00 SQL> -- exit
07:37:00 SQL> 
07:37:00 SQL> 
07:37:00 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.09
07:37:00 SQL> 
07:37:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
07:37:01 SQL> 
07:37:01 SQL> CREATE TABLE stk_ms_u COMPRESS AS
07:37:01   2  SELECT * FROM stk_ms_svmspy
07:37:01   3  UNION
07:37:01   4  SELECT * FROM stk_ms_svmd_svmspy
07:37:01   5  /

Table created.

Elapsed: 00:00:00.21
07:37:01 SQL> 
07:37:01 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
