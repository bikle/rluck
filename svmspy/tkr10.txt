
SQL*Plus: Release 11.2.0.1.0 Production on Tue Apr 12 04:09:09 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:09:10 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:09:10 SQL> 
04:09:10 SQL> 04:09:10 SQL> --
04:09:10 SQL> -- stk10u.sql
04:09:10 SQL> --
04:09:10 SQL> 
04:09:10 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
04:09:10 SQL> 
04:09:10 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
04:09:10 SQL> @stk10.sql     '&1'
04:09:10 SQL> --
04:09:10 SQL> -- stk10.sql
04:09:10 SQL> --
04:09:10 SQL> 
04:09:10 SQL> -- Creates views and tables for demonstrating SVM.
04:09:10 SQL> 
04:09:10 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.05
04:09:10 SQL> 
04:09:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
04:09:11 SQL> 
04:09:11 SQL> CREATE TABLE stk10svmspy COMPRESS AS
04:09:11   2  SELECT
04:09:11   3  tkr
04:09:11   4  ,ydate
04:09:11   5  ,tkr||ydate tkrdate
04:09:11   6  ,clse
04:09:11   7  ,clse2
04:09:11   8  ,rownum rnum -- acts as t in my time-series
04:09:11   9  -- g1 is important. I want to predict g1:
04:09:11  10  ,gain1day g1
04:09:11  11  -- Derive some attributes from clse.
04:09:11  12  -- Each row spans 5 minutes.
04:09:11  13  -- The number of rows in 1 day is 24*60/5.
04:09:11  14  -- I want the aggregations to span from 3 days to 9 days:
04:09:11  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
04:09:11  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
04:09:11  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
04:09:11  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
04:09:11  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
04:09:11  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
04:09:11  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
04:09:11  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
04:09:11  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
04:09:11  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
04:09:11  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
04:09:11  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
04:09:11  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
04:09:11  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
04:09:11  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
04:09:11  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
04:09:11  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
04:09:11  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
04:09:11  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
04:09:11  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
04:09:11  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
04:09:11  36  FROM di5min_stk_c2
04:09:11  37  WHERE UPPER(tkr)='&1'
04:09:11  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
04:09:11  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
04:09:11  40  ORDER BY ydate
04:09:11  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='IBM'

Table created.

Elapsed: 00:00:03.39
04:09:14 SQL> 
04:09:14 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.24
04:09:15 SQL> 
04:09:15 SQL> -- rpt
04:09:15 SQL> 
04:09:15 SQL> SELECT
04:09:15   2  tkr
04:09:15   3  ,COUNT(tkr)ccount
04:09:15   4  ,MIN(clse)mnclse,MAX(clse)mxclse
04:09:15   5  -- ,MIN(avg4),MAX(avg4)
04:09:15   6  ,MIN(ydate),MAX(ydate)
04:09:15   7  ,MIN(g1)
04:09:15   8  ,MAX(g1)
04:09:15   9  FROM stk10svmspy
04:09:15  10  GROUP BY tkr
04:09:15  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
IBM	     29180     119.59	  167.47 2009-10-28 18:10:00 2011-04-11 18:10:00      -6.73	  6.28

Elapsed: 00:00:00.03
04:09:15 SQL> 
04:09:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:09:15 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.09
04:09:15 SQL> CREATE TABLE stk12svmspy COMPRESS AS
04:09:15   2  SELECT
04:09:15   3  tkr
04:09:15   4  ,ydate
04:09:15   5  ,tkrdate
04:09:15   6  ,clse
04:09:15   7  ,rnum
04:09:15   8  ,g1
04:09:15   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
04:09:15  10  -- I want more attributes from the ones I derived above:
04:09:15  11  -- clse relation to moving-min
04:09:15  12  ,clse-min3  cm3
04:09:15  13  ,clse-min4  cm4
04:09:15  14  ,clse-min5  cm5
04:09:15  15  ,clse-min6  cm6
04:09:15  16  ,clse-min7  cm7
04:09:15  17  ,clse-min8  cm8
04:09:15  18  ,clse-min9  cm9
04:09:15  19  -- clse relation to moving-avg
04:09:15  20  ,clse-avg3  ca3
04:09:15  21  ,clse-avg4  ca4
04:09:15  22  ,clse-avg5  ca5
04:09:15  23  ,clse-avg6  ca6
04:09:15  24  ,clse-avg7  ca7
04:09:15  25  ,clse-avg8  ca8
04:09:15  26  ,clse-avg9  ca9
04:09:15  27  -- clse relation to moving-max
04:09:15  28  ,clse-max3  cx3
04:09:15  29  ,clse-max4  cx4
04:09:15  30  ,clse-max5  cx5
04:09:15  31  ,clse-max6  cx6
04:09:15  32  ,clse-max7  cx7
04:09:15  33  ,clse-max8  cx8
04:09:15  34  ,clse-max9  cx9
04:09:15  35  -- Derive date related attributes:
04:09:15  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:09:15  37  ,0+TO_CHAR(ydate,'D')d
04:09:15  38  ,0+TO_CHAR(ydate,'W')w
04:09:15  39  -- mpm stands for minutes-past-midnight:
04:09:15  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:09:15  41  -- mph stands for minutes-past-hour:
04:09:15  42  ,0+TO_CHAR(ydate,'MI')mph
04:09:15  43  FROM stk10svmspy
04:09:15  44  ORDER BY ydate
04:09:15  45  /

Table created.

Elapsed: 00:00:00.71
04:09:16 SQL> 
04:09:16 SQL> -- rpt
04:09:16 SQL> 
04:09:16 SQL> SELECT
04:09:16   2  tkr
04:09:16   3  ,COUNT(tkr)ccount
04:09:16   4  ,MIN(clse)mnclse,MAX(clse)mxclse
04:09:16   5  -- ,MIN(avg4),MAX(avg4)
04:09:16   6  ,MIN(ydate),MAX(ydate)
04:09:16   7  ,MIN(g1)
04:09:16   8  ,AVG(g1)
04:09:16   9  ,MAX(g1)
04:09:16  10  FROM stk12svmspy
04:09:16  11  GROUP BY tkr
04:09:16  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
IBM	     29180     119.59	  167.47 2009-10-28 18:10:00 2011-04-11 18:10:00      -6.73 .115697145	     6.28

Elapsed: 00:00:00.06
04:09:16 SQL> 
04:09:16 SQL> -- Prepare for derivation of NTILE based parameters.
04:09:16 SQL> -- Also derive the "trend" parameter:
04:09:16 SQL> 
04:09:16 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
04:09:16 SQL> CREATE TABLE stk14svmspy COMPRESS AS
04:09:16   2  SELECT
04:09:16   3  tkr
04:09:16   4  ,ydate
04:09:16   5  ,tkrdate
04:09:16   6  ,clse
04:09:16   7  ,g1
04:09:16   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
04:09:16   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
04:09:16  10  ,CASE WHEN trend IS NULL THEN 1
04:09:16  11  	    WHEN trend =0      THEN 1
04:09:16  12  	    ELSE trend END trend
04:09:16  13  ,cm3
04:09:16  14  ,cm4
04:09:16  15  ,cm5
04:09:16  16  ,cm6
04:09:16  17  ,cm7
04:09:16  18  ,cm8
04:09:16  19  ,cm9
04:09:16  20  ,ca3
04:09:16  21  ,ca4
04:09:16  22  ,ca5
04:09:16  23  ,ca6
04:09:16  24  ,ca7
04:09:16  25  ,ca8
04:09:16  26  ,ca9
04:09:16  27  ,cx3
04:09:16  28  ,cx4
04:09:16  29  ,cx5
04:09:16  30  ,cx6
04:09:16  31  ,cx7
04:09:16  32  ,cx8
04:09:16  33  ,cx9
04:09:16  34  ,hh
04:09:16  35  ,d
04:09:16  36  ,w
04:09:16  37  ,mpm
04:09:16  38  ,mph
04:09:16  39  FROM stk12svmspy
04:09:16  40  -- Guard against divide by 0:
04:09:16  41  WHERE clse > 0
04:09:16  42  ORDER BY ydate
04:09:16  43  /

Table created.

Elapsed: 00:00:00.49
04:09:17 SQL> 
04:09:17 SQL> -- rpt
04:09:17 SQL> 
04:09:17 SQL> SELECT
04:09:17   2  tkr
04:09:17   3  ,trend
04:09:17   4  ,gatt
04:09:17   5  ,COUNT(tkr)
04:09:17   6  ,AVG(g1)
04:09:17   7  FROM stk14svmspy
04:09:17   8  GROUP BY tkr,trend,gatt
04:09:17   9  ORDER BY tkr,trend,gatt
04:09:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
IBM		-1 nup	     4799 -.92248064
IBM		-1 up	     4380 1.58144028
IBM		-1	       14
IBM		 1 nup	    12685 -.58196013
IBM		 1 up	     6935 1.18448486
IBM		 1	      367

6 rows selected.

Elapsed: 00:00:00.04
04:09:17 SQL> 
04:09:17 SQL> -- Derive NTILE based params:
04:09:17 SQL> 
04:09:17 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.14
04:09:17 SQL> CREATE TABLE stk16svmspy COMPRESS AS
04:09:17   2  SELECT
04:09:17   3  tkr
04:09:17   4  ,ydate
04:09:17   5  ,tkrdate
04:09:17   6  ,clse
04:09:17   7  ,g1
04:09:17   8  ,gatt
04:09:17   9  ,gattn
04:09:17  10  ,trend
04:09:17  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
04:09:17  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
04:09:17  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
04:09:17  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
04:09:17  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
04:09:17  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
04:09:17  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
04:09:17  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
04:09:17  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
04:09:17  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
04:09:17  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
04:09:17  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
04:09:17  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
04:09:17  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
04:09:17  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
04:09:17  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
04:09:17  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
04:09:17  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
04:09:17  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
04:09:17  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
04:09:17  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
04:09:17  32  ,hh  att21
04:09:17  33  ,d   att22
04:09:17  34  ,w   att23
04:09:17  35  ,mpm att24
04:09:17  36  ,mph att25
04:09:17  37  ,trend att26
04:09:17  38  FROM stk14svmspy
04:09:17  39  ORDER BY ydate
04:09:17  40  /

Table created.

Elapsed: 00:00:03.49
04:09:20 SQL> 
04:09:20 SQL> -- rpt
04:09:20 SQL> 
04:09:20 SQL> SELECT
04:09:20   2  tkr
04:09:20   3  ,trend
04:09:20   4  ,gatt
04:09:20   5  ,COUNT(tkr)
04:09:20   6  ,AVG(g1)
04:09:20   7  FROM stk16svmspy
04:09:20   8  GROUP BY tkr,trend,gatt
04:09:20   9  ORDER BY tkr,trend,gatt
04:09:20  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
IBM		-1 nup	     4799 -.92248064
IBM		-1 up	     4380 1.58144028
IBM		-1	       14
IBM		 1 nup	    12685 -.58196013
IBM		 1 up	     6935 1.18448486
IBM		 1	      367

6 rows selected.

Elapsed: 00:00:00.04
04:09:20 SQL> 
04:09:20 SQL> -- Comment out feedback related syntax:
04:09:20 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
04:09:20 SQL> -- SELECT
04:09:20 SQL> -- m.tkr
04:09:20 SQL> -- ,m.ydate
04:09:20 SQL> -- ,m.tkrdate
04:09:20 SQL> -- ,l.score score_long
04:09:20 SQL> -- ,s.score score_short
04:09:20 SQL> -- ,m.g1
04:09:20 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
04:09:20 SQL> -- WHERE l.targ='gatt'
04:09:20 SQL> -- AND	 s.targ='gattn'
04:09:20 SQL> -- AND l.tkrdate = s.tkrdate
04:09:20 SQL> -- AND l.tkrdate = m.tkrdate
04:09:20 SQL> -- -- Speed things up:
04:09:20 SQL> -- AND l.tkr = '&1'
04:09:20 SQL> -- AND s.tkr = '&1'
04:09:20 SQL> -- /
04:09:20 SQL> --
04:09:20 SQL> -- DROP TABLE score_corr_tkr;
04:09:20 SQL> --
04:09:20 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
04:09:20 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
04:09:20 SQL> -- (
04:09:20 SQL> --   SELECT
04:09:20 SQL> --   tkrdate
04:09:20 SQL> --   -- Find corr() tween score and g1 over 8 day period:
04:09:20 SQL> --   ,CORR((score_long - score_short),g1)
04:09:20 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
04:09:20 SQL> --   FROM sc12tkr
04:09:20 SQL> -- )
04:09:20 SQL> -- GROUP BY tkrdate
04:09:20 SQL> -- /
04:09:20 SQL> 
04:09:20 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
04:09:20 SQL> 
04:09:20 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.07
04:09:20 SQL> 
04:09:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
04:09:21 SQL> 
04:09:21 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
04:09:21   2  SELECT
04:09:21   3  tkr
04:09:21   4  ,ydate
04:09:21   5  ,tkrdate
04:09:21   6  ,trend
04:09:21   7  ,g1
04:09:21   8  ,gatt
04:09:21   9  ,gattn
04:09:21  10  -- Goodness attributes:
04:09:21  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
04:09:21  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
04:09:21  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
04:09:21  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
04:09:21  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
04:09:21  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
04:09:21  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
04:09:21  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
04:09:21  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
04:09:21  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
04:09:21  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
04:09:21  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
04:09:21  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
04:09:21  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
04:09:21  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
04:09:21  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
04:09:21  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
04:09:21  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
04:09:21  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
04:09:21  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
04:09:21  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
04:09:21  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
04:09:21  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
04:09:21  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
04:09:21  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
04:09:21  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
04:09:21  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
04:09:21  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
04:09:21  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
04:09:21  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
04:09:21  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
04:09:21  42  FROM stk16svmspy
04:09:21  43  /

Table created.

Elapsed: 00:00:04.63
04:09:25 SQL> 
04:09:25 SQL> -- rpt
04:09:25 SQL> 
04:09:25 SQL> SELECT
04:09:25   2  tkr
04:09:25   3  ,trend
04:09:25   4  ,gatt
04:09:25   5  ,COUNT(tkr)
04:09:25   6  ,AVG(g1)
04:09:25   7  FROM stk_ms_svmspy
04:09:25   8  GROUP BY tkr,trend,gatt
04:09:25   9  ORDER BY tkr,trend,gatt
04:09:25  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
IBM		-1 nup	     4799 -.92248064
IBM		-1 up	     4380 1.58144028
IBM		-1	       14
IBM		 1 nup	    12685 -.58196013
IBM		 1 up	     6935 1.18448486
IBM		 1	      367

6 rows selected.

Elapsed: 00:00:00.04
04:09:25 SQL> 
04:09:25 SQL> SELECT
04:09:25   2  tkr
04:09:25   3  ,0+TO_CHAR(ydate,'D')daynum
04:09:25   4  ,COUNT(tkr)
04:09:25   5  ,MIN(ydate),MAX(ydate)
04:09:25   6  FROM stk_ms_svmspy
04:09:25   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
04:09:25   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
04:09:25   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
IBM		 2	 5705 2009-11-02 13:25:00 2011-04-11 18:10:00
IBM		 3	 5808 2009-11-03 13:25:00 2011-04-05 19:55:00
IBM		 4	 5821 2009-10-28 18:10:00 2011-04-06 19:55:00
IBM		 5	 5918 2009-10-29 13:25:00 2011-04-07 19:55:00
IBM		 6	 5928 2009-10-30 13:25:00 2011-04-08 19:55:00

Elapsed: 00:00:00.03
04:09:25 SQL> 
04:09:25 SQL> -- exit
04:09:25 SQL> @stk10svmd.sql '&1'
04:09:25 SQL> --
04:09:25 SQL> -- stk10svmd.sql
04:09:25 SQL> --
04:09:25 SQL> 
04:09:25 SQL> -- Creates views and tables for demonstrating SVM.
04:09:25 SQL> -- I need to run this after I run stk10.sql
04:09:25 SQL> 
04:09:25 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.07
04:09:26 SQL> 
04:09:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
04:09:26 SQL> 
04:09:26 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
04:09:26   2  SELECT
04:09:26   3  tkr
04:09:26   4  ,ydate
04:09:26   5  ,tkr||ydate tkrdate
04:09:26   6  ,clse
04:09:26   7  ,rownum rnum -- acts as t in my time-series
04:09:26   8  -- Derive some attributes from clse.
04:09:26   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
04:09:26  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
04:09:26  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
04:09:26  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
04:09:26  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
04:09:26  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
04:09:26  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
04:09:26  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
04:09:26  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
04:09:26  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
04:09:26  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
04:09:26  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
04:09:26  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
04:09:26  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
04:09:26  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
04:09:26  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
04:09:26  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
04:09:26  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
04:09:26  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
04:09:26  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
04:09:26  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
04:09:26  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
04:09:26  31  -- ystk21 created here: svmd/cr_ystk21.sql
04:09:26  32  FROM ystk21
04:09:26  33  WHERE UPPER(tkr)='&1'
04:09:26  34  AND ydate > '1990-01-01'
04:09:26  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
04:09:26  36  ORDER BY ydate
04:09:26  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='IBM'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='IBM')

Table created.

Elapsed: 00:00:01.84
04:09:27 SQL> 
04:09:27 SQL> -- rpt
04:09:27 SQL> 
04:09:27 SQL> SELECT
04:09:27   2  tkr
04:09:27   3  ,COUNT(tkr)
04:09:27   4  ,MIN(clse),MAX(clse)
04:09:27   5  ,MIN(avg4),MAX(avg4)
04:09:27   6  ,MIN(ydate),MAX(ydate)
04:09:27   7  FROM stk_svmd10svmspy
04:09:27   8  GROUP BY tkr
04:09:27   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
IBM		5363	   8.47     166.05	 8.63	 164.562 1990-01-02 21:00:00 2011-04-08 21:00:00

Elapsed: 00:00:00.01
04:09:27 SQL> 
04:09:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:09:27 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.67
04:09:28 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
04:09:28   2  SELECT
04:09:28   3  tkr
04:09:28   4  ,ydate
04:09:28   5  ,tkrdate
04:09:28   6  ,clse
04:09:28   7  ,rnum
04:09:28   8  -- g1 is important. I want to predict g1:
04:09:28   9  ,ld - clse g1
04:09:28  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
04:09:28  11  -- I want more attributes from the ones I derived above:
04:09:28  12  -- clse relation to moving-min
04:09:28  13  ,clse-min3  cm3
04:09:28  14  ,clse-min4  cm4
04:09:28  15  ,clse-min5  cm5
04:09:28  16  ,clse-min6  cm6
04:09:28  17  ,clse-min7  cm7
04:09:28  18  ,clse-min8  cm8
04:09:28  19  ,clse-min9  cm9
04:09:28  20  -- clse relation to moving-avg
04:09:28  21  ,clse-avg3  ca3
04:09:28  22  ,clse-avg4  ca4
04:09:28  23  ,clse-avg5  ca5
04:09:28  24  ,clse-avg6  ca6
04:09:28  25  ,clse-avg7  ca7
04:09:28  26  ,clse-avg8  ca8
04:09:28  27  ,clse-avg9  ca9
04:09:28  28  -- clse relation to moving-max
04:09:28  29  ,clse-max3  cx3
04:09:28  30  ,clse-max4  cx4
04:09:28  31  ,clse-max5  cx5
04:09:28  32  ,clse-max6  cx6
04:09:28  33  ,clse-max7  cx7
04:09:28  34  ,clse-max8  cx8
04:09:28  35  ,clse-max9  cx9
04:09:28  36  -- Derive date related attributes:
04:09:28  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:09:28  38  ,0+TO_CHAR(ydate,'D')d
04:09:28  39  ,0+TO_CHAR(ydate,'W')w
04:09:28  40  -- mpm stands for minutes-past-midnight:
04:09:28  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:09:28  42  -- mph stands for minutes-past-hour:
04:09:28  43  ,0+TO_CHAR(ydate,'MI')mph
04:09:28  44  FROM stk_svmd10svmspy
04:09:28  45  ORDER BY ydate
04:09:28  46  /

Table created.

Elapsed: 00:00:00.19
04:09:28 SQL> 
04:09:28 SQL> -- rpt
04:09:28 SQL> 
04:09:28 SQL> SELECT
04:09:28   2  tkr
04:09:28   3  ,COUNT(tkr)
04:09:28   4  ,MIN(clse),MAX(clse)
04:09:28   5  ,MIN(ydate),MAX(ydate)
04:09:28   6  FROM stk_svmd12
04:09:28   7  GROUP BY tkr
04:09:28   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
IBM		5363	   8.47     166.05 1990-01-02 21:00:00 2011-04-08 21:00:00

Elapsed: 00:00:00.01
04:09:28 SQL> 
04:09:28 SQL> -- Prepare for derivation of NTILE based parameters.
04:09:28 SQL> -- Also derive the "trend" parameter:
04:09:28 SQL> 
04:09:28 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.06
04:09:28 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
04:09:28   2  SELECT
04:09:28   3  tkr
04:09:28   4  ,ydate
04:09:28   5  ,tkrdate
04:09:28   6  ,clse
04:09:28   7  ,g1
04:09:28   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
04:09:28   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
04:09:28  10  ,CASE WHEN trend IS NULL THEN 1
04:09:28  11  	    WHEN trend =0      THEN 1
04:09:28  12  	    ELSE trend END trend
04:09:28  13  ,cm3
04:09:28  14  ,cm4
04:09:28  15  ,cm5
04:09:28  16  ,cm6
04:09:28  17  ,cm7
04:09:28  18  ,cm8
04:09:28  19  ,cm9
04:09:28  20  ,ca3
04:09:28  21  ,ca4
04:09:28  22  ,ca5
04:09:28  23  ,ca6
04:09:28  24  ,ca7
04:09:28  25  ,ca8
04:09:28  26  ,ca9
04:09:28  27  ,cx3
04:09:28  28  ,cx4
04:09:28  29  ,cx5
04:09:28  30  ,cx6
04:09:28  31  ,cx7
04:09:28  32  ,cx8
04:09:28  33  ,cx9
04:09:28  34  ,hh
04:09:28  35  ,d
04:09:28  36  ,w
04:09:28  37  ,mpm
04:09:28  38  ,mph
04:09:28  39  FROM stk_svmd12
04:09:28  40  -- Guard against divide by 0:
04:09:28  41  WHERE clse > 0
04:09:28  42  ORDER BY ydate
04:09:28  43  /

Table created.

Elapsed: 00:00:00.18
04:09:29 SQL> 
04:09:29 SQL> -- rpt
04:09:29 SQL> 
04:09:29 SQL> SELECT
04:09:29   2  tkr
04:09:29   3  ,trend
04:09:29   4  ,gatt
04:09:29   5  ,COUNT(tkr)
04:09:29   6  ,AVG(g1)
04:09:29   7  FROM stk_svmd14
04:09:29   8  GROUP BY tkr,trend,gatt
04:09:29   9  ORDER BY tkr,trend,gatt
04:09:29  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
IBM		  -1 nup       1399 -.74010007
IBM		  -1 up        1043 1.09550336
IBM		   1 nup       1714 -.62200117
IBM		   1 up        1206 .917056385
IBM		   1		  1

Elapsed: 00:00:00.02
04:09:29 SQL> 
04:09:29 SQL> -- Derive NTILE based params:
04:09:29 SQL> 
04:09:29 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.07
04:09:29 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
04:09:29   2  SELECT
04:09:29   3  tkr
04:09:29   4  ,ydate
04:09:29   5  ,tkrdate
04:09:29   6  ,clse
04:09:29   7  ,g1
04:09:29   8  ,gatt
04:09:29   9  ,gattn
04:09:29  10  ,trend
04:09:29  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
04:09:29  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
04:09:29  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
04:09:29  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
04:09:29  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
04:09:29  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
04:09:29  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
04:09:29  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
04:09:29  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
04:09:29  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
04:09:29  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
04:09:29  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
04:09:29  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
04:09:29  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
04:09:29  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
04:09:29  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
04:09:29  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
04:09:29  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
04:09:29  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
04:09:29  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
04:09:29  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
04:09:29  32  ,hh  att21
04:09:29  33  ,d   att22
04:09:29  34  ,w   att23
04:09:29  35  ,mpm att24
04:09:29  36  ,mph att25
04:09:29  37  ,trend att26
04:09:29  38  FROM stk_svmd14
04:09:29  39  ORDER BY ydate
04:09:29  40  /

Table created.

Elapsed: 00:00:00.60
04:09:29 SQL> 
04:09:29 SQL> -- rpt
04:09:29 SQL> 
04:09:29 SQL> SELECT
04:09:29   2  tkr
04:09:29   3  ,trend
04:09:29   4  ,gatt
04:09:29   5  ,COUNT(tkr)
04:09:29   6  ,AVG(g1)
04:09:29   7  FROM stk_svmd16
04:09:29   8  GROUP BY tkr,trend,gatt
04:09:29   9  ORDER BY tkr,trend,gatt
04:09:29  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
IBM		  -1 nup       1399 -.74010007
IBM		  -1 up        1043 1.09550336
IBM		   1 nup       1714 -.62200117
IBM		   1 up        1206 .917056385
IBM		   1		  1

Elapsed: 00:00:00.01
04:09:29 SQL> 
04:09:29 SQL> -- Comment out feedback related syntax:
04:09:29 SQL> 
04:09:29 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
04:09:29 SQL> -- SELECT
04:09:29 SQL> -- m.tkr
04:09:29 SQL> -- ,m.ydate
04:09:29 SQL> -- ,m.tkrdate
04:09:29 SQL> -- ,l.score score_long
04:09:29 SQL> -- ,s.score score_short
04:09:29 SQL> -- ,m.g1
04:09:29 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
04:09:29 SQL> -- WHERE l.targ='gatt'
04:09:29 SQL> -- AND	 s.targ='gattn'
04:09:29 SQL> -- AND l.tkrdate = s.tkrdate
04:09:29 SQL> -- AND l.tkrdate = m.tkrdate
04:09:29 SQL> -- -- Speed things up:
04:09:29 SQL> -- AND l.tkr = '&1'
04:09:29 SQL> -- AND s.tkr = '&1'
04:09:29 SQL> -- /
04:09:29 SQL> --
04:09:29 SQL> -- DROP TABLE score_corr_tkr;
04:09:29 SQL> --
04:09:29 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
04:09:29 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
04:09:29 SQL> -- (
04:09:29 SQL> --   SELECT
04:09:29 SQL> --   tkrdate
04:09:29 SQL> --   -- Find corr() tween score and g1 over 8 day period:
04:09:29 SQL> --   ,CORR((score_long - score_short),g1)
04:09:29 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
04:09:29 SQL> --   FROM sc12tkr
04:09:29 SQL> -- )
04:09:29 SQL> -- GROUP BY tkrdate
04:09:29 SQL> -- /
04:09:29 SQL> 
04:09:29 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
04:09:29 SQL> 
04:09:29 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.07
04:09:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
04:09:30 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
04:09:30   2  SELECT
04:09:30   3  tkr
04:09:30   4  ,ydate
04:09:30   5  ,tkrdate
04:09:30   6  ,trend
04:09:30   7  ,g1
04:09:30   8  ,gatt
04:09:30   9  ,gattn
04:09:30  10  -- Goodness attributes:
04:09:30  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
04:09:30  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
04:09:30  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
04:09:30  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
04:09:30  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
04:09:30  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
04:09:30  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
04:09:30  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
04:09:30  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
04:09:30  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
04:09:30  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
04:09:30  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
04:09:30  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
04:09:30  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
04:09:30  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
04:09:30  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
04:09:30  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
04:09:30  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
04:09:30  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
04:09:30  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
04:09:30  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
04:09:30  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
04:09:30  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
04:09:30  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
04:09:30  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
04:09:30  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
04:09:30  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
04:09:30  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
04:09:30  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
04:09:30  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
04:09:30  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
04:09:30  42  FROM stk_svmd16
04:09:30  43  /

Table created.

Elapsed: 00:00:00.97
04:09:31 SQL> 
04:09:31 SQL> -- rpt
04:09:31 SQL> 
04:09:31 SQL> SELECT
04:09:31   2  tkr
04:09:31   3  ,trend
04:09:31   4  ,gatt
04:09:31   5  ,COUNT(tkr)
04:09:31   6  ,AVG(g1)
04:09:31   7  FROM stk_ms_svmd_svmspy
04:09:31   8  GROUP BY tkr,trend,gatt
04:09:31   9  ORDER BY tkr,trend,gatt
04:09:31  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
IBM		  -1 nup       1399 -.74010007
IBM		  -1 up        1043 1.09550336
IBM		   1 nup       1714 -.62200117
IBM		   1 up        1206 .917056385
IBM		   1		  1

Elapsed: 00:00:00.02
04:09:31 SQL> 
04:09:31 SQL> SELECT
04:09:31   2  tkr
04:09:31   3  ,COUNT(tkr)
04:09:31   4  ,MIN(ydate),MAX(ydate)
04:09:31   5  FROM stk_ms_svmd_svmspy
04:09:31   6  GROUP BY tkr
04:09:31   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
IBM		5363 1990-01-02 21:00:00 2011-04-08 21:00:00

Elapsed: 00:00:00.00
04:09:31 SQL> 
04:09:31 SQL> -- exit
04:09:31 SQL> 
04:09:31 SQL> 
04:09:31 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.08
04:09:31 SQL> 
04:09:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
04:09:31 SQL> 
04:09:31 SQL> CREATE TABLE stk_ms_u COMPRESS AS
04:09:31   2  SELECT * FROM stk_ms_svmspy
04:09:31   3  UNION
04:09:31   4  SELECT * FROM stk_ms_svmd_svmspy
04:09:31   5  /

Table created.

Elapsed: 00:00:00.56
04:09:31 SQL> 
04:09:31 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
