
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 26 19:53:57 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

19:53:58 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
19:53:58 SQL> 
19:53:58 SQL> 19:53:58 SQL> --
19:53:58 SQL> -- stk10u.sql
19:53:58 SQL> --
19:53:58 SQL> 
19:53:58 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
19:53:58 SQL> 
19:53:58 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
19:53:58 SQL> @stk10.sql     '&1'
19:53:58 SQL> --
19:53:58 SQL> -- stk10.sql
19:53:58 SQL> --
19:53:58 SQL> 
19:53:58 SQL> -- Creates views and tables for demonstrating SVM.
19:53:58 SQL> 
19:53:58 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:05.93
19:54:04 SQL> 
19:54:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.82
19:54:06 SQL> 
19:54:06 SQL> CREATE TABLE stk10svmspy COMPRESS AS
19:54:06   2  SELECT
19:54:06   3  tkr
19:54:06   4  ,ydate
19:54:06   5  ,tkr||ydate tkrdate
19:54:06   6  ,clse
19:54:06   7  ,clse2
19:54:06   8  ,rownum rnum -- acts as t in my time-series
19:54:06   9  -- g1 is important. I want to predict g1:
19:54:06  10  ,gain1day g1
19:54:06  11  -- Derive some attributes from clse.
19:54:06  12  -- Each row spans 5 minutes.
19:54:06  13  -- The number of rows in 1 day is 24*60/5.
19:54:06  14  -- I want the aggregations to span from 3 days to 9 days:
19:54:06  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
19:54:06  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
19:54:06  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
19:54:06  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
19:54:06  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
19:54:06  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
19:54:06  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
19:54:06  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
19:54:06  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
19:54:06  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
19:54:06  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
19:54:06  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
19:54:06  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
19:54:06  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
19:54:06  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
19:54:06  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
19:54:06  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
19:54:06  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
19:54:06  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
19:54:06  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
19:54:06  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
19:54:06  36  FROM di5min_stk_c2
19:54:06  37  WHERE UPPER(tkr)='&1'
19:54:06  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
19:54:06  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
19:54:06  40  ORDER BY ydate
19:54:06  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='WMT'

Table created.

Elapsed: 00:00:03.17
19:54:09 SQL> 
19:54:09 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.17
19:54:11 SQL> 
19:54:11 SQL> -- rpt
19:54:11 SQL> 
19:54:11 SQL> SELECT
19:54:11   2  tkr
19:54:11   3  ,COUNT(tkr)ccount
19:54:11   4  ,MIN(clse)mnclse,MAX(clse)mxclse
19:54:11   5  -- ,MIN(avg4),MAX(avg4)
19:54:11   6  ,MIN(ydate),MAX(ydate)
19:54:11   7  ,MIN(g1)
19:54:11   8  ,MAX(g1)
19:54:11   9  FROM stk10svmspy
19:54:11  10  GROUP BY tkr
19:54:11  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
WMT	     25297	47.76	   57.72 2009-10-28 18:10:00 2011-01-26 19:45:00      -2.16	  2.22

Elapsed: 00:00:00.06
19:54:11 SQL> 
19:54:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:54:11 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.11
19:54:11 SQL> CREATE TABLE stk12svmspy COMPRESS AS
19:54:11   2  SELECT
19:54:11   3  tkr
19:54:11   4  ,ydate
19:54:11   5  ,tkrdate
19:54:11   6  ,clse
19:54:11   7  ,rnum
19:54:11   8  ,g1
19:54:11   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
19:54:11  10  -- I want more attributes from the ones I derived above:
19:54:11  11  -- clse relation to moving-min
19:54:11  12  ,clse-min3  cm3
19:54:11  13  ,clse-min4  cm4
19:54:11  14  ,clse-min5  cm5
19:54:11  15  ,clse-min6  cm6
19:54:11  16  ,clse-min7  cm7
19:54:11  17  ,clse-min8  cm8
19:54:11  18  ,clse-min9  cm9
19:54:11  19  -- clse relation to moving-avg
19:54:11  20  ,clse-avg3  ca3
19:54:11  21  ,clse-avg4  ca4
19:54:11  22  ,clse-avg5  ca5
19:54:11  23  ,clse-avg6  ca6
19:54:11  24  ,clse-avg7  ca7
19:54:11  25  ,clse-avg8  ca8
19:54:11  26  ,clse-avg9  ca9
19:54:11  27  -- clse relation to moving-max
19:54:11  28  ,clse-max3  cx3
19:54:11  29  ,clse-max4  cx4
19:54:11  30  ,clse-max5  cx5
19:54:11  31  ,clse-max6  cx6
19:54:11  32  ,clse-max7  cx7
19:54:11  33  ,clse-max8  cx8
19:54:11  34  ,clse-max9  cx9
19:54:11  35  -- Derive date related attributes:
19:54:11  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:54:11  37  ,0+TO_CHAR(ydate,'D')d
19:54:11  38  ,0+TO_CHAR(ydate,'W')w
19:54:11  39  -- mpm stands for minutes-past-midnight:
19:54:11  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:54:11  41  -- mph stands for minutes-past-hour:
19:54:11  42  ,0+TO_CHAR(ydate,'MI')mph
19:54:11  43  FROM stk10svmspy
19:54:11  44  ORDER BY ydate
19:54:11  45  /

Table created.

Elapsed: 00:00:00.61
19:54:12 SQL> 
19:54:12 SQL> -- rpt
19:54:12 SQL> 
19:54:12 SQL> SELECT
19:54:12   2  tkr
19:54:12   3  ,COUNT(tkr)ccount
19:54:12   4  ,MIN(clse)mnclse,MAX(clse)mxclse
19:54:12   5  -- ,MIN(avg4),MAX(avg4)
19:54:12   6  ,MIN(ydate),MAX(ydate)
19:54:12   7  ,MIN(g1)
19:54:12   8  ,AVG(g1)
19:54:12   9  ,MAX(g1)
19:54:12  10  FROM stk12svmspy
19:54:12  11  GROUP BY tkr
19:54:12  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
WMT	     25297	47.76	   57.72 2009-10-28 18:10:00 2011-01-26 19:45:00      -2.16 .024648079	     2.22

Elapsed: 00:00:00.05
19:54:12 SQL> 
19:54:12 SQL> -- Prepare for derivation of NTILE based parameters.
19:54:12 SQL> -- Also derive the "trend" parameter:
19:54:12 SQL> 
19:54:12 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:01.19
19:54:13 SQL> CREATE TABLE stk14svmspy COMPRESS AS
19:54:13   2  SELECT
19:54:13   3  tkr
19:54:13   4  ,ydate
19:54:13   5  ,tkrdate
19:54:13   6  ,clse
19:54:13   7  ,g1
19:54:13   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
19:54:13   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
19:54:13  10  ,CASE WHEN trend IS NULL THEN 1
19:54:13  11  	    WHEN trend =0      THEN 1
19:54:13  12  	    ELSE trend END trend
19:54:13  13  ,cm3
19:54:13  14  ,cm4
19:54:13  15  ,cm5
19:54:13  16  ,cm6
19:54:13  17  ,cm7
19:54:13  18  ,cm8
19:54:13  19  ,cm9
19:54:13  20  ,ca3
19:54:13  21  ,ca4
19:54:13  22  ,ca5
19:54:13  23  ,ca6
19:54:13  24  ,ca7
19:54:13  25  ,ca8
19:54:13  26  ,ca9
19:54:13  27  ,cx3
19:54:13  28  ,cx4
19:54:13  29  ,cx5
19:54:13  30  ,cx6
19:54:13  31  ,cx7
19:54:13  32  ,cx8
19:54:13  33  ,cx9
19:54:13  34  ,hh
19:54:13  35  ,d
19:54:13  36  ,w
19:54:13  37  ,mpm
19:54:13  38  ,mph
19:54:13  39  FROM stk12svmspy
19:54:13  40  -- Guard against divide by 0:
19:54:13  41  WHERE clse > 0
19:54:13  42  ORDER BY ydate
19:54:13  43  /

Table created.

Elapsed: 00:00:00.38
19:54:14 SQL> 
19:54:14 SQL> -- rpt
19:54:14 SQL> 
19:54:14 SQL> SELECT
19:54:14   2  tkr
19:54:14   3  ,trend
19:54:14   4  ,gatt
19:54:14   5  ,COUNT(tkr)
19:54:14   6  ,AVG(g1)
19:54:14   7  FROM stk14svmspy
19:54:14   8  GROUP BY tkr,trend,gatt
19:54:14   9  ORDER BY tkr,trend,gatt
19:54:14  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
WMT		-1 nup	     6866 -.22898522
WMT		-1 up	     4387 .503933782
WMT		-1	       34
WMT		 1 nup	     8923 -.25016895
WMT		 1 up	     4787 .461458638
WMT		 1	      300

6 rows selected.

Elapsed: 00:00:00.07
19:54:14 SQL> 
19:54:14 SQL> -- Derive NTILE based params:
19:54:14 SQL> 
19:54:14 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.31
19:54:14 SQL> CREATE TABLE stk16svmspy COMPRESS AS
19:54:14   2  SELECT
19:54:14   3  tkr
19:54:14   4  ,ydate
19:54:14   5  ,tkrdate
19:54:14   6  ,clse
19:54:14   7  ,g1
19:54:14   8  ,gatt
19:54:14   9  ,gattn
19:54:14  10  ,trend
19:54:14  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
19:54:14  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
19:54:14  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
19:54:14  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
19:54:14  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
19:54:14  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
19:54:14  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
19:54:14  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
19:54:14  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
19:54:14  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
19:54:14  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
19:54:14  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
19:54:14  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
19:54:14  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
19:54:14  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
19:54:14  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
19:54:14  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
19:54:14  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
19:54:14  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
19:54:14  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
19:54:14  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
19:54:14  32  ,hh  att21
19:54:14  33  ,d   att22
19:54:14  34  ,w   att23
19:54:14  35  ,mpm att24
19:54:14  36  ,mph att25
19:54:14  37  ,trend att26
19:54:14  38  FROM stk14svmspy
19:54:14  39  ORDER BY ydate
19:54:14  40  /

Table created.

Elapsed: 00:00:03.16
19:54:17 SQL> 
19:54:17 SQL> -- rpt
19:54:17 SQL> 
19:54:17 SQL> SELECT
19:54:17   2  tkr
19:54:17   3  ,trend
19:54:17   4  ,gatt
19:54:17   5  ,COUNT(tkr)
19:54:17   6  ,AVG(g1)
19:54:17   7  FROM stk16svmspy
19:54:17   8  GROUP BY tkr,trend,gatt
19:54:17   9  ORDER BY tkr,trend,gatt
19:54:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
WMT		-1 nup	     6866 -.22898522
WMT		-1 up	     4387 .503933782
WMT		-1	       34
WMT		 1 nup	     8923 -.25016895
WMT		 1 up	     4787 .461458638
WMT		 1	      300

6 rows selected.

Elapsed: 00:00:00.03
19:54:17 SQL> 
19:54:17 SQL> -- Now I derive goodness attributes:
19:54:17 SQL> 
19:54:17 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.43
19:54:18 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
19:54:18   2  SELECT
19:54:18   3  tkr
19:54:18   4  ,ydate
19:54:18   5  ,tkrdate
19:54:18   6  ,trend
19:54:18   7  ,g1
19:54:18   8  ,gatt
19:54:18   9  ,gattn
19:54:18  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
19:54:18  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
19:54:18  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
19:54:18  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
19:54:18  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
19:54:18  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
19:54:18  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
19:54:18  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
19:54:18  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
19:54:18  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
19:54:18  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
19:54:18  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
19:54:18  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
19:54:18  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
19:54:18  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
19:54:18  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
19:54:18  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
19:54:18  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
19:54:18  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
19:54:18  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
19:54:18  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
19:54:18  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
19:54:18  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
19:54:18  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
19:54:18  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
19:54:18  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
19:54:18  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
19:54:18  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
19:54:18  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
19:54:18  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
19:54:18  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
19:54:18  41  FROM stk16svmspy
19:54:18  42  /

Table created.

Elapsed: 00:00:04.10
19:54:22 SQL> 
19:54:22 SQL> -- rpt
19:54:22 SQL> 
19:54:22 SQL> SELECT
19:54:22   2  tkr
19:54:22   3  ,trend
19:54:22   4  ,gatt
19:54:22   5  ,COUNT(tkr)
19:54:22   6  ,AVG(g1)
19:54:22   7  FROM stk_ms_svmspy
19:54:22   8  GROUP BY tkr,trend,gatt
19:54:22   9  ORDER BY tkr,trend,gatt
19:54:22  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
WMT		-1 nup	     6866 -.22898522
WMT		-1 up	     4387 .503933782
WMT		-1	       34
WMT		 1 nup	     8923 -.25016895
WMT		 1 up	     4787 .461458638
WMT		 1	      300

6 rows selected.

Elapsed: 00:00:00.02
19:54:22 SQL> 
19:54:22 SQL> SELECT
19:54:22   2  tkr
19:54:22   3  ,0+TO_CHAR(ydate,'D')daynum
19:54:22   4  ,COUNT(tkr)
19:54:22   5  ,MIN(ydate),MAX(ydate)
19:54:22   6  FROM stk_ms_svmspy
19:54:22   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
19:54:22   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
19:54:22   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
WMT		 2	 5000 2009-11-02 13:25:00 2011-01-24 20:55:00
WMT		 3	 5058 2009-11-03 13:25:00 2011-01-25 20:55:00
WMT		 4	 5049 2009-10-28 18:10:00 2011-01-26 19:45:00
WMT		 5	 5096 2009-10-29 13:25:00 2011-01-20 20:55:00
WMT		 6	 5094 2009-10-30 13:25:00 2011-01-21 20:55:00

Elapsed: 00:00:00.03
19:54:22 SQL> 
19:54:22 SQL> -- exit
19:54:22 SQL> @stk10svmd.sql '&1'
19:54:22 SQL> --
19:54:22 SQL> -- stk10svmd.sql
19:54:22 SQL> --
19:54:22 SQL> 
19:54:22 SQL> -- Creates views and tables for demonstrating SVM.
19:54:22 SQL> -- I need to run this after I run stk10.sql
19:54:22 SQL> 
19:54:22 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.35
19:54:22 SQL> 
19:54:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
19:54:22 SQL> 
19:54:22 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
19:54:22   2  SELECT
19:54:22   3  tkr
19:54:22   4  ,ydate
19:54:22   5  ,tkr||ydate tkrdate
19:54:22   6  ,clse
19:54:22   7  ,rownum rnum -- acts as t in my time-series
19:54:22   8  -- Derive some attributes from clse.
19:54:22   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
19:54:22  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
19:54:22  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
19:54:22  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
19:54:22  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
19:54:22  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
19:54:22  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
19:54:22  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
19:54:22  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
19:54:22  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
19:54:22  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
19:54:22  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
19:54:22  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
19:54:22  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
19:54:22  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
19:54:22  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
19:54:22  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
19:54:22  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
19:54:22  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
19:54:22  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
19:54:22  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
19:54:22  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
19:54:22  31  FROM ystk
19:54:22  32  WHERE UPPER(tkr)='&1'
19:54:22  33  AND ydate > '1990-01-01'
19:54:22  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
19:54:22  35  ORDER BY ydate
19:54:22  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='WMT'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='WMT')

Table created.

Elapsed: 00:00:00.33
19:54:23 SQL> 
19:54:23 SQL> -- rpt
19:54:23 SQL> 
19:54:23 SQL> SELECT
19:54:23   2  tkr
19:54:23   3  ,COUNT(tkr)
19:54:23   4  ,MIN(clse),MAX(clse)
19:54:23   5  ,MIN(avg4),MAX(avg4)
19:54:23   6  ,MIN(ydate),MAX(ydate)
19:54:23   7  FROM stk_svmd10svmspy
19:54:23   8  GROUP BY tkr
19:54:23   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
WMT		5311	   4.17      60.41	 4.25	  59.688 1990-01-02 00:00:00 2011-01-25 00:00:00

Elapsed: 00:00:00.01
19:54:23 SQL> 
19:54:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:54:23 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
19:54:23 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
19:54:23   2  SELECT
19:54:23   3  tkr
19:54:23   4  ,ydate
19:54:23   5  ,tkrdate
19:54:23   6  ,clse
19:54:23   7  ,rnum
19:54:23   8  -- g1 is important. I want to predict g1:
19:54:23   9  ,ld - clse g1
19:54:23  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
19:54:23  11  -- I want more attributes from the ones I derived above:
19:54:23  12  -- clse relation to moving-min
19:54:23  13  ,clse-min3  cm3
19:54:23  14  ,clse-min4  cm4
19:54:23  15  ,clse-min5  cm5
19:54:23  16  ,clse-min6  cm6
19:54:23  17  ,clse-min7  cm7
19:54:23  18  ,clse-min8  cm8
19:54:23  19  ,clse-min9  cm9
19:54:23  20  -- clse relation to moving-avg
19:54:23  21  ,clse-avg3  ca3
19:54:23  22  ,clse-avg4  ca4
19:54:23  23  ,clse-avg5  ca5
19:54:23  24  ,clse-avg6  ca6
19:54:23  25  ,clse-avg7  ca7
19:54:23  26  ,clse-avg8  ca8
19:54:23  27  ,clse-avg9  ca9
19:54:23  28  -- clse relation to moving-max
19:54:23  29  ,clse-max3  cx3
19:54:23  30  ,clse-max4  cx4
19:54:23  31  ,clse-max5  cx5
19:54:23  32  ,clse-max6  cx6
19:54:23  33  ,clse-max7  cx7
19:54:23  34  ,clse-max8  cx8
19:54:23  35  ,clse-max9  cx9
19:54:23  36  -- Derive date related attributes:
19:54:23  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:54:23  38  ,0+TO_CHAR(ydate,'D')d
19:54:23  39  ,0+TO_CHAR(ydate,'W')w
19:54:23  40  -- mpm stands for minutes-past-midnight:
19:54:23  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:54:23  42  -- mph stands for minutes-past-hour:
19:54:23  43  ,0+TO_CHAR(ydate,'MI')mph
19:54:23  44  FROM stk_svmd10svmspy
19:54:23  45  ORDER BY ydate
19:54:23  46  /

Table created.

Elapsed: 00:00:00.17
19:54:23 SQL> 
19:54:23 SQL> -- rpt
19:54:23 SQL> 
19:54:23 SQL> SELECT
19:54:23   2  tkr
19:54:23   3  ,COUNT(tkr)
19:54:23   4  ,MIN(clse),MAX(clse)
19:54:23   5  ,MIN(ydate),MAX(ydate)
19:54:23   6  FROM stk_svmd12
19:54:23   7  GROUP BY tkr
19:54:23   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
WMT		5311	   4.17      60.41 1990-01-02 00:00:00 2011-01-25 00:00:00

Elapsed: 00:00:00.02
19:54:23 SQL> 
19:54:23 SQL> -- Prepare for derivation of NTILE based parameters.
19:54:23 SQL> -- Also derive the "trend" parameter:
19:54:23 SQL> 
19:54:23 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
19:54:23 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
19:54:23   2  SELECT
19:54:23   3  tkr
19:54:23   4  ,ydate
19:54:23   5  ,tkrdate
19:54:23   6  ,clse
19:54:23   7  ,g1
19:54:23   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
19:54:23   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
19:54:23  10  ,CASE WHEN trend IS NULL THEN 1
19:54:23  11  	    WHEN trend =0      THEN 1
19:54:23  12  	    ELSE trend END trend
19:54:23  13  ,cm3
19:54:23  14  ,cm4
19:54:23  15  ,cm5
19:54:23  16  ,cm6
19:54:23  17  ,cm7
19:54:23  18  ,cm8
19:54:23  19  ,cm9
19:54:23  20  ,ca3
19:54:23  21  ,ca4
19:54:23  22  ,ca5
19:54:23  23  ,ca6
19:54:23  24  ,ca7
19:54:23  25  ,ca8
19:54:23  26  ,ca9
19:54:23  27  ,cx3
19:54:23  28  ,cx4
19:54:23  29  ,cx5
19:54:23  30  ,cx6
19:54:23  31  ,cx7
19:54:23  32  ,cx8
19:54:23  33  ,cx9
19:54:23  34  ,hh
19:54:23  35  ,d
19:54:23  36  ,w
19:54:23  37  ,mpm
19:54:23  38  ,mph
19:54:23  39  FROM stk_svmd12
19:54:23  40  -- Guard against divide by 0:
19:54:23  41  WHERE clse > 0
19:54:23  42  ORDER BY ydate
19:54:23  43  /

Table created.

Elapsed: 00:00:00.20
19:54:23 SQL> 
19:54:23 SQL> -- rpt
19:54:23 SQL> 
19:54:23 SQL> SELECT
19:54:23   2  tkr
19:54:23   3  ,trend
19:54:23   4  ,gatt
19:54:23   5  ,COUNT(tkr)
19:54:23   6  ,AVG(g1)
19:54:23   7  FROM stk_svmd14
19:54:23   8  GROUP BY tkr,trend,gatt
19:54:23   9  ORDER BY tkr,trend,gatt
19:54:23  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
WMT		  -1 nup       1425 -.33218246
WMT		  -1 up        1055 .528312796
WMT		   1 nup       1639 -.34372788
WMT		   1 up        1191 .446498741
WMT		   1		  1

Elapsed: 00:00:00.01
19:54:23 SQL> 
19:54:23 SQL> -- Derive NTILE based params:
19:54:23 SQL> 
19:54:23 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.05
19:54:23 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
19:54:23   2  SELECT
19:54:23   3  tkr
19:54:23   4  ,ydate
19:54:23   5  ,tkrdate
19:54:23   6  ,clse
19:54:23   7  ,g1
19:54:23   8  ,gatt
19:54:23   9  ,gattn
19:54:23  10  ,trend
19:54:23  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
19:54:23  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
19:54:23  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
19:54:23  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
19:54:23  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
19:54:23  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
19:54:23  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
19:54:23  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
19:54:23  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
19:54:23  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
19:54:23  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
19:54:23  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
19:54:23  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
19:54:23  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
19:54:23  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
19:54:23  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
19:54:23  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
19:54:23  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
19:54:23  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
19:54:23  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
19:54:23  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
19:54:23  32  ,hh  att21
19:54:23  33  ,d   att22
19:54:23  34  ,w   att23
19:54:23  35  ,mpm att24
19:54:23  36  ,mph att25
19:54:23  37  ,trend att26
19:54:23  38  FROM stk_svmd14
19:54:23  39  ORDER BY ydate
19:54:23  40  /

Table created.

Elapsed: 00:00:00.62
19:54:24 SQL> 
19:54:24 SQL> -- rpt
19:54:24 SQL> 
19:54:24 SQL> SELECT
19:54:24   2  tkr
19:54:24   3  ,trend
19:54:24   4  ,gatt
19:54:24   5  ,COUNT(tkr)
19:54:24   6  ,AVG(g1)
19:54:24   7  FROM stk_svmd16
19:54:24   8  GROUP BY tkr,trend,gatt
19:54:24   9  ORDER BY tkr,trend,gatt
19:54:24  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
WMT		  -1 nup       1425 -.33218246
WMT		  -1 up        1055 .528312796
WMT		   1 nup       1639 -.34372788
WMT		   1 up        1191 .446498741
WMT		   1		  1

Elapsed: 00:00:00.01
19:54:24 SQL> 
19:54:24 SQL> -- Now I derive goodness attributes:
19:54:24 SQL> 
19:54:24 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.13
19:54:24 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
19:54:24   2  SELECT
19:54:24   3  tkr
19:54:24   4  ,ydate
19:54:24   5  ,tkrdate
19:54:24   6  ,trend
19:54:24   7  ,g1
19:54:24   8  ,gatt
19:54:24   9  ,gattn
19:54:24  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
19:54:24  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
19:54:24  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
19:54:24  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
19:54:24  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
19:54:24  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
19:54:24  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
19:54:24  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
19:54:24  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
19:54:24  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
19:54:24  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
19:54:24  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
19:54:24  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
19:54:24  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
19:54:24  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
19:54:24  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
19:54:24  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
19:54:24  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
19:54:24  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
19:54:24  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
19:54:24  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
19:54:24  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
19:54:24  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
19:54:24  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
19:54:24  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
19:54:24  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
19:54:24  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
19:54:24  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
19:54:24  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
19:54:24  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
19:54:24  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
19:54:24  41  FROM stk_svmd16
19:54:24  42  /

Table created.

Elapsed: 00:00:01.29
19:54:25 SQL> 
19:54:25 SQL> -- rpt
19:54:25 SQL> 
19:54:25 SQL> SELECT
19:54:25   2  tkr
19:54:25   3  ,trend
19:54:25   4  ,gatt
19:54:25   5  ,COUNT(tkr)
19:54:25   6  ,AVG(g1)
19:54:25   7  FROM stk_ms_svmd_svmspy
19:54:25   8  GROUP BY tkr,trend,gatt
19:54:25   9  ORDER BY tkr,trend,gatt
19:54:25  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
WMT		  -1 nup       1425 -.33218246
WMT		  -1 up        1055 .528312796
WMT		   1 nup       1639 -.34372788
WMT		   1 up        1191 .446498741
WMT		   1		  1

Elapsed: 00:00:00.02
19:54:25 SQL> 
19:54:25 SQL> SELECT
19:54:25   2  tkr
19:54:25   3  ,COUNT(tkr)
19:54:25   4  ,MIN(ydate),MAX(ydate)
19:54:25   5  FROM stk_ms_svmd_svmspy
19:54:25   6  GROUP BY tkr
19:54:25   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
WMT		5311 1990-01-02 00:00:00 2011-01-25 00:00:00

Elapsed: 00:00:00.00
19:54:25 SQL> 
19:54:25 SQL> -- exit
19:54:25 SQL> 
19:54:25 SQL> 
19:54:25 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.22
19:54:26 SQL> 
19:54:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.18
19:54:27 SQL> 
19:54:27 SQL> CREATE TABLE stk_ms_u COMPRESS AS
19:54:27   2  SELECT * FROM stk_ms_svmspy
19:54:27   3  UNION
19:54:27   4  SELECT * FROM stk_ms_svmd_svmspy
19:54:27   5  /

Table created.

Elapsed: 00:00:00.62
19:54:27 SQL> 
19:54:27 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
