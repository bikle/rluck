
SQL*Plus: Release 11.2.0.1.0 Production on Tue Mar 29 11:48:58 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

11:48:58 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
11:48:58 SQL> 
11:48:58 SQL> 11:48:58 SQL> --
11:48:58 SQL> -- stk10u.sql
11:48:58 SQL> --
11:48:58 SQL> 
11:48:58 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
11:48:58 SQL> 
11:48:58 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
11:48:58 SQL> @stk10.sql     '&1'
11:48:58 SQL> --
11:48:58 SQL> -- stk10.sql
11:48:58 SQL> --
11:48:58 SQL> 
11:48:58 SQL> -- Creates views and tables for demonstrating SVM.
11:48:58 SQL> 
11:48:58 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.43
11:48:59 SQL> 
11:48:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.16
11:48:59 SQL> 
11:48:59 SQL> CREATE TABLE stk10svmspy COMPRESS AS
11:48:59   2  SELECT
11:48:59   3  tkr
11:48:59   4  ,ydate
11:48:59   5  ,tkr||ydate tkrdate
11:48:59   6  ,clse
11:48:59   7  ,clse2
11:48:59   8  ,rownum rnum -- acts as t in my time-series
11:48:59   9  -- g1 is important. I want to predict g1:
11:48:59  10  ,gain1day g1
11:48:59  11  -- Derive some attributes from clse.
11:48:59  12  -- Each row spans 5 minutes.
11:48:59  13  -- The number of rows in 1 day is 24*60/5.
11:48:59  14  -- I want the aggregations to span from 3 days to 9 days:
11:48:59  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
11:48:59  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
11:48:59  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
11:48:59  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
11:48:59  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
11:48:59  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
11:48:59  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
11:48:59  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
11:48:59  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
11:48:59  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
11:48:59  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
11:48:59  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
11:48:59  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
11:48:59  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
11:48:59  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
11:48:59  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
11:48:59  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
11:48:59  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
11:48:59  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
11:48:59  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
11:48:59  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
11:48:59  36  FROM di5min_stk_c2
11:48:59  37  WHERE UPPER(tkr)='&1'
11:48:59  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
11:48:59  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
11:48:59  40  ORDER BY ydate
11:48:59  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='VMW'

Table created.

Elapsed: 00:00:02.59
11:49:01 SQL> 
11:49:01 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
11:49:02 SQL> 
11:49:02 SQL> -- rpt
11:49:02 SQL> 
11:49:02 SQL> SELECT
11:49:02   2  tkr
11:49:02   3  ,COUNT(tkr)ccount
11:49:02   4  ,MIN(clse)mnclse,MAX(clse)mxclse
11:49:02   5  -- ,MIN(avg4),MAX(avg4)
11:49:02   6  ,MIN(ydate),MAX(ydate)
11:49:02   7  ,MIN(g1)
11:49:02   8  ,MAX(g1)
11:49:02   9  FROM stk10svmspy
11:49:02  10  GROUP BY tkr
11:49:02  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
VMW	      4290	74.39	   95.94 2011-01-04 14:30:00 2011-03-28 19:55:00      -7.84 4.80213474

Elapsed: 00:00:00.05
11:49:02 SQL> 
11:49:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:49:02 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:03.84
11:49:06 SQL> CREATE TABLE stk12svmspy COMPRESS AS
11:49:06   2  SELECT
11:49:06   3  tkr
11:49:06   4  ,ydate
11:49:06   5  ,tkrdate
11:49:06   6  ,clse
11:49:06   7  ,rnum
11:49:06   8  ,g1
11:49:06   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
11:49:06  10  -- I want more attributes from the ones I derived above:
11:49:06  11  -- clse relation to moving-min
11:49:06  12  ,clse-min3  cm3
11:49:06  13  ,clse-min4  cm4
11:49:06  14  ,clse-min5  cm5
11:49:06  15  ,clse-min6  cm6
11:49:06  16  ,clse-min7  cm7
11:49:06  17  ,clse-min8  cm8
11:49:06  18  ,clse-min9  cm9
11:49:06  19  -- clse relation to moving-avg
11:49:06  20  ,clse-avg3  ca3
11:49:06  21  ,clse-avg4  ca4
11:49:06  22  ,clse-avg5  ca5
11:49:06  23  ,clse-avg6  ca6
11:49:06  24  ,clse-avg7  ca7
11:49:06  25  ,clse-avg8  ca8
11:49:06  26  ,clse-avg9  ca9
11:49:06  27  -- clse relation to moving-max
11:49:06  28  ,clse-max3  cx3
11:49:06  29  ,clse-max4  cx4
11:49:06  30  ,clse-max5  cx5
11:49:06  31  ,clse-max6  cx6
11:49:06  32  ,clse-max7  cx7
11:49:06  33  ,clse-max8  cx8
11:49:06  34  ,clse-max9  cx9
11:49:06  35  -- Derive date related attributes:
11:49:06  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:49:06  37  ,0+TO_CHAR(ydate,'D')d
11:49:06  38  ,0+TO_CHAR(ydate,'W')w
11:49:06  39  -- mpm stands for minutes-past-midnight:
11:49:06  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:49:06  41  -- mph stands for minutes-past-hour:
11:49:06  42  ,0+TO_CHAR(ydate,'MI')mph
11:49:06  43  FROM stk10svmspy
11:49:06  44  ORDER BY ydate
11:49:06  45  /

Table created.

Elapsed: 00:00:00.19
11:49:06 SQL> 
11:49:06 SQL> -- rpt
11:49:06 SQL> 
11:49:06 SQL> SELECT
11:49:06   2  tkr
11:49:06   3  ,COUNT(tkr)ccount
11:49:06   4  ,MIN(clse)mnclse,MAX(clse)mxclse
11:49:06   5  -- ,MIN(avg4),MAX(avg4)
11:49:06   6  ,MIN(ydate),MAX(ydate)
11:49:06   7  ,MIN(g1)
11:49:06   8  ,AVG(g1)
11:49:06   9  ,MAX(g1)
11:49:06  10  FROM stk12svmspy
11:49:06  11  GROUP BY tkr
11:49:06  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
VMW	      4290	74.39	   95.94 2011-01-04 14:30:00 2011-03-28 19:55:00      -7.84 -.19646947 4.80213474

Elapsed: 00:00:00.01
11:49:06 SQL> 
11:49:06 SQL> -- Prepare for derivation of NTILE based parameters.
11:49:06 SQL> -- Also derive the "trend" parameter:
11:49:06 SQL> 
11:49:06 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:02.49
11:49:08 SQL> CREATE TABLE stk14svmspy COMPRESS AS
11:49:08   2  SELECT
11:49:08   3  tkr
11:49:08   4  ,ydate
11:49:08   5  ,tkrdate
11:49:08   6  ,clse
11:49:08   7  ,g1
11:49:08   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
11:49:08   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
11:49:08  10  ,CASE WHEN trend IS NULL THEN 1
11:49:08  11  	    WHEN trend =0      THEN 1
11:49:08  12  	    ELSE trend END trend
11:49:08  13  ,cm3
11:49:08  14  ,cm4
11:49:08  15  ,cm5
11:49:08  16  ,cm6
11:49:08  17  ,cm7
11:49:08  18  ,cm8
11:49:08  19  ,cm9
11:49:08  20  ,ca3
11:49:08  21  ,ca4
11:49:08  22  ,ca5
11:49:08  23  ,ca6
11:49:08  24  ,ca7
11:49:08  25  ,ca8
11:49:08  26  ,ca9
11:49:08  27  ,cx3
11:49:08  28  ,cx4
11:49:08  29  ,cx5
11:49:08  30  ,cx6
11:49:08  31  ,cx7
11:49:08  32  ,cx8
11:49:08  33  ,cx9
11:49:08  34  ,hh
11:49:08  35  ,d
11:49:08  36  ,w
11:49:08  37  ,mpm
11:49:08  38  ,mph
11:49:08  39  FROM stk12svmspy
11:49:08  40  -- Guard against divide by 0:
11:49:08  41  WHERE clse > 0
11:49:08  42  ORDER BY ydate
11:49:08  43  /

Table created.

Elapsed: 00:00:00.16
11:49:08 SQL> 
11:49:08 SQL> -- rpt
11:49:08 SQL> 
11:49:08 SQL> SELECT
11:49:08   2  tkr
11:49:08   3  ,trend
11:49:08   4  ,gatt
11:49:08   5  ,COUNT(tkr)
11:49:08   6  ,AVG(g1)
11:49:08   7  FROM stk14svmspy
11:49:08   8  GROUP BY tkr,trend,gatt
11:49:08   9  ORDER BY tkr,trend,gatt
11:49:08  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
VMW		-1 nup	     1508 -1.3898946
VMW		-1 up	     1602 1.50239954
VMW		-1	      209
VMW		 1 nup	      643 -2.0569999
VMW		 1 up	      213 1.09187793
VMW		 1	      115

6 rows selected.

Elapsed: 00:00:00.01
11:49:08 SQL> 
11:49:08 SQL> -- Derive NTILE based params:
11:49:08 SQL> 
11:49:08 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.33
11:49:09 SQL> CREATE TABLE stk16svmspy COMPRESS AS
11:49:09   2  SELECT
11:49:09   3  tkr
11:49:09   4  ,ydate
11:49:09   5  ,tkrdate
11:49:09   6  ,clse
11:49:09   7  ,g1
11:49:09   8  ,gatt
11:49:09   9  ,gattn
11:49:09  10  ,trend
11:49:09  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
11:49:09  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
11:49:09  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
11:49:09  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
11:49:09  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
11:49:09  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
11:49:09  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
11:49:09  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
11:49:09  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
11:49:09  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
11:49:09  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
11:49:09  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
11:49:09  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
11:49:09  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
11:49:09  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
11:49:09  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
11:49:09  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
11:49:09  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
11:49:09  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
11:49:09  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
11:49:09  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
11:49:09  32  ,hh  att21
11:49:09  33  ,d   att22
11:49:09  34  ,w   att23
11:49:09  35  ,mpm att24
11:49:09  36  ,mph att25
11:49:09  37  ,trend att26
11:49:09  38  FROM stk14svmspy
11:49:09  39  ORDER BY ydate
11:49:09  40  /

Table created.

Elapsed: 00:00:00.57
11:49:09 SQL> 
11:49:09 SQL> -- rpt
11:49:09 SQL> 
11:49:09 SQL> SELECT
11:49:09   2  tkr
11:49:09   3  ,trend
11:49:09   4  ,gatt
11:49:09   5  ,COUNT(tkr)
11:49:09   6  ,AVG(g1)
11:49:09   7  FROM stk16svmspy
11:49:09   8  GROUP BY tkr,trend,gatt
11:49:09   9  ORDER BY tkr,trend,gatt
11:49:09  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
VMW		-1 nup	     1508 -1.3898946
VMW		-1 up	     1602 1.50239954
VMW		-1	      209
VMW		 1 nup	      643 -2.0569999
VMW		 1 up	      213 1.09187793
VMW		 1	      115

6 rows selected.

Elapsed: 00:00:00.01
11:49:09 SQL> 
11:49:09 SQL> -- Comment out feedback related syntax:
11:49:09 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
11:49:09 SQL> -- SELECT
11:49:09 SQL> -- m.tkr
11:49:09 SQL> -- ,m.ydate
11:49:09 SQL> -- ,m.tkrdate
11:49:09 SQL> -- ,l.score score_long
11:49:09 SQL> -- ,s.score score_short
11:49:09 SQL> -- ,m.g1
11:49:09 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
11:49:09 SQL> -- WHERE l.targ='gatt'
11:49:09 SQL> -- AND	 s.targ='gattn'
11:49:09 SQL> -- AND l.tkrdate = s.tkrdate
11:49:09 SQL> -- AND l.tkrdate = m.tkrdate
11:49:09 SQL> -- -- Speed things up:
11:49:09 SQL> -- AND l.tkr = '&1'
11:49:09 SQL> -- AND s.tkr = '&1'
11:49:09 SQL> -- /
11:49:09 SQL> --
11:49:09 SQL> -- DROP TABLE score_corr_tkr;
11:49:09 SQL> --
11:49:09 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
11:49:09 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
11:49:09 SQL> -- (
11:49:09 SQL> --   SELECT
11:49:09 SQL> --   tkrdate
11:49:09 SQL> --   -- Find corr() tween score and g1 over 8 day period:
11:49:09 SQL> --   ,CORR((score_long - score_short),g1)
11:49:09 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
11:49:09 SQL> --   FROM sc12tkr
11:49:09 SQL> -- )
11:49:09 SQL> -- GROUP BY tkrdate
11:49:09 SQL> -- /
11:49:09 SQL> 
11:49:09 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
11:49:09 SQL> 
11:49:09 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
11:49:09 SQL> 
11:49:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
11:49:10 SQL> 
11:49:10 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
11:49:10   2  SELECT
11:49:10   3  tkr
11:49:10   4  ,ydate
11:49:10   5  ,tkrdate
11:49:10   6  ,trend
11:49:10   7  ,g1
11:49:10   8  ,gatt
11:49:10   9  ,gattn
11:49:10  10  -- Goodness attributes:
11:49:10  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
11:49:10  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
11:49:10  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
11:49:10  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
11:49:10  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
11:49:10  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
11:49:10  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
11:49:10  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
11:49:10  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
11:49:10  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
11:49:10  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
11:49:10  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
11:49:10  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
11:49:10  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
11:49:10  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
11:49:10  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
11:49:10  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
11:49:10  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
11:49:10  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
11:49:10  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
11:49:10  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
11:49:10  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
11:49:10  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
11:49:10  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
11:49:10  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
11:49:10  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
11:49:10  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
11:49:10  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
11:49:10  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
11:49:10  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
11:49:10  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
11:49:10  42  FROM stk16svmspy
11:49:10  43  /

Table created.

Elapsed: 00:00:00.84
11:49:10 SQL> 
11:49:10 SQL> -- rpt
11:49:10 SQL> 
11:49:10 SQL> SELECT
11:49:10   2  tkr
11:49:10   3  ,trend
11:49:10   4  ,gatt
11:49:10   5  ,COUNT(tkr)
11:49:10   6  ,AVG(g1)
11:49:10   7  FROM stk_ms_svmspy
11:49:10   8  GROUP BY tkr,trend,gatt
11:49:10   9  ORDER BY tkr,trend,gatt
11:49:10  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
VMW		-1 nup	     1508 -1.3898946
VMW		-1 up	     1602 1.50239954
VMW		-1	      209
VMW		 1 nup	      643 -2.0569999
VMW		 1 up	      213 1.09187793
VMW		 1	      115

6 rows selected.

Elapsed: 00:00:00.02
11:49:11 SQL> 
11:49:11 SQL> SELECT
11:49:11   2  tkr
11:49:11   3  ,0+TO_CHAR(ydate,'D')daynum
11:49:11   4  ,COUNT(tkr)
11:49:11   5  ,MIN(ydate),MAX(ydate)
11:49:11   6  FROM stk_ms_svmspy
11:49:11   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
11:49:11   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
11:49:11   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
VMW		 2	  702 2011-01-10 14:30:00 2011-03-28 19:55:00
VMW		 3	  858 2011-01-04 14:30:00 2011-03-22 19:55:00
VMW		 4	  858 2011-01-05 14:30:00 2011-03-23 19:55:00
VMW		 5	  936 2011-01-06 14:30:00 2011-03-24 19:55:00
VMW		 6	  936 2011-01-07 14:30:00 2011-03-25 19:55:00

Elapsed: 00:00:00.01
11:49:11 SQL> 
11:49:11 SQL> -- exit
11:49:11 SQL> @stk10svmd.sql '&1'
11:49:11 SQL> --
11:49:11 SQL> -- stk10svmd.sql
11:49:11 SQL> --
11:49:11 SQL> 
11:49:11 SQL> -- Creates views and tables for demonstrating SVM.
11:49:11 SQL> -- I need to run this after I run stk10.sql
11:49:11 SQL> 
11:49:11 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.30
11:49:11 SQL> 
11:49:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.05
11:49:11 SQL> 
11:49:11 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
11:49:11   2  SELECT
11:49:11   3  tkr
11:49:11   4  ,ydate
11:49:11   5  ,tkr||ydate tkrdate
11:49:11   6  ,clse
11:49:11   7  ,rownum rnum -- acts as t in my time-series
11:49:11   8  -- Derive some attributes from clse.
11:49:11   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
11:49:11  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
11:49:11  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
11:49:11  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
11:49:11  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
11:49:11  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
11:49:11  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
11:49:11  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
11:49:11  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
11:49:11  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
11:49:11  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
11:49:11  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
11:49:11  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
11:49:11  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
11:49:11  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
11:49:11  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
11:49:11  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
11:49:11  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
11:49:11  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
11:49:11  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
11:49:11  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
11:49:11  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
11:49:11  31  -- ystk21 created here: svmd/cr_ystk21.sql
11:49:11  32  FROM ystk21
11:49:11  33  WHERE UPPER(tkr)='&1'
11:49:11  34  AND ydate > '1990-01-01'
11:49:11  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
11:49:11  36  ORDER BY ydate
11:49:11  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='VMW'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='VMW')

Table created.

Elapsed: 00:00:02.14
11:49:13 SQL> 
11:49:13 SQL> -- rpt
11:49:13 SQL> 
11:49:13 SQL> SELECT
11:49:13   2  tkr
11:49:13   3  ,COUNT(tkr)
11:49:13   4  ,MIN(clse),MAX(clse)
11:49:13   5  ,MIN(avg4),MAX(avg4)
11:49:13   6  ,MIN(ydate),MAX(ydate)
11:49:13   7  FROM stk_svmd10svmspy
11:49:13   8  GROUP BY tkr
11:49:13   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
VMW		 912	  17.88     124.83     18.896	 121.066 2007-08-15 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.01
11:49:13 SQL> 
11:49:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:49:13 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.69
11:49:14 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
11:49:14   2  SELECT
11:49:14   3  tkr
11:49:14   4  ,ydate
11:49:14   5  ,tkrdate
11:49:14   6  ,clse
11:49:14   7  ,rnum
11:49:14   8  -- g1 is important. I want to predict g1:
11:49:14   9  ,ld - clse g1
11:49:14  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
11:49:14  11  -- I want more attributes from the ones I derived above:
11:49:14  12  -- clse relation to moving-min
11:49:14  13  ,clse-min3  cm3
11:49:14  14  ,clse-min4  cm4
11:49:14  15  ,clse-min5  cm5
11:49:14  16  ,clse-min6  cm6
11:49:14  17  ,clse-min7  cm7
11:49:14  18  ,clse-min8  cm8
11:49:14  19  ,clse-min9  cm9
11:49:14  20  -- clse relation to moving-avg
11:49:14  21  ,clse-avg3  ca3
11:49:14  22  ,clse-avg4  ca4
11:49:14  23  ,clse-avg5  ca5
11:49:14  24  ,clse-avg6  ca6
11:49:14  25  ,clse-avg7  ca7
11:49:14  26  ,clse-avg8  ca8
11:49:14  27  ,clse-avg9  ca9
11:49:14  28  -- clse relation to moving-max
11:49:14  29  ,clse-max3  cx3
11:49:14  30  ,clse-max4  cx4
11:49:14  31  ,clse-max5  cx5
11:49:14  32  ,clse-max6  cx6
11:49:14  33  ,clse-max7  cx7
11:49:14  34  ,clse-max8  cx8
11:49:14  35  ,clse-max9  cx9
11:49:14  36  -- Derive date related attributes:
11:49:14  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:49:14  38  ,0+TO_CHAR(ydate,'D')d
11:49:14  39  ,0+TO_CHAR(ydate,'W')w
11:49:14  40  -- mpm stands for minutes-past-midnight:
11:49:14  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:49:14  42  -- mph stands for minutes-past-hour:
11:49:14  43  ,0+TO_CHAR(ydate,'MI')mph
11:49:14  44  FROM stk_svmd10svmspy
11:49:14  45  ORDER BY ydate
11:49:14  46  /

Table created.

Elapsed: 00:00:00.11
11:49:14 SQL> 
11:49:14 SQL> -- rpt
11:49:14 SQL> 
11:49:14 SQL> SELECT
11:49:14   2  tkr
11:49:14   3  ,COUNT(tkr)
11:49:14   4  ,MIN(clse),MAX(clse)
11:49:14   5  ,MIN(ydate),MAX(ydate)
11:49:14   6  FROM stk_svmd12
11:49:14   7  GROUP BY tkr
11:49:14   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
VMW		 912	  17.88     124.83 2007-08-15 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.01
11:49:14 SQL> 
11:49:14 SQL> -- Prepare for derivation of NTILE based parameters.
11:49:14 SQL> -- Also derive the "trend" parameter:
11:49:14 SQL> 
11:49:14 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.08
11:49:14 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
11:49:14   2  SELECT
11:49:14   3  tkr
11:49:14   4  ,ydate
11:49:14   5  ,tkrdate
11:49:14   6  ,clse
11:49:14   7  ,g1
11:49:14   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
11:49:14   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
11:49:14  10  ,CASE WHEN trend IS NULL THEN 1
11:49:14  11  	    WHEN trend =0      THEN 1
11:49:14  12  	    ELSE trend END trend
11:49:14  13  ,cm3
11:49:14  14  ,cm4
11:49:14  15  ,cm5
11:49:14  16  ,cm6
11:49:14  17  ,cm7
11:49:14  18  ,cm8
11:49:14  19  ,cm9
11:49:14  20  ,ca3
11:49:14  21  ,ca4
11:49:14  22  ,ca5
11:49:14  23  ,ca6
11:49:14  24  ,ca7
11:49:14  25  ,ca8
11:49:14  26  ,ca9
11:49:14  27  ,cx3
11:49:14  28  ,cx4
11:49:14  29  ,cx5
11:49:14  30  ,cx6
11:49:14  31  ,cx7
11:49:14  32  ,cx8
11:49:14  33  ,cx9
11:49:14  34  ,hh
11:49:14  35  ,d
11:49:14  36  ,w
11:49:14  37  ,mpm
11:49:14  38  ,mph
11:49:14  39  FROM stk_svmd12
11:49:14  40  -- Guard against divide by 0:
11:49:14  41  WHERE clse > 0
11:49:14  42  ORDER BY ydate
11:49:14  43  /

Table created.

Elapsed: 00:00:00.10
11:49:14 SQL> 
11:49:14 SQL> -- rpt
11:49:14 SQL> 
11:49:14 SQL> SELECT
11:49:14   2  tkr
11:49:14   3  ,trend
11:49:14   4  ,gatt
11:49:14   5  ,COUNT(tkr)
11:49:14   6  ,AVG(g1)
11:49:14   7  FROM stk_svmd14
11:49:14   8  GROUP BY tkr,trend,gatt
11:49:14   9  ORDER BY tkr,trend,gatt
11:49:14  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
VMW		  -1 nup	190 -1.6241579
VMW		  -1 up 	211 1.56549763
VMW		   1 nup	292 -1.1087671
VMW		   1 up 	218 1.48238532
VMW		   1		  1

Elapsed: 00:00:00.01
11:49:14 SQL> 
11:49:14 SQL> -- Derive NTILE based params:
11:49:14 SQL> 
11:49:14 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.08
11:49:14 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
11:49:14   2  SELECT
11:49:14   3  tkr
11:49:14   4  ,ydate
11:49:14   5  ,tkrdate
11:49:14   6  ,clse
11:49:14   7  ,g1
11:49:14   8  ,gatt
11:49:14   9  ,gattn
11:49:14  10  ,trend
11:49:14  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
11:49:14  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
11:49:14  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
11:49:14  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
11:49:14  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
11:49:14  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
11:49:14  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
11:49:14  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
11:49:14  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
11:49:14  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
11:49:14  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
11:49:14  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
11:49:14  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
11:49:14  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
11:49:14  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
11:49:14  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
11:49:14  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
11:49:14  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
11:49:14  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
11:49:14  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
11:49:14  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
11:49:14  32  ,hh  att21
11:49:14  33  ,d   att22
11:49:14  34  ,w   att23
11:49:14  35  ,mpm att24
11:49:14  36  ,mph att25
11:49:14  37  ,trend att26
11:49:14  38  FROM stk_svmd14
11:49:14  39  ORDER BY ydate
11:49:14  40  /

Table created.

Elapsed: 00:00:00.13
11:49:14 SQL> 
11:49:14 SQL> -- rpt
11:49:14 SQL> 
11:49:14 SQL> SELECT
11:49:14   2  tkr
11:49:14   3  ,trend
11:49:14   4  ,gatt
11:49:14   5  ,COUNT(tkr)
11:49:14   6  ,AVG(g1)
11:49:14   7  FROM stk_svmd16
11:49:14   8  GROUP BY tkr,trend,gatt
11:49:14   9  ORDER BY tkr,trend,gatt
11:49:14  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
VMW		  -1 nup	190 -1.6241579
VMW		  -1 up 	211 1.56549763
VMW		   1 nup	292 -1.1087671
VMW		   1 up 	218 1.48238532
VMW		   1		  1

Elapsed: 00:00:00.01
11:49:14 SQL> 
11:49:14 SQL> -- Comment out feedback related syntax:
11:49:14 SQL> 
11:49:14 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
11:49:14 SQL> -- SELECT
11:49:14 SQL> -- m.tkr
11:49:14 SQL> -- ,m.ydate
11:49:14 SQL> -- ,m.tkrdate
11:49:14 SQL> -- ,l.score score_long
11:49:14 SQL> -- ,s.score score_short
11:49:14 SQL> -- ,m.g1
11:49:14 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
11:49:14 SQL> -- WHERE l.targ='gatt'
11:49:14 SQL> -- AND	 s.targ='gattn'
11:49:14 SQL> -- AND l.tkrdate = s.tkrdate
11:49:14 SQL> -- AND l.tkrdate = m.tkrdate
11:49:14 SQL> -- -- Speed things up:
11:49:14 SQL> -- AND l.tkr = '&1'
11:49:14 SQL> -- AND s.tkr = '&1'
11:49:14 SQL> -- /
11:49:14 SQL> --
11:49:14 SQL> -- DROP TABLE score_corr_tkr;
11:49:14 SQL> --
11:49:14 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
11:49:14 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
11:49:14 SQL> -- (
11:49:14 SQL> --   SELECT
11:49:14 SQL> --   tkrdate
11:49:14 SQL> --   -- Find corr() tween score and g1 over 8 day period:
11:49:14 SQL> --   ,CORR((score_long - score_short),g1)
11:49:14 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
11:49:14 SQL> --   FROM sc12tkr
11:49:14 SQL> -- )
11:49:14 SQL> -- GROUP BY tkrdate
11:49:14 SQL> -- /
11:49:14 SQL> 
11:49:14 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
11:49:14 SQL> 
11:49:14 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.05
11:49:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
11:49:15 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
11:49:15   2  SELECT
11:49:15   3  tkr
11:49:15   4  ,ydate
11:49:15   5  ,tkrdate
11:49:15   6  ,trend
11:49:15   7  ,g1
11:49:15   8  ,gatt
11:49:15   9  ,gattn
11:49:15  10  -- Goodness attributes:
11:49:15  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
11:49:15  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
11:49:15  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
11:49:15  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
11:49:15  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
11:49:15  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
11:49:15  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
11:49:15  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
11:49:15  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
11:49:15  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
11:49:15  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
11:49:15  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
11:49:15  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
11:49:15  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
11:49:15  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
11:49:15  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
11:49:15  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
11:49:15  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
11:49:15  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
11:49:15  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
11:49:15  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
11:49:15  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
11:49:15  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
11:49:15  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
11:49:15  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
11:49:15  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
11:49:15  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
11:49:15  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
11:49:15  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
11:49:15  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
11:49:15  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
11:49:15  42  FROM stk_svmd16
11:49:15  43  /

Table created.

Elapsed: 00:00:00.19
11:49:15 SQL> 
11:49:15 SQL> -- rpt
11:49:15 SQL> 
11:49:15 SQL> SELECT
11:49:15   2  tkr
11:49:15   3  ,trend
11:49:15   4  ,gatt
11:49:15   5  ,COUNT(tkr)
11:49:15   6  ,AVG(g1)
11:49:15   7  FROM stk_ms_svmd_svmspy
11:49:15   8  GROUP BY tkr,trend,gatt
11:49:15   9  ORDER BY tkr,trend,gatt
11:49:15  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
VMW		  -1 nup	190 -1.6241579
VMW		  -1 up 	211 1.56549763
VMW		   1 nup	292 -1.1087671
VMW		   1 up 	218 1.48238532
VMW		   1		  1

Elapsed: 00:00:00.01
11:49:15 SQL> 
11:49:15 SQL> SELECT
11:49:15   2  tkr
11:49:15   3  ,COUNT(tkr)
11:49:15   4  ,MIN(ydate),MAX(ydate)
11:49:15   5  FROM stk_ms_svmd_svmspy
11:49:15   6  GROUP BY tkr
11:49:15   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
VMW		 912 2007-08-15 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.01
11:49:15 SQL> 
11:49:15 SQL> -- exit
11:49:15 SQL> 
11:49:15 SQL> 
11:49:15 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.03
11:49:15 SQL> 
11:49:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
11:49:15 SQL> 
11:49:15 SQL> CREATE TABLE stk_ms_u COMPRESS AS
11:49:15   2  SELECT * FROM stk_ms_svmspy
11:49:15   3  UNION
11:49:15   4  SELECT * FROM stk_ms_svmd_svmspy
11:49:15   5  /

Table created.

Elapsed: 00:00:00.15
11:49:15 SQL> 
11:49:15 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
