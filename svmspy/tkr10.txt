
SQL*Plus: Release 11.2.0.1.0 Production on Sat Apr 2 20:59:00 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:59:00 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
20:59:00 SQL> 
20:59:00 SQL> 20:59:00 SQL> --
20:59:00 SQL> -- stk10u.sql
20:59:00 SQL> --
20:59:00 SQL> 
20:59:00 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
20:59:00 SQL> 
20:59:00 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
20:59:00 SQL> @stk10.sql     '&1'
20:59:00 SQL> --
20:59:00 SQL> -- stk10.sql
20:59:00 SQL> --
20:59:00 SQL> 
20:59:00 SQL> -- Creates views and tables for demonstrating SVM.
20:59:00 SQL> 
20:59:00 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.33
20:59:01 SQL> 
20:59:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.19
20:59:01 SQL> 
20:59:01 SQL> CREATE TABLE stk10svmspy COMPRESS AS
20:59:01   2  SELECT
20:59:01   3  tkr
20:59:01   4  ,ydate
20:59:01   5  ,tkr||ydate tkrdate
20:59:01   6  ,clse
20:59:01   7  ,clse2
20:59:01   8  ,rownum rnum -- acts as t in my time-series
20:59:01   9  -- g1 is important. I want to predict g1:
20:59:01  10  ,gain1day g1
20:59:01  11  -- Derive some attributes from clse.
20:59:01  12  -- Each row spans 5 minutes.
20:59:01  13  -- The number of rows in 1 day is 24*60/5.
20:59:01  14  -- I want the aggregations to span from 3 days to 9 days:
20:59:01  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
20:59:01  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
20:59:01  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
20:59:01  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
20:59:01  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
20:59:01  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
20:59:01  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
20:59:01  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
20:59:01  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
20:59:01  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
20:59:01  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
20:59:01  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
20:59:01  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
20:59:01  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
20:59:01  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
20:59:01  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
20:59:01  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
20:59:01  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
20:59:01  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
20:59:01  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
20:59:01  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
20:59:01  36  FROM di5min_stk_c2
20:59:01  37  WHERE UPPER(tkr)='&1'
20:59:01  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
20:59:01  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
20:59:01  40  ORDER BY ydate
20:59:01  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='PPLT'

Table created.

Elapsed: 00:00:00.64
20:59:02 SQL> 
20:59:02 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
20:59:02 SQL> 
20:59:02 SQL> -- rpt
20:59:02 SQL> 
20:59:02 SQL> SELECT
20:59:02   2  tkr
20:59:02   3  ,COUNT(tkr)ccount
20:59:02   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:59:02   5  -- ,MIN(avg4),MAX(avg4)
20:59:02   6  ,MIN(ydate),MAX(ydate)
20:59:02   7  ,MIN(g1)
20:59:02   8  ,MAX(g1)
20:59:02   9  FROM stk10svmspy
20:59:02  10  GROUP BY tkr
20:59:02  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
PPLT	      3897     167.76	  185.21 2011-01-21 14:30:00 2011-04-01 19:55:00      -6.08 11.7949186

Elapsed: 00:00:00.03
20:59:02 SQL> 
20:59:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:59:02 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.09
20:59:02 SQL> CREATE TABLE stk12svmspy COMPRESS AS
20:59:02   2  SELECT
20:59:02   3  tkr
20:59:02   4  ,ydate
20:59:02   5  ,tkrdate
20:59:02   6  ,clse
20:59:02   7  ,rnum
20:59:02   8  ,g1
20:59:02   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:59:02  10  -- I want more attributes from the ones I derived above:
20:59:02  11  -- clse relation to moving-min
20:59:02  12  ,clse-min3  cm3
20:59:02  13  ,clse-min4  cm4
20:59:02  14  ,clse-min5  cm5
20:59:02  15  ,clse-min6  cm6
20:59:02  16  ,clse-min7  cm7
20:59:02  17  ,clse-min8  cm8
20:59:02  18  ,clse-min9  cm9
20:59:02  19  -- clse relation to moving-avg
20:59:02  20  ,clse-avg3  ca3
20:59:02  21  ,clse-avg4  ca4
20:59:02  22  ,clse-avg5  ca5
20:59:02  23  ,clse-avg6  ca6
20:59:02  24  ,clse-avg7  ca7
20:59:02  25  ,clse-avg8  ca8
20:59:02  26  ,clse-avg9  ca9
20:59:02  27  -- clse relation to moving-max
20:59:02  28  ,clse-max3  cx3
20:59:02  29  ,clse-max4  cx4
20:59:02  30  ,clse-max5  cx5
20:59:02  31  ,clse-max6  cx6
20:59:02  32  ,clse-max7  cx7
20:59:02  33  ,clse-max8  cx8
20:59:02  34  ,clse-max9  cx9
20:59:02  35  -- Derive date related attributes:
20:59:02  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:59:02  37  ,0+TO_CHAR(ydate,'D')d
20:59:02  38  ,0+TO_CHAR(ydate,'W')w
20:59:02  39  -- mpm stands for minutes-past-midnight:
20:59:02  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:59:02  41  -- mph stands for minutes-past-hour:
20:59:02  42  ,0+TO_CHAR(ydate,'MI')mph
20:59:02  43  FROM stk10svmspy
20:59:02  44  ORDER BY ydate
20:59:02  45  /

Table created.

Elapsed: 00:00:00.15
20:59:02 SQL> 
20:59:02 SQL> -- rpt
20:59:02 SQL> 
20:59:02 SQL> SELECT
20:59:02   2  tkr
20:59:02   3  ,COUNT(tkr)ccount
20:59:02   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:59:02   5  -- ,MIN(avg4),MAX(avg4)
20:59:02   6  ,MIN(ydate),MAX(ydate)
20:59:02   7  ,MIN(g1)
20:59:02   8  ,AVG(g1)
20:59:02   9  ,MAX(g1)
20:59:02  10  FROM stk12svmspy
20:59:02  11  GROUP BY tkr
20:59:02  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
PPLT	      3897     167.76	  185.21 2011-01-21 14:30:00 2011-04-01 19:55:00      -6.08 .131725711 11.7949186

Elapsed: 00:00:00.02
20:59:02 SQL> 
20:59:02 SQL> -- Prepare for derivation of NTILE based parameters.
20:59:02 SQL> -- Also derive the "trend" parameter:
20:59:02 SQL> 
20:59:02 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.03
20:59:02 SQL> CREATE TABLE stk14svmspy COMPRESS AS
20:59:02   2  SELECT
20:59:02   3  tkr
20:59:02   4  ,ydate
20:59:02   5  ,tkrdate
20:59:02   6  ,clse
20:59:02   7  ,g1
20:59:02   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:59:02   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:59:02  10  ,CASE WHEN trend IS NULL THEN 1
20:59:02  11  	    WHEN trend =0      THEN 1
20:59:02  12  	    ELSE trend END trend
20:59:02  13  ,cm3
20:59:02  14  ,cm4
20:59:02  15  ,cm5
20:59:02  16  ,cm6
20:59:02  17  ,cm7
20:59:02  18  ,cm8
20:59:02  19  ,cm9
20:59:02  20  ,ca3
20:59:02  21  ,ca4
20:59:02  22  ,ca5
20:59:02  23  ,ca6
20:59:02  24  ,ca7
20:59:02  25  ,ca8
20:59:02  26  ,ca9
20:59:02  27  ,cx3
20:59:02  28  ,cx4
20:59:02  29  ,cx5
20:59:02  30  ,cx6
20:59:02  31  ,cx7
20:59:02  32  ,cx8
20:59:02  33  ,cx9
20:59:02  34  ,hh
20:59:02  35  ,d
20:59:02  36  ,w
20:59:02  37  ,mpm
20:59:02  38  ,mph
20:59:02  39  FROM stk12svmspy
20:59:02  40  -- Guard against divide by 0:
20:59:02  41  WHERE clse > 0
20:59:02  42  ORDER BY ydate
20:59:02  43  /

Table created.

Elapsed: 00:00:00.09
20:59:02 SQL> 
20:59:02 SQL> -- rpt
20:59:02 SQL> 
20:59:02 SQL> SELECT
20:59:02   2  tkr
20:59:02   3  ,trend
20:59:02   4  ,gatt
20:59:02   5  ,COUNT(tkr)
20:59:02   6  ,AVG(g1)
20:59:02   7  FROM stk14svmspy
20:59:02   8  GROUP BY tkr,trend,gatt
20:59:02   9  ORDER BY tkr,trend,gatt
20:59:02  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
PPLT		-1 nup	     1268 -1.3284024
PPLT		-1 up	      996 2.44895438
PPLT		-1	       74
PPLT		 1 nup	      990 -.92979316
PPLT		 1 up	      472 1.39101876
PPLT		 1	       97

6 rows selected.

Elapsed: 00:00:00.01
20:59:02 SQL> 
20:59:02 SQL> -- Derive NTILE based params:
20:59:02 SQL> 
20:59:02 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.06
20:59:02 SQL> CREATE TABLE stk16svmspy COMPRESS AS
20:59:02   2  SELECT
20:59:02   3  tkr
20:59:02   4  ,ydate
20:59:02   5  ,tkrdate
20:59:02   6  ,clse
20:59:02   7  ,g1
20:59:02   8  ,gatt
20:59:02   9  ,gattn
20:59:02  10  ,trend
20:59:02  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:59:02  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:59:02  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:59:02  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:59:02  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:59:02  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:59:02  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:59:02  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:59:02  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:59:02  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:59:02  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:59:02  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:59:02  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:59:02  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:59:02  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:59:02  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:59:02  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:59:02  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:59:02  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:59:02  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:59:02  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:59:02  32  ,hh  att21
20:59:02  33  ,d   att22
20:59:02  34  ,w   att23
20:59:02  35  ,mpm att24
20:59:02  36  ,mph att25
20:59:02  37  ,trend att26
20:59:02  38  FROM stk14svmspy
20:59:02  39  ORDER BY ydate
20:59:02  40  /

Table created.

Elapsed: 00:00:00.50
20:59:03 SQL> 
20:59:03 SQL> -- rpt
20:59:03 SQL> 
20:59:03 SQL> SELECT
20:59:03   2  tkr
20:59:03   3  ,trend
20:59:03   4  ,gatt
20:59:03   5  ,COUNT(tkr)
20:59:03   6  ,AVG(g1)
20:59:03   7  FROM stk16svmspy
20:59:03   8  GROUP BY tkr,trend,gatt
20:59:03   9  ORDER BY tkr,trend,gatt
20:59:03  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
PPLT		-1 nup	     1268 -1.3284024
PPLT		-1 up	      996 2.44895438
PPLT		-1	       74
PPLT		 1 nup	      990 -.92979316
PPLT		 1 up	      472 1.39101876
PPLT		 1	       97

6 rows selected.

Elapsed: 00:00:00.01
20:59:03 SQL> 
20:59:03 SQL> -- Comment out feedback related syntax:
20:59:03 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:59:03 SQL> -- SELECT
20:59:03 SQL> -- m.tkr
20:59:03 SQL> -- ,m.ydate
20:59:03 SQL> -- ,m.tkrdate
20:59:03 SQL> -- ,l.score score_long
20:59:03 SQL> -- ,s.score score_short
20:59:03 SQL> -- ,m.g1
20:59:03 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
20:59:03 SQL> -- WHERE l.targ='gatt'
20:59:03 SQL> -- AND	 s.targ='gattn'
20:59:03 SQL> -- AND l.tkrdate = s.tkrdate
20:59:03 SQL> -- AND l.tkrdate = m.tkrdate
20:59:03 SQL> -- -- Speed things up:
20:59:03 SQL> -- AND l.tkr = '&1'
20:59:03 SQL> -- AND s.tkr = '&1'
20:59:03 SQL> -- /
20:59:03 SQL> --
20:59:03 SQL> -- DROP TABLE score_corr_tkr;
20:59:03 SQL> --
20:59:03 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:59:03 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:59:03 SQL> -- (
20:59:03 SQL> --   SELECT
20:59:03 SQL> --   tkrdate
20:59:03 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:59:03 SQL> --   ,CORR((score_long - score_short),g1)
20:59:03 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
20:59:03 SQL> --   FROM sc12tkr
20:59:03 SQL> -- )
20:59:03 SQL> -- GROUP BY tkrdate
20:59:03 SQL> -- /
20:59:03 SQL> 
20:59:03 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:59:03 SQL> 
20:59:03 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.03
20:59:03 SQL> 
20:59:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
20:59:03 SQL> 
20:59:03 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
20:59:03   2  SELECT
20:59:03   3  tkr
20:59:03   4  ,ydate
20:59:03   5  ,tkrdate
20:59:03   6  ,trend
20:59:03   7  ,g1
20:59:03   8  ,gatt
20:59:03   9  ,gattn
20:59:03  10  -- Goodness attributes:
20:59:03  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
20:59:03  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
20:59:03  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
20:59:03  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
20:59:03  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
20:59:03  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
20:59:03  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
20:59:03  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
20:59:03  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
20:59:03  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
20:59:03  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
20:59:03  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
20:59:03  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
20:59:03  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
20:59:03  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
20:59:03  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
20:59:03  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
20:59:03  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
20:59:03  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
20:59:03  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
20:59:03  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
20:59:03  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
20:59:03  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
20:59:03  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
20:59:03  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
20:59:03  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
20:59:03  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
20:59:03  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:59:03  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
20:59:03  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
20:59:03  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
20:59:03  42  FROM stk16svmspy
20:59:03  43  /

Table created.

Elapsed: 00:00:00.73
20:59:04 SQL> 
20:59:04 SQL> -- rpt
20:59:04 SQL> 
20:59:04 SQL> SELECT
20:59:04   2  tkr
20:59:04   3  ,trend
20:59:04   4  ,gatt
20:59:04   5  ,COUNT(tkr)
20:59:04   6  ,AVG(g1)
20:59:04   7  FROM stk_ms_svmspy
20:59:04   8  GROUP BY tkr,trend,gatt
20:59:04   9  ORDER BY tkr,trend,gatt
20:59:04  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
PPLT		-1 nup	     1268 -1.3284024
PPLT		-1 up	      996 2.44895438
PPLT		-1	       74
PPLT		 1 nup	      990 -.92979316
PPLT		 1 up	      472 1.39101876
PPLT		 1	       97

6 rows selected.

Elapsed: 00:00:00.01
20:59:04 SQL> 
20:59:04 SQL> SELECT
20:59:04   2  tkr
20:59:04   3  ,0+TO_CHAR(ydate,'D')daynum
20:59:04   4  ,COUNT(tkr)
20:59:04   5  ,MIN(ydate),MAX(ydate)
20:59:04   6  FROM stk_ms_svmspy
20:59:04   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
20:59:04   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
20:59:04   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
PPLT		 2	  701 2011-01-24 14:30:00 2011-03-28 19:55:00
PPLT		 3	  780 2011-01-25 14:30:00 2011-03-29 19:55:00
PPLT		 4	  779 2011-01-26 14:30:00 2011-03-30 19:55:00
PPLT		 5	  780 2011-01-27 14:30:00 2011-03-31 19:55:00
PPLT		 6	  857 2011-01-21 14:30:00 2011-04-01 19:55:00

Elapsed: 00:00:00.01
20:59:04 SQL> 
20:59:04 SQL> -- exit
20:59:04 SQL> @stk10svmd.sql '&1'
20:59:04 SQL> --
20:59:04 SQL> -- stk10svmd.sql
20:59:04 SQL> --
20:59:04 SQL> 
20:59:04 SQL> -- Creates views and tables for demonstrating SVM.
20:59:04 SQL> -- I need to run this after I run stk10.sql
20:59:04 SQL> 
20:59:04 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.09
20:59:04 SQL> 
20:59:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
20:59:04 SQL> 
20:59:04 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
20:59:04   2  SELECT
20:59:04   3  tkr
20:59:04   4  ,ydate
20:59:04   5  ,tkr||ydate tkrdate
20:59:04   6  ,clse
20:59:04   7  ,rownum rnum -- acts as t in my time-series
20:59:04   8  -- Derive some attributes from clse.
20:59:04   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
20:59:04  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
20:59:04  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
20:59:04  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
20:59:04  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
20:59:04  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
20:59:04  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
20:59:04  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
20:59:04  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
20:59:04  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
20:59:04  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
20:59:04  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
20:59:04  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
20:59:04  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
20:59:04  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
20:59:04  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
20:59:04  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
20:59:04  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
20:59:04  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
20:59:04  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
20:59:04  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
20:59:04  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
20:59:04  31  -- ystk21 created here: svmd/cr_ystk21.sql
20:59:04  32  FROM ystk21
20:59:04  33  WHERE UPPER(tkr)='&1'
20:59:04  34  AND ydate > '1990-01-01'
20:59:04  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
20:59:04  36  ORDER BY ydate
20:59:04  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='PPLT'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='PPLT')

Table created.

Elapsed: 00:00:02.26
20:59:06 SQL> 
20:59:06 SQL> -- rpt
20:59:06 SQL> 
20:59:06 SQL> SELECT
20:59:06   2  tkr
20:59:06   3  ,COUNT(tkr)
20:59:06   4  ,MIN(clse),MAX(clse)
20:59:06   5  ,MIN(avg4),MAX(avg4)
20:59:06   6  ,MIN(ydate),MAX(ydate)
20:59:06   7  FROM stk_svmd10svmspy
20:59:06   8  GROUP BY tkr
20:59:06   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
PPLT		 311	  147.1     184.76    149.424	 183.586 2010-01-08 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
20:59:06 SQL> 
20:59:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:59:06 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.06
20:59:06 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
20:59:06   2  SELECT
20:59:06   3  tkr
20:59:06   4  ,ydate
20:59:06   5  ,tkrdate
20:59:06   6  ,clse
20:59:06   7  ,rnum
20:59:06   8  -- g1 is important. I want to predict g1:
20:59:06   9  ,ld - clse g1
20:59:06  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:59:06  11  -- I want more attributes from the ones I derived above:
20:59:06  12  -- clse relation to moving-min
20:59:06  13  ,clse-min3  cm3
20:59:06  14  ,clse-min4  cm4
20:59:06  15  ,clse-min5  cm5
20:59:06  16  ,clse-min6  cm6
20:59:06  17  ,clse-min7  cm7
20:59:06  18  ,clse-min8  cm8
20:59:06  19  ,clse-min9  cm9
20:59:06  20  -- clse relation to moving-avg
20:59:06  21  ,clse-avg3  ca3
20:59:06  22  ,clse-avg4  ca4
20:59:06  23  ,clse-avg5  ca5
20:59:06  24  ,clse-avg6  ca6
20:59:06  25  ,clse-avg7  ca7
20:59:06  26  ,clse-avg8  ca8
20:59:06  27  ,clse-avg9  ca9
20:59:06  28  -- clse relation to moving-max
20:59:06  29  ,clse-max3  cx3
20:59:06  30  ,clse-max4  cx4
20:59:06  31  ,clse-max5  cx5
20:59:06  32  ,clse-max6  cx6
20:59:06  33  ,clse-max7  cx7
20:59:06  34  ,clse-max8  cx8
20:59:06  35  ,clse-max9  cx9
20:59:06  36  -- Derive date related attributes:
20:59:06  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:59:06  38  ,0+TO_CHAR(ydate,'D')d
20:59:06  39  ,0+TO_CHAR(ydate,'W')w
20:59:06  40  -- mpm stands for minutes-past-midnight:
20:59:06  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:59:06  42  -- mph stands for minutes-past-hour:
20:59:06  43  ,0+TO_CHAR(ydate,'MI')mph
20:59:06  44  FROM stk_svmd10svmspy
20:59:06  45  ORDER BY ydate
20:59:06  46  /

Table created.

Elapsed: 00:00:00.12
20:59:07 SQL> 
20:59:07 SQL> -- rpt
20:59:07 SQL> 
20:59:07 SQL> SELECT
20:59:07   2  tkr
20:59:07   3  ,COUNT(tkr)
20:59:07   4  ,MIN(clse),MAX(clse)
20:59:07   5  ,MIN(ydate),MAX(ydate)
20:59:07   6  FROM stk_svmd12
20:59:07   7  GROUP BY tkr
20:59:07   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
PPLT		 311	  147.1     184.76 2010-01-08 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
20:59:07 SQL> 
20:59:07 SQL> -- Prepare for derivation of NTILE based parameters.
20:59:07 SQL> -- Also derive the "trend" parameter:
20:59:07 SQL> 
20:59:07 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.08
20:59:07 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
20:59:07   2  SELECT
20:59:07   3  tkr
20:59:07   4  ,ydate
20:59:07   5  ,tkrdate
20:59:07   6  ,clse
20:59:07   7  ,g1
20:59:07   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:59:07   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:59:07  10  ,CASE WHEN trend IS NULL THEN 1
20:59:07  11  	    WHEN trend =0      THEN 1
20:59:07  12  	    ELSE trend END trend
20:59:07  13  ,cm3
20:59:07  14  ,cm4
20:59:07  15  ,cm5
20:59:07  16  ,cm6
20:59:07  17  ,cm7
20:59:07  18  ,cm8
20:59:07  19  ,cm9
20:59:07  20  ,ca3
20:59:07  21  ,ca4
20:59:07  22  ,ca5
20:59:07  23  ,ca6
20:59:07  24  ,ca7
20:59:07  25  ,ca8
20:59:07  26  ,ca9
20:59:07  27  ,cx3
20:59:07  28  ,cx4
20:59:07  29  ,cx5
20:59:07  30  ,cx6
20:59:07  31  ,cx7
20:59:07  32  ,cx8
20:59:07  33  ,cx9
20:59:07  34  ,hh
20:59:07  35  ,d
20:59:07  36  ,w
20:59:07  37  ,mpm
20:59:07  38  ,mph
20:59:07  39  FROM stk_svmd12
20:59:07  40  -- Guard against divide by 0:
20:59:07  41  WHERE clse > 0
20:59:07  42  ORDER BY ydate
20:59:07  43  /

Table created.

Elapsed: 00:00:00.05
20:59:07 SQL> 
20:59:07 SQL> -- rpt
20:59:07 SQL> 
20:59:07 SQL> SELECT
20:59:07   2  tkr
20:59:07   3  ,trend
20:59:07   4  ,gatt
20:59:07   5  ,COUNT(tkr)
20:59:07   6  ,AVG(g1)
20:59:07   7  FROM stk_svmd14
20:59:07   8  GROUP BY tkr,trend,gatt
20:59:07   9  ORDER BY tkr,trend,gatt
20:59:07  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
PPLT		  -1 nup	 63 -1.2311111
PPLT		  -1 up 	 64   1.941875
PPLT		   1 nup	116 -1.1641379
PPLT		   1 up 	 67 1.56268657
PPLT		   1		  1

Elapsed: 00:00:00.01
20:59:07 SQL> 
20:59:07 SQL> -- Derive NTILE based params:
20:59:07 SQL> 
20:59:07 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.08
20:59:07 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
20:59:07   2  SELECT
20:59:07   3  tkr
20:59:07   4  ,ydate
20:59:07   5  ,tkrdate
20:59:07   6  ,clse
20:59:07   7  ,g1
20:59:07   8  ,gatt
20:59:07   9  ,gattn
20:59:07  10  ,trend
20:59:07  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:59:07  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:59:07  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:59:07  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:59:07  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:59:07  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:59:07  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:59:07  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:59:07  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:59:07  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:59:07  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:59:07  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:59:07  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:59:07  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:59:07  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:59:07  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:59:07  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:59:07  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:59:07  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:59:07  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:59:07  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:59:07  32  ,hh  att21
20:59:07  33  ,d   att22
20:59:07  34  ,w   att23
20:59:07  35  ,mpm att24
20:59:07  36  ,mph att25
20:59:07  37  ,trend att26
20:59:07  38  FROM stk_svmd14
20:59:07  39  ORDER BY ydate
20:59:07  40  /

Table created.

Elapsed: 00:00:00.06
20:59:07 SQL> 
20:59:07 SQL> -- rpt
20:59:07 SQL> 
20:59:07 SQL> SELECT
20:59:07   2  tkr
20:59:07   3  ,trend
20:59:07   4  ,gatt
20:59:07   5  ,COUNT(tkr)
20:59:07   6  ,AVG(g1)
20:59:07   7  FROM stk_svmd16
20:59:07   8  GROUP BY tkr,trend,gatt
20:59:07   9  ORDER BY tkr,trend,gatt
20:59:07  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
PPLT		  -1 nup	 63 -1.2311111
PPLT		  -1 up 	 64   1.941875
PPLT		   1 nup	116 -1.1641379
PPLT		   1 up 	 67 1.56268657
PPLT		   1		  1

Elapsed: 00:00:00.00
20:59:07 SQL> 
20:59:07 SQL> -- Comment out feedback related syntax:
20:59:07 SQL> 
20:59:07 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:59:07 SQL> -- SELECT
20:59:07 SQL> -- m.tkr
20:59:07 SQL> -- ,m.ydate
20:59:07 SQL> -- ,m.tkrdate
20:59:07 SQL> -- ,l.score score_long
20:59:07 SQL> -- ,s.score score_short
20:59:07 SQL> -- ,m.g1
20:59:07 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
20:59:07 SQL> -- WHERE l.targ='gatt'
20:59:07 SQL> -- AND	 s.targ='gattn'
20:59:07 SQL> -- AND l.tkrdate = s.tkrdate
20:59:07 SQL> -- AND l.tkrdate = m.tkrdate
20:59:07 SQL> -- -- Speed things up:
20:59:07 SQL> -- AND l.tkr = '&1'
20:59:07 SQL> -- AND s.tkr = '&1'
20:59:07 SQL> -- /
20:59:07 SQL> --
20:59:07 SQL> -- DROP TABLE score_corr_tkr;
20:59:07 SQL> --
20:59:07 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:59:07 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:59:07 SQL> -- (
20:59:07 SQL> --   SELECT
20:59:07 SQL> --   tkrdate
20:59:07 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:59:07 SQL> --   ,CORR((score_long - score_short),g1)
20:59:07 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
20:59:07 SQL> --   FROM sc12tkr
20:59:07 SQL> -- )
20:59:07 SQL> -- GROUP BY tkrdate
20:59:07 SQL> -- /
20:59:07 SQL> 
20:59:07 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:59:07 SQL> 
20:59:07 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.03
20:59:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
20:59:07 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
20:59:07   2  SELECT
20:59:07   3  tkr
20:59:07   4  ,ydate
20:59:07   5  ,tkrdate
20:59:07   6  ,trend
20:59:07   7  ,g1
20:59:07   8  ,gatt
20:59:07   9  ,gattn
20:59:07  10  -- Goodness attributes:
20:59:07  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
20:59:07  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
20:59:07  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
20:59:07  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
20:59:07  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
20:59:07  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
20:59:07  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
20:59:07  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
20:59:07  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
20:59:07  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
20:59:07  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
20:59:07  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
20:59:07  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
20:59:07  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
20:59:07  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
20:59:07  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
20:59:07  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
20:59:07  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
20:59:07  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
20:59:07  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
20:59:07  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
20:59:07  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
20:59:07  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
20:59:07  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
20:59:07  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
20:59:07  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
20:59:07  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
20:59:07  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:59:07  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
20:59:07  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
20:59:07  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
20:59:07  42  FROM stk_svmd16
20:59:07  43  /

Table created.

Elapsed: 00:00:00.09
20:59:07 SQL> 
20:59:07 SQL> -- rpt
20:59:07 SQL> 
20:59:07 SQL> SELECT
20:59:07   2  tkr
20:59:07   3  ,trend
20:59:07   4  ,gatt
20:59:07   5  ,COUNT(tkr)
20:59:07   6  ,AVG(g1)
20:59:07   7  FROM stk_ms_svmd_svmspy
20:59:07   8  GROUP BY tkr,trend,gatt
20:59:07   9  ORDER BY tkr,trend,gatt
20:59:07  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
PPLT		  -1 nup	 63 -1.2311111
PPLT		  -1 up 	 64   1.941875
PPLT		   1 nup	116 -1.1641379
PPLT		   1 up 	 67 1.56268657
PPLT		   1		  1

Elapsed: 00:00:00.01
20:59:07 SQL> 
20:59:07 SQL> SELECT
20:59:07   2  tkr
20:59:07   3  ,COUNT(tkr)
20:59:07   4  ,MIN(ydate),MAX(ydate)
20:59:07   5  FROM stk_ms_svmd_svmspy
20:59:07   6  GROUP BY tkr
20:59:07   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
PPLT		 311 2010-01-08 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.00
20:59:07 SQL> 
20:59:07 SQL> -- exit
20:59:07 SQL> 
20:59:07 SQL> 
20:59:07 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.04
20:59:07 SQL> 
20:59:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.14
20:59:07 SQL> 
20:59:07 SQL> CREATE TABLE stk_ms_u COMPRESS AS
20:59:07   2  SELECT * FROM stk_ms_svmspy
20:59:07   3  UNION
20:59:07   4  SELECT * FROM stk_ms_svmd_svmspy
20:59:07   5  /

Table created.

Elapsed: 00:00:00.17
20:59:08 SQL> 
20:59:08 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
