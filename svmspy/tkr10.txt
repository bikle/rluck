
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 12 17:13:07 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

17:13:07 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
17:13:08 SQL> 17:13:08 SQL> --
17:13:08 SQL> -- stk10.sql
17:13:08 SQL> --
17:13:08 SQL> 
17:13:08 SQL> -- Creates views and tables for demonstrating SVM.
17:13:08 SQL> 
17:13:08 SQL> -- Get Mon-Thurs
17:13:08 SQL> DROP TABLE stk10p14;

Table dropped.

Elapsed: 00:00:00.10
17:13:08 SQL> 
17:13:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
17:13:08 SQL> 
17:13:08 SQL> CREATE TABLE stk10p14 COMPRESS AS
17:13:08   2  SELECT
17:13:08   3  tkr
17:13:08   4  ,ydate
17:13:08   5  ,clse
17:13:08   6  FROM di5min_stk
17:13:08   7  WHERE UPPER(tkr)='&1'
17:13:08   8  AND 0+TO_CHAR(ydate,'D')BETWEEN 1 AND 4
17:13:08   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
17:13:08  10  ORDER BY ydate
17:13:08  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.17
17:13:08 SQL> 
17:13:08 SQL> -- Get Fri
17:13:08 SQL> DROP TABLE stk10p5;

Table dropped.

Elapsed: 00:00:00.08
17:13:08 SQL> 
17:13:08 SQL> CREATE TABLE stk10p5 COMPRESS AS
17:13:08   2  SELECT
17:13:08   3  tkr
17:13:08   4  ,ydate
17:13:08   5  ,clse
17:13:08   6  FROM di5min_stk
17:13:08   7  WHERE UPPER(tkr)='&1'
17:13:08   8  AND 0+TO_CHAR(ydate,'D')=5
17:13:08   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
17:13:08  10  ORDER BY ydate
17:13:08  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.07
17:13:08 SQL> 
17:13:08 SQL> -- Get Mon
17:13:08 SQL> DROP TABLE stk10f1;

Table dropped.

Elapsed: 00:00:00.03
17:13:08 SQL> 
17:13:08 SQL> CREATE TABLE stk10f1 COMPRESS AS
17:13:08   2  SELECT
17:13:08   3  tkr
17:13:08   4  ,ydate
17:13:08   5  ,clse
17:13:08   6  FROM di5min_stk
17:13:08   7  WHERE UPPER(tkr)='&1'
17:13:08   8  AND 0+TO_CHAR(ydate,'D')=1
17:13:08   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
17:13:08  10  ORDER BY ydate
17:13:08  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.08
17:13:08 SQL> 
17:13:08 SQL> -- Get Tues - Fri
17:13:08 SQL> DROP TABLE stk10f25;

Table dropped.

Elapsed: 00:00:00.04
17:13:08 SQL> 
17:13:08 SQL> CREATE TABLE stk10f25 COMPRESS AS
17:13:08   2  SELECT
17:13:08   3  tkr
17:13:08   4  ,ydate
17:13:08   5  ,clse
17:13:08   6  FROM di5min_stk
17:13:08   7  WHERE UPPER(tkr)='&1'
17:13:08   8  AND 0+TO_CHAR(ydate,'D')BETWEEN 2 AND 5
17:13:08   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
17:13:08  10  ORDER BY ydate
17:13:08  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.08
17:13:08 SQL> 
17:13:08 SQL> -- Join em
17:13:08 SQL> DROP TABLE stk10pf;

Table dropped.

Elapsed: 00:00:00.04
17:13:08 SQL> 
17:13:08 SQL> -- Deal with m-thr 1st
17:13:08 SQL> CREATE TABLE stk10pf AS
17:13:08   2  SELECT
17:13:08   3  p.tkr
17:13:08   4  ,p.ydate
17:13:08   5  ,p.clse
17:13:08   6  ,f.clse clse2
17:13:08   7  FROM stk10p14 p, stk10f25 f
17:13:08   8  WHERE p.ydate + 1 = f.ydate
17:13:08   9  /

Table created.

Elapsed: 00:00:00.04
17:13:08 SQL> 
17:13:08 SQL> -- Deal with Fri (day 5 joined with day 1)
17:13:08 SQL> INSERT INTO stk10pf(tkr,ydate,clse,clse2)
17:13:08   2  SELECT
17:13:08   3  p.tkr
17:13:08   4  ,p.ydate
17:13:08   5  ,p.clse
17:13:08   6  ,f.clse clse2
17:13:08   7  FROM stk10p5 p, stk10f1 f
17:13:08   8  WHERE p.ydate + 3 = f.ydate
17:13:08   9  /

0 rows created.

Elapsed: 00:00:00.01
17:13:08 SQL> 
17:13:08 SQL> -- rpt
17:13:08 SQL> select count(*)from stk10pf;

  COUNT(*)
----------
       267

Elapsed: 00:00:00.00
17:13:08 SQL> 
17:13:08 SQL> DROP VIEW stk10;
DROP VIEW stk10
*
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.03
17:13:08 SQL> 
17:13:08 SQL> DROP TABLE stk10;

Table dropped.

Elapsed: 00:00:00.04
17:13:08 SQL> 
17:13:08 SQL> CREATE TABLE stk10 COMPRESS AS
17:13:08   2  SELECT
17:13:08   3  tkr
17:13:08   4  ,ydate
17:13:08   5  ,tkr||ydate tkrdate
17:13:08   6  ,clse
17:13:08   7  ,clse2
17:13:08   8  ,rownum rnum -- acts as t in my time-series
17:13:08   9  -- Derive some attributes from clse.
17:13:08  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
17:13:08  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
17:13:08  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
17:13:08  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
17:13:08  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
17:13:08  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
17:13:08  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
17:13:08  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
17:13:08  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
17:13:08  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
17:13:08  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
17:13:08  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
17:13:08  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
17:13:08  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
17:13:08  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
17:13:08  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
17:13:08  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
17:13:08  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
17:13:08  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
17:13:08  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
17:13:08  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
17:13:08  31  FROM stk10pf
17:13:08  32  WHERE UPPER(tkr)='&1'
17:13:08  33  AND 0+TO_CHAR(ydate,'D')BETWEEN 1 AND 5
17:13:08  34  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
17:13:08  35  ORDER BY ydate
17:13:08  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.12
17:13:09 SQL> 
17:13:09 SQL> ANALYZE TABLE stk10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.03
17:13:09 SQL> 
17:13:09 SQL> -- rpt
17:13:09 SQL> 
17:13:09 SQL> SELECT
17:13:09   2  tkr
17:13:09   3  ,COUNT(tkr)
17:13:09   4  ,MIN(clse),MAX(clse)
17:13:09   5  ,MIN(avg4),MAX(avg4)
17:13:09   6  ,MIN(ydate),MAX(ydate)
17:13:09   7  FROM stk10
17:13:09   8  GROUP BY tkr
17:13:09   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
XLB	       267	37.74	   38.83 38.1273469	38.815 2011-01-04 14:30:00 2011-01-11 17:10:00

Elapsed: 00:00:00.01
17:13:09 SQL> 
17:13:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
17:13:09 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.04
17:13:09 SQL> CREATE TABLE stk12 COMPRESS AS
17:13:09   2  SELECT
17:13:09   3  tkr
17:13:09   4  ,ydate
17:13:09   5  ,tkrdate
17:13:09   6  ,clse
17:13:09   7  ,rnum
17:13:09   8  -- g4 is important. I want to predict g4:
17:13:09   9  ,clse2 - clse g4
17:13:09  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
17:13:09  11  -- I want more attributes from the ones I derived above:
17:13:09  12  -- clse relation to moving-min
17:13:09  13  ,clse-min2  cm2
17:13:09  14  ,clse-min3  cm3
17:13:09  15  ,clse-min4  cm4
17:13:09  16  ,clse-min5  cm5
17:13:09  17  ,clse-min6  cm6
17:13:09  18  ,clse-min7  cm7
17:13:09  19  ,clse-min8  cm8
17:13:09  20  -- clse relation to moving-avg
17:13:09  21  ,clse-avg2  ca2
17:13:09  22  ,clse-avg3  ca3
17:13:09  23  ,clse-avg4  ca4
17:13:09  24  ,clse-avg5  ca5
17:13:09  25  ,clse-avg6  ca6
17:13:09  26  ,clse-avg7  ca7
17:13:09  27  ,clse-avg8  ca8
17:13:09  28  -- clse relation to moving-max
17:13:09  29  ,clse-max2  cx2
17:13:09  30  ,clse-max3  cx3
17:13:09  31  ,clse-max4  cx4
17:13:09  32  ,clse-max5  cx5
17:13:09  33  ,clse-max6  cx6
17:13:09  34  ,clse-max7  cx7
17:13:09  35  ,clse-max8  cx8
17:13:09  36  -- Derive date related attributes:
17:13:09  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
17:13:09  38  ,0+TO_CHAR(ydate,'D')d
17:13:09  39  ,0+TO_CHAR(ydate,'W')w
17:13:09  40  -- mpm stands for minutes-past-midnight:
17:13:09  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
17:13:09  42  -- mph stands for minutes-past-hour:
17:13:09  43  ,0+TO_CHAR(ydate,'MI')mph
17:13:09  44  FROM stk10
17:13:09  45  ORDER BY ydate
17:13:09  46  /

Table created.

Elapsed: 00:00:00.09
17:13:09 SQL> 
17:13:09 SQL> -- rpt
17:13:09 SQL> 
17:13:09 SQL> SELECT
17:13:09   2  tkr
17:13:09   3  ,COUNT(tkr)
17:13:09   4  ,MIN(clse),MAX(clse)
17:13:09   5  ,MIN(ydate),MAX(ydate)
17:13:09   6  FROM stk12
17:13:09   7  GROUP BY tkr
17:13:09   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
XLB	       267	37.74	   38.83 2011-01-04 14:30:00 2011-01-11 17:10:00

Elapsed: 00:00:00.00
17:13:09 SQL> 
17:13:09 SQL> -- Prepare for derivation of NTILE based parameters.
17:13:09 SQL> -- Also derive the "trend" parameter:
17:13:09 SQL> 
17:13:09 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.21
17:13:09 SQL> CREATE TABLE stk14 COMPRESS AS
17:13:09   2  SELECT
17:13:09   3  tkr
17:13:09   4  ,ydate
17:13:09   5  ,tkrdate
17:13:09   6  ,clse
17:13:09   7  ,g4
17:13:09   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.5/100 THEN 'up' ELSE 'nup' END gatt
17:13:09   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.5/100 THEN 'up' ELSE 'nup' END gattn
17:13:09  10  ,CASE WHEN trend IS NULL THEN 1
17:13:09  11  	    WHEN trend =0      THEN 1
17:13:09  12  	    ELSE trend END trend
17:13:09  13  ,cm2
17:13:09  14  ,cm3
17:13:09  15  ,cm4
17:13:09  16  ,cm5
17:13:09  17  ,cm6
17:13:09  18  ,cm7
17:13:09  19  ,cm8
17:13:09  20  ,ca2
17:13:09  21  ,ca3
17:13:09  22  ,ca4
17:13:09  23  ,ca5
17:13:09  24  ,ca6
17:13:09  25  ,ca7
17:13:09  26  ,ca8
17:13:09  27  ,cx2
17:13:09  28  ,cx3
17:13:09  29  ,cx4
17:13:09  30  ,cx5
17:13:09  31  ,cx6
17:13:09  32  ,cx7
17:13:09  33  ,cx8
17:13:09  34  ,hh
17:13:09  35  ,d
17:13:09  36  ,w
17:13:09  37  ,mpm
17:13:09  38  ,mph
17:13:09  39  FROM stk12
17:13:09  40  -- Guard against divide by 0:
17:13:09  41  WHERE clse > 0
17:13:09  42  ORDER BY ydate
17:13:09  43  /

Table created.

Elapsed: 00:00:00.06
17:13:09 SQL> 
17:13:09 SQL> -- rpt
17:13:09 SQL> 
17:13:09 SQL> SELECT
17:13:09   2  tkr
17:13:09   3  ,trend
17:13:09   4  ,gatt
17:13:09   5  ,COUNT(tkr)
17:13:09   6  ,AVG(g4)
17:13:09   7  FROM stk14
17:13:09   8  GROUP BY tkr,trend,gatt
17:13:09   9  ORDER BY tkr,trend,gatt
17:13:09  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
XLB		-1 nup	       35 -.05457143
XLB		-1 up	       82 .421829268
XLB		 1 nup	       73 -.09082192
XLB		 1 up	       77  .32512987

Elapsed: 00:00:00.01
17:13:09 SQL> 
17:13:09 SQL> -- Derive NTILE based params:
17:13:09 SQL> 
17:13:09 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.04
17:13:09 SQL> CREATE TABLE stk16 COMPRESS AS
17:13:09   2  SELECT
17:13:09   3  tkr
17:13:09   4  ,ydate
17:13:09   5  ,tkrdate
17:13:09   6  ,clse
17:13:09   7  ,g4
17:13:09   8  ,gatt
17:13:09   9  ,gattn
17:13:09  10  ,trend
17:13:09  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
17:13:09  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
17:13:09  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
17:13:09  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
17:13:09  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
17:13:09  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
17:13:09  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
17:13:09  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
17:13:09  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
17:13:09  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
17:13:09  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
17:13:09  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
17:13:09  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
17:13:09  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
17:13:09  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
17:13:09  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
17:13:09  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
17:13:09  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
17:13:09  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
17:13:09  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
17:13:09  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
17:13:09  32  ,hh  att21
17:13:09  33  ,d   att22
17:13:09  34  ,w   att23
17:13:09  35  ,mpm att24
17:13:09  36  ,mph att25
17:13:09  37  ,trend att26
17:13:09  38  FROM stk14
17:13:09  39  ORDER BY ydate
17:13:09  40  /

Table created.

Elapsed: 00:00:00.08
17:13:09 SQL> 
17:13:09 SQL> -- rpt
17:13:09 SQL> 
17:13:09 SQL> SELECT
17:13:09   2  tkr
17:13:09   3  ,trend
17:13:09   4  ,gatt
17:13:09   5  ,COUNT(tkr)
17:13:09   6  ,AVG(g4)
17:13:09   7  FROM stk16
17:13:09   8  GROUP BY tkr,trend,gatt
17:13:09   9  ORDER BY tkr,trend,gatt
17:13:09  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
XLB		-1 nup	       35 -.05457143
XLB		-1 up	       82 .421829268
XLB		 1 nup	       73 -.09082192
XLB		 1 up	       77  .32512987

Elapsed: 00:00:00.00
17:13:09 SQL> 
17:13:09 SQL> -- Now I derive goodness attributes:
17:13:09 SQL> 
17:13:09 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.05
17:13:09 SQL> CREATE TABLE stk_ms COMPRESS AS
17:13:09   2  SELECT
17:13:09   3  tkr
17:13:09   4  ,ydate
17:13:09   5  ,tkrdate
17:13:09   6  ,trend
17:13:09   7  ,g4
17:13:09   8  ,gatt
17:13:09   9  ,gattn
17:13:09  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
17:13:09  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
17:13:09  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
17:13:09  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
17:13:09  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
17:13:09  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
17:13:09  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
17:13:09  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
17:13:09  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
17:13:09  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
17:13:09  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
17:13:09  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
17:13:09  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
17:13:09  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
17:13:09  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
17:13:09  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
17:13:09  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
17:13:09  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
17:13:09  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
17:13:09  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
17:13:09  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
17:13:09  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
17:13:09  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
17:13:09  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
17:13:09  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
17:13:09  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
17:13:09  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
17:13:09  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
17:13:09  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
17:13:09  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
17:13:09  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
17:13:09  41  FROM stk16
17:13:09  42  /

Table created.

Elapsed: 00:00:00.11
17:13:09 SQL> 
17:13:09 SQL> -- rpt
17:13:09 SQL> 
17:13:09 SQL> SELECT
17:13:09   2  tkr
17:13:09   3  ,trend
17:13:09   4  ,gatt
17:13:09   5  ,COUNT(tkr)
17:13:09   6  ,AVG(g4)
17:13:09   7  FROM stk_ms
17:13:09   8  GROUP BY tkr,trend,gatt
17:13:09   9  ORDER BY tkr,trend,gatt
17:13:09  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
XLB		-1 nup	       35 -.05457143
XLB		-1 up	       82 .421829268
XLB		 1 nup	       73 -.09082192
XLB		 1 up	       77  .32512987

Elapsed: 00:00:00.01
17:13:09 SQL> 
17:13:09 SQL> SELECT
17:13:09   2  tkr
17:13:09   3  ,COUNT(tkr)
17:13:09   4  ,MIN(ydate),MAX(ydate)
17:13:09   5  FROM stk_ms
17:13:09   6  GROUP BY tkr
17:13:09   7  /

TKR	COUNT(TKR) MIN(YDATE)	       MAX(YDATE)
------- ---------- ------------------- -------------------
XLB	       267 2011-01-04 14:30:00 2011-01-11 17:10:00

Elapsed: 00:00:00.01
17:13:09 SQL> 
17:13:09 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
