
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 16 06:46:23 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:46:23 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:46:23 SQL> 
06:46:23 SQL> 06:46:23 SQL> --
06:46:23 SQL> -- stk10.sql
06:46:23 SQL> --
06:46:23 SQL> 
06:46:23 SQL> -- Creates views and tables for demonstrating SVM.
06:46:23 SQL> 
06:46:23 SQL> DROP VIEW stk10;
DROP VIEW stk10
*
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.00
06:46:23 SQL> 
06:46:23 SQL> DROP TABLE stk10;

Table dropped.

Elapsed: 00:00:00.23
06:46:23 SQL> 
06:46:23 SQL> CREATE TABLE stk10 COMPRESS AS
06:46:23   2  SELECT
06:46:23   3  tkr
06:46:23   4  ,ydate
06:46:23   5  ,tkr||ydate tkrdate
06:46:23   6  ,clse
06:46:23   7  ,clse2
06:46:23   8  ,gain1day
06:46:23   9  ,rownum rnum -- acts as t in my time-series
06:46:23  10  -- Derive some attributes from clse.
06:46:23  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
06:46:23  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
06:46:23  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:46:23  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
06:46:23  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:46:23  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
06:46:23  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:46:23  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
06:46:23  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
06:46:23  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:46:23  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
06:46:23  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:46:23  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
06:46:23  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:46:23  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
06:46:23  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
06:46:23  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:46:23  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
06:46:23  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:46:23  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
06:46:23  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:46:23  32  FROM di5min_stk_c2
06:46:23  33  WHERE UPPER(tkr)='&1'
06:46:23  34  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
06:46:23  35  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
06:46:23  36  ORDER BY ydate
06:46:23  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='GOOG'

Table created.

Elapsed: 00:00:01.27
06:46:25 SQL> 
06:46:25 SQL> ANALYZE TABLE stk10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.04
06:46:26 SQL> 
06:46:26 SQL> -- rpt
06:46:26 SQL> 
06:46:26 SQL> SELECT
06:46:26   2  tkr
06:46:26   3  ,COUNT(tkr)
06:46:26   4  ,MIN(clse),MAX(clse)
06:46:26   5  ,MIN(avg4),MAX(avg4)
06:46:26   6  ,MIN(ydate),MAX(ydate)
06:46:26   7  FROM stk10
06:46:26   8  GROUP BY tkr
06:46:26   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
GOOG	     24813	434.6	  629.82 436.437245 628.088367 2009-10-28 18:10:00 2011-01-14 20:55:00

Elapsed: 00:00:00.04
06:46:26 SQL> 
06:46:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:46:26 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.19
06:46:26 SQL> CREATE TABLE stk12 COMPRESS AS
06:46:26   2  SELECT
06:46:26   3  tkr
06:46:26   4  ,ydate
06:46:26   5  ,tkrdate
06:46:26   6  ,clse
06:46:26   7  ,rnum
06:46:26   8  -- g4 is important. I want to predict g4:
06:46:26   9  ,gain1day g4
06:46:26  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:46:26  11  -- I want more attributes from the ones I derived above:
06:46:26  12  -- clse relation to moving-min
06:46:26  13  ,clse-min2  cm2
06:46:26  14  ,clse-min3  cm3
06:46:26  15  ,clse-min4  cm4
06:46:26  16  ,clse-min5  cm5
06:46:26  17  ,clse-min6  cm6
06:46:26  18  ,clse-min7  cm7
06:46:26  19  ,clse-min8  cm8
06:46:26  20  -- clse relation to moving-avg
06:46:26  21  ,clse-avg2  ca2
06:46:26  22  ,clse-avg3  ca3
06:46:26  23  ,clse-avg4  ca4
06:46:26  24  ,clse-avg5  ca5
06:46:26  25  ,clse-avg6  ca6
06:46:26  26  ,clse-avg7  ca7
06:46:26  27  ,clse-avg8  ca8
06:46:26  28  -- clse relation to moving-max
06:46:26  29  ,clse-max2  cx2
06:46:26  30  ,clse-max3  cx3
06:46:26  31  ,clse-max4  cx4
06:46:26  32  ,clse-max5  cx5
06:46:26  33  ,clse-max6  cx6
06:46:26  34  ,clse-max7  cx7
06:46:26  35  ,clse-max8  cx8
06:46:26  36  -- Derive date related attributes:
06:46:26  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:46:26  38  ,0+TO_CHAR(ydate,'D')d
06:46:26  39  ,0+TO_CHAR(ydate,'W')w
06:46:26  40  -- mpm stands for minutes-past-midnight:
06:46:26  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:46:26  42  -- mph stands for minutes-past-hour:
06:46:26  43  ,0+TO_CHAR(ydate,'MI')mph
06:46:26  44  FROM stk10
06:46:26  45  ORDER BY ydate
06:46:26  46  /

Table created.

Elapsed: 00:00:00.65
06:46:27 SQL> 
06:46:27 SQL> -- rpt
06:46:27 SQL> 
06:46:27 SQL> SELECT
06:46:27   2  tkr
06:46:27   3  ,COUNT(tkr)
06:46:27   4  ,MIN(clse),MAX(clse)
06:46:27   5  ,MIN(ydate),MAX(ydate)
06:46:27   6  FROM stk12
06:46:27   7  GROUP BY tkr
06:46:27   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
GOOG	     24813	434.6	  629.82 2009-10-28 18:10:00 2011-01-14 20:55:00

Elapsed: 00:00:00.04
06:46:27 SQL> 
06:46:27 SQL> -- Prepare for derivation of NTILE based parameters.
06:46:27 SQL> -- Also derive the "trend" parameter:
06:46:27 SQL> 
06:46:27 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.20
06:46:27 SQL> CREATE TABLE stk14 COMPRESS AS
06:46:27   2  SELECT
06:46:27   3  tkr
06:46:27   4  ,ydate
06:46:27   5  ,tkrdate
06:46:27   6  ,clse
06:46:27   7  ,g4
06:46:27   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.5/100 THEN 'up' ELSE 'nup' END gatt
06:46:27   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.5/100 THEN 'up' ELSE 'nup' END gattn
06:46:27  10  ,CASE WHEN trend IS NULL THEN 1
06:46:27  11  	    WHEN trend =0      THEN 1
06:46:27  12  	    ELSE trend END trend
06:46:27  13  ,cm2
06:46:27  14  ,cm3
06:46:27  15  ,cm4
06:46:27  16  ,cm5
06:46:27  17  ,cm6
06:46:27  18  ,cm7
06:46:27  19  ,cm8
06:46:27  20  ,ca2
06:46:27  21  ,ca3
06:46:27  22  ,ca4
06:46:27  23  ,ca5
06:46:27  24  ,ca6
06:46:27  25  ,ca7
06:46:27  26  ,ca8
06:46:27  27  ,cx2
06:46:27  28  ,cx3
06:46:27  29  ,cx4
06:46:27  30  ,cx5
06:46:27  31  ,cx6
06:46:27  32  ,cx7
06:46:27  33  ,cx8
06:46:27  34  ,hh
06:46:27  35  ,d
06:46:27  36  ,w
06:46:27  37  ,mpm
06:46:27  38  ,mph
06:46:27  39  FROM stk12
06:46:27  40  -- Guard against divide by 0:
06:46:27  41  WHERE clse > 0
06:46:27  42  ORDER BY ydate
06:46:27  43  /

Table created.

Elapsed: 00:00:00.37
06:46:27 SQL> 
06:46:27 SQL> -- rpt
06:46:27 SQL> 
06:46:27 SQL> SELECT
06:46:27   2  tkr
06:46:27   3  ,trend
06:46:27   4  ,gatt
06:46:27   5  ,COUNT(tkr)
06:46:27   6  ,AVG(g4)
06:46:27   7  FROM stk14
06:46:27   8  GROUP BY tkr,trend,gatt
06:46:27   9  ORDER BY tkr,trend,gatt
06:46:27  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
GOOG		-1 nup	     8089 -3.7036823
GOOG		-1 up	     4128 8.87728546
GOOG		-1	       99
GOOG		 1 nup	     8441 -3.6986156
GOOG		 1 up	     3924  8.0458731
GOOG		 1	      132

6 rows selected.

Elapsed: 00:00:00.03
06:46:27 SQL> 
06:46:27 SQL> -- Derive NTILE based params:
06:46:27 SQL> 
06:46:27 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.21
06:46:27 SQL> CREATE TABLE stk16 COMPRESS AS
06:46:27   2  SELECT
06:46:27   3  tkr
06:46:27   4  ,ydate
06:46:27   5  ,tkrdate
06:46:27   6  ,clse
06:46:27   7  ,g4
06:46:27   8  ,gatt
06:46:27   9  ,gattn
06:46:27  10  ,trend
06:46:27  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
06:46:27  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
06:46:27  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
06:46:27  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
06:46:27  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
06:46:27  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
06:46:27  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
06:46:27  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
06:46:27  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
06:46:27  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
06:46:27  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
06:46:27  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
06:46:27  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
06:46:27  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
06:46:27  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
06:46:27  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
06:46:27  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
06:46:27  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
06:46:27  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
06:46:27  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
06:46:27  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
06:46:27  32  ,hh  att21
06:46:27  33  ,d   att22
06:46:27  34  ,w   att23
06:46:27  35  ,mpm att24
06:46:27  36  ,mph att25
06:46:27  37  ,trend att26
06:46:27  38  FROM stk14
06:46:27  39  ORDER BY ydate
06:46:27  40  /

Table created.

Elapsed: 00:00:02.88
06:46:30 SQL> 
06:46:30 SQL> -- rpt
06:46:30 SQL> 
06:46:30 SQL> SELECT
06:46:30   2  tkr
06:46:30   3  ,trend
06:46:30   4  ,gatt
06:46:30   5  ,COUNT(tkr)
06:46:30   6  ,AVG(g4)
06:46:30   7  FROM stk16
06:46:30   8  GROUP BY tkr,trend,gatt
06:46:30   9  ORDER BY tkr,trend,gatt
06:46:30  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
GOOG		-1 nup	     8089 -3.7036823
GOOG		-1 up	     4128 8.87728546
GOOG		-1	       99
GOOG		 1 nup	     8441 -3.6986156
GOOG		 1 up	     3924  8.0458731
GOOG		 1	      132

6 rows selected.

Elapsed: 00:00:00.03
06:46:30 SQL> 
06:46:30 SQL> -- Now I derive goodness attributes:
06:46:30 SQL> 
06:46:30 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.21
06:46:31 SQL> CREATE TABLE stk_ms COMPRESS AS
06:46:31   2  SELECT
06:46:31   3  tkr
06:46:31   4  ,ydate
06:46:31   5  ,tkrdate
06:46:31   6  ,trend
06:46:31   7  ,g4
06:46:31   8  ,gatt
06:46:31   9  ,gattn
06:46:31  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
06:46:31  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
06:46:31  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
06:46:31  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
06:46:31  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
06:46:31  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
06:46:31  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
06:46:31  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
06:46:31  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
06:46:31  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
06:46:31  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
06:46:31  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
06:46:31  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
06:46:31  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
06:46:31  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
06:46:31  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
06:46:31  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
06:46:31  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
06:46:31  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
06:46:31  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
06:46:31  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
06:46:31  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
06:46:31  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
06:46:31  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
06:46:31  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
06:46:31  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
06:46:31  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
06:46:31  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:46:31  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
06:46:31  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
06:46:31  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
06:46:31  41  FROM stk16
06:46:31  42  /

Table created.

Elapsed: 00:00:03.96
06:46:34 SQL> 
06:46:34 SQL> -- rpt
06:46:34 SQL> 
06:46:34 SQL> SELECT
06:46:34   2  tkr
06:46:34   3  ,trend
06:46:34   4  ,gatt
06:46:34   5  ,COUNT(tkr)
06:46:34   6  ,AVG(g4)
06:46:34   7  FROM stk_ms
06:46:34   8  GROUP BY tkr,trend,gatt
06:46:34   9  ORDER BY tkr,trend,gatt
06:46:34  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
GOOG		-1 nup	     8089 -3.7036823
GOOG		-1 up	     4128 8.87728546
GOOG		-1	       99
GOOG		 1 nup	     8441 -3.6986156
GOOG		 1 up	     3924  8.0458731
GOOG		 1	      132

6 rows selected.

Elapsed: 00:00:00.03
06:46:35 SQL> 
06:46:35 SQL> SELECT
06:46:35   2  tkr
06:46:35   3  ,0+TO_CHAR(ydate,'D')daynum
06:46:35   4  ,COUNT(tkr)
06:46:35   5  ,MIN(ydate),MAX(ydate)
06:46:35   6  FROM stk_ms
06:46:35   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
06:46:35   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
06:46:35   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
GOOG		 2	 4922 2009-11-02 13:25:00 2011-01-10 20:55:00
GOOG		 3	 4925 2009-11-03 13:25:00 2011-01-11 20:55:00
GOOG		 4	 4920 2009-10-28 18:10:00 2011-01-12 20:55:00
GOOG		 5	 5018 2009-10-29 13:25:00 2011-01-13 20:55:00
GOOG		 6	 5028 2009-10-30 13:25:00 2011-01-14 20:55:00

Elapsed: 00:00:00.03
06:46:35 SQL> 
06:46:35 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
