
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 19 23:26:39 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:26:39 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:26:39 SQL> 
23:26:39 SQL> 23:26:39 SQL> --
23:26:39 SQL> -- stk10u.sql
23:26:39 SQL> --
23:26:39 SQL> 
23:26:39 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
23:26:39 SQL> 
23:26:39 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
23:26:39 SQL> @stk10.sql     '&1'
23:26:39 SQL> --
23:26:39 SQL> -- stk10.sql
23:26:39 SQL> --
23:26:39 SQL> 
23:26:39 SQL> -- Creates views and tables for demonstrating SVM.
23:26:39 SQL> 
23:26:39 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.34
23:26:40 SQL> 
23:26:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.22
23:26:40 SQL> 
23:26:40 SQL> CREATE TABLE stk10svmspy COMPRESS AS
23:26:40   2  SELECT
23:26:40   3  tkr
23:26:40   4  ,ydate
23:26:40   5  ,tkr||ydate tkrdate
23:26:40   6  ,clse
23:26:40   7  ,clse2
23:26:40   8  ,rownum rnum -- acts as t in my time-series
23:26:40   9  -- g1 is important. I want to predict g1:
23:26:40  10  ,gain1day g1
23:26:40  11  -- Derive some attributes from clse.
23:26:40  12  -- Each row spans 5 minutes.
23:26:40  13  -- The number of rows in 1 day is 24*60/5.
23:26:40  14  -- I want the aggregations to span from 3 days to 9 days:
23:26:40  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
23:26:40  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
23:26:40  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
23:26:40  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
23:26:40  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
23:26:40  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
23:26:40  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
23:26:40  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
23:26:40  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
23:26:40  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
23:26:40  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
23:26:40  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
23:26:40  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
23:26:40  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
23:26:40  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
23:26:40  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
23:26:40  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
23:26:40  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
23:26:40  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
23:26:40  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
23:26:40  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
23:26:40  36  FROM di5min_stk_c2
23:26:40  37  WHERE UPPER(tkr)='&1'
23:26:40  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
23:26:40  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
23:26:40  40  ORDER BY ydate
23:26:40  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='QQQQ'

Table created.

Elapsed: 00:00:03.36
23:26:43 SQL> 
23:26:43 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.08
23:26:44 SQL> 
23:26:44 SQL> -- rpt
23:26:44 SQL> 
23:26:44 SQL> SELECT
23:26:44   2  tkr
23:26:44   3  ,COUNT(tkr)ccount
23:26:44   4  ,MIN(clse)mnclse,MAX(clse)mxclse
23:26:44   5  -- ,MIN(avg4),MAX(avg4)
23:26:44   6  ,MIN(ydate),MAX(ydate)
23:26:44   7  ,MIN(g1)
23:26:44   8  ,MAX(g1)
23:26:44   9  FROM stk10svmspy
23:26:44  10  GROUP BY tkr
23:26:44  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
QQQQ	     24971	 40.7	   57.22 2009-10-28 18:10:00 2011-01-19 20:55:00      -3.15	   2.5

Elapsed: 00:00:00.04
23:26:45 SQL> 
23:26:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:26:45 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.05
23:26:45 SQL> CREATE TABLE stk12svmspy COMPRESS AS
23:26:45   2  SELECT
23:26:45   3  tkr
23:26:45   4  ,ydate
23:26:45   5  ,tkrdate
23:26:45   6  ,clse
23:26:45   7  ,rnum
23:26:45   8  ,g1
23:26:45   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
23:26:45  10  -- I want more attributes from the ones I derived above:
23:26:45  11  -- clse relation to moving-min
23:26:45  12  ,clse-min3  cm3
23:26:45  13  ,clse-min4  cm4
23:26:45  14  ,clse-min5  cm5
23:26:45  15  ,clse-min6  cm6
23:26:45  16  ,clse-min7  cm7
23:26:45  17  ,clse-min8  cm8
23:26:45  18  ,clse-min9  cm9
23:26:45  19  -- clse relation to moving-avg
23:26:45  20  ,clse-avg3  ca3
23:26:45  21  ,clse-avg4  ca4
23:26:45  22  ,clse-avg5  ca5
23:26:45  23  ,clse-avg6  ca6
23:26:45  24  ,clse-avg7  ca7
23:26:45  25  ,clse-avg8  ca8
23:26:45  26  ,clse-avg9  ca9
23:26:45  27  -- clse relation to moving-max
23:26:45  28  ,clse-max3  cx3
23:26:45  29  ,clse-max4  cx4
23:26:45  30  ,clse-max5  cx5
23:26:45  31  ,clse-max6  cx6
23:26:45  32  ,clse-max7  cx7
23:26:45  33  ,clse-max8  cx8
23:26:45  34  ,clse-max9  cx9
23:26:45  35  -- Derive date related attributes:
23:26:45  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:26:45  37  ,0+TO_CHAR(ydate,'D')d
23:26:45  38  ,0+TO_CHAR(ydate,'W')w
23:26:45  39  -- mpm stands for minutes-past-midnight:
23:26:45  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:26:45  41  -- mph stands for minutes-past-hour:
23:26:45  42  ,0+TO_CHAR(ydate,'MI')mph
23:26:45  43  FROM stk10svmspy
23:26:45  44  ORDER BY ydate
23:26:45  45  /

Table created.

Elapsed: 00:00:00.56
23:26:45 SQL> 
23:26:45 SQL> -- rpt
23:26:45 SQL> 
23:26:45 SQL> SELECT
23:26:45   2  tkr
23:26:45   3  ,COUNT(tkr)ccount
23:26:45   4  ,MIN(clse)mnclse,MAX(clse)mxclse
23:26:45   5  -- ,MIN(avg4),MAX(avg4)
23:26:45   6  ,MIN(ydate),MAX(ydate)
23:26:45   7  ,MIN(g1)
23:26:45   8  ,AVG(g1)
23:26:45   9  ,MAX(g1)
23:26:45  10  FROM stk12svmspy
23:26:45  11  GROUP BY tkr
23:26:45  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
QQQQ	     24971	 40.7	   57.22 2009-10-28 18:10:00 2011-01-19 20:55:00      -3.15 .050297004	      2.5

Elapsed: 00:00:00.05
23:26:45 SQL> 
23:26:45 SQL> -- Prepare for derivation of NTILE based parameters.
23:26:45 SQL> -- Also derive the "trend" parameter:
23:26:45 SQL> 
23:26:45 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.05
23:26:45 SQL> CREATE TABLE stk14svmspy COMPRESS AS
23:26:45   2  SELECT
23:26:45   3  tkr
23:26:45   4  ,ydate
23:26:45   5  ,tkrdate
23:26:45   6  ,clse
23:26:45   7  ,g1
23:26:45   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
23:26:45   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
23:26:45  10  ,CASE WHEN trend IS NULL THEN 1
23:26:45  11  	    WHEN trend =0      THEN 1
23:26:45  12  	    ELSE trend END trend
23:26:45  13  ,cm3
23:26:45  14  ,cm4
23:26:45  15  ,cm5
23:26:45  16  ,cm6
23:26:45  17  ,cm7
23:26:45  18  ,cm8
23:26:45  19  ,cm9
23:26:45  20  ,ca3
23:26:45  21  ,ca4
23:26:45  22  ,ca5
23:26:45  23  ,ca6
23:26:45  24  ,ca7
23:26:45  25  ,ca8
23:26:45  26  ,ca9
23:26:45  27  ,cx3
23:26:45  28  ,cx4
23:26:45  29  ,cx5
23:26:45  30  ,cx6
23:26:45  31  ,cx7
23:26:45  32  ,cx8
23:26:45  33  ,cx9
23:26:45  34  ,hh
23:26:45  35  ,d
23:26:45  36  ,w
23:26:45  37  ,mpm
23:26:45  38  ,mph
23:26:45  39  FROM stk12svmspy
23:26:45  40  -- Guard against divide by 0:
23:26:45  41  WHERE clse > 0
23:26:45  42  ORDER BY ydate
23:26:45  43  /

Table created.

Elapsed: 00:00:00.35
23:26:46 SQL> 
23:26:46 SQL> -- rpt
23:26:46 SQL> 
23:26:46 SQL> SELECT
23:26:46   2  tkr
23:26:46   3  ,trend
23:26:46   4  ,gatt
23:26:46   5  ,COUNT(tkr)
23:26:46   6  ,AVG(g1)
23:26:46   7  FROM stk14svmspy
23:26:46   8  GROUP BY tkr,trend,gatt
23:26:46   9  ORDER BY tkr,trend,gatt
23:26:46  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     4335 -.42757555
QQQQ		-1 up	     3394 .574138922
QQQQ		-1	       20
QQQQ		 1 nup	     9795 -.20263399
QQQQ		 1 up	     7139 .438463016
QQQQ		 1	      288

6 rows selected.

Elapsed: 00:00:00.04
23:26:46 SQL> 
23:26:46 SQL> -- Derive NTILE based params:
23:26:46 SQL> 
23:26:46 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.50
23:26:46 SQL> CREATE TABLE stk16svmspy COMPRESS AS
23:26:46   2  SELECT
23:26:46   3  tkr
23:26:46   4  ,ydate
23:26:46   5  ,tkrdate
23:26:46   6  ,clse
23:26:46   7  ,g1
23:26:46   8  ,gatt
23:26:46   9  ,gattn
23:26:46  10  ,trend
23:26:46  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
23:26:46  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
23:26:46  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
23:26:46  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
23:26:46  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
23:26:46  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
23:26:46  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
23:26:46  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
23:26:46  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
23:26:46  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
23:26:46  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
23:26:46  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
23:26:46  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
23:26:46  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
23:26:46  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
23:26:46  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
23:26:46  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
23:26:46  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
23:26:46  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
23:26:46  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
23:26:46  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
23:26:46  32  ,hh  att21
23:26:46  33  ,d   att22
23:26:46  34  ,w   att23
23:26:46  35  ,mpm att24
23:26:46  36  ,mph att25
23:26:46  37  ,trend att26
23:26:46  38  FROM stk14svmspy
23:26:46  39  ORDER BY ydate
23:26:46  40  /

Table created.

Elapsed: 00:00:02.86
23:26:49 SQL> 
23:26:49 SQL> -- rpt
23:26:49 SQL> 
23:26:49 SQL> SELECT
23:26:49   2  tkr
23:26:49   3  ,trend
23:26:49   4  ,gatt
23:26:49   5  ,COUNT(tkr)
23:26:49   6  ,AVG(g1)
23:26:49   7  FROM stk16svmspy
23:26:49   8  GROUP BY tkr,trend,gatt
23:26:49   9  ORDER BY tkr,trend,gatt
23:26:49  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     4335 -.42757555
QQQQ		-1 up	     3394 .574138922
QQQQ		-1	       20
QQQQ		 1 nup	     9795 -.20263399
QQQQ		 1 up	     7139 .438463016
QQQQ		 1	      288

6 rows selected.

Elapsed: 00:00:00.03
23:26:49 SQL> 
23:26:49 SQL> -- Now I derive goodness attributes:
23:26:49 SQL> 
23:26:49 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.23
23:26:49 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
23:26:49   2  SELECT
23:26:49   3  tkr
23:26:49   4  ,ydate
23:26:49   5  ,tkrdate
23:26:49   6  ,trend
23:26:49   7  ,g1
23:26:49   8  ,gatt
23:26:49   9  ,gattn
23:26:49  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
23:26:49  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
23:26:49  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
23:26:49  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
23:26:49  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
23:26:49  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
23:26:49  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
23:26:49  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
23:26:49  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
23:26:49  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
23:26:49  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
23:26:49  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
23:26:49  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
23:26:49  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
23:26:49  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
23:26:49  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
23:26:49  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
23:26:49  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
23:26:49  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
23:26:49  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
23:26:49  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
23:26:49  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
23:26:49  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
23:26:49  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
23:26:49  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
23:26:49  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
23:26:49  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
23:26:49  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
23:26:49  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
23:26:49  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
23:26:49  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
23:26:49  41  FROM stk16svmspy
23:26:49  42  /

Table created.

Elapsed: 00:00:04.34
23:26:54 SQL> 
23:26:54 SQL> -- rpt
23:26:54 SQL> 
23:26:54 SQL> SELECT
23:26:54   2  tkr
23:26:54   3  ,trend
23:26:54   4  ,gatt
23:26:54   5  ,COUNT(tkr)
23:26:54   6  ,AVG(g1)
23:26:54   7  FROM stk_ms_svmspy
23:26:54   8  GROUP BY tkr,trend,gatt
23:26:54   9  ORDER BY tkr,trend,gatt
23:26:54  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     4335 -.42757555
QQQQ		-1 up	     3394 .574138922
QQQQ		-1	       20
QQQQ		 1 nup	     9795 -.20263399
QQQQ		 1 up	     7139 .438463016
QQQQ		 1	      288

6 rows selected.

Elapsed: 00:00:00.04
23:26:54 SQL> 
23:26:54 SQL> SELECT
23:26:54   2  tkr
23:26:54   3  ,0+TO_CHAR(ydate,'D')daynum
23:26:54   4  ,COUNT(tkr)
23:26:54   5  ,MIN(ydate),MAX(ydate)
23:26:54   6  FROM stk_ms_svmspy
23:26:54   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
23:26:54   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
23:26:54   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
QQQQ		 2	 4922 2009-11-02 13:25:00 2011-01-10 20:55:00
QQQQ		 3	 5004 2009-11-03 13:25:00 2011-01-18 20:55:00
QQQQ		 4	 4999 2009-10-28 18:10:00 2011-01-19 20:55:00
QQQQ		 5	 5018 2009-10-29 13:25:00 2011-01-13 20:55:00
QQQQ		 6	 5028 2009-10-30 13:25:00 2011-01-14 20:55:00

Elapsed: 00:00:00.03
23:26:54 SQL> 
23:26:54 SQL> -- exit
23:26:54 SQL> @stk10svmd.sql '&1'
23:26:54 SQL> --
23:26:54 SQL> -- stk10svmd.sql
23:26:54 SQL> --
23:26:54 SQL> 
23:26:54 SQL> -- Creates views and tables for demonstrating SVM.
23:26:54 SQL> -- I need to run this after I run stk10.sql
23:26:54 SQL> 
23:26:54 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.64
23:26:54 SQL> 
23:26:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
23:26:55 SQL> 
23:26:55 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
23:26:55   2  SELECT
23:26:55   3  tkr
23:26:55   4  ,ydate
23:26:55   5  ,tkr||ydate tkrdate
23:26:55   6  ,clse
23:26:55   7  ,rownum rnum -- acts as t in my time-series
23:26:55   8  -- Derive some attributes from clse.
23:26:55   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
23:26:55  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
23:26:55  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
23:26:55  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
23:26:55  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
23:26:55  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
23:26:55  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
23:26:55  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
23:26:55  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
23:26:55  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
23:26:55  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
23:26:55  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
23:26:55  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
23:26:55  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
23:26:55  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
23:26:55  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
23:26:55  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
23:26:55  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
23:26:55  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
23:26:55  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
23:26:55  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
23:26:55  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
23:26:55  31  FROM ystk
23:26:55  32  WHERE UPPER(tkr)='&1'
23:26:55  33  AND ydate > '1990-01-01'
23:26:55  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
23:26:55  35  ORDER BY ydate
23:26:55  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='QQQQ'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='QQQQ')

Table created.

Elapsed: 00:00:00.41
23:26:55 SQL> 
23:26:55 SQL> -- rpt
23:26:55 SQL> 
23:26:55 SQL> SELECT
23:26:55   2  tkr
23:26:55   3  ,COUNT(tkr)
23:26:55   4  ,MIN(clse),MAX(clse)
23:26:55   5  ,MIN(avg4),MAX(avg4)
23:26:55   6  ,MIN(ydate),MAX(ydate)
23:26:55   7  FROM stk_svmd10svmspy
23:26:55   8  GROUP BY tkr
23:26:55   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
QQQQ		2984	  19.35     113.59     19.586	 111.912 1999-03-10 00:00:00 2011-01-14 00:00:00

Elapsed: 00:00:00.02
23:26:55 SQL> 
23:26:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:26:55 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.07
23:26:55 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
23:26:55   2  SELECT
23:26:55   3  tkr
23:26:55   4  ,ydate
23:26:55   5  ,tkrdate
23:26:55   6  ,clse
23:26:55   7  ,rnum
23:26:55   8  -- g1 is important. I want to predict g1:
23:26:55   9  ,ld - clse g1
23:26:55  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
23:26:55  11  -- I want more attributes from the ones I derived above:
23:26:55  12  -- clse relation to moving-min
23:26:55  13  ,clse-min3  cm3
23:26:55  14  ,clse-min4  cm4
23:26:55  15  ,clse-min5  cm5
23:26:55  16  ,clse-min6  cm6
23:26:55  17  ,clse-min7  cm7
23:26:55  18  ,clse-min8  cm8
23:26:55  19  ,clse-min9  cm9
23:26:55  20  -- clse relation to moving-avg
23:26:55  21  ,clse-avg3  ca3
23:26:55  22  ,clse-avg4  ca4
23:26:55  23  ,clse-avg5  ca5
23:26:55  24  ,clse-avg6  ca6
23:26:55  25  ,clse-avg7  ca7
23:26:55  26  ,clse-avg8  ca8
23:26:55  27  ,clse-avg9  ca9
23:26:55  28  -- clse relation to moving-max
23:26:55  29  ,clse-max3  cx3
23:26:55  30  ,clse-max4  cx4
23:26:55  31  ,clse-max5  cx5
23:26:55  32  ,clse-max6  cx6
23:26:55  33  ,clse-max7  cx7
23:26:55  34  ,clse-max8  cx8
23:26:55  35  ,clse-max9  cx9
23:26:55  36  -- Derive date related attributes:
23:26:55  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:26:55  38  ,0+TO_CHAR(ydate,'D')d
23:26:55  39  ,0+TO_CHAR(ydate,'W')w
23:26:55  40  -- mpm stands for minutes-past-midnight:
23:26:55  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:26:55  42  -- mph stands for minutes-past-hour:
23:26:55  43  ,0+TO_CHAR(ydate,'MI')mph
23:26:55  44  FROM stk_svmd10svmspy
23:26:55  45  ORDER BY ydate
23:26:55  46  /

Table created.

Elapsed: 00:00:00.11
23:26:55 SQL> 
23:26:55 SQL> -- rpt
23:26:55 SQL> 
23:26:55 SQL> SELECT
23:26:55   2  tkr
23:26:55   3  ,COUNT(tkr)
23:26:55   4  ,MIN(clse),MAX(clse)
23:26:55   5  ,MIN(ydate),MAX(ydate)
23:26:55   6  FROM stk_svmd12
23:26:55   7  GROUP BY tkr
23:26:55   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
QQQQ		2984	  19.35     113.59 1999-03-10 00:00:00 2011-01-14 00:00:00

Elapsed: 00:00:00.01
23:26:55 SQL> 
23:26:55 SQL> -- Prepare for derivation of NTILE based parameters.
23:26:55 SQL> -- Also derive the "trend" parameter:
23:26:55 SQL> 
23:26:55 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.07
23:26:55 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
23:26:55   2  SELECT
23:26:55   3  tkr
23:26:55   4  ,ydate
23:26:55   5  ,tkrdate
23:26:55   6  ,clse
23:26:55   7  ,g1
23:26:55   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
23:26:55   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
23:26:55  10  ,CASE WHEN trend IS NULL THEN 1
23:26:55  11  	    WHEN trend =0      THEN 1
23:26:55  12  	    ELSE trend END trend
23:26:55  13  ,cm3
23:26:55  14  ,cm4
23:26:55  15  ,cm5
23:26:55  16  ,cm6
23:26:55  17  ,cm7
23:26:55  18  ,cm8
23:26:55  19  ,cm9
23:26:55  20  ,ca3
23:26:55  21  ,ca4
23:26:55  22  ,ca5
23:26:55  23  ,ca6
23:26:55  24  ,ca7
23:26:55  25  ,ca8
23:26:55  26  ,ca9
23:26:55  27  ,cx3
23:26:55  28  ,cx4
23:26:55  29  ,cx5
23:26:55  30  ,cx6
23:26:55  31  ,cx7
23:26:55  32  ,cx8
23:26:55  33  ,cx9
23:26:55  34  ,hh
23:26:55  35  ,d
23:26:55  36  ,w
23:26:55  37  ,mpm
23:26:55  38  ,mph
23:26:55  39  FROM stk_svmd12
23:26:55  40  -- Guard against divide by 0:
23:26:55  41  WHERE clse > 0
23:26:55  42  ORDER BY ydate
23:26:55  43  /

Table created.

Elapsed: 00:00:00.09
23:26:55 SQL> 
23:26:55 SQL> -- rpt
23:26:55 SQL> 
23:26:55 SQL> SELECT
23:26:55   2  tkr
23:26:55   3  ,trend
23:26:55   4  ,gatt
23:26:55   5  ,COUNT(tkr)
23:26:55   6  ,AVG(g1)
23:26:55   7  FROM stk_svmd14
23:26:55   8  GROUP BY tkr,trend,gatt
23:26:55   9  ORDER BY tkr,trend,gatt
23:26:55  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
QQQQ		  -1 nup	755 -.67590728
QQQQ		  -1 up 	622 .854581994
QQQQ		   1 nup	933 -.50375134
QQQQ		   1 up 	673 .678306092
QQQQ		   1		  1

Elapsed: 00:00:00.02
23:26:55 SQL> 
23:26:55 SQL> -- Derive NTILE based params:
23:26:55 SQL> 
23:26:55 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.05
23:26:55 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
23:26:55   2  SELECT
23:26:55   3  tkr
23:26:55   4  ,ydate
23:26:55   5  ,tkrdate
23:26:55   6  ,clse
23:26:55   7  ,g1
23:26:55   8  ,gatt
23:26:55   9  ,gattn
23:26:55  10  ,trend
23:26:55  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
23:26:55  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
23:26:55  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
23:26:55  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
23:26:55  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
23:26:55  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
23:26:55  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
23:26:55  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
23:26:55  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
23:26:55  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
23:26:55  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
23:26:55  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
23:26:55  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
23:26:55  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
23:26:55  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
23:26:55  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
23:26:55  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
23:26:55  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
23:26:55  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
23:26:55  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
23:26:55  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
23:26:55  32  ,hh  att21
23:26:55  33  ,d   att22
23:26:55  34  ,w   att23
23:26:55  35  ,mpm att24
23:26:55  36  ,mph att25
23:26:55  37  ,trend att26
23:26:55  38  FROM stk_svmd14
23:26:55  39  ORDER BY ydate
23:26:55  40  /

Table created.

Elapsed: 00:00:00.38
23:26:56 SQL> 
23:26:56 SQL> -- rpt
23:26:56 SQL> 
23:26:56 SQL> SELECT
23:26:56   2  tkr
23:26:56   3  ,trend
23:26:56   4  ,gatt
23:26:56   5  ,COUNT(tkr)
23:26:56   6  ,AVG(g1)
23:26:56   7  FROM stk_svmd16
23:26:56   8  GROUP BY tkr,trend,gatt
23:26:56   9  ORDER BY tkr,trend,gatt
23:26:56  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
QQQQ		  -1 nup	755 -.67590728
QQQQ		  -1 up 	622 .854581994
QQQQ		   1 nup	933 -.50375134
QQQQ		   1 up 	673 .678306092
QQQQ		   1		  1

Elapsed: 00:00:00.02
23:26:56 SQL> 
23:26:56 SQL> -- Now I derive goodness attributes:
23:26:56 SQL> 
23:26:56 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.25
23:26:56 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
23:26:56   2  SELECT
23:26:56   3  tkr
23:26:56   4  ,ydate
23:26:56   5  ,tkrdate
23:26:56   6  ,trend
23:26:56   7  ,g1
23:26:56   8  ,gatt
23:26:56   9  ,gattn
23:26:56  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
23:26:56  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
23:26:56  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
23:26:56  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
23:26:56  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
23:26:56  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
23:26:56  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
23:26:56  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
23:26:56  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
23:26:56  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
23:26:56  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
23:26:56  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
23:26:56  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
23:26:56  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
23:26:56  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
23:26:56  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
23:26:56  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
23:26:56  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
23:26:56  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
23:26:56  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
23:26:56  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
23:26:56  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
23:26:56  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
23:26:56  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
23:26:56  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
23:26:56  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
23:26:56  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
23:26:56  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
23:26:56  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
23:26:56  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
23:26:56  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
23:26:56  41  FROM stk_svmd16
23:26:56  42  /

Table created.

Elapsed: 00:00:00.58
23:26:57 SQL> 
23:26:57 SQL> -- rpt
23:26:57 SQL> 
23:26:57 SQL> SELECT
23:26:57   2  tkr
23:26:57   3  ,trend
23:26:57   4  ,gatt
23:26:57   5  ,COUNT(tkr)
23:26:57   6  ,AVG(g1)
23:26:57   7  FROM stk_ms_svmd_svmspy
23:26:57   8  GROUP BY tkr,trend,gatt
23:26:57   9  ORDER BY tkr,trend,gatt
23:26:57  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
QQQQ		  -1 nup	755 -.67590728
QQQQ		  -1 up 	622 .854581994
QQQQ		   1 nup	933 -.50375134
QQQQ		   1 up 	673 .678306092
QQQQ		   1		  1

Elapsed: 00:00:00.02
23:26:57 SQL> 
23:26:57 SQL> SELECT
23:26:57   2  tkr
23:26:57   3  ,COUNT(tkr)
23:26:57   4  ,MIN(ydate),MAX(ydate)
23:26:57   5  FROM stk_ms_svmd_svmspy
23:26:57   6  GROUP BY tkr
23:26:57   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
QQQQ		2984 1999-03-10 00:00:00 2011-01-14 00:00:00

Elapsed: 00:00:00.00
23:26:57 SQL> 
23:26:57 SQL> -- exit
23:26:57 SQL> 
23:26:57 SQL> 
23:26:57 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.18
23:26:57 SQL> 
23:26:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
23:26:57 SQL> 
23:26:57 SQL> CREATE TABLE stk_ms_u COMPRESS AS
23:26:57   2  SELECT * FROM stk_ms_svmspy
23:26:57   3  UNION
23:26:57   4  SELECT * FROM stk_ms_svmd_svmspy
23:26:57   5  /

Table created.

Elapsed: 00:00:00.45
23:26:58 SQL> 
23:26:58 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
