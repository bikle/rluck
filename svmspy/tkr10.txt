
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 21:02:40 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:02:41 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:02:41 SQL> 21:02:41 SQL> --
21:02:41 SQL> -- stk10.sql
21:02:41 SQL> --
21:02:41 SQL> 
21:02:41 SQL> -- Creates views and tables for demonstrating SVM.
21:02:41 SQL> 
21:02:41 SQL> CREATE OR REPLACE VIEW stk10 AS
21:02:41   2  SELECT
21:02:41   3  tkr
21:02:41   4  ,ydate
21:02:41   5  ,tkr||ydate tkrdate
21:02:41   6  ,clse
21:02:41   7  ,rownum rnum -- acts as t in my time-series
21:02:41   8  -- Derive some attributes from clse.
21:02:41   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
21:02:41  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
21:02:41  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:02:41  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
21:02:41  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:02:41  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
21:02:41  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:02:41  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
21:02:41  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
21:02:41  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:02:41  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
21:02:41  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:02:41  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
21:02:41  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:02:41  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
21:02:41  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
21:02:41  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:02:41  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
21:02:41  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:02:41  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
21:02:41  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:02:41  30  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
21:02:41  31  -- FROM dukas5min_stk WHERE UPPER(tkr)='&1'
21:02:41  32  FROM di5min_stk WHERE UPPER(tkr)='&1'
21:02:41  33  ORDER BY ydate
21:02:41  34  /
old  31: -- FROM dukas5min_stk WHERE UPPER(tkr)='&1'
new  31: -- FROM dukas5min_stk WHERE UPPER(tkr)='HPQ'
old  32: FROM di5min_stk WHERE UPPER(tkr)='&1'
new  32: FROM di5min_stk WHERE UPPER(tkr)='HPQ'

View created.

Elapsed: 00:00:00.05
21:02:41 SQL> 
21:02:41 SQL> -- rpt
21:02:41 SQL> 
21:02:41 SQL> SELECT
21:02:41   2  tkr
21:02:41   3  ,COUNT(tkr)
21:02:41   4  ,MIN(clse),MAX(clse)
21:02:41   5  ,MIN(avg4),MAX(avg4)
21:02:41   6  ,MIN(ydate),MAX(ydate)
21:02:41   7  FROM stk10
21:02:41   8  GROUP BY tkr
21:02:41   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
HPQ	     24488	37.45	    54.7 37.7053061 54.5179592 2009-10-28 18:10:01 2011-01-03 21:00:00

Elapsed: 00:00:01.89
21:02:42 SQL> 
21:02:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:02:42 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.48
21:02:43 SQL> CREATE TABLE stk12 COMPRESS AS
21:02:43   2  SELECT
21:02:43   3  tkr
21:02:43   4  ,ydate
21:02:43   5  ,tkrdate
21:02:43   6  ,clse
21:02:43   7  ,rnum
21:02:43   8  -- g4 is important. I want to predict g4:
21:02:43   9  ,ld4 - clse g4
21:02:43  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
21:02:43  11  -- I want more attributes from the ones I derived above:
21:02:43  12  -- clse relation to moving-min
21:02:43  13  ,clse-min2  cm2
21:02:43  14  ,clse-min3  cm3
21:02:43  15  ,clse-min4  cm4
21:02:43  16  ,clse-min5  cm5
21:02:43  17  ,clse-min6  cm6
21:02:43  18  ,clse-min7  cm7
21:02:43  19  ,clse-min8  cm8
21:02:43  20  -- clse relation to moving-avg
21:02:43  21  ,clse-avg2  ca2
21:02:43  22  ,clse-avg3  ca3
21:02:43  23  ,clse-avg4  ca4
21:02:43  24  ,clse-avg5  ca5
21:02:43  25  ,clse-avg6  ca6
21:02:43  26  ,clse-avg7  ca7
21:02:43  27  ,clse-avg8  ca8
21:02:43  28  -- clse relation to moving-max
21:02:43  29  ,clse-max2  cx2
21:02:43  30  ,clse-max3  cx3
21:02:43  31  ,clse-max4  cx4
21:02:43  32  ,clse-max5  cx5
21:02:43  33  ,clse-max6  cx6
21:02:43  34  ,clse-max7  cx7
21:02:43  35  ,clse-max8  cx8
21:02:43  36  -- Derive date related attributes:
21:02:43  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:02:43  38  ,0+TO_CHAR(ydate,'D')d
21:02:43  39  ,0+TO_CHAR(ydate,'W')w
21:02:43  40  -- mpm stands for minutes-past-midnight:
21:02:43  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:02:43  42  -- mph stands for minutes-past-hour:
21:02:43  43  ,0+TO_CHAR(ydate,'MI')mph
21:02:43  44  FROM stk10
21:02:43  45  ORDER BY ydate
21:02:43  46  /

Table created.

Elapsed: 00:00:03.86
21:02:47 SQL> 
21:02:47 SQL> -- rpt
21:02:47 SQL> 
21:02:47 SQL> SELECT
21:02:47   2  tkr
21:02:47   3  ,COUNT(tkr)
21:02:47   4  ,MIN(clse),MAX(clse)
21:02:47   5  ,MIN(ydate),MAX(ydate)
21:02:47   6  FROM stk12
21:02:47   7  GROUP BY tkr
21:02:47   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
HPQ	     24488	37.45	    54.7 2009-10-28 18:10:01 2011-01-03 21:00:00

Elapsed: 00:00:00.92
21:02:48 SQL> 
21:02:48 SQL> -- Prepare for derivation of NTILE based parameters.
21:02:48 SQL> -- Also derive the "trend" parameter:
21:02:48 SQL> 
21:02:48 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.04
21:02:48 SQL> CREATE TABLE stk14 COMPRESS AS
21:02:48   2  SELECT
21:02:48   3  tkr
21:02:48   4  ,ydate
21:02:48   5  ,tkrdate
21:02:48   6  ,clse
21:02:48   7  ,g4
21:02:48   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.30/120 THEN 'up' ELSE 'nup' END gatt
21:02:48   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.30/120 THEN 'up' ELSE 'nup' END gattn
21:02:48  10  ,CASE WHEN trend IS NULL THEN 1
21:02:48  11  	    WHEN trend =0      THEN 1
21:02:48  12  	    ELSE trend END trend
21:02:48  13  ,cm2
21:02:48  14  ,cm3
21:02:48  15  ,cm4
21:02:48  16  ,cm5
21:02:48  17  ,cm6
21:02:48  18  ,cm7
21:02:48  19  ,cm8
21:02:48  20  ,ca2
21:02:48  21  ,ca3
21:02:48  22  ,ca4
21:02:48  23  ,ca5
21:02:48  24  ,ca6
21:02:48  25  ,ca7
21:02:48  26  ,ca8
21:02:48  27  ,cx2
21:02:48  28  ,cx3
21:02:48  29  ,cx4
21:02:48  30  ,cx5
21:02:48  31  ,cx6
21:02:48  32  ,cx7
21:02:48  33  ,cx8
21:02:48  34  ,hh
21:02:48  35  ,d
21:02:48  36  ,w
21:02:48  37  ,mpm
21:02:48  38  ,mph
21:02:48  39  FROM stk12
21:02:48  40  -- Guard against divide by 0:
21:02:48  41  WHERE clse > 0
21:02:48  42  ORDER BY ydate
21:02:48  43  /

Table created.

Elapsed: 00:00:01.09
21:02:49 SQL> 
21:02:49 SQL> -- rpt
21:02:49 SQL> 
21:02:49 SQL> SELECT
21:02:49   2  tkr
21:02:49   3  ,trend
21:02:49   4  ,gatt
21:02:49   5  ,COUNT(tkr)
21:02:49   6  ,AVG(g4)
21:02:49   7  FROM stk14
21:02:49   8  GROUP BY tkr,trend,gatt
21:02:49   9  ORDER BY tkr,trend,gatt
21:02:49  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
HPQ		-1 nup	     7022 -.30783965
HPQ		-1 up	     4672 .456025792
HPQ		-1	       23
HPQ		 1 nup	     8024 -.28320507
HPQ		 1 up	     4722 .444930114
HPQ		 1	       25

6 rows selected.

Elapsed: 00:00:01.78
21:02:51 SQL> 
21:02:51 SQL> -- Derive NTILE based params:
21:02:51 SQL> 
21:02:51 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.05
21:02:51 SQL> CREATE TABLE stk16 COMPRESS AS
21:02:51   2  SELECT
21:02:51   3  tkr
21:02:51   4  ,ydate
21:02:51   5  ,tkrdate
21:02:51   6  ,clse
21:02:51   7  ,g4
21:02:51   8  ,gatt
21:02:51   9  ,gattn
21:02:51  10  ,trend
21:02:51  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
21:02:51  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
21:02:51  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
21:02:51  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
21:02:51  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
21:02:51  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
21:02:51  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
21:02:51  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
21:02:51  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
21:02:51  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
21:02:51  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
21:02:51  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
21:02:51  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
21:02:51  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
21:02:51  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
21:02:51  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
21:02:51  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
21:02:51  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
21:02:51  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
21:02:51  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
21:02:51  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
21:02:51  32  ,hh  att21
21:02:51  33  ,d   att22
21:02:51  34  ,w   att23
21:02:51  35  ,mpm att24
21:02:51  36  ,mph att25
21:02:51  37  ,trend att26
21:02:51  38  FROM stk14
21:02:51  39  ORDER BY ydate
21:02:51  40  /

Table created.

Elapsed: 00:00:07.13
21:02:58 SQL> 
21:02:58 SQL> -- rpt
21:02:58 SQL> 
21:02:58 SQL> SELECT
21:02:58   2  tkr
21:02:58   3  ,trend
21:02:58   4  ,gatt
21:02:58   5  ,COUNT(tkr)
21:02:58   6  ,AVG(g4)
21:02:58   7  FROM stk16
21:02:58   8  GROUP BY tkr,trend,gatt
21:02:58   9  ORDER BY tkr,trend,gatt
21:02:58  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
HPQ		-1 nup	     7022 -.30783965
HPQ		-1 up	     4672 .456025792
HPQ		-1	       23
HPQ		 1 nup	     8024 -.28320507
HPQ		 1 up	     4722 .444930114
HPQ		 1	       25

6 rows selected.

Elapsed: 00:00:00.06
21:02:58 SQL> 
21:02:58 SQL> -- Now I derive goodness attributes:
21:02:58 SQL> 
21:02:58 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.75
21:02:59 SQL> CREATE TABLE stk_ms COMPRESS AS
21:02:59   2  SELECT
21:02:59   3  tkr
21:02:59   4  ,ydate
21:02:59   5  ,tkrdate
21:02:59   6  ,trend
21:02:59   7  ,g4
21:02:59   8  ,gatt
21:02:59   9  ,gattn
21:02:59  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
21:02:59  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
21:02:59  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
21:02:59  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
21:02:59  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
21:02:59  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
21:02:59  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
21:02:59  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
21:02:59  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
21:02:59  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
21:02:59  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
21:02:59  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
21:02:59  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
21:02:59  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
21:02:59  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
21:02:59  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
21:02:59  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
21:02:59  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
21:02:59  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
21:02:59  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
21:02:59  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
21:02:59  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
21:02:59  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
21:02:59  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
21:02:59  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
21:02:59  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
21:02:59  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
21:02:59  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
21:02:59  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
21:02:59  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
21:02:59  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
21:02:59  41  FROM stk16
21:02:59  42  /

Table created.

Elapsed: 00:00:09.98
21:03:09 SQL> 
21:03:09 SQL> -- rpt
21:03:09 SQL> 
21:03:09 SQL> SELECT
21:03:09   2  tkr
21:03:09   3  ,trend
21:03:09   4  ,gatt
21:03:09   5  ,COUNT(tkr)
21:03:09   6  ,AVG(g4)
21:03:09   7  FROM stk_ms
21:03:09   8  GROUP BY tkr,trend,gatt
21:03:09   9  ORDER BY tkr,trend,gatt
21:03:09  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
HPQ		-1 nup	     7022 -.30783965
HPQ		-1 up	     4672 .456025792
HPQ		-1	       23
HPQ		 1 nup	     8024 -.28320507
HPQ		 1 up	     4722 .444930114
HPQ		 1	       25

6 rows selected.

Elapsed: 00:00:00.18
21:03:09 SQL> 
21:03:09 SQL> SELECT
21:03:09   2  tkr
21:03:09   3  ,COUNT(tkr)
21:03:09   4  ,MIN(ydate),MAX(ydate)
21:03:09   5  FROM stk_ms
21:03:09   6  GROUP BY tkr
21:03:09   7  /

TKR	COUNT(TKR) MIN(YDATE)	       MAX(YDATE)
------- ---------- ------------------- -------------------
HPQ	     24488 2009-10-28 18:10:01 2011-01-03 21:00:00

Elapsed: 00:00:00.03
21:03:09 SQL> 
21:03:09 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
