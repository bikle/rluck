
SQL*Plus: Release 11.2.0.1.0 Production on Mon Apr 25 23:07:01 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:07:01 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:07:01 SQL> 
23:07:01 SQL> 23:07:01 SQL> --
23:07:01 SQL> -- stk10u.sql
23:07:01 SQL> --
23:07:01 SQL> 
23:07:01 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
23:07:01 SQL> 
23:07:01 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
23:07:01 SQL> @stk10.sql     '&1'
23:07:01 SQL> --
23:07:01 SQL> -- stk10.sql
23:07:01 SQL> --
23:07:01 SQL> 
23:07:01 SQL> -- Creates views and tables for demonstrating SVM.
23:07:01 SQL> 
23:07:01 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.23
23:07:02 SQL> 
23:07:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
23:07:02 SQL> 
23:07:02 SQL> CREATE TABLE stk10svmspy COMPRESS AS
23:07:02   2  SELECT
23:07:02   3  tkr
23:07:02   4  ,ydate
23:07:02   5  ,tkr||ydate tkrdate
23:07:02   6  ,clse
23:07:02   7  ,clse2
23:07:02   8  ,rownum rnum -- acts as t in my time-series
23:07:02   9  -- g1 is important. I want to predict g1:
23:07:02  10  ,gain1day g1
23:07:02  11  -- Derive some attributes from clse.
23:07:02  12  -- Each row spans 5 minutes.
23:07:02  13  -- The number of rows in 1 day is 24*60/5.
23:07:02  14  -- I want the aggregations to span from 3 days to 9 days:
23:07:02  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
23:07:02  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
23:07:02  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
23:07:02  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
23:07:02  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
23:07:02  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
23:07:02  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
23:07:02  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
23:07:02  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
23:07:02  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
23:07:02  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
23:07:02  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
23:07:02  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
23:07:02  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
23:07:02  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
23:07:02  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
23:07:02  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
23:07:02  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
23:07:02  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
23:07:02  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
23:07:02  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
23:07:02  36  FROM di5min_stk_c2
23:07:02  37  WHERE UPPER(tkr)='&1'
23:07:02  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
23:07:02  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
23:07:02  40  ORDER BY ydate
23:07:02  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='AAPL'

Table created.

Elapsed: 00:00:01.05
23:07:03 SQL> 
23:07:03 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
23:07:03 SQL> 
23:07:03 SQL> -- rpt
23:07:03 SQL> 
23:07:03 SQL> SELECT
23:07:03   2  tkr
23:07:03   3  ,COUNT(tkr)ccount
23:07:03   4  ,MIN(clse)mnclse,MAX(clse)mxclse
23:07:03   5  -- ,MIN(avg4),MAX(avg4)
23:07:03   6  ,MIN(ydate),MAX(ydate)
23:07:03   7  ,MIN(g1)
23:07:03   8  ,MAX(g1)
23:07:03   9  FROM stk10svmspy
23:07:03  10  GROUP BY tkr
23:07:03  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
AAPL	      6006    200.725	  364.83 2011-01-04 14:30:00 2011-04-25 19:55:00 -18.890696 145.278438

Elapsed: 00:00:00.03
23:07:03 SQL> 
23:07:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:07:03 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.07
23:07:03 SQL> CREATE TABLE stk12svmspy COMPRESS AS
23:07:03   2  SELECT
23:07:03   3  tkr
23:07:03   4  ,ydate
23:07:03   5  ,tkrdate
23:07:03   6  ,clse
23:07:03   7  ,rnum
23:07:03   8  ,g1
23:07:03   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
23:07:03  10  -- I want more attributes from the ones I derived above:
23:07:03  11  -- clse relation to moving-min
23:07:03  12  ,clse-min3  cm3
23:07:03  13  ,clse-min4  cm4
23:07:03  14  ,clse-min5  cm5
23:07:03  15  ,clse-min6  cm6
23:07:03  16  ,clse-min7  cm7
23:07:03  17  ,clse-min8  cm8
23:07:03  18  ,clse-min9  cm9
23:07:03  19  -- clse relation to moving-avg
23:07:03  20  ,clse-avg3  ca3
23:07:03  21  ,clse-avg4  ca4
23:07:03  22  ,clse-avg5  ca5
23:07:03  23  ,clse-avg6  ca6
23:07:03  24  ,clse-avg7  ca7
23:07:03  25  ,clse-avg8  ca8
23:07:03  26  ,clse-avg9  ca9
23:07:03  27  -- clse relation to moving-max
23:07:03  28  ,clse-max3  cx3
23:07:03  29  ,clse-max4  cx4
23:07:03  30  ,clse-max5  cx5
23:07:03  31  ,clse-max6  cx6
23:07:03  32  ,clse-max7  cx7
23:07:03  33  ,clse-max8  cx8
23:07:03  34  ,clse-max9  cx9
23:07:03  35  -- Derive date related attributes:
23:07:03  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:07:03  37  ,0+TO_CHAR(ydate,'D')d
23:07:03  38  ,0+TO_CHAR(ydate,'W')w
23:07:03  39  -- mpm stands for minutes-past-midnight:
23:07:03  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:07:03  41  -- mph stands for minutes-past-hour:
23:07:03  42  ,0+TO_CHAR(ydate,'MI')mph
23:07:03  43  FROM stk10svmspy
23:07:03  44  ORDER BY ydate
23:07:03  45  /

Table created.

Elapsed: 00:00:00.22
23:07:04 SQL> 
23:07:04 SQL> -- rpt
23:07:04 SQL> 
23:07:04 SQL> SELECT
23:07:04   2  tkr
23:07:04   3  ,COUNT(tkr)ccount
23:07:04   4  ,MIN(clse)mnclse,MAX(clse)mxclse
23:07:04   5  -- ,MIN(avg4),MAX(avg4)
23:07:04   6  ,MIN(ydate),MAX(ydate)
23:07:04   7  ,MIN(g1)
23:07:04   8  ,AVG(g1)
23:07:04   9  ,MAX(g1)
23:07:04  10  FROM stk12svmspy
23:07:04  11  GROUP BY tkr
23:07:04  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
AAPL	      6006    200.725	  364.83 2011-01-04 14:30:00 2011-04-25 19:55:00 -18.890696 2.46525079 145.278438

Elapsed: 00:00:00.02
23:07:04 SQL> 
23:07:04 SQL> -- Prepare for derivation of NTILE based parameters.
23:07:04 SQL> -- Also derive the "trend" parameter:
23:07:04 SQL> 
23:07:04 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.07
23:07:04 SQL> CREATE TABLE stk14svmspy COMPRESS AS
23:07:04   2  SELECT
23:07:04   3  tkr
23:07:04   4  ,ydate
23:07:04   5  ,tkrdate
23:07:04   6  ,clse
23:07:04   7  ,g1
23:07:04   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
23:07:04   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
23:07:04  10  ,CASE WHEN trend IS NULL THEN 1
23:07:04  11  	    WHEN trend =0      THEN 1
23:07:04  12  	    ELSE trend END trend
23:07:04  13  ,cm3
23:07:04  14  ,cm4
23:07:04  15  ,cm5
23:07:04  16  ,cm6
23:07:04  17  ,cm7
23:07:04  18  ,cm8
23:07:04  19  ,cm9
23:07:04  20  ,ca3
23:07:04  21  ,ca4
23:07:04  22  ,ca5
23:07:04  23  ,ca6
23:07:04  24  ,ca7
23:07:04  25  ,ca8
23:07:04  26  ,ca9
23:07:04  27  ,cx3
23:07:04  28  ,cx4
23:07:04  29  ,cx5
23:07:04  30  ,cx6
23:07:04  31  ,cx7
23:07:04  32  ,cx8
23:07:04  33  ,cx9
23:07:04  34  ,hh
23:07:04  35  ,d
23:07:04  36  ,w
23:07:04  37  ,mpm
23:07:04  38  ,mph
23:07:04  39  FROM stk12svmspy
23:07:04  40  -- Guard against divide by 0:
23:07:04  41  WHERE clse > 0
23:07:04  42  ORDER BY ydate
23:07:04  43  /

Table created.

Elapsed: 00:00:00.23
23:07:04 SQL> 
23:07:04 SQL> -- rpt
23:07:04 SQL> 
23:07:04 SQL> SELECT
23:07:04   2  tkr
23:07:04   3  ,trend
23:07:04   4  ,gatt
23:07:04   5  ,COUNT(tkr)
23:07:04   6  ,AVG(g1)
23:07:04   7  FROM stk14svmspy
23:07:04   8  GROUP BY tkr,trend,gatt
23:07:04   9  ORDER BY tkr,trend,gatt
23:07:04  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AAPL		-1 nup	     1310 -2.5581546
AAPL		-1 up	     1538 12.0754963
AAPL		-1	       13
AAPL		 1 nup	     1711 -3.1622191
AAPL		 1 up	     1123 3.73747199
AAPL		 1	      311

6 rows selected.

Elapsed: 00:00:00.01
23:07:04 SQL> 
23:07:04 SQL> -- Derive NTILE based params:
23:07:04 SQL> 
23:07:04 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.11
23:07:04 SQL> CREATE TABLE stk16svmspy COMPRESS AS
23:07:04   2  SELECT
23:07:04   3  tkr
23:07:04   4  ,ydate
23:07:04   5  ,tkrdate
23:07:04   6  ,clse
23:07:04   7  ,g1
23:07:04   8  ,gatt
23:07:04   9  ,gattn
23:07:04  10  ,trend
23:07:04  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
23:07:04  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
23:07:04  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
23:07:04  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
23:07:04  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
23:07:04  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
23:07:04  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
23:07:04  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
23:07:04  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
23:07:04  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
23:07:04  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
23:07:04  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
23:07:04  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
23:07:04  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
23:07:04  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
23:07:04  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
23:07:04  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
23:07:04  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
23:07:04  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
23:07:04  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
23:07:04  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
23:07:04  32  ,hh  att21
23:07:04  33  ,d   att22
23:07:04  34  ,w   att23
23:07:04  35  ,mpm att24
23:07:04  36  ,mph att25
23:07:04  37  ,trend att26
23:07:04  38  FROM stk14svmspy
23:07:04  39  ORDER BY ydate
23:07:04  40  /

Table created.

Elapsed: 00:00:00.80
23:07:05 SQL> 
23:07:05 SQL> -- rpt
23:07:05 SQL> 
23:07:05 SQL> SELECT
23:07:05   2  tkr
23:07:05   3  ,trend
23:07:05   4  ,gatt
23:07:05   5  ,COUNT(tkr)
23:07:05   6  ,AVG(g1)
23:07:05   7  FROM stk16svmspy
23:07:05   8  GROUP BY tkr,trend,gatt
23:07:05   9  ORDER BY tkr,trend,gatt
23:07:05  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AAPL		-1 nup	     1310 -2.5581546
AAPL		-1 up	     1538 12.0754963
AAPL		-1	       13
AAPL		 1 nup	     1711 -3.1622191
AAPL		 1 up	     1123 3.73747199
AAPL		 1	      311

6 rows selected.

Elapsed: 00:00:00.01
23:07:05 SQL> 
23:07:05 SQL> -- Comment out feedback related syntax:
23:07:05 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
23:07:05 SQL> -- SELECT
23:07:05 SQL> -- m.tkr
23:07:05 SQL> -- ,m.ydate
23:07:05 SQL> -- ,m.tkrdate
23:07:05 SQL> -- ,l.score score_long
23:07:05 SQL> -- ,s.score score_short
23:07:05 SQL> -- ,m.g1
23:07:05 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
23:07:05 SQL> -- WHERE l.targ='gatt'
23:07:05 SQL> -- AND	 s.targ='gattn'
23:07:05 SQL> -- AND l.tkrdate = s.tkrdate
23:07:05 SQL> -- AND l.tkrdate = m.tkrdate
23:07:05 SQL> -- -- Speed things up:
23:07:05 SQL> -- AND l.tkr = '&1'
23:07:05 SQL> -- AND s.tkr = '&1'
23:07:05 SQL> -- /
23:07:05 SQL> --
23:07:05 SQL> -- DROP TABLE score_corr_tkr;
23:07:05 SQL> --
23:07:05 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
23:07:05 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
23:07:05 SQL> -- (
23:07:05 SQL> --   SELECT
23:07:05 SQL> --   tkrdate
23:07:05 SQL> --   -- Find corr() tween score and g1 over 8 day period:
23:07:05 SQL> --   ,CORR((score_long - score_short),g1)
23:07:05 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
23:07:05 SQL> --   FROM sc12tkr
23:07:05 SQL> -- )
23:07:05 SQL> -- GROUP BY tkrdate
23:07:05 SQL> -- /
23:07:05 SQL> 
23:07:05 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
23:07:05 SQL> 
23:07:05 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.05
23:07:05 SQL> 
23:07:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
23:07:05 SQL> 
23:07:05 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
23:07:05   2  SELECT
23:07:05   3  tkr
23:07:05   4  ,ydate
23:07:05   5  ,tkrdate
23:07:05   6  ,trend
23:07:05   7  ,g1
23:07:05   8  ,gatt
23:07:05   9  ,gattn
23:07:05  10  -- Goodness attributes:
23:07:05  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
23:07:05  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
23:07:05  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
23:07:05  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
23:07:05  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
23:07:05  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
23:07:05  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
23:07:05  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
23:07:05  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
23:07:05  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
23:07:05  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
23:07:05  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
23:07:05  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
23:07:05  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
23:07:05  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
23:07:05  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
23:07:05  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
23:07:05  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
23:07:05  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
23:07:05  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
23:07:05  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
23:07:05  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
23:07:05  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
23:07:05  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
23:07:05  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
23:07:05  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
23:07:05  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
23:07:05  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
23:07:05  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
23:07:05  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
23:07:05  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
23:07:05  42  FROM stk16svmspy
23:07:05  43  /

Table created.

Elapsed: 00:00:01.10
23:07:06 SQL> 
23:07:06 SQL> -- rpt
23:07:06 SQL> 
23:07:06 SQL> SELECT
23:07:06   2  tkr
23:07:06   3  ,trend
23:07:06   4  ,gatt
23:07:06   5  ,COUNT(tkr)
23:07:06   6  ,AVG(g1)
23:07:06   7  FROM stk_ms_svmspy
23:07:06   8  GROUP BY tkr,trend,gatt
23:07:06   9  ORDER BY tkr,trend,gatt
23:07:06  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AAPL		-1 nup	     1310 -2.5581546
AAPL		-1 up	     1538 12.0754963
AAPL		-1	       13
AAPL		 1 nup	     1711 -3.1622191
AAPL		 1 up	     1123 3.73747199
AAPL		 1	      311

6 rows selected.

Elapsed: 00:00:00.02
23:07:06 SQL> 
23:07:06 SQL> SELECT
23:07:06   2  tkr
23:07:06   3  ,0+TO_CHAR(ydate,'D')daynum
23:07:06   4  ,COUNT(tkr)
23:07:06   5  ,MIN(ydate),MAX(ydate)
23:07:06   6  FROM stk_ms_svmspy
23:07:06   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
23:07:06   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
23:07:06   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
AAPL		 2	 1092 2011-01-10 14:30:00 2011-04-25 19:55:00
AAPL		 3	 1248 2011-01-04 14:30:00 2011-04-19 19:55:00
AAPL		 4	 1248 2011-01-05 14:30:00 2011-04-20 19:55:00
AAPL		 5	 1248 2011-01-06 14:30:00 2011-04-21 19:55:00
AAPL		 6	 1170 2011-01-07 14:30:00 2011-04-15 19:55:00

Elapsed: 00:00:00.01
23:07:06 SQL> 
23:07:06 SQL> -- exit
23:07:06 SQL> @stk10svmd.sql '&1'
23:07:06 SQL> --
23:07:06 SQL> -- stk10svmd.sql
23:07:06 SQL> --
23:07:06 SQL> 
23:07:06 SQL> -- Creates views and tables for demonstrating SVM.
23:07:06 SQL> -- I need to run this after I run stk10.sql
23:07:06 SQL> 
23:07:06 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.06
23:07:06 SQL> 
23:07:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
23:07:07 SQL> 
23:07:07 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
23:07:07   2  SELECT
23:07:07   3  tkr
23:07:07   4  ,ydate
23:07:07   5  ,tkr||ydate tkrdate
23:07:07   6  ,clse
23:07:07   7  ,rownum rnum -- acts as t in my time-series
23:07:07   8  -- Derive some attributes from clse.
23:07:07   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
23:07:07  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
23:07:07  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
23:07:07  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
23:07:07  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
23:07:07  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
23:07:07  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
23:07:07  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
23:07:07  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
23:07:07  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
23:07:07  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
23:07:07  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
23:07:07  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
23:07:07  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
23:07:07  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
23:07:07  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
23:07:07  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
23:07:07  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
23:07:07  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
23:07:07  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
23:07:07  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
23:07:07  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
23:07:07  31  -- ystk21 created here: svmd/cr_ystk21.sql
23:07:07  32  FROM ystk21
23:07:07  33  WHERE UPPER(tkr)='&1'
23:07:07  34  AND ydate > '1990-01-01'
23:07:07  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
23:07:07  36  ORDER BY ydate
23:07:07  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='AAPL'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='AAPL')

Table created.

Elapsed: 00:00:02.23
23:07:09 SQL> 
23:07:09 SQL> -- rpt
23:07:09 SQL> 
23:07:09 SQL> SELECT
23:07:09   2  tkr
23:07:09   3  ,COUNT(tkr)
23:07:09   4  ,MIN(clse),MAX(clse)
23:07:09   5  ,MIN(avg4),MAX(avg4)
23:07:09   6  ,MIN(ydate),MAX(ydate)
23:07:09   7  FROM stk_svmd10svmspy
23:07:09   8  GROUP BY tkr
23:07:09   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
AAPL		5325	   3.23     353.56	3.284	 350.016 1990-01-02 20:00:00 2011-04-21 20:00:00

Elapsed: 00:00:00.02
23:07:09 SQL> 
23:07:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:07:09 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.05
23:07:09 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
23:07:09   2  SELECT
23:07:09   3  tkr
23:07:09   4  ,ydate
23:07:09   5  ,tkrdate
23:07:09   6  ,clse
23:07:09   7  ,rnum
23:07:09   8  -- g1 is important. I want to predict g1:
23:07:09   9  ,ld - clse g1
23:07:09  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
23:07:09  11  -- I want more attributes from the ones I derived above:
23:07:09  12  -- clse relation to moving-min
23:07:09  13  ,clse-min3  cm3
23:07:09  14  ,clse-min4  cm4
23:07:09  15  ,clse-min5  cm5
23:07:09  16  ,clse-min6  cm6
23:07:09  17  ,clse-min7  cm7
23:07:09  18  ,clse-min8  cm8
23:07:09  19  ,clse-min9  cm9
23:07:09  20  -- clse relation to moving-avg
23:07:09  21  ,clse-avg3  ca3
23:07:09  22  ,clse-avg4  ca4
23:07:09  23  ,clse-avg5  ca5
23:07:09  24  ,clse-avg6  ca6
23:07:09  25  ,clse-avg7  ca7
23:07:09  26  ,clse-avg8  ca8
23:07:09  27  ,clse-avg9  ca9
23:07:09  28  -- clse relation to moving-max
23:07:09  29  ,clse-max3  cx3
23:07:09  30  ,clse-max4  cx4
23:07:09  31  ,clse-max5  cx5
23:07:09  32  ,clse-max6  cx6
23:07:09  33  ,clse-max7  cx7
23:07:09  34  ,clse-max8  cx8
23:07:09  35  ,clse-max9  cx9
23:07:09  36  -- Derive date related attributes:
23:07:09  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:07:09  38  ,0+TO_CHAR(ydate,'D')d
23:07:09  39  ,0+TO_CHAR(ydate,'W')w
23:07:09  40  -- mpm stands for minutes-past-midnight:
23:07:09  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:07:09  42  -- mph stands for minutes-past-hour:
23:07:09  43  ,0+TO_CHAR(ydate,'MI')mph
23:07:09  44  FROM stk_svmd10svmspy
23:07:09  45  ORDER BY ydate
23:07:09  46  /

Table created.

Elapsed: 00:00:00.16
23:07:09 SQL> 
23:07:09 SQL> -- rpt
23:07:09 SQL> 
23:07:09 SQL> SELECT
23:07:09   2  tkr
23:07:09   3  ,COUNT(tkr)
23:07:09   4  ,MIN(clse),MAX(clse)
23:07:09   5  ,MIN(ydate),MAX(ydate)
23:07:09   6  FROM stk_svmd12
23:07:09   7  GROUP BY tkr
23:07:09   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
AAPL		5325	   3.23     353.56 1990-01-02 20:00:00 2011-04-21 20:00:00

Elapsed: 00:00:00.01
23:07:09 SQL> 
23:07:09 SQL> -- Prepare for derivation of NTILE based parameters.
23:07:09 SQL> -- Also derive the "trend" parameter:
23:07:09 SQL> 
23:07:09 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.06
23:07:09 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
23:07:09   2  SELECT
23:07:09   3  tkr
23:07:09   4  ,ydate
23:07:09   5  ,tkrdate
23:07:09   6  ,clse
23:07:09   7  ,g1
23:07:09   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
23:07:09   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
23:07:09  10  ,CASE WHEN trend IS NULL THEN 1
23:07:09  11  	    WHEN trend =0      THEN 1
23:07:09  12  	    ELSE trend END trend
23:07:09  13  ,cm3
23:07:09  14  ,cm4
23:07:09  15  ,cm5
23:07:09  16  ,cm6
23:07:09  17  ,cm7
23:07:09  18  ,cm8
23:07:09  19  ,cm9
23:07:09  20  ,ca3
23:07:09  21  ,ca4
23:07:09  22  ,ca5
23:07:09  23  ,ca6
23:07:09  24  ,ca7
23:07:09  25  ,ca8
23:07:09  26  ,ca9
23:07:09  27  ,cx3
23:07:09  28  ,cx4
23:07:09  29  ,cx5
23:07:09  30  ,cx6
23:07:09  31  ,cx7
23:07:09  32  ,cx8
23:07:09  33  ,cx9
23:07:09  34  ,hh
23:07:09  35  ,d
23:07:09  36  ,w
23:07:09  37  ,mpm
23:07:09  38  ,mph
23:07:09  39  FROM stk_svmd12
23:07:09  40  -- Guard against divide by 0:
23:07:09  41  WHERE clse > 0
23:07:09  42  ORDER BY ydate
23:07:09  43  /

Table created.

Elapsed: 00:00:00.15
23:07:09 SQL> 
23:07:09 SQL> -- rpt
23:07:09 SQL> 
23:07:09 SQL> SELECT
23:07:09   2  tkr
23:07:09   3  ,trend
23:07:09   4  ,gatt
23:07:09   5  ,COUNT(tkr)
23:07:09   6  ,AVG(g1)
23:07:09   7  FROM stk_svmd14
23:07:09   8  GROUP BY tkr,trend,gatt
23:07:09   9  ORDER BY tkr,trend,gatt
23:07:09  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AAPL		  -1 nup       1331 -.80806161
AAPL		  -1 up        1130 .951681416
AAPL		   1 nup       1561 -.64003203
AAPL		   1 up        1302 1.03012289
AAPL		   1		  1

Elapsed: 00:00:00.02
23:07:09 SQL> 
23:07:09 SQL> -- Derive NTILE based params:
23:07:09 SQL> 
23:07:09 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.06
23:07:09 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
23:07:09   2  SELECT
23:07:09   3  tkr
23:07:09   4  ,ydate
23:07:09   5  ,tkrdate
23:07:09   6  ,clse
23:07:09   7  ,g1
23:07:09   8  ,gatt
23:07:09   9  ,gattn
23:07:09  10  ,trend
23:07:09  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
23:07:09  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
23:07:09  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
23:07:09  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
23:07:09  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
23:07:09  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
23:07:09  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
23:07:09  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
23:07:09  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
23:07:09  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
23:07:09  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
23:07:09  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
23:07:09  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
23:07:09  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
23:07:09  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
23:07:09  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
23:07:09  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
23:07:09  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
23:07:09  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
23:07:09  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
23:07:09  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
23:07:09  32  ,hh  att21
23:07:09  33  ,d   att22
23:07:09  34  ,w   att23
23:07:09  35  ,mpm att24
23:07:09  36  ,mph att25
23:07:09  37  ,trend att26
23:07:09  38  FROM stk_svmd14
23:07:09  39  ORDER BY ydate
23:07:09  40  /

Table created.

Elapsed: 00:00:00.59
23:07:10 SQL> 
23:07:10 SQL> -- rpt
23:07:10 SQL> 
23:07:10 SQL> SELECT
23:07:10   2  tkr
23:07:10   3  ,trend
23:07:10   4  ,gatt
23:07:10   5  ,COUNT(tkr)
23:07:10   6  ,AVG(g1)
23:07:10   7  FROM stk_svmd16
23:07:10   8  GROUP BY tkr,trend,gatt
23:07:10   9  ORDER BY tkr,trend,gatt
23:07:10  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AAPL		  -1 nup       1331 -.80806161
AAPL		  -1 up        1130 .951681416
AAPL		   1 nup       1561 -.64003203
AAPL		   1 up        1302 1.03012289
AAPL		   1		  1

Elapsed: 00:00:00.01
23:07:10 SQL> 
23:07:10 SQL> -- Comment out feedback related syntax:
23:07:10 SQL> 
23:07:10 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
23:07:10 SQL> -- SELECT
23:07:10 SQL> -- m.tkr
23:07:10 SQL> -- ,m.ydate
23:07:10 SQL> -- ,m.tkrdate
23:07:10 SQL> -- ,l.score score_long
23:07:10 SQL> -- ,s.score score_short
23:07:10 SQL> -- ,m.g1
23:07:10 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
23:07:10 SQL> -- WHERE l.targ='gatt'
23:07:10 SQL> -- AND	 s.targ='gattn'
23:07:10 SQL> -- AND l.tkrdate = s.tkrdate
23:07:10 SQL> -- AND l.tkrdate = m.tkrdate
23:07:10 SQL> -- -- Speed things up:
23:07:10 SQL> -- AND l.tkr = '&1'
23:07:10 SQL> -- AND s.tkr = '&1'
23:07:10 SQL> -- /
23:07:10 SQL> --
23:07:10 SQL> -- DROP TABLE score_corr_tkr;
23:07:10 SQL> --
23:07:10 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
23:07:10 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
23:07:10 SQL> -- (
23:07:10 SQL> --   SELECT
23:07:10 SQL> --   tkrdate
23:07:10 SQL> --   -- Find corr() tween score and g1 over 8 day period:
23:07:10 SQL> --   ,CORR((score_long - score_short),g1)
23:07:10 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
23:07:10 SQL> --   FROM sc12tkr
23:07:10 SQL> -- )
23:07:10 SQL> -- GROUP BY tkrdate
23:07:10 SQL> -- /
23:07:10 SQL> 
23:07:10 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
23:07:10 SQL> 
23:07:10 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.06
23:07:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.25
23:07:10 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
23:07:10   2  SELECT
23:07:10   3  tkr
23:07:10   4  ,ydate
23:07:10   5  ,tkrdate
23:07:10   6  ,trend
23:07:10   7  ,g1
23:07:10   8  ,gatt
23:07:10   9  ,gattn
23:07:10  10  -- Goodness attributes:
23:07:10  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
23:07:10  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
23:07:10  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
23:07:10  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
23:07:10  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
23:07:10  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
23:07:10  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
23:07:10  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
23:07:10  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
23:07:10  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
23:07:10  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
23:07:10  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
23:07:10  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
23:07:10  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
23:07:10  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
23:07:10  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
23:07:10  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
23:07:10  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
23:07:10  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
23:07:10  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
23:07:10  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
23:07:10  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
23:07:10  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
23:07:10  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
23:07:10  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
23:07:10  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
23:07:10  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
23:07:10  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
23:07:10  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
23:07:10  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
23:07:10  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
23:07:10  42  FROM stk_svmd16
23:07:10  43  /

Table created.

Elapsed: 00:00:00.97
23:07:11 SQL> 
23:07:11 SQL> -- rpt
23:07:11 SQL> 
23:07:11 SQL> SELECT
23:07:11   2  tkr
23:07:11   3  ,trend
23:07:11   4  ,gatt
23:07:11   5  ,COUNT(tkr)
23:07:11   6  ,AVG(g1)
23:07:11   7  FROM stk_ms_svmd_svmspy
23:07:11   8  GROUP BY tkr,trend,gatt
23:07:11   9  ORDER BY tkr,trend,gatt
23:07:11  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AAPL		  -1 nup       1331 -.80806161
AAPL		  -1 up        1130 .951681416
AAPL		   1 nup       1561 -.64003203
AAPL		   1 up        1302 1.03012289
AAPL		   1		  1

Elapsed: 00:00:00.01
23:07:11 SQL> 
23:07:11 SQL> SELECT
23:07:11   2  tkr
23:07:11   3  ,COUNT(tkr)
23:07:11   4  ,MIN(ydate),MAX(ydate)
23:07:11   5  FROM stk_ms_svmd_svmspy
23:07:11   6  GROUP BY tkr
23:07:11   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
AAPL		5325 1990-01-02 20:00:00 2011-04-21 20:00:00

Elapsed: 00:00:00.01
23:07:11 SQL> 
23:07:11 SQL> -- exit
23:07:11 SQL> 
23:07:11 SQL> 
23:07:11 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.07
23:07:11 SQL> 
23:07:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.06
23:07:11 SQL> 
23:07:11 SQL> CREATE TABLE stk_ms_u COMPRESS AS
23:07:11   2  SELECT * FROM stk_ms_svmspy
23:07:11   3  UNION
23:07:11   4  SELECT * FROM stk_ms_svmd_svmspy
23:07:11   5  /

Table created.

Elapsed: 00:00:00.26
23:07:12 SQL> 
23:07:12 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
