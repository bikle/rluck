
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 2 08:43:06 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:43:06 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
08:43:06 SQL> 08:43:06 SQL> --
08:43:06 SQL> -- stk10.sql
08:43:06 SQL> --
08:43:06 SQL> 
08:43:06 SQL> -- Creates views and tables for demonstrating SVM.
08:43:06 SQL> 
08:43:06 SQL> CREATE OR REPLACE VIEW stk10 AS
08:43:06   2  SELECT
08:43:06   3  tkr
08:43:06   4  ,ydate
08:43:06   5  ,tkr||ydate tkrdate
08:43:06   6  ,clse
08:43:06   7  ,rownum rnum -- acts as t in my time-series
08:43:06   8  -- Derive some attributes from clse.
08:43:06   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
08:43:06  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
08:43:06  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:43:06  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
08:43:06  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:43:06  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
08:43:06  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:43:06  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
08:43:06  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
08:43:06  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:43:06  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
08:43:06  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:43:06  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
08:43:06  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:43:06  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
08:43:06  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
08:43:06  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:43:06  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
08:43:06  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:43:06  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
08:43:06  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:43:06  30  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
08:43:06  31  FROM dukas5min_stk WHERE UPPER(tkr)='&1'
08:43:06  32  ORDER BY ydate
08:43:06  33  /
old  31: FROM dukas5min_stk WHERE UPPER(tkr)='&1'
new  31: FROM dukas5min_stk WHERE UPPER(tkr)='QQQQ'

View created.

Elapsed: 00:00:00.05
08:43:06 SQL> 
08:43:06 SQL> -- rpt
08:43:06 SQL> 
08:43:06 SQL> SELECT
08:43:06   2  tkr
08:43:06   3  ,COUNT(tkr)
08:43:06   4  ,MIN(clse),MAX(clse)
08:43:06   5  ,MIN(avg4),MAX(avg4)
08:43:06   6  ,MIN(ydate),MAX(ydate)
08:43:06   7  FROM stk10
08:43:06   8  GROUP BY tkr
08:43:06   9  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
-------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
QQQQ	      23819	  40.7	    54.95 40.9803061 54.8723469 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.70
08:43:07 SQL> 
08:43:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:43:07 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.16
08:43:07 SQL> CREATE TABLE stk12 COMPRESS AS
08:43:07   2  SELECT
08:43:07   3  tkr
08:43:07   4  ,ydate
08:43:07   5  ,tkrdate
08:43:07   6  ,clse
08:43:07   7  ,rnum
08:43:07   8  -- g4 is important. I want to predict g4:
08:43:07   9  ,ld4 - clse g4
08:43:07  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
08:43:07  11  -- I want more attributes from the ones I derived above:
08:43:07  12  -- clse relation to moving-min
08:43:07  13  ,clse-min2  cm2
08:43:07  14  ,clse-min3  cm3
08:43:07  15  ,clse-min4  cm4
08:43:07  16  ,clse-min5  cm5
08:43:07  17  ,clse-min6  cm6
08:43:07  18  ,clse-min7  cm7
08:43:07  19  ,clse-min8  cm8
08:43:07  20  -- clse relation to moving-avg
08:43:07  21  ,clse-avg2  ca2
08:43:07  22  ,clse-avg3  ca3
08:43:07  23  ,clse-avg4  ca4
08:43:07  24  ,clse-avg5  ca5
08:43:07  25  ,clse-avg6  ca6
08:43:07  26  ,clse-avg7  ca7
08:43:07  27  ,clse-avg8  ca8
08:43:07  28  -- clse relation to moving-max
08:43:07  29  ,clse-max2  cx2
08:43:07  30  ,clse-max3  cx3
08:43:07  31  ,clse-max4  cx4
08:43:07  32  ,clse-max5  cx5
08:43:07  33  ,clse-max6  cx6
08:43:07  34  ,clse-max7  cx7
08:43:07  35  ,clse-max8  cx8
08:43:07  36  -- Derive date related attributes:
08:43:07  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:43:07  38  ,0+TO_CHAR(ydate,'D')d
08:43:07  39  ,0+TO_CHAR(ydate,'W')w
08:43:07  40  -- mpm stands for minutes-past-midnight:
08:43:07  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:43:07  42  -- mph stands for minutes-past-hour:
08:43:07  43  ,0+TO_CHAR(ydate,'MI')mph
08:43:07  44  FROM stk10
08:43:07  45  ORDER BY ydate
08:43:07  46  /

Table created.

Elapsed: 00:00:01.41
08:43:09 SQL> 
08:43:09 SQL> -- rpt
08:43:09 SQL> 
08:43:09 SQL> SELECT
08:43:09   2  tkr
08:43:09   3  ,COUNT(tkr)
08:43:09   4  ,MIN(clse),MAX(clse)
08:43:09   5  ,MIN(ydate),MAX(ydate)
08:43:09   6  FROM stk12
08:43:09   7  GROUP BY tkr
08:43:09   8  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
-------- ---------- ---------- ---------- ------------------- -------------------
QQQQ	      23819	  40.7	    54.95 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.04
08:43:09 SQL> 
08:43:09 SQL> -- Prepare for derivation of NTILE based parameters.
08:43:09 SQL> -- Also derive the "trend" parameter:
08:43:09 SQL> 
08:43:09 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.21
08:43:09 SQL> CREATE TABLE stk14 COMPRESS AS
08:43:09   2  SELECT
08:43:09   3  tkr
08:43:09   4  ,ydate
08:43:09   5  ,tkrdate
08:43:09   6  ,clse
08:43:09   7  ,g4
08:43:09   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.30/120 THEN 'up' ELSE 'nup' END gatt
08:43:09   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.30/120 THEN 'up' ELSE 'nup' END gattn
08:43:09  10  ,CASE WHEN trend IS NULL THEN 1
08:43:09  11  	    WHEN trend =0      THEN 1
08:43:09  12  	    ELSE trend END trend
08:43:09  13  ,cm2
08:43:09  14  ,cm3
08:43:09  15  ,cm4
08:43:09  16  ,cm5
08:43:09  17  ,cm6
08:43:09  18  ,cm7
08:43:09  19  ,cm8
08:43:09  20  ,ca2
08:43:09  21  ,ca3
08:43:09  22  ,ca4
08:43:09  23  ,ca5
08:43:09  24  ,ca6
08:43:09  25  ,ca7
08:43:09  26  ,ca8
08:43:09  27  ,cx2
08:43:09  28  ,cx3
08:43:09  29  ,cx4
08:43:09  30  ,cx5
08:43:09  31  ,cx6
08:43:09  32  ,cx7
08:43:09  33  ,cx8
08:43:09  34  ,hh
08:43:09  35  ,d
08:43:09  36  ,w
08:43:09  37  ,mpm
08:43:09  38  ,mph
08:43:09  39  FROM stk12
08:43:09  40  -- Guard against divide by 0:
08:43:09  41  WHERE clse > 0
08:43:09  42  ORDER BY ydate
08:43:09  43  /

Table created.

Elapsed: 00:00:00.31
08:43:09 SQL> 
08:43:09 SQL> -- rpt
08:43:09 SQL> 
08:43:09 SQL> SELECT
08:43:09   2  tkr
08:43:09   3  ,trend
08:43:09   4  ,gatt
08:43:09   5  ,COUNT(tkr)
08:43:09   6  ,AVG(g4)
08:43:09   7  FROM stk14
08:43:09   8  GROUP BY tkr,trend,gatt
08:43:09   9  ORDER BY tkr,trend,gatt
08:43:09  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
QQQQ		 -1 nup       6012 -.22732868
QQQQ		 -1 up	      4393 .438495333
QQQQ		 -1		22
QQQQ		  1 nup       8514 -.19122563
QQQQ		  1 up	      4852 .345580173
QQQQ		  1		26

6 rows selected.

Elapsed: 00:00:00.04
08:43:09 SQL> 
08:43:09 SQL> -- Derive NTILE based params:
08:43:09 SQL> 
08:43:09 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.13
08:43:09 SQL> CREATE TABLE stk16 COMPRESS AS
08:43:09   2  SELECT
08:43:09   3  tkr
08:43:09   4  ,ydate
08:43:09   5  ,tkrdate
08:43:09   6  ,clse
08:43:09   7  ,g4
08:43:09   8  ,gatt
08:43:09   9  ,gattn
08:43:09  10  ,trend
08:43:09  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
08:43:09  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
08:43:09  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
08:43:09  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
08:43:09  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
08:43:09  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
08:43:09  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
08:43:09  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
08:43:09  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
08:43:09  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
08:43:09  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
08:43:09  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
08:43:09  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
08:43:09  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
08:43:09  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
08:43:09  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
08:43:09  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
08:43:09  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
08:43:09  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
08:43:09  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
08:43:09  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
08:43:09  32  ,hh  att21
08:43:09  33  ,d   att22
08:43:09  34  ,w   att23
08:43:09  35  ,mpm att24
08:43:09  36  ,mph att25
08:43:09  37  ,trend att26
08:43:09  38  FROM stk14
08:43:09  39  ORDER BY ydate
08:43:09  40  /

Table created.

Elapsed: 00:00:02.68
08:43:12 SQL> 
08:43:12 SQL> -- rpt
08:43:12 SQL> 
08:43:12 SQL> SELECT
08:43:12   2  tkr
08:43:12   3  ,trend
08:43:12   4  ,gatt
08:43:12   5  ,COUNT(tkr)
08:43:12   6  ,AVG(g4)
08:43:12   7  FROM stk16
08:43:12   8  GROUP BY tkr,trend,gatt
08:43:12   9  ORDER BY tkr,trend,gatt
08:43:12  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
QQQQ		 -1 nup       6012 -.22732868
QQQQ		 -1 up	      4393 .438495333
QQQQ		 -1		22
QQQQ		  1 nup       8514 -.19122563
QQQQ		  1 up	      4852 .345580173
QQQQ		  1		26

6 rows selected.

Elapsed: 00:00:00.03
08:43:12 SQL> 
08:43:12 SQL> -- Now I derive goodness attributes:
08:43:12 SQL> 
08:43:12 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.16
08:43:12 SQL> CREATE TABLE stk_ms COMPRESS AS
08:43:12   2  SELECT
08:43:12   3  tkr
08:43:12   4  ,ydate
08:43:12   5  ,tkrdate
08:43:12   6  ,trend
08:43:12   7  ,g4
08:43:12   8  ,gatt
08:43:12   9  ,gattn
08:43:12  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
08:43:12  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
08:43:12  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
08:43:12  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
08:43:12  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
08:43:12  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
08:43:12  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
08:43:12  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
08:43:12  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
08:43:12  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
08:43:12  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
08:43:12  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
08:43:12  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
08:43:12  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
08:43:12  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
08:43:12  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
08:43:12  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
08:43:12  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
08:43:12  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
08:43:12  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
08:43:12  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
08:43:12  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
08:43:12  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
08:43:12  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
08:43:12  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
08:43:12  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
08:43:12  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
08:43:12  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
08:43:12  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
08:43:12  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
08:43:12  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
08:43:12  41  FROM stk16
08:43:12  42  /

Table created.

Elapsed: 00:00:03.73
08:43:16 SQL> 
08:43:16 SQL> -- rpt
08:43:16 SQL> 
08:43:16 SQL> SELECT
08:43:16   2  tkr
08:43:16   3  ,trend
08:43:16   4  ,gatt
08:43:16   5  ,COUNT(tkr)
08:43:16   6  ,AVG(g4)
08:43:16   7  FROM stk_ms
08:43:16   8  GROUP BY tkr,trend,gatt
08:43:16   9  ORDER BY tkr,trend,gatt
08:43:16  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
QQQQ		 -1 nup       6012 -.22732868
QQQQ		 -1 up	      4393 .438495333
QQQQ		 -1		22
QQQQ		  1 nup       8514 -.19122563
QQQQ		  1 up	      4852 .345580173
QQQQ		  1		26

6 rows selected.

Elapsed: 00:00:00.03
08:43:16 SQL> 
08:43:16 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
