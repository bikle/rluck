
SQL*Plus: Release 11.2.0.1.0 Production on Sun Apr 3 06:11:26 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:11:27 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:11:27 SQL> 
06:11:27 SQL> 06:11:27 SQL> --
06:11:27 SQL> -- stk10u.sql
06:11:27 SQL> --
06:11:27 SQL> 
06:11:27 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
06:11:27 SQL> 
06:11:27 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
06:11:27 SQL> @stk10.sql     '&1'
06:11:27 SQL> --
06:11:27 SQL> -- stk10.sql
06:11:27 SQL> --
06:11:27 SQL> 
06:11:27 SQL> -- Creates views and tables for demonstrating SVM.
06:11:27 SQL> 
06:11:27 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:01.69
06:11:28 SQL> 
06:11:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.62
06:11:29 SQL> 
06:11:29 SQL> CREATE TABLE stk10svmspy COMPRESS AS
06:11:29   2  SELECT
06:11:29   3  tkr
06:11:29   4  ,ydate
06:11:29   5  ,tkr||ydate tkrdate
06:11:29   6  ,clse
06:11:29   7  ,clse2
06:11:29   8  ,rownum rnum -- acts as t in my time-series
06:11:29   9  -- g1 is important. I want to predict g1:
06:11:29  10  ,gain1day g1
06:11:29  11  -- Derive some attributes from clse.
06:11:29  12  -- Each row spans 5 minutes.
06:11:29  13  -- The number of rows in 1 day is 24*60/5.
06:11:29  14  -- I want the aggregations to span from 3 days to 9 days:
06:11:29  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
06:11:29  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
06:11:29  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
06:11:29  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
06:11:29  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
06:11:29  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
06:11:29  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
06:11:29  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
06:11:29  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
06:11:29  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
06:11:29  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
06:11:29  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
06:11:29  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
06:11:29  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
06:11:29  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
06:11:29  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
06:11:29  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
06:11:29  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
06:11:29  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
06:11:29  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
06:11:29  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
06:11:29  36  FROM di5min_stk_c2
06:11:29  37  WHERE UPPER(tkr)='&1'
06:11:29  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
06:11:29  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
06:11:29  40  ORDER BY ydate
06:11:29  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='IOC'

Table created.

Elapsed: 00:00:03.20
06:11:32 SQL> 
06:11:32 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
06:11:32 SQL> 
06:11:32 SQL> -- rpt
06:11:32 SQL> 
06:11:32 SQL> SELECT
06:11:32   2  tkr
06:11:32   3  ,COUNT(tkr)ccount
06:11:32   4  ,MIN(clse)mnclse,MAX(clse)mxclse
06:11:32   5  -- ,MIN(avg4),MAX(avg4)
06:11:32   6  ,MIN(ydate),MAX(ydate)
06:11:32   7  ,MIN(g1)
06:11:32   8  ,MAX(g1)
06:11:32   9  FROM stk10svmspy
06:11:32  10  GROUP BY tkr
06:11:32  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
IOC	      4836	66.18	   81.72 2011-01-04 14:30:00 2011-04-01 19:55:00      -7.55	  4.58

Elapsed: 00:00:00.02
06:11:32 SQL> 
06:11:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:11:32 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.08
06:11:33 SQL> CREATE TABLE stk12svmspy COMPRESS AS
06:11:33   2  SELECT
06:11:33   3  tkr
06:11:33   4  ,ydate
06:11:33   5  ,tkrdate
06:11:33   6  ,clse
06:11:33   7  ,rnum
06:11:33   8  ,g1
06:11:33   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:11:33  10  -- I want more attributes from the ones I derived above:
06:11:33  11  -- clse relation to moving-min
06:11:33  12  ,clse-min3  cm3
06:11:33  13  ,clse-min4  cm4
06:11:33  14  ,clse-min5  cm5
06:11:33  15  ,clse-min6  cm6
06:11:33  16  ,clse-min7  cm7
06:11:33  17  ,clse-min8  cm8
06:11:33  18  ,clse-min9  cm9
06:11:33  19  -- clse relation to moving-avg
06:11:33  20  ,clse-avg3  ca3
06:11:33  21  ,clse-avg4  ca4
06:11:33  22  ,clse-avg5  ca5
06:11:33  23  ,clse-avg6  ca6
06:11:33  24  ,clse-avg7  ca7
06:11:33  25  ,clse-avg8  ca8
06:11:33  26  ,clse-avg9  ca9
06:11:33  27  -- clse relation to moving-max
06:11:33  28  ,clse-max3  cx3
06:11:33  29  ,clse-max4  cx4
06:11:33  30  ,clse-max5  cx5
06:11:33  31  ,clse-max6  cx6
06:11:33  32  ,clse-max7  cx7
06:11:33  33  ,clse-max8  cx8
06:11:33  34  ,clse-max9  cx9
06:11:33  35  -- Derive date related attributes:
06:11:33  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:11:33  37  ,0+TO_CHAR(ydate,'D')d
06:11:33  38  ,0+TO_CHAR(ydate,'W')w
06:11:33  39  -- mpm stands for minutes-past-midnight:
06:11:33  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:11:33  41  -- mph stands for minutes-past-hour:
06:11:33  42  ,0+TO_CHAR(ydate,'MI')mph
06:11:33  43  FROM stk10svmspy
06:11:33  44  ORDER BY ydate
06:11:33  45  /

Table created.

Elapsed: 00:00:00.14
06:11:33 SQL> 
06:11:33 SQL> -- rpt
06:11:33 SQL> 
06:11:33 SQL> SELECT
06:11:33   2  tkr
06:11:33   3  ,COUNT(tkr)ccount
06:11:33   4  ,MIN(clse)mnclse,MAX(clse)mxclse
06:11:33   5  -- ,MIN(avg4),MAX(avg4)
06:11:33   6  ,MIN(ydate),MAX(ydate)
06:11:33   7  ,MIN(g1)
06:11:33   8  ,AVG(g1)
06:11:33   9  ,MAX(g1)
06:11:33  10  FROM stk12svmspy
06:11:33  11  GROUP BY tkr
06:11:33  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
IOC	      4836	66.18	   81.72 2011-01-04 14:30:00 2011-04-01 19:55:00      -7.55 .006971688	     4.58

Elapsed: 00:00:00.02
06:11:33 SQL> 
06:11:33 SQL> -- Prepare for derivation of NTILE based parameters.
06:11:33 SQL> -- Also derive the "trend" parameter:
06:11:33 SQL> 
06:11:33 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.09
06:11:33 SQL> CREATE TABLE stk14svmspy COMPRESS AS
06:11:33   2  SELECT
06:11:33   3  tkr
06:11:33   4  ,ydate
06:11:33   5  ,tkrdate
06:11:33   6  ,clse
06:11:33   7  ,g1
06:11:33   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
06:11:33   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
06:11:33  10  ,CASE WHEN trend IS NULL THEN 1
06:11:33  11  	    WHEN trend =0      THEN 1
06:11:33  12  	    ELSE trend END trend
06:11:33  13  ,cm3
06:11:33  14  ,cm4
06:11:33  15  ,cm5
06:11:33  16  ,cm6
06:11:33  17  ,cm7
06:11:33  18  ,cm8
06:11:33  19  ,cm9
06:11:33  20  ,ca3
06:11:33  21  ,ca4
06:11:33  22  ,ca5
06:11:33  23  ,ca6
06:11:33  24  ,ca7
06:11:33  25  ,ca8
06:11:33  26  ,ca9
06:11:33  27  ,cx3
06:11:33  28  ,cx4
06:11:33  29  ,cx5
06:11:33  30  ,cx6
06:11:33  31  ,cx7
06:11:33  32  ,cx8
06:11:33  33  ,cx9
06:11:33  34  ,hh
06:11:33  35  ,d
06:11:33  36  ,w
06:11:33  37  ,mpm
06:11:33  38  ,mph
06:11:33  39  FROM stk12svmspy
06:11:33  40  -- Guard against divide by 0:
06:11:33  41  WHERE clse > 0
06:11:33  42  ORDER BY ydate
06:11:33  43  /

Table created.

Elapsed: 00:00:00.12
06:11:33 SQL> 
06:11:33 SQL> -- rpt
06:11:33 SQL> 
06:11:33 SQL> SELECT
06:11:33   2  tkr
06:11:33   3  ,trend
06:11:33   4  ,gatt
06:11:33   5  ,COUNT(tkr)
06:11:33   6  ,AVG(g1)
06:11:33   7  FROM stk14svmspy
06:11:33   8  GROUP BY tkr,trend,gatt
06:11:33   9  ORDER BY tkr,trend,gatt
06:11:33  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
IOC		-1 nup	     1406 -.98867806
IOC		-1 up	     1050 1.41319178
IOC		-1	       38
IOC		 1 nup	     1288 -.88729656
IOC		 1 up	      846 1.27785816
IOC		 1	      208

6 rows selected.

Elapsed: 00:00:00.03
06:11:33 SQL> 
06:11:33 SQL> -- Derive NTILE based params:
06:11:33 SQL> 
06:11:33 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.08
06:11:33 SQL> CREATE TABLE stk16svmspy COMPRESS AS
06:11:33   2  SELECT
06:11:33   3  tkr
06:11:33   4  ,ydate
06:11:33   5  ,tkrdate
06:11:33   6  ,clse
06:11:33   7  ,g1
06:11:33   8  ,gatt
06:11:33   9  ,gattn
06:11:33  10  ,trend
06:11:33  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
06:11:33  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
06:11:33  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
06:11:33  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
06:11:33  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
06:11:33  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
06:11:33  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
06:11:33  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
06:11:33  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
06:11:33  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
06:11:33  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
06:11:33  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
06:11:33  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
06:11:33  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
06:11:33  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
06:11:33  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
06:11:33  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
06:11:33  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
06:11:33  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
06:11:33  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
06:11:33  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
06:11:33  32  ,hh  att21
06:11:33  33  ,d   att22
06:11:33  34  ,w   att23
06:11:33  35  ,mpm att24
06:11:33  36  ,mph att25
06:11:33  37  ,trend att26
06:11:33  38  FROM stk14svmspy
06:11:33  39  ORDER BY ydate
06:11:33  40  /

Table created.

Elapsed: 00:00:00.57
06:11:34 SQL> 
06:11:34 SQL> -- rpt
06:11:34 SQL> 
06:11:34 SQL> SELECT
06:11:34   2  tkr
06:11:34   3  ,trend
06:11:34   4  ,gatt
06:11:34   5  ,COUNT(tkr)
06:11:34   6  ,AVG(g1)
06:11:34   7  FROM stk16svmspy
06:11:34   8  GROUP BY tkr,trend,gatt
06:11:34   9  ORDER BY tkr,trend,gatt
06:11:34  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
IOC		-1 nup	     1406 -.98867806
IOC		-1 up	     1050 1.41319178
IOC		-1	       38
IOC		 1 nup	     1288 -.88729656
IOC		 1 up	      846 1.27785816
IOC		 1	      208

6 rows selected.

Elapsed: 00:00:00.01
06:11:34 SQL> 
06:11:34 SQL> -- Comment out feedback related syntax:
06:11:34 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
06:11:34 SQL> -- SELECT
06:11:34 SQL> -- m.tkr
06:11:34 SQL> -- ,m.ydate
06:11:34 SQL> -- ,m.tkrdate
06:11:34 SQL> -- ,l.score score_long
06:11:34 SQL> -- ,s.score score_short
06:11:34 SQL> -- ,m.g1
06:11:34 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
06:11:34 SQL> -- WHERE l.targ='gatt'
06:11:34 SQL> -- AND	 s.targ='gattn'
06:11:34 SQL> -- AND l.tkrdate = s.tkrdate
06:11:34 SQL> -- AND l.tkrdate = m.tkrdate
06:11:34 SQL> -- -- Speed things up:
06:11:34 SQL> -- AND l.tkr = '&1'
06:11:34 SQL> -- AND s.tkr = '&1'
06:11:34 SQL> -- /
06:11:34 SQL> --
06:11:34 SQL> -- DROP TABLE score_corr_tkr;
06:11:34 SQL> --
06:11:34 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
06:11:34 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
06:11:34 SQL> -- (
06:11:34 SQL> --   SELECT
06:11:34 SQL> --   tkrdate
06:11:34 SQL> --   -- Find corr() tween score and g1 over 8 day period:
06:11:34 SQL> --   ,CORR((score_long - score_short),g1)
06:11:34 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
06:11:34 SQL> --   FROM sc12tkr
06:11:34 SQL> -- )
06:11:34 SQL> -- GROUP BY tkrdate
06:11:34 SQL> -- /
06:11:34 SQL> 
06:11:34 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
06:11:34 SQL> 
06:11:34 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
06:11:34 SQL> 
06:11:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
06:11:34 SQL> 
06:11:34 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
06:11:34   2  SELECT
06:11:34   3  tkr
06:11:34   4  ,ydate
06:11:34   5  ,tkrdate
06:11:34   6  ,trend
06:11:34   7  ,g1
06:11:34   8  ,gatt
06:11:34   9  ,gattn
06:11:34  10  -- Goodness attributes:
06:11:34  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
06:11:34  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
06:11:34  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
06:11:34  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
06:11:34  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
06:11:34  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
06:11:34  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
06:11:34  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
06:11:34  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
06:11:34  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
06:11:34  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
06:11:34  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
06:11:34  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
06:11:34  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
06:11:34  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
06:11:34  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
06:11:34  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
06:11:34  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
06:11:34  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
06:11:34  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
06:11:34  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
06:11:34  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
06:11:34  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
06:11:34  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
06:11:34  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
06:11:34  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
06:11:34  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
06:11:34  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:11:34  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
06:11:34  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
06:11:34  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
06:11:34  42  FROM stk16svmspy
06:11:34  43  /

Table created.

Elapsed: 00:00:00.84
06:11:35 SQL> 
06:11:35 SQL> -- rpt
06:11:35 SQL> 
06:11:35 SQL> SELECT
06:11:35   2  tkr
06:11:35   3  ,trend
06:11:35   4  ,gatt
06:11:35   5  ,COUNT(tkr)
06:11:35   6  ,AVG(g1)
06:11:35   7  FROM stk_ms_svmspy
06:11:35   8  GROUP BY tkr,trend,gatt
06:11:35   9  ORDER BY tkr,trend,gatt
06:11:35  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
IOC		-1 nup	     1406 -.98867806
IOC		-1 up	     1050 1.41319178
IOC		-1	       38
IOC		 1 nup	     1288 -.88729656
IOC		 1 up	      846 1.27785816
IOC		 1	      208

6 rows selected.

Elapsed: 00:00:00.01
06:11:35 SQL> 
06:11:35 SQL> SELECT
06:11:35   2  tkr
06:11:35   3  ,0+TO_CHAR(ydate,'D')daynum
06:11:35   4  ,COUNT(tkr)
06:11:35   5  ,MIN(ydate),MAX(ydate)
06:11:35   6  FROM stk_ms_svmspy
06:11:35   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
06:11:35   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
06:11:35   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
IOC		 2	  780 2011-01-10 14:30:00 2011-03-28 19:55:00
IOC		 3	 1014 2011-01-04 14:30:00 2011-03-29 19:55:00
IOC		 4	 1014 2011-01-05 14:30:00 2011-03-30 19:55:00
IOC		 5	 1014 2011-01-06 14:30:00 2011-03-31 19:55:00
IOC		 6	 1014 2011-01-07 14:30:00 2011-04-01 19:55:00

Elapsed: 00:00:00.01
06:11:35 SQL> 
06:11:35 SQL> -- exit
06:11:35 SQL> @stk10svmd.sql '&1'
06:11:35 SQL> --
06:11:35 SQL> -- stk10svmd.sql
06:11:35 SQL> --
06:11:35 SQL> 
06:11:35 SQL> -- Creates views and tables for demonstrating SVM.
06:11:35 SQL> -- I need to run this after I run stk10.sql
06:11:35 SQL> 
06:11:35 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.07
06:11:35 SQL> 
06:11:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
06:11:35 SQL> 
06:11:35 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
06:11:35   2  SELECT
06:11:35   3  tkr
06:11:35   4  ,ydate
06:11:35   5  ,tkr||ydate tkrdate
06:11:35   6  ,clse
06:11:35   7  ,rownum rnum -- acts as t in my time-series
06:11:35   8  -- Derive some attributes from clse.
06:11:35   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
06:11:35  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
06:11:35  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
06:11:35  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
06:11:35  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
06:11:35  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
06:11:35  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
06:11:35  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
06:11:35  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
06:11:35  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
06:11:35  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
06:11:35  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
06:11:35  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
06:11:35  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
06:11:35  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
06:11:35  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
06:11:35  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
06:11:35  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
06:11:35  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
06:11:35  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
06:11:35  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
06:11:35  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
06:11:35  31  -- ystk21 created here: svmd/cr_ystk21.sql
06:11:35  32  FROM ystk21
06:11:35  33  WHERE UPPER(tkr)='&1'
06:11:35  34  AND ydate > '1990-01-01'
06:11:35  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
06:11:35  36  ORDER BY ydate
06:11:35  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='IOC'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='IOC')

Table created.

Elapsed: 00:00:02.23
06:11:37 SQL> 
06:11:37 SQL> -- rpt
06:11:37 SQL> 
06:11:37 SQL> SELECT
06:11:37   2  tkr
06:11:37   3  ,COUNT(tkr)
06:11:37   4  ,MIN(clse),MAX(clse)
06:11:37   5  ,MIN(avg4),MAX(avg4)
06:11:37   6  ,MIN(ydate),MAX(ydate)
06:11:37   7  FROM stk_svmd10svmspy
06:11:37   8  GROUP BY tkr
06:11:37   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
IOC		1655	    9.3       83.7	9.924	  82.778 2004-09-08 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
06:11:37 SQL> 
06:11:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:11:37 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
06:11:37 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
06:11:37   2  SELECT
06:11:37   3  tkr
06:11:37   4  ,ydate
06:11:37   5  ,tkrdate
06:11:37   6  ,clse
06:11:37   7  ,rnum
06:11:37   8  -- g1 is important. I want to predict g1:
06:11:37   9  ,ld - clse g1
06:11:37  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:11:37  11  -- I want more attributes from the ones I derived above:
06:11:37  12  -- clse relation to moving-min
06:11:37  13  ,clse-min3  cm3
06:11:37  14  ,clse-min4  cm4
06:11:37  15  ,clse-min5  cm5
06:11:37  16  ,clse-min6  cm6
06:11:37  17  ,clse-min7  cm7
06:11:37  18  ,clse-min8  cm8
06:11:37  19  ,clse-min9  cm9
06:11:37  20  -- clse relation to moving-avg
06:11:37  21  ,clse-avg3  ca3
06:11:37  22  ,clse-avg4  ca4
06:11:37  23  ,clse-avg5  ca5
06:11:37  24  ,clse-avg6  ca6
06:11:37  25  ,clse-avg7  ca7
06:11:37  26  ,clse-avg8  ca8
06:11:37  27  ,clse-avg9  ca9
06:11:37  28  -- clse relation to moving-max
06:11:37  29  ,clse-max3  cx3
06:11:37  30  ,clse-max4  cx4
06:11:37  31  ,clse-max5  cx5
06:11:37  32  ,clse-max6  cx6
06:11:37  33  ,clse-max7  cx7
06:11:37  34  ,clse-max8  cx8
06:11:37  35  ,clse-max9  cx9
06:11:37  36  -- Derive date related attributes:
06:11:37  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:11:37  38  ,0+TO_CHAR(ydate,'D')d
06:11:37  39  ,0+TO_CHAR(ydate,'W')w
06:11:37  40  -- mpm stands for minutes-past-midnight:
06:11:37  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:11:37  42  -- mph stands for minutes-past-hour:
06:11:37  43  ,0+TO_CHAR(ydate,'MI')mph
06:11:37  44  FROM stk_svmd10svmspy
06:11:37  45  ORDER BY ydate
06:11:37  46  /

Table created.

Elapsed: 00:00:00.14
06:11:37 SQL> 
06:11:37 SQL> -- rpt
06:11:37 SQL> 
06:11:37 SQL> SELECT
06:11:37   2  tkr
06:11:37   3  ,COUNT(tkr)
06:11:37   4  ,MIN(clse),MAX(clse)
06:11:37   5  ,MIN(ydate),MAX(ydate)
06:11:37   6  FROM stk_svmd12
06:11:37   7  GROUP BY tkr
06:11:37   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
IOC		1655	    9.3       83.7 2004-09-08 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
06:11:37 SQL> 
06:11:37 SQL> -- Prepare for derivation of NTILE based parameters.
06:11:37 SQL> -- Also derive the "trend" parameter:
06:11:37 SQL> 
06:11:37 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.06
06:11:38 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
06:11:38   2  SELECT
06:11:38   3  tkr
06:11:38   4  ,ydate
06:11:38   5  ,tkrdate
06:11:38   6  ,clse
06:11:38   7  ,g1
06:11:38   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
06:11:38   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
06:11:38  10  ,CASE WHEN trend IS NULL THEN 1
06:11:38  11  	    WHEN trend =0      THEN 1
06:11:38  12  	    ELSE trend END trend
06:11:38  13  ,cm3
06:11:38  14  ,cm4
06:11:38  15  ,cm5
06:11:38  16  ,cm6
06:11:38  17  ,cm7
06:11:38  18  ,cm8
06:11:38  19  ,cm9
06:11:38  20  ,ca3
06:11:38  21  ,ca4
06:11:38  22  ,ca5
06:11:38  23  ,ca6
06:11:38  24  ,ca7
06:11:38  25  ,ca8
06:11:38  26  ,ca9
06:11:38  27  ,cx3
06:11:38  28  ,cx4
06:11:38  29  ,cx5
06:11:38  30  ,cx6
06:11:38  31  ,cx7
06:11:38  32  ,cx8
06:11:38  33  ,cx9
06:11:38  34  ,hh
06:11:38  35  ,d
06:11:38  36  ,w
06:11:38  37  ,mpm
06:11:38  38  ,mph
06:11:38  39  FROM stk_svmd12
06:11:38  40  -- Guard against divide by 0:
06:11:38  41  WHERE clse > 0
06:11:38  42  ORDER BY ydate
06:11:38  43  /

Table created.

Elapsed: 00:00:00.09
06:11:38 SQL> 
06:11:38 SQL> -- rpt
06:11:38 SQL> 
06:11:38 SQL> SELECT
06:11:38   2  tkr
06:11:38   3  ,trend
06:11:38   4  ,gatt
06:11:38   5  ,COUNT(tkr)
06:11:38   6  ,AVG(g1)
06:11:38   7  FROM stk_svmd14
06:11:38   8  GROUP BY tkr,trend,gatt
06:11:38   9  ORDER BY tkr,trend,gatt
06:11:38  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
IOC		  -1 nup	466 -.83098712
IOC		  -1 up 	349 1.04355301
IOC		   1 nup	429 -.88829837
IOC		   1 up 	410 1.13185366
IOC		   1		  1

Elapsed: 00:00:00.02
06:11:38 SQL> 
06:11:38 SQL> -- Derive NTILE based params:
06:11:38 SQL> 
06:11:38 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.05
06:11:38 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
06:11:38   2  SELECT
06:11:38   3  tkr
06:11:38   4  ,ydate
06:11:38   5  ,tkrdate
06:11:38   6  ,clse
06:11:38   7  ,g1
06:11:38   8  ,gatt
06:11:38   9  ,gattn
06:11:38  10  ,trend
06:11:38  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
06:11:38  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
06:11:38  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
06:11:38  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
06:11:38  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
06:11:38  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
06:11:38  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
06:11:38  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
06:11:38  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
06:11:38  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
06:11:38  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
06:11:38  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
06:11:38  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
06:11:38  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
06:11:38  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
06:11:38  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
06:11:38  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
06:11:38  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
06:11:38  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
06:11:38  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
06:11:38  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
06:11:38  32  ,hh  att21
06:11:38  33  ,d   att22
06:11:38  34  ,w   att23
06:11:38  35  ,mpm att24
06:11:38  36  ,mph att25
06:11:38  37  ,trend att26
06:11:38  38  FROM stk_svmd14
06:11:38  39  ORDER BY ydate
06:11:38  40  /

Table created.

Elapsed: 00:00:00.20
06:11:38 SQL> 
06:11:38 SQL> -- rpt
06:11:38 SQL> 
06:11:38 SQL> SELECT
06:11:38   2  tkr
06:11:38   3  ,trend
06:11:38   4  ,gatt
06:11:38   5  ,COUNT(tkr)
06:11:38   6  ,AVG(g1)
06:11:38   7  FROM stk_svmd16
06:11:38   8  GROUP BY tkr,trend,gatt
06:11:38   9  ORDER BY tkr,trend,gatt
06:11:38  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
IOC		  -1 nup	466 -.83098712
IOC		  -1 up 	349 1.04355301
IOC		   1 nup	429 -.88829837
IOC		   1 up 	410 1.13185366
IOC		   1		  1

Elapsed: 00:00:00.01
06:11:38 SQL> 
06:11:38 SQL> -- Comment out feedback related syntax:
06:11:38 SQL> 
06:11:38 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
06:11:38 SQL> -- SELECT
06:11:38 SQL> -- m.tkr
06:11:38 SQL> -- ,m.ydate
06:11:38 SQL> -- ,m.tkrdate
06:11:38 SQL> -- ,l.score score_long
06:11:38 SQL> -- ,s.score score_short
06:11:38 SQL> -- ,m.g1
06:11:38 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
06:11:38 SQL> -- WHERE l.targ='gatt'
06:11:38 SQL> -- AND	 s.targ='gattn'
06:11:38 SQL> -- AND l.tkrdate = s.tkrdate
06:11:38 SQL> -- AND l.tkrdate = m.tkrdate
06:11:38 SQL> -- -- Speed things up:
06:11:38 SQL> -- AND l.tkr = '&1'
06:11:38 SQL> -- AND s.tkr = '&1'
06:11:38 SQL> -- /
06:11:38 SQL> --
06:11:38 SQL> -- DROP TABLE score_corr_tkr;
06:11:38 SQL> --
06:11:38 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
06:11:38 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
06:11:38 SQL> -- (
06:11:38 SQL> --   SELECT
06:11:38 SQL> --   tkrdate
06:11:38 SQL> --   -- Find corr() tween score and g1 over 8 day period:
06:11:38 SQL> --   ,CORR((score_long - score_short),g1)
06:11:38 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
06:11:38 SQL> --   FROM sc12tkr
06:11:38 SQL> -- )
06:11:38 SQL> -- GROUP BY tkrdate
06:11:38 SQL> -- /
06:11:38 SQL> 
06:11:38 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
06:11:38 SQL> 
06:11:38 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.06
06:11:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
06:11:38 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
06:11:38   2  SELECT
06:11:38   3  tkr
06:11:38   4  ,ydate
06:11:38   5  ,tkrdate
06:11:38   6  ,trend
06:11:38   7  ,g1
06:11:38   8  ,gatt
06:11:38   9  ,gattn
06:11:38  10  -- Goodness attributes:
06:11:38  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
06:11:38  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
06:11:38  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
06:11:38  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
06:11:38  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
06:11:38  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
06:11:38  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
06:11:38  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
06:11:38  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
06:11:38  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
06:11:38  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
06:11:38  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
06:11:38  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
06:11:38  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
06:11:38  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
06:11:38  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
06:11:38  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
06:11:38  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
06:11:38  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
06:11:38  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
06:11:38  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
06:11:38  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
06:11:38  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
06:11:38  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
06:11:38  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
06:11:38  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
06:11:38  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
06:11:38  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:11:38  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
06:11:38  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
06:11:38  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
06:11:38  42  FROM stk_svmd16
06:11:38  43  /

Table created.

Elapsed: 00:00:00.34
06:11:39 SQL> 
06:11:39 SQL> -- rpt
06:11:39 SQL> 
06:11:39 SQL> SELECT
06:11:39   2  tkr
06:11:39   3  ,trend
06:11:39   4  ,gatt
06:11:39   5  ,COUNT(tkr)
06:11:39   6  ,AVG(g1)
06:11:39   7  FROM stk_ms_svmd_svmspy
06:11:39   8  GROUP BY tkr,trend,gatt
06:11:39   9  ORDER BY tkr,trend,gatt
06:11:39  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
IOC		  -1 nup	466 -.83098712
IOC		  -1 up 	349 1.04355301
IOC		   1 nup	429 -.88829837
IOC		   1 up 	410 1.13185366
IOC		   1		  1

Elapsed: 00:00:00.00
06:11:39 SQL> 
06:11:39 SQL> SELECT
06:11:39   2  tkr
06:11:39   3  ,COUNT(tkr)
06:11:39   4  ,MIN(ydate),MAX(ydate)
06:11:39   5  FROM stk_ms_svmd_svmspy
06:11:39   6  GROUP BY tkr
06:11:39   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
IOC		1655 2004-09-08 21:00:00 2011-04-01 21:00:00

Elapsed: 00:00:00.01
06:11:39 SQL> 
06:11:39 SQL> -- exit
06:11:39 SQL> 
06:11:39 SQL> 
06:11:39 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.06
06:11:39 SQL> 
06:11:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
06:11:39 SQL> 
06:11:39 SQL> CREATE TABLE stk_ms_u COMPRESS AS
06:11:39   2  SELECT * FROM stk_ms_svmspy
06:11:39   3  UNION
06:11:39   4  SELECT * FROM stk_ms_svmd_svmspy
06:11:39   5  /

Table created.

Elapsed: 00:00:00.17
06:11:39 SQL> 
06:11:39 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
