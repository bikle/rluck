
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 14 23:07:54 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:07:54 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:07:54 SQL> ALTER SESSION SET NLS_TERRITORY='AMERICA';

Session altered.

Elapsed: 00:00:00.00
23:07:54 SQL> 23:07:54 SQL> --
23:07:54 SQL> -- stk10.sql
23:07:54 SQL> --
23:07:54 SQL> 
23:07:54 SQL> -- Creates views and tables for demonstrating SVM.
23:07:54 SQL> 
23:07:54 SQL> DROP VIEW stk10;
DROP VIEW stk10
*
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.01
23:07:54 SQL> 
23:07:54 SQL> DROP TABLE stk10;

Table dropped.

Elapsed: 00:00:00.05
23:07:54 SQL> 
23:07:54 SQL> CREATE TABLE stk10 COMPRESS AS
23:07:54   2  SELECT
23:07:54   3  tkr
23:07:54   4  ,ydate
23:07:54   5  ,tkr||ydate tkrdate
23:07:54   6  ,clse
23:07:54   7  ,clse2
23:07:54   8  ,gain1day
23:07:54   9  ,rownum rnum -- acts as t in my time-series
23:07:54  10  -- Derive some attributes from clse.
23:07:54  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
23:07:54  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
23:07:54  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:07:54  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
23:07:54  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:07:54  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
23:07:54  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:07:54  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
23:07:54  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
23:07:54  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:07:54  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
23:07:54  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:07:54  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
23:07:54  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:07:54  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
23:07:54  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
23:07:54  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:07:54  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
23:07:54  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:07:54  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
23:07:54  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:07:54  32  FROM di5min_stk_c2
23:07:54  33  WHERE UPPER(tkr)='&1'
23:07:54  34  AND 0+TO_CHAR(ydate,'D')BETWEEN 1 AND 5
23:07:54  35  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
23:07:54  36  ORDER BY ydate
23:07:54  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='XOM'

Table created.

Elapsed: 00:00:00.05
23:07:54 SQL> 
23:07:54 SQL> ANALYZE TABLE stk10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.03
23:07:54 SQL> 
23:07:54 SQL> -- rpt
23:07:54 SQL> 
23:07:54 SQL> SELECT
23:07:54   2  tkr
23:07:54   3  ,COUNT(tkr)
23:07:54   4  ,MIN(clse),MAX(clse)
23:07:54   5  ,MIN(avg4),MAX(avg4)
23:07:54   6  ,MIN(ydate),MAX(ydate)
23:07:54   7  FROM stk10
23:07:54   8  GROUP BY tkr
23:07:54   9  /

no rows selected

Elapsed: 00:00:00.01
23:07:54 SQL> 
23:07:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:07:54 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.04
23:07:55 SQL> CREATE TABLE stk12 COMPRESS AS
23:07:55   2  SELECT
23:07:55   3  tkr
23:07:55   4  ,ydate
23:07:55   5  ,tkrdate
23:07:55   6  ,clse
23:07:55   7  ,rnum
23:07:55   8  -- g4 is important. I want to predict g4:
23:07:55   9  ,gain1day g4
23:07:55  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
23:07:55  11  -- I want more attributes from the ones I derived above:
23:07:55  12  -- clse relation to moving-min
23:07:55  13  ,clse-min2  cm2
23:07:55  14  ,clse-min3  cm3
23:07:55  15  ,clse-min4  cm4
23:07:55  16  ,clse-min5  cm5
23:07:55  17  ,clse-min6  cm6
23:07:55  18  ,clse-min7  cm7
23:07:55  19  ,clse-min8  cm8
23:07:55  20  -- clse relation to moving-avg
23:07:55  21  ,clse-avg2  ca2
23:07:55  22  ,clse-avg3  ca3
23:07:55  23  ,clse-avg4  ca4
23:07:55  24  ,clse-avg5  ca5
23:07:55  25  ,clse-avg6  ca6
23:07:55  26  ,clse-avg7  ca7
23:07:55  27  ,clse-avg8  ca8
23:07:55  28  -- clse relation to moving-max
23:07:55  29  ,clse-max2  cx2
23:07:55  30  ,clse-max3  cx3
23:07:55  31  ,clse-max4  cx4
23:07:55  32  ,clse-max5  cx5
23:07:55  33  ,clse-max6  cx6
23:07:55  34  ,clse-max7  cx7
23:07:55  35  ,clse-max8  cx8
23:07:55  36  -- Derive date related attributes:
23:07:55  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:07:55  38  ,0+TO_CHAR(ydate,'D')d
23:07:55  39  ,0+TO_CHAR(ydate,'W')w
23:07:55  40  -- mpm stands for minutes-past-midnight:
23:07:55  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:07:55  42  -- mph stands for minutes-past-hour:
23:07:55  43  ,0+TO_CHAR(ydate,'MI')mph
23:07:55  44  FROM stk10
23:07:55  45  ORDER BY ydate
23:07:55  46  /

Table created.

Elapsed: 00:00:00.04
23:07:55 SQL> 
23:07:55 SQL> -- rpt
23:07:55 SQL> 
23:07:55 SQL> SELECT
23:07:55   2  tkr
23:07:55   3  ,COUNT(tkr)
23:07:55   4  ,MIN(clse),MAX(clse)
23:07:55   5  ,MIN(ydate),MAX(ydate)
23:07:55   6  FROM stk12
23:07:55   7  GROUP BY tkr
23:07:55   8  /

no rows selected

Elapsed: 00:00:00.01
23:07:55 SQL> 
23:07:55 SQL> -- Prepare for derivation of NTILE based parameters.
23:07:55 SQL> -- Also derive the "trend" parameter:
23:07:55 SQL> 
23:07:55 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.04
23:07:55 SQL> CREATE TABLE stk14 COMPRESS AS
23:07:55   2  SELECT
23:07:55   3  tkr
23:07:55   4  ,ydate
23:07:55   5  ,tkrdate
23:07:55   6  ,clse
23:07:55   7  ,g4
23:07:55   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.5/100 THEN 'up' ELSE 'nup' END gatt
23:07:55   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.5/100 THEN 'up' ELSE 'nup' END gattn
23:07:55  10  ,CASE WHEN trend IS NULL THEN 1
23:07:55  11  	    WHEN trend =0      THEN 1
23:07:55  12  	    ELSE trend END trend
23:07:55  13  ,cm2
23:07:55  14  ,cm3
23:07:55  15  ,cm4
23:07:55  16  ,cm5
23:07:55  17  ,cm6
23:07:55  18  ,cm7
23:07:55  19  ,cm8
23:07:55  20  ,ca2
23:07:55  21  ,ca3
23:07:55  22  ,ca4
23:07:55  23  ,ca5
23:07:55  24  ,ca6
23:07:55  25  ,ca7
23:07:55  26  ,ca8
23:07:55  27  ,cx2
23:07:55  28  ,cx3
23:07:55  29  ,cx4
23:07:55  30  ,cx5
23:07:55  31  ,cx6
23:07:55  32  ,cx7
23:07:55  33  ,cx8
23:07:55  34  ,hh
23:07:55  35  ,d
23:07:55  36  ,w
23:07:55  37  ,mpm
23:07:55  38  ,mph
23:07:55  39  FROM stk12
23:07:55  40  -- Guard against divide by 0:
23:07:55  41  WHERE clse > 0
23:07:55  42  ORDER BY ydate
23:07:55  43  /

Table created.

Elapsed: 00:00:00.04
23:07:55 SQL> 
23:07:55 SQL> -- rpt
23:07:55 SQL> 
23:07:55 SQL> SELECT
23:07:55   2  tkr
23:07:55   3  ,trend
23:07:55   4  ,gatt
23:07:55   5  ,COUNT(tkr)
23:07:55   6  ,AVG(g4)
23:07:55   7  FROM stk14
23:07:55   8  GROUP BY tkr,trend,gatt
23:07:55   9  ORDER BY tkr,trend,gatt
23:07:55  10  /

no rows selected

Elapsed: 00:00:00.00
23:07:55 SQL> 
23:07:55 SQL> -- Derive NTILE based params:
23:07:55 SQL> 
23:07:55 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.05
23:07:55 SQL> CREATE TABLE stk16 COMPRESS AS
23:07:55   2  SELECT
23:07:55   3  tkr
23:07:55   4  ,ydate
23:07:55   5  ,tkrdate
23:07:55   6  ,clse
23:07:55   7  ,g4
23:07:55   8  ,gatt
23:07:55   9  ,gattn
23:07:55  10  ,trend
23:07:55  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
23:07:55  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
23:07:55  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
23:07:55  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
23:07:55  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
23:07:55  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
23:07:55  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
23:07:55  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
23:07:55  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
23:07:55  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
23:07:55  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
23:07:55  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
23:07:55  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
23:07:55  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
23:07:55  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
23:07:55  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
23:07:55  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
23:07:55  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
23:07:55  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
23:07:55  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
23:07:55  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
23:07:55  32  ,hh  att21
23:07:55  33  ,d   att22
23:07:55  34  ,w   att23
23:07:55  35  ,mpm att24
23:07:55  36  ,mph att25
23:07:55  37  ,trend att26
23:07:55  38  FROM stk14
23:07:55  39  ORDER BY ydate
23:07:55  40  /

Table created.

Elapsed: 00:00:00.05
23:07:55 SQL> 
23:07:55 SQL> -- rpt
23:07:55 SQL> 
23:07:55 SQL> SELECT
23:07:55   2  tkr
23:07:55   3  ,trend
23:07:55   4  ,gatt
23:07:55   5  ,COUNT(tkr)
23:07:55   6  ,AVG(g4)
23:07:55   7  FROM stk16
23:07:55   8  GROUP BY tkr,trend,gatt
23:07:55   9  ORDER BY tkr,trend,gatt
23:07:55  10  /

no rows selected

Elapsed: 00:00:00.00
23:07:55 SQL> 
23:07:55 SQL> -- Now I derive goodness attributes:
23:07:55 SQL> 
23:07:55 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.05
23:07:55 SQL> CREATE TABLE stk_ms COMPRESS AS
23:07:55   2  SELECT
23:07:55   3  tkr
23:07:55   4  ,ydate
23:07:55   5  ,tkrdate
23:07:55   6  ,trend
23:07:55   7  ,g4
23:07:55   8  ,gatt
23:07:55   9  ,gattn
23:07:55  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
23:07:55  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
23:07:55  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
23:07:55  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
23:07:55  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
23:07:55  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
23:07:55  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
23:07:55  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
23:07:55  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
23:07:55  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
23:07:55  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
23:07:55  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
23:07:55  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
23:07:55  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
23:07:55  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
23:07:55  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
23:07:55  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
23:07:55  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
23:07:55  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
23:07:55  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
23:07:55  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
23:07:55  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
23:07:55  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
23:07:55  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
23:07:55  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
23:07:55  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
23:07:55  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
23:07:55  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
23:07:55  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
23:07:55  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
23:07:55  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
23:07:55  41  FROM stk16
23:07:55  42  /

Table created.

Elapsed: 00:00:00.05
23:07:55 SQL> 
23:07:55 SQL> -- rpt
23:07:55 SQL> 
23:07:55 SQL> SELECT
23:07:55   2  tkr
23:07:55   3  ,trend
23:07:55   4  ,gatt
23:07:55   5  ,COUNT(tkr)
23:07:55   6  ,AVG(g4)
23:07:55   7  FROM stk_ms
23:07:55   8  GROUP BY tkr,trend,gatt
23:07:55   9  ORDER BY tkr,trend,gatt
23:07:55  10  /

no rows selected

Elapsed: 00:00:00.00
23:07:55 SQL> 
23:07:55 SQL> SELECT
23:07:55   2  tkr
23:07:55   3  ,0+TO_CHAR(ydate,'D')daynum
23:07:55   4  ,COUNT(tkr)
23:07:55   5  ,MIN(ydate),MAX(ydate)
23:07:55   6  FROM stk_ms
23:07:55   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
23:07:55   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
23:07:55   9  /

no rows selected

Elapsed: 00:00:00.01
23:07:55 SQL> 
23:07:55 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
