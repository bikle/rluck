
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 23 16:08:12 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

16:08:13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
16:08:13 SQL> 
16:08:13 SQL> 16:08:13 SQL> --
16:08:13 SQL> -- stk10u.sql
16:08:13 SQL> --
16:08:13 SQL> 
16:08:13 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
16:08:13 SQL> 
16:08:13 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
16:08:13 SQL> @stk10.sql     '&1'
16:08:13 SQL> --
16:08:13 SQL> -- stk10.sql
16:08:13 SQL> --
16:08:13 SQL> 
16:08:13 SQL> -- Creates views and tables for demonstrating SVM.
16:08:13 SQL> 
16:08:13 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.86
16:08:14 SQL> 
16:08:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.14
16:08:14 SQL> 
16:08:14 SQL> CREATE TABLE stk10svmspy COMPRESS AS
16:08:14   2  SELECT
16:08:14   3  tkr
16:08:14   4  ,ydate
16:08:14   5  ,tkr||ydate tkrdate
16:08:14   6  ,clse
16:08:14   7  ,clse2
16:08:14   8  ,rownum rnum -- acts as t in my time-series
16:08:14   9  -- g1 is important. I want to predict g1:
16:08:14  10  ,gain1day g1
16:08:14  11  -- Derive some attributes from clse.
16:08:14  12  -- Each row spans 5 minutes.
16:08:14  13  -- The number of rows in 1 day is 24*60/5.
16:08:14  14  -- I want the aggregations to span from 3 days to 9 days:
16:08:14  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
16:08:14  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
16:08:14  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
16:08:14  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
16:08:14  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
16:08:14  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
16:08:14  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
16:08:14  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
16:08:14  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
16:08:14  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
16:08:14  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
16:08:14  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
16:08:14  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
16:08:14  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
16:08:14  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
16:08:14  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
16:08:14  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
16:08:14  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
16:08:14  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
16:08:14  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
16:08:14  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
16:08:14  36  FROM di5min_stk_c2
16:08:14  37  WHERE UPPER(tkr)='&1'
16:08:14  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
16:08:14  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
16:08:14  40  ORDER BY ydate
16:08:14  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='BEN'

Table created.

Elapsed: 00:00:01.70
16:08:16 SQL> 
16:08:16 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
16:08:16 SQL> 
16:08:16 SQL> -- rpt
16:08:16 SQL> 
16:08:16 SQL> SELECT
16:08:16   2  tkr
16:08:16   3  ,COUNT(tkr)ccount
16:08:16   4  ,MIN(clse)mnclse,MAX(clse)mxclse
16:08:16   5  -- ,MIN(avg4),MAX(avg4)
16:08:16   6  ,MIN(ydate),MAX(ydate)
16:08:16   7  ,MIN(g1)
16:08:16   8  ,MAX(g1)
16:08:16   9  FROM stk10svmspy
16:08:16  10  GROUP BY tkr
16:08:16  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
BEN	      1014     109.71	  121.41 2011-01-04 14:30:00 2011-01-21 20:55:00      -3.61	  5.04

Elapsed: 00:00:00.01
16:08:16 SQL> 
16:08:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:08:16 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.08
16:08:16 SQL> CREATE TABLE stk12svmspy COMPRESS AS
16:08:16   2  SELECT
16:08:16   3  tkr
16:08:16   4  ,ydate
16:08:16   5  ,tkrdate
16:08:16   6  ,clse
16:08:16   7  ,rnum
16:08:16   8  ,g1
16:08:16   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
16:08:16  10  -- I want more attributes from the ones I derived above:
16:08:16  11  -- clse relation to moving-min
16:08:16  12  ,clse-min3  cm3
16:08:16  13  ,clse-min4  cm4
16:08:16  14  ,clse-min5  cm5
16:08:16  15  ,clse-min6  cm6
16:08:16  16  ,clse-min7  cm7
16:08:16  17  ,clse-min8  cm8
16:08:16  18  ,clse-min9  cm9
16:08:16  19  -- clse relation to moving-avg
16:08:16  20  ,clse-avg3  ca3
16:08:16  21  ,clse-avg4  ca4
16:08:16  22  ,clse-avg5  ca5
16:08:16  23  ,clse-avg6  ca6
16:08:16  24  ,clse-avg7  ca7
16:08:16  25  ,clse-avg8  ca8
16:08:16  26  ,clse-avg9  ca9
16:08:16  27  -- clse relation to moving-max
16:08:16  28  ,clse-max3  cx3
16:08:16  29  ,clse-max4  cx4
16:08:16  30  ,clse-max5  cx5
16:08:16  31  ,clse-max6  cx6
16:08:16  32  ,clse-max7  cx7
16:08:16  33  ,clse-max8  cx8
16:08:16  34  ,clse-max9  cx9
16:08:16  35  -- Derive date related attributes:
16:08:16  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:08:16  37  ,0+TO_CHAR(ydate,'D')d
16:08:16  38  ,0+TO_CHAR(ydate,'W')w
16:08:16  39  -- mpm stands for minutes-past-midnight:
16:08:16  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:08:16  41  -- mph stands for minutes-past-hour:
16:08:16  42  ,0+TO_CHAR(ydate,'MI')mph
16:08:16  43  FROM stk10svmspy
16:08:16  44  ORDER BY ydate
16:08:16  45  /

Table created.

Elapsed: 00:00:00.15
16:08:16 SQL> 
16:08:16 SQL> -- rpt
16:08:16 SQL> 
16:08:16 SQL> SELECT
16:08:16   2  tkr
16:08:16   3  ,COUNT(tkr)ccount
16:08:16   4  ,MIN(clse)mnclse,MAX(clse)mxclse
16:08:16   5  -- ,MIN(avg4),MAX(avg4)
16:08:16   6  ,MIN(ydate),MAX(ydate)
16:08:16   7  ,MIN(g1)
16:08:16   8  ,AVG(g1)
16:08:16   9  ,MAX(g1)
16:08:16  10  FROM stk12svmspy
16:08:16  11  GROUP BY tkr
16:08:16  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
BEN	      1014     109.71	  121.41 2011-01-04 14:30:00 2011-01-21 20:55:00      -3.61 .512301865	     5.04

Elapsed: 00:00:00.01
16:08:16 SQL> 
16:08:16 SQL> -- Prepare for derivation of NTILE based parameters.
16:08:16 SQL> -- Also derive the "trend" parameter:
16:08:16 SQL> 
16:08:16 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.07
16:08:16 SQL> CREATE TABLE stk14svmspy COMPRESS AS
16:08:16   2  SELECT
16:08:16   3  tkr
16:08:16   4  ,ydate
16:08:16   5  ,tkrdate
16:08:16   6  ,clse
16:08:16   7  ,g1
16:08:16   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
16:08:16   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
16:08:16  10  ,CASE WHEN trend IS NULL THEN 1
16:08:16  11  	    WHEN trend =0      THEN 1
16:08:16  12  	    ELSE trend END trend
16:08:16  13  ,cm3
16:08:16  14  ,cm4
16:08:16  15  ,cm5
16:08:16  16  ,cm6
16:08:16  17  ,cm7
16:08:16  18  ,cm8
16:08:16  19  ,cm9
16:08:16  20  ,ca3
16:08:16  21  ,ca4
16:08:16  22  ,ca5
16:08:16  23  ,ca6
16:08:16  24  ,ca7
16:08:16  25  ,ca8
16:08:16  26  ,ca9
16:08:16  27  ,cx3
16:08:16  28  ,cx4
16:08:16  29  ,cx5
16:08:16  30  ,cx6
16:08:16  31  ,cx7
16:08:16  32  ,cx8
16:08:16  33  ,cx9
16:08:16  34  ,hh
16:08:16  35  ,d
16:08:16  36  ,w
16:08:16  37  ,mpm
16:08:16  38  ,mph
16:08:16  39  FROM stk12svmspy
16:08:16  40  -- Guard against divide by 0:
16:08:16  41  WHERE clse > 0
16:08:16  42  ORDER BY ydate
16:08:16  43  /

Table created.

Elapsed: 00:00:00.08
16:08:16 SQL> 
16:08:16 SQL> -- rpt
16:08:16 SQL> 
16:08:16 SQL> SELECT
16:08:16   2  tkr
16:08:16   3  ,trend
16:08:16   4  ,gatt
16:08:16   5  ,COUNT(tkr)
16:08:16   6  ,AVG(g1)
16:08:16   7  FROM stk14svmspy
16:08:16   8  GROUP BY tkr,trend,gatt
16:08:16   9  ORDER BY tkr,trend,gatt
16:08:16  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BEN		-1 nup	      157 -1.3134395
BEN		-1 up	      100     1.4065
BEN		 1 nup	      201 -.92820896
BEN		 1 up	      400  1.7292125
BEN		 1	      156

Elapsed: 00:00:00.01
16:08:16 SQL> 
16:08:16 SQL> -- Derive NTILE based params:
16:08:16 SQL> 
16:08:16 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.05
16:08:16 SQL> CREATE TABLE stk16svmspy COMPRESS AS
16:08:16   2  SELECT
16:08:16   3  tkr
16:08:16   4  ,ydate
16:08:16   5  ,tkrdate
16:08:16   6  ,clse
16:08:16   7  ,g1
16:08:16   8  ,gatt
16:08:16   9  ,gattn
16:08:16  10  ,trend
16:08:16  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
16:08:16  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
16:08:16  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
16:08:16  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
16:08:16  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
16:08:16  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
16:08:16  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
16:08:16  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
16:08:16  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
16:08:16  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
16:08:16  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
16:08:16  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
16:08:16  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
16:08:16  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
16:08:16  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
16:08:16  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
16:08:16  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
16:08:16  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
16:08:16  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
16:08:16  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
16:08:16  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
16:08:16  32  ,hh  att21
16:08:16  33  ,d   att22
16:08:16  34  ,w   att23
16:08:16  35  ,mpm att24
16:08:16  36  ,mph att25
16:08:16  37  ,trend att26
16:08:16  38  FROM stk14svmspy
16:08:16  39  ORDER BY ydate
16:08:16  40  /

Table created.

Elapsed: 00:00:00.15
16:08:16 SQL> 
16:08:16 SQL> -- rpt
16:08:16 SQL> 
16:08:16 SQL> SELECT
16:08:16   2  tkr
16:08:16   3  ,trend
16:08:16   4  ,gatt
16:08:16   5  ,COUNT(tkr)
16:08:16   6  ,AVG(g1)
16:08:16   7  FROM stk16svmspy
16:08:16   8  GROUP BY tkr,trend,gatt
16:08:16   9  ORDER BY tkr,trend,gatt
16:08:16  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BEN		-1 nup	      157 -1.3134395
BEN		-1 up	      100     1.4065
BEN		 1 nup	      201 -.92820896
BEN		 1 up	      400  1.7292125
BEN		 1	      156

Elapsed: 00:00:00.01
16:08:16 SQL> 
16:08:16 SQL> -- Now I derive goodness attributes:
16:08:16 SQL> 
16:08:16 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
16:08:16 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
16:08:16   2  SELECT
16:08:16   3  tkr
16:08:16   4  ,ydate
16:08:16   5  ,tkrdate
16:08:16   6  ,trend
16:08:16   7  ,g1
16:08:16   8  ,gatt
16:08:16   9  ,gattn
16:08:16  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
16:08:16  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
16:08:16  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
16:08:16  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
16:08:16  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
16:08:16  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
16:08:16  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
16:08:16  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
16:08:16  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
16:08:16  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
16:08:16  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
16:08:16  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
16:08:16  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
16:08:16  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
16:08:16  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
16:08:16  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
16:08:16  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
16:08:16  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
16:08:16  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
16:08:16  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
16:08:16  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
16:08:16  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
16:08:16  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
16:08:16  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
16:08:16  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
16:08:16  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
16:08:16  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
16:08:16  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
16:08:16  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
16:08:16  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
16:08:16  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
16:08:16  41  FROM stk16svmspy
16:08:16  42  /

Table created.

Elapsed: 00:00:00.19
16:08:17 SQL> 
16:08:17 SQL> -- rpt
16:08:17 SQL> 
16:08:17 SQL> SELECT
16:08:17   2  tkr
16:08:17   3  ,trend
16:08:17   4  ,gatt
16:08:17   5  ,COUNT(tkr)
16:08:17   6  ,AVG(g1)
16:08:17   7  FROM stk_ms_svmspy
16:08:17   8  GROUP BY tkr,trend,gatt
16:08:17   9  ORDER BY tkr,trend,gatt
16:08:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BEN		-1 nup	      157 -1.3134395
BEN		-1 up	      100     1.4065
BEN		 1 nup	      201 -.92820896
BEN		 1 up	      400  1.7292125
BEN		 1	      156

Elapsed: 00:00:00.01
16:08:17 SQL> 
16:08:17 SQL> SELECT
16:08:17   2  tkr
16:08:17   3  ,0+TO_CHAR(ydate,'D')daynum
16:08:17   4  ,COUNT(tkr)
16:08:17   5  ,MIN(ydate),MAX(ydate)
16:08:17   6  FROM stk_ms_svmspy
16:08:17   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
16:08:17   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
16:08:17   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
BEN		 2	   78 2011-01-10 14:30:00 2011-01-10 20:55:00
BEN		 3	  234 2011-01-04 14:30:00 2011-01-18 20:55:00
BEN		 4	  234 2011-01-05 14:30:00 2011-01-19 20:55:00
BEN		 5	  234 2011-01-06 14:30:00 2011-01-20 20:55:00
BEN		 6	  234 2011-01-07 14:30:00 2011-01-21 20:55:00

Elapsed: 00:00:00.01
16:08:17 SQL> 
16:08:17 SQL> -- exit
16:08:17 SQL> @stk10svmd.sql '&1'
16:08:17 SQL> --
16:08:17 SQL> -- stk10svmd.sql
16:08:17 SQL> --
16:08:17 SQL> 
16:08:17 SQL> -- Creates views and tables for demonstrating SVM.
16:08:17 SQL> -- I need to run this after I run stk10.sql
16:08:17 SQL> 
16:08:17 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.06
16:08:17 SQL> 
16:08:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
16:08:17 SQL> 
16:08:17 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
16:08:17   2  SELECT
16:08:17   3  tkr
16:08:17   4  ,ydate
16:08:17   5  ,tkr||ydate tkrdate
16:08:17   6  ,clse
16:08:17   7  ,rownum rnum -- acts as t in my time-series
16:08:17   8  -- Derive some attributes from clse.
16:08:17   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
16:08:17  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
16:08:17  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
16:08:17  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
16:08:17  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
16:08:17  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
16:08:17  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
16:08:17  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
16:08:17  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
16:08:17  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
16:08:17  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
16:08:17  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
16:08:17  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
16:08:17  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
16:08:17  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
16:08:17  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
16:08:17  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
16:08:17  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
16:08:17  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
16:08:17  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
16:08:17  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
16:08:17  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
16:08:17  31  FROM ystk
16:08:17  32  WHERE UPPER(tkr)='&1'
16:08:17  33  AND ydate > '1990-01-01'
16:08:17  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
16:08:17  35  ORDER BY ydate
16:08:17  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='BEN'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='BEN')

Table created.

Elapsed: 00:00:02.26
16:08:19 SQL> 
16:08:19 SQL> -- rpt
16:08:19 SQL> 
16:08:19 SQL> SELECT
16:08:19   2  tkr
16:08:19   3  ,COUNT(tkr)
16:08:19   4  ,MIN(clse),MAX(clse)
16:08:19   5  ,MIN(avg4),MAX(avg4)
16:08:19   6  ,MIN(ydate),MAX(ydate)
16:08:19   7  FROM stk_svmd10svmspy
16:08:19   8  GROUP BY tkr
16:08:19   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
BEN		5303	   2.94     139.39	3.014	 137.332 1990-01-02 00:00:00 2011-01-21 00:00:00

Elapsed: 00:00:00.02
16:08:19 SQL> 
16:08:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:08:19 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:02.12
16:08:21 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
16:08:21   2  SELECT
16:08:21   3  tkr
16:08:21   4  ,ydate
16:08:21   5  ,tkrdate
16:08:21   6  ,clse
16:08:21   7  ,rnum
16:08:21   8  -- g1 is important. I want to predict g1:
16:08:21   9  ,ld - clse g1
16:08:21  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
16:08:21  11  -- I want more attributes from the ones I derived above:
16:08:21  12  -- clse relation to moving-min
16:08:21  13  ,clse-min3  cm3
16:08:21  14  ,clse-min4  cm4
16:08:21  15  ,clse-min5  cm5
16:08:21  16  ,clse-min6  cm6
16:08:21  17  ,clse-min7  cm7
16:08:21  18  ,clse-min8  cm8
16:08:21  19  ,clse-min9  cm9
16:08:21  20  -- clse relation to moving-avg
16:08:21  21  ,clse-avg3  ca3
16:08:21  22  ,clse-avg4  ca4
16:08:21  23  ,clse-avg5  ca5
16:08:21  24  ,clse-avg6  ca6
16:08:21  25  ,clse-avg7  ca7
16:08:21  26  ,clse-avg8  ca8
16:08:21  27  ,clse-avg9  ca9
16:08:21  28  -- clse relation to moving-max
16:08:21  29  ,clse-max3  cx3
16:08:21  30  ,clse-max4  cx4
16:08:21  31  ,clse-max5  cx5
16:08:21  32  ,clse-max6  cx6
16:08:21  33  ,clse-max7  cx7
16:08:21  34  ,clse-max8  cx8
16:08:21  35  ,clse-max9  cx9
16:08:21  36  -- Derive date related attributes:
16:08:21  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:08:21  38  ,0+TO_CHAR(ydate,'D')d
16:08:21  39  ,0+TO_CHAR(ydate,'W')w
16:08:21  40  -- mpm stands for minutes-past-midnight:
16:08:21  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:08:21  42  -- mph stands for minutes-past-hour:
16:08:21  43  ,0+TO_CHAR(ydate,'MI')mph
16:08:21  44  FROM stk_svmd10svmspy
16:08:21  45  ORDER BY ydate
16:08:21  46  /

Table created.

Elapsed: 00:00:00.21
16:08:22 SQL> 
16:08:22 SQL> -- rpt
16:08:22 SQL> 
16:08:22 SQL> SELECT
16:08:22   2  tkr
16:08:22   3  ,COUNT(tkr)
16:08:22   4  ,MIN(clse),MAX(clse)
16:08:22   5  ,MIN(ydate),MAX(ydate)
16:08:22   6  FROM stk_svmd12
16:08:22   7  GROUP BY tkr
16:08:22   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
BEN		5303	   2.94     139.39 1990-01-02 00:00:00 2011-01-21 00:00:00

Elapsed: 00:00:00.02
16:08:22 SQL> 
16:08:22 SQL> -- Prepare for derivation of NTILE based parameters.
16:08:22 SQL> -- Also derive the "trend" parameter:
16:08:22 SQL> 
16:08:22 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.27
16:08:22 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
16:08:22   2  SELECT
16:08:22   3  tkr
16:08:22   4  ,ydate
16:08:22   5  ,tkrdate
16:08:22   6  ,clse
16:08:22   7  ,g1
16:08:22   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
16:08:22   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
16:08:22  10  ,CASE WHEN trend IS NULL THEN 1
16:08:22  11  	    WHEN trend =0      THEN 1
16:08:22  12  	    ELSE trend END trend
16:08:22  13  ,cm3
16:08:22  14  ,cm4
16:08:22  15  ,cm5
16:08:22  16  ,cm6
16:08:22  17  ,cm7
16:08:22  18  ,cm8
16:08:22  19  ,cm9
16:08:22  20  ,ca3
16:08:22  21  ,ca4
16:08:22  22  ,ca5
16:08:22  23  ,ca6
16:08:22  24  ,ca7
16:08:22  25  ,ca8
16:08:22  26  ,ca9
16:08:22  27  ,cx3
16:08:22  28  ,cx4
16:08:22  29  ,cx5
16:08:22  30  ,cx6
16:08:22  31  ,cx7
16:08:22  32  ,cx8
16:08:22  33  ,cx9
16:08:22  34  ,hh
16:08:22  35  ,d
16:08:22  36  ,w
16:08:22  37  ,mpm
16:08:22  38  ,mph
16:08:22  39  FROM stk_svmd12
16:08:22  40  -- Guard against divide by 0:
16:08:22  41  WHERE clse > 0
16:08:22  42  ORDER BY ydate
16:08:22  43  /

Table created.

Elapsed: 00:00:00.11
16:08:22 SQL> 
16:08:22 SQL> -- rpt
16:08:22 SQL> 
16:08:22 SQL> SELECT
16:08:22   2  tkr
16:08:22   3  ,trend
16:08:22   4  ,gatt
16:08:22   5  ,COUNT(tkr)
16:08:22   6  ,AVG(g1)
16:08:22   7  FROM stk_svmd14
16:08:22   8  GROUP BY tkr,trend,gatt
16:08:22   9  ORDER BY tkr,trend,gatt
16:08:22  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BEN		  -1 nup       1368 -.67834064
BEN		  -1 up        1056 .939128788
BEN		  -1		  1
BEN		   1 nup       1638 -.55769231
BEN		   1 up        1240 .777846774

Elapsed: 00:00:00.01
16:08:22 SQL> 
16:08:22 SQL> -- Derive NTILE based params:
16:08:22 SQL> 
16:08:22 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.07
16:08:22 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
16:08:22   2  SELECT
16:08:22   3  tkr
16:08:22   4  ,ydate
16:08:22   5  ,tkrdate
16:08:22   6  ,clse
16:08:22   7  ,g1
16:08:22   8  ,gatt
16:08:22   9  ,gattn
16:08:22  10  ,trend
16:08:22  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
16:08:22  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
16:08:22  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
16:08:22  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
16:08:22  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
16:08:22  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
16:08:22  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
16:08:22  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
16:08:22  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
16:08:22  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
16:08:22  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
16:08:22  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
16:08:22  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
16:08:22  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
16:08:22  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
16:08:22  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
16:08:22  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
16:08:22  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
16:08:22  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
16:08:22  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
16:08:22  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
16:08:22  32  ,hh  att21
16:08:22  33  ,d   att22
16:08:22  34  ,w   att23
16:08:22  35  ,mpm att24
16:08:22  36  ,mph att25
16:08:22  37  ,trend att26
16:08:22  38  FROM stk_svmd14
16:08:22  39  ORDER BY ydate
16:08:22  40  /

Table created.

Elapsed: 00:00:00.62
16:08:23 SQL> 
16:08:23 SQL> -- rpt
16:08:23 SQL> 
16:08:23 SQL> SELECT
16:08:23   2  tkr
16:08:23   3  ,trend
16:08:23   4  ,gatt
16:08:23   5  ,COUNT(tkr)
16:08:23   6  ,AVG(g1)
16:08:23   7  FROM stk_svmd16
16:08:23   8  GROUP BY tkr,trend,gatt
16:08:23   9  ORDER BY tkr,trend,gatt
16:08:23  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BEN		  -1 nup       1368 -.67834064
BEN		  -1 up        1056 .939128788
BEN		  -1		  1
BEN		   1 nup       1638 -.55769231
BEN		   1 up        1240 .777846774

Elapsed: 00:00:00.01
16:08:23 SQL> 
16:08:23 SQL> -- Now I derive goodness attributes:
16:08:23 SQL> 
16:08:23 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.18
16:08:23 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
16:08:23   2  SELECT
16:08:23   3  tkr
16:08:23   4  ,ydate
16:08:23   5  ,tkrdate
16:08:23   6  ,trend
16:08:23   7  ,g1
16:08:23   8  ,gatt
16:08:23   9  ,gattn
16:08:23  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
16:08:23  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
16:08:23  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
16:08:23  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
16:08:23  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
16:08:23  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
16:08:23  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
16:08:23  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
16:08:23  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
16:08:23  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
16:08:23  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
16:08:23  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
16:08:23  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
16:08:23  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
16:08:23  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
16:08:23  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
16:08:23  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
16:08:23  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
16:08:23  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
16:08:23  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
16:08:23  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
16:08:23  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
16:08:23  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
16:08:23  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
16:08:23  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
16:08:23  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
16:08:23  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
16:08:23  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
16:08:23  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
16:08:23  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
16:08:23  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
16:08:23  41  FROM stk_svmd16
16:08:23  42  /

Table created.

Elapsed: 00:00:00.99
16:08:24 SQL> 
16:08:24 SQL> -- rpt
16:08:24 SQL> 
16:08:24 SQL> SELECT
16:08:24   2  tkr
16:08:24   3  ,trend
16:08:24   4  ,gatt
16:08:24   5  ,COUNT(tkr)
16:08:24   6  ,AVG(g1)
16:08:24   7  FROM stk_ms_svmd_svmspy
16:08:24   8  GROUP BY tkr,trend,gatt
16:08:24   9  ORDER BY tkr,trend,gatt
16:08:24  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BEN		  -1 nup       1368 -.67834064
BEN		  -1 up        1056 .939128788
BEN		  -1		  1
BEN		   1 nup       1638 -.55769231
BEN		   1 up        1240 .777846774

Elapsed: 00:00:00.01
16:08:24 SQL> 
16:08:24 SQL> SELECT
16:08:24   2  tkr
16:08:24   3  ,COUNT(tkr)
16:08:24   4  ,MIN(ydate),MAX(ydate)
16:08:24   5  FROM stk_ms_svmd_svmspy
16:08:24   6  GROUP BY tkr
16:08:24   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
BEN		5303 1990-01-02 00:00:00 2011-01-21 00:00:00

Elapsed: 00:00:00.00
16:08:24 SQL> 
16:08:24 SQL> -- exit
16:08:24 SQL> 
16:08:24 SQL> 
16:08:24 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.16
16:08:24 SQL> 
16:08:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
16:08:24 SQL> 
16:08:24 SQL> CREATE TABLE stk_ms_u COMPRESS AS
16:08:24   2  SELECT * FROM stk_ms_svmspy
16:08:24   3  UNION
16:08:24   4  SELECT * FROM stk_ms_svmd_svmspy
16:08:24   5  /

Table created.

Elapsed: 00:00:00.20
16:08:25 SQL> 
16:08:25 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
