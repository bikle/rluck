
SQL*Plus: Release 11.2.0.1.0 Production on Wed Apr 27 21:17:23 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:17:23 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:17:23 SQL> 
21:17:23 SQL> 21:17:23 SQL> --
21:17:23 SQL> -- stk10u.sql
21:17:23 SQL> --
21:17:23 SQL> 
21:17:23 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
21:17:23 SQL> 
21:17:23 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
21:17:23 SQL> @stk10.sql     '&1'
21:17:23 SQL> --
21:17:23 SQL> -- stk10.sql
21:17:23 SQL> --
21:17:23 SQL> 
21:17:23 SQL> -- Creates views and tables for demonstrating SVM.
21:17:23 SQL> 
21:17:23 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.31
21:17:23 SQL> 
21:17:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.14
21:17:24 SQL> 
21:17:24 SQL> CREATE TABLE stk10svmspy COMPRESS AS
21:17:24   2  SELECT
21:17:24   3  tkr
21:17:24   4  ,ydate
21:17:24   5  ,tkr||ydate tkrdate
21:17:24   6  ,clse
21:17:24   7  ,clse2
21:17:24   8  ,rownum rnum -- acts as t in my time-series
21:17:24   9  -- g1 is important. I want to predict g1:
21:17:24  10  ,gain1day g1
21:17:24  11  -- Derive some attributes from clse.
21:17:24  12  -- Each row spans 5 minutes.
21:17:24  13  -- The number of rows in 1 day is 24*60/5.
21:17:24  14  -- I want the aggregations to span from 3 days to 9 days:
21:17:24  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
21:17:24  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
21:17:24  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
21:17:24  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
21:17:24  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
21:17:24  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
21:17:24  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
21:17:24  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
21:17:24  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
21:17:24  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
21:17:24  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
21:17:24  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
21:17:24  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
21:17:24  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
21:17:24  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
21:17:24  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
21:17:24  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
21:17:24  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
21:17:24  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
21:17:24  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
21:17:24  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
21:17:24  36  FROM di5min_stk_c2
21:17:24  37  WHERE UPPER(tkr)='&1'
21:17:24  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
21:17:24  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
21:17:24  40  ORDER BY ydate
21:17:24  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='AEM'
