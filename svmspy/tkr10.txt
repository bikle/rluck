
SQL*Plus: Release 11.2.0.1.0 Production on Fri May 6 20:21:53 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:21:53 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:21:53 SQL> 
20:21:53 SQL> 20:21:53 SQL> --
20:21:53 SQL> -- stk10u.sql
20:21:53 SQL> --
20:21:53 SQL> 
20:21:53 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
20:21:53 SQL> 
20:21:53 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
20:21:53 SQL> @stk10.sql     '&1'
20:21:53 SQL> --
20:21:53 SQL> -- stk10.sql
20:21:53 SQL> --
20:21:53 SQL> 
20:21:53 SQL> -- Creates views and tables for demonstrating SVM.
20:21:53 SQL> 
20:21:53 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.16
20:21:53 SQL> 
20:21:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
20:21:53 SQL> 
20:21:53 SQL> CREATE TABLE stk10svmspy COMPRESS AS
20:21:53   2  SELECT
20:21:53   3  tkr
20:21:53   4  ,ydate
20:21:53   5  ,tkr||ydate tkrdate
20:21:53   6  ,clse
20:21:53   7  ,clse2
20:21:53   8  ,rownum rnum -- acts as t in my time-series
20:21:53   9  -- g1 is important. I want to predict g1:
20:21:53  10  ,gain1day g1
20:21:53  11  -- Derive some attributes from clse.
20:21:53  12  -- Each row spans 5 minutes.
20:21:53  13  -- The number of rows in 1 day is 24*60/5.
20:21:53  14  -- I want the aggregations to span from 3 days to 9 days:
20:21:53  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
20:21:53  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
20:21:53  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
20:21:53  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
20:21:53  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
20:21:53  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
20:21:53  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
20:21:53  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
20:21:53  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
20:21:53  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
20:21:53  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
20:21:53  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
20:21:53  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
20:21:53  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
20:21:53  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
20:21:53  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
20:21:53  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
20:21:53  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
20:21:53  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
20:21:53  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
20:21:53  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
20:21:53  36  FROM di5min_stk_c2
20:21:53  37  WHERE UPPER(tkr)='&1'
20:21:53  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
20:21:53  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
20:21:53  40  ORDER BY ydate
20:21:53  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.81
20:21:54 SQL> 
20:21:54 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
20:21:54 SQL> 
20:21:54 SQL> -- rpt
20:21:54 SQL> 
20:21:54 SQL> SELECT
20:21:54   2  tkr
20:21:54   3  ,COUNT(tkr)ccount
20:21:54   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:21:54   5  -- ,MIN(avg4),MAX(avg4)
20:21:54   6  ,MIN(ydate),MAX(ydate)
20:21:54   7  ,MIN(g1)
20:21:54   8  ,MAX(g1)
20:21:54   9  FROM stk10svmspy
20:21:54  10  GROUP BY tkr
20:21:54  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
XLB	      6389	36.57	   41.17 2011-01-04 14:30:00 2011-05-06 19:20:00      -1.44	  1.18

Elapsed: 00:00:00.01
20:21:55 SQL> 
20:21:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:21:55 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.19
20:21:55 SQL> CREATE TABLE stk12svmspy COMPRESS AS
20:21:55   2  SELECT
20:21:55   3  tkr
20:21:55   4  ,ydate
20:21:55   5  ,tkrdate
20:21:55   6  ,clse
20:21:55   7  ,rnum
20:21:55   8  ,g1
20:21:55   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:21:55  10  -- I want more attributes from the ones I derived above:
20:21:55  11  -- clse relation to moving-min
20:21:55  12  ,clse-min3  cm3
20:21:55  13  ,clse-min4  cm4
20:21:55  14  ,clse-min5  cm5
20:21:55  15  ,clse-min6  cm6
20:21:55  16  ,clse-min7  cm7
20:21:55  17  ,clse-min8  cm8
20:21:55  18  ,clse-min9  cm9
20:21:55  19  -- clse relation to moving-avg
20:21:55  20  ,clse-avg3  ca3
20:21:55  21  ,clse-avg4  ca4
20:21:55  22  ,clse-avg5  ca5
20:21:55  23  ,clse-avg6  ca6
20:21:55  24  ,clse-avg7  ca7
20:21:55  25  ,clse-avg8  ca8
20:21:55  26  ,clse-avg9  ca9
20:21:55  27  -- clse relation to moving-max
20:21:55  28  ,clse-max3  cx3
20:21:55  29  ,clse-max4  cx4
20:21:55  30  ,clse-max5  cx5
20:21:55  31  ,clse-max6  cx6
20:21:55  32  ,clse-max7  cx7
20:21:55  33  ,clse-max8  cx8
20:21:55  34  ,clse-max9  cx9
20:21:55  35  -- Derive date related attributes:
20:21:55  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:21:55  37  ,0+TO_CHAR(ydate,'D')d
20:21:55  38  ,0+TO_CHAR(ydate,'W')w
20:21:55  39  -- mpm stands for minutes-past-midnight:
20:21:55  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:21:55  41  -- mph stands for minutes-past-hour:
20:21:55  42  ,0+TO_CHAR(ydate,'MI')mph
20:21:55  43  FROM stk10svmspy
20:21:55  44  ORDER BY ydate
20:21:55  45  /

Table created.

Elapsed: 00:00:00.19
20:21:55 SQL> 
20:21:55 SQL> -- rpt
20:21:55 SQL> 
20:21:55 SQL> SELECT
20:21:55   2  tkr
20:21:55   3  ,COUNT(tkr)ccount
20:21:55   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:21:55   5  -- ,MIN(avg4),MAX(avg4)
20:21:55   6  ,MIN(ydate),MAX(ydate)
20:21:55   7  ,MIN(g1)
20:21:55   8  ,AVG(g1)
20:21:55   9  ,MAX(g1)
20:21:55  10  FROM stk12svmspy
20:21:55  11  GROUP BY tkr
20:21:55  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
XLB	      6389	36.57	   41.17 2011-01-04 14:30:00 2011-05-06 19:20:00      -1.44 .028386645	     1.18

Elapsed: 00:00:00.02
20:21:55 SQL> 
20:21:55 SQL> -- Prepare for derivation of NTILE based parameters.
20:21:55 SQL> -- Also derive the "trend" parameter:
20:21:55 SQL> 
20:21:55 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.22
20:21:55 SQL> CREATE TABLE stk14svmspy COMPRESS AS
20:21:55   2  SELECT
20:21:55   3  tkr
20:21:55   4  ,ydate
20:21:55   5  ,tkrdate
20:21:55   6  ,clse
20:21:55   7  ,g1
20:21:55   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:21:55   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:21:55  10  ,CASE WHEN trend IS NULL THEN 1
20:21:55  11  	    WHEN trend =0      THEN 1
20:21:55  12  	    ELSE trend END trend
20:21:55  13  ,cm3
20:21:55  14  ,cm4
20:21:55  15  ,cm5
20:21:55  16  ,cm6
20:21:55  17  ,cm7
20:21:55  18  ,cm8
20:21:55  19  ,cm9
20:21:55  20  ,ca3
20:21:55  21  ,ca4
20:21:55  22  ,ca5
20:21:55  23  ,ca6
20:21:55  24  ,ca7
20:21:55  25  ,ca8
20:21:55  26  ,ca9
20:21:55  27  ,cx3
20:21:55  28  ,cx4
20:21:55  29  ,cx5
20:21:55  30  ,cx6
20:21:55  31  ,cx7
20:21:55  32  ,cx8
20:21:55  33  ,cx9
20:21:55  34  ,hh
20:21:55  35  ,d
20:21:55  36  ,w
20:21:55  37  ,mpm
20:21:55  38  ,mph
20:21:55  39  FROM stk12svmspy
20:21:55  40  -- Guard against divide by 0:
20:21:55  41  WHERE clse > 0
20:21:55  42  ORDER BY ydate
20:21:55  43  /

Table created.

Elapsed: 00:00:00.17
20:21:55 SQL> 
20:21:55 SQL> -- rpt
20:21:55 SQL> 
20:21:55 SQL> SELECT
20:21:55   2  tkr
20:21:55   3  ,trend
20:21:55   4  ,gatt
20:21:55   5  ,COUNT(tkr)
20:21:55   6  ,AVG(g1)
20:21:55   7  FROM stk14svmspy
20:21:55   8  GROUP BY tkr,trend,gatt
20:21:55   9  ORDER BY tkr,trend,gatt
20:21:55  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
XLB		-1 nup	     1178 -.32154993
XLB		-1 up	     1398 .460018579
XLB		-1	       31
XLB		 1 nup	     2199 -.25676574
XLB		 1 up	     1290 .366257918
XLB		 1	      293

6 rows selected.

Elapsed: 00:00:00.02
20:21:55 SQL> 
20:21:55 SQL> -- Derive NTILE based params:
20:21:55 SQL> 
20:21:55 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.12
20:21:55 SQL> CREATE TABLE stk16svmspy COMPRESS AS
20:21:55   2  SELECT
20:21:55   3  tkr
20:21:55   4  ,ydate
20:21:55   5  ,tkrdate
20:21:55   6  ,clse
20:21:55   7  ,g1
20:21:55   8  ,gatt
20:21:55   9  ,gattn
20:21:55  10  ,trend
20:21:55  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:21:55  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:21:55  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:21:55  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:21:55  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:21:55  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:21:55  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:21:55  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:21:55  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:21:55  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:21:55  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:21:55  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:21:55  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:21:55  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:21:55  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:21:55  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:21:55  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:21:55  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:21:55  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:21:55  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:21:55  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:21:55  32  ,hh  att21
20:21:55  33  ,d   att22
20:21:55  34  ,w   att23
20:21:55  35  ,mpm att24
20:21:55  36  ,mph att25
20:21:55  37  ,trend att26
20:21:55  38  FROM stk14svmspy
20:21:55  39  ORDER BY ydate
20:21:55  40  /

Table created.

Elapsed: 00:00:00.85
20:21:56 SQL> 
20:21:56 SQL> -- rpt
20:21:56 SQL> 
20:21:56 SQL> SELECT
20:21:56   2  tkr
20:21:56   3  ,trend
20:21:56   4  ,gatt
20:21:56   5  ,COUNT(tkr)
20:21:56   6  ,AVG(g1)
20:21:56   7  FROM stk16svmspy
20:21:56   8  GROUP BY tkr,trend,gatt
20:21:56   9  ORDER BY tkr,trend,gatt
20:21:56  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
XLB		-1 nup	     1178 -.32154993
XLB		-1 up	     1398 .460018579
XLB		-1	       31
XLB		 1 nup	     2199 -.25676574
XLB		 1 up	     1290 .366257918
XLB		 1	      293

6 rows selected.

Elapsed: 00:00:00.02
20:21:56 SQL> 
20:21:56 SQL> -- Comment out feedback related syntax:
20:21:56 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:21:56 SQL> -- SELECT
20:21:56 SQL> -- m.tkr
20:21:56 SQL> -- ,m.ydate
20:21:56 SQL> -- ,m.tkrdate
20:21:56 SQL> -- ,l.score score_long
20:21:56 SQL> -- ,s.score score_short
20:21:56 SQL> -- ,m.g1
20:21:56 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
20:21:56 SQL> -- WHERE l.targ='gatt'
20:21:56 SQL> -- AND	 s.targ='gattn'
20:21:56 SQL> -- AND l.tkrdate = s.tkrdate
20:21:56 SQL> -- AND l.tkrdate = m.tkrdate
20:21:56 SQL> -- -- Speed things up:
20:21:56 SQL> -- AND l.tkr = '&1'
20:21:56 SQL> -- AND s.tkr = '&1'
20:21:56 SQL> -- /
20:21:56 SQL> --
20:21:56 SQL> -- DROP TABLE score_corr_tkr;
20:21:56 SQL> --
20:21:56 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:21:56 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:21:56 SQL> -- (
20:21:56 SQL> --   SELECT
20:21:56 SQL> --   tkrdate
20:21:56 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:21:56 SQL> --   ,CORR((score_long - score_short),g1)
20:21:56 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
20:21:56 SQL> --   FROM sc12tkr
20:21:56 SQL> -- )
20:21:56 SQL> -- GROUP BY tkrdate
20:21:56 SQL> -- /
20:21:56 SQL> 
20:21:56 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:21:56 SQL> 
20:21:56 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.18
20:21:56 SQL> 
20:21:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
20:21:57 SQL> 
20:21:57 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
20:21:57   2  SELECT
20:21:57   3  tkr
20:21:57   4  ,ydate
20:21:57   5  ,tkrdate
20:21:57   6  ,trend
20:21:57   7  ,g1
20:21:57   8  ,gatt
20:21:57   9  ,gattn
20:21:57  10  -- Goodness attributes:
20:21:57  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
20:21:57  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
20:21:57  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
20:21:57  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
20:21:57  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
20:21:57  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
20:21:57  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
20:21:57  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
20:21:57  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
20:21:57  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
20:21:57  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
20:21:57  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
20:21:57  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
20:21:57  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
20:21:57  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
20:21:57  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
20:21:57  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
20:21:57  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
20:21:57  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
20:21:57  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
20:21:57  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
20:21:57  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
20:21:57  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
20:21:57  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
20:21:57  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
20:21:57  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
20:21:57  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
20:21:57  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:21:57  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
20:21:57  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
20:21:57  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
20:21:57  42  FROM stk16svmspy
20:21:57  43  /

Table created.

Elapsed: 00:00:01.13
20:21:58 SQL> 
20:21:58 SQL> -- rpt
20:21:58 SQL> 
20:21:58 SQL> SELECT
20:21:58   2  tkr
20:21:58   3  ,trend
20:21:58   4  ,gatt
20:21:58   5  ,COUNT(tkr)
20:21:58   6  ,AVG(g1)
20:21:58   7  FROM stk_ms_svmspy
20:21:58   8  GROUP BY tkr,trend,gatt
20:21:58   9  ORDER BY tkr,trend,gatt
20:21:58  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
XLB		-1 nup	     1178 -.32154993
XLB		-1 up	     1398 .460018579
XLB		-1	       31
XLB		 1 nup	     2199 -.25676574
XLB		 1 up	     1290 .366257918
XLB		 1	      293

6 rows selected.

Elapsed: 00:00:00.01
20:21:58 SQL> 
20:21:58 SQL> SELECT
20:21:58   2  tkr
20:21:58   3  ,0+TO_CHAR(ydate,'D')daynum
20:21:58   4  ,COUNT(tkr)
20:21:58   5  ,MIN(ydate),MAX(ydate)
20:21:58   6  FROM stk_ms_svmspy
20:21:58   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
20:21:58   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
20:21:58   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
XLB		 2	 1170 2011-01-10 14:30:00 2011-05-02 19:55:00
XLB		 3	 1326 2011-01-04 14:30:00 2011-05-03 19:55:00
XLB		 4	 1326 2011-01-05 14:30:00 2011-05-04 19:55:00
XLB		 5	 1326 2011-01-06 14:30:00 2011-05-05 19:55:00
XLB		 6	 1241 2011-01-07 14:30:00 2011-05-06 19:20:00

Elapsed: 00:00:00.01
20:21:58 SQL> 
20:21:58 SQL> -- exit
20:21:58 SQL> @stk10svmd.sql '&1'
20:21:58 SQL> --
20:21:58 SQL> -- stk10svmd.sql
20:21:58 SQL> --
20:21:58 SQL> 
20:21:58 SQL> -- Creates views and tables for demonstrating SVM.
20:21:58 SQL> -- I need to run this after I run stk10.sql
20:21:58 SQL> 
20:21:58 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.20
20:21:58 SQL> 
20:21:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.13
20:21:58 SQL> 
20:21:58 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
20:21:58   2  SELECT
20:21:58   3  tkr
20:21:58   4  ,ydate
20:21:58   5  ,tkr||ydate tkrdate
20:21:58   6  ,clse
20:21:58   7  ,rownum rnum -- acts as t in my time-series
20:21:58   8  -- Derive some attributes from clse.
20:21:58   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
20:21:58  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
20:21:58  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
20:21:58  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
20:21:58  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
20:21:58  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
20:21:58  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
20:21:58  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
20:21:58  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
20:21:58  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
20:21:58  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
20:21:58  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
20:21:58  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
20:21:58  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
20:21:58  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
20:21:58  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
20:21:58  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
20:21:58  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
20:21:58  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
20:21:58  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
20:21:58  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
20:21:58  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
20:21:58  31  -- ystk21 created here: svmd/cr_ystk21.sql
20:21:58  32  FROM ystk21
20:21:58  33  WHERE UPPER(tkr)='&1'
20:21:58  34  AND ydate > '1990-01-01'
20:21:58  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
20:21:58  36  ORDER BY ydate
20:21:58  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='XLB'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='XLB')

Table created.

Elapsed: 00:00:00.28
20:21:59 SQL> 
20:21:59 SQL> -- rpt
20:21:59 SQL> 
20:21:59 SQL> SELECT
20:21:59   2  tkr
20:21:59   3  ,COUNT(tkr)
20:21:59   4  ,MIN(clse),MAX(clse)
20:21:59   5  ,MIN(avg4),MAX(avg4)
20:21:59   6  ,MIN(ydate),MAX(ydate)
20:21:59   7  FROM stk_svmd10svmspy
20:21:59   8  GROUP BY tkr
20:21:59   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
XLB		3069	  16.63      46.03	17.18	  45.584 1998-12-22 20:00:00 2011-05-05 20:00:00

Elapsed: 00:00:00.01
20:21:59 SQL> 
20:21:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:21:59 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.11
20:21:59 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
20:21:59   2  SELECT
20:21:59   3  tkr
20:21:59   4  ,ydate
20:21:59   5  ,tkrdate
20:21:59   6  ,clse
20:21:59   7  ,rnum
20:21:59   8  -- g1 is important. I want to predict g1:
20:21:59   9  ,ld - clse g1
20:21:59  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:21:59  11  -- I want more attributes from the ones I derived above:
20:21:59  12  -- clse relation to moving-min
20:21:59  13  ,clse-min3  cm3
20:21:59  14  ,clse-min4  cm4
20:21:59  15  ,clse-min5  cm5
20:21:59  16  ,clse-min6  cm6
20:21:59  17  ,clse-min7  cm7
20:21:59  18  ,clse-min8  cm8
20:21:59  19  ,clse-min9  cm9
20:21:59  20  -- clse relation to moving-avg
20:21:59  21  ,clse-avg3  ca3
20:21:59  22  ,clse-avg4  ca4
20:21:59  23  ,clse-avg5  ca5
20:21:59  24  ,clse-avg6  ca6
20:21:59  25  ,clse-avg7  ca7
20:21:59  26  ,clse-avg8  ca8
20:21:59  27  ,clse-avg9  ca9
20:21:59  28  -- clse relation to moving-max
20:21:59  29  ,clse-max3  cx3
20:21:59  30  ,clse-max4  cx4
20:21:59  31  ,clse-max5  cx5
20:21:59  32  ,clse-max6  cx6
20:21:59  33  ,clse-max7  cx7
20:21:59  34  ,clse-max8  cx8
20:21:59  35  ,clse-max9  cx9
20:21:59  36  -- Derive date related attributes:
20:21:59  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:21:59  38  ,0+TO_CHAR(ydate,'D')d
20:21:59  39  ,0+TO_CHAR(ydate,'W')w
20:21:59  40  -- mpm stands for minutes-past-midnight:
20:21:59  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:21:59  42  -- mph stands for minutes-past-hour:
20:21:59  43  ,0+TO_CHAR(ydate,'MI')mph
20:21:59  44  FROM stk_svmd10svmspy
20:21:59  45  ORDER BY ydate
20:21:59  46  /

Table created.

Elapsed: 00:00:00.14
20:21:59 SQL> 
20:21:59 SQL> -- rpt
20:21:59 SQL> 
20:21:59 SQL> SELECT
20:21:59   2  tkr
20:21:59   3  ,COUNT(tkr)
20:21:59   4  ,MIN(clse),MAX(clse)
20:21:59   5  ,MIN(ydate),MAX(ydate)
20:21:59   6  FROM stk_svmd12
20:21:59   7  GROUP BY tkr
20:21:59   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
XLB		3069	  16.63      46.03 1998-12-22 20:00:00 2011-05-05 20:00:00

Elapsed: 00:00:00.01
20:21:59 SQL> 
20:21:59 SQL> -- Prepare for derivation of NTILE based parameters.
20:21:59 SQL> -- Also derive the "trend" parameter:
20:21:59 SQL> 
20:21:59 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.15
20:21:59 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
20:21:59   2  SELECT
20:21:59   3  tkr
20:21:59   4  ,ydate
20:21:59   5  ,tkrdate
20:21:59   6  ,clse
20:21:59   7  ,g1
20:21:59   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:21:59   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:21:59  10  ,CASE WHEN trend IS NULL THEN 1
20:21:59  11  	    WHEN trend =0      THEN 1
20:21:59  12  	    ELSE trend END trend
20:21:59  13  ,cm3
20:21:59  14  ,cm4
20:21:59  15  ,cm5
20:21:59  16  ,cm6
20:21:59  17  ,cm7
20:21:59  18  ,cm8
20:21:59  19  ,cm9
20:21:59  20  ,ca3
20:21:59  21  ,ca4
20:21:59  22  ,ca5
20:21:59  23  ,ca6
20:21:59  24  ,ca7
20:21:59  25  ,ca8
20:21:59  26  ,ca9
20:21:59  27  ,cx3
20:21:59  28  ,cx4
20:21:59  29  ,cx5
20:21:59  30  ,cx6
20:21:59  31  ,cx7
20:21:59  32  ,cx8
20:21:59  33  ,cx9
20:21:59  34  ,hh
20:21:59  35  ,d
20:21:59  36  ,w
20:21:59  37  ,mpm
20:21:59  38  ,mph
20:21:59  39  FROM stk_svmd12
20:21:59  40  -- Guard against divide by 0:
20:21:59  41  WHERE clse > 0
20:21:59  42  ORDER BY ydate
20:21:59  43  /

Table created.

Elapsed: 00:00:00.08
20:21:59 SQL> 
20:21:59 SQL> -- rpt
20:21:59 SQL> 
20:21:59 SQL> SELECT
20:21:59   2  tkr
20:21:59   3  ,trend
20:21:59   4  ,gatt
20:21:59   5  ,COUNT(tkr)
20:21:59   6  ,AVG(g1)
20:21:59   7  FROM stk_svmd14
20:21:59   8  GROUP BY tkr,trend,gatt
20:21:59   9  ORDER BY tkr,trend,gatt
20:21:59  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XLB		  -1 nup	760    -.30925
XLB		  -1 up 	609 .425205255
XLB		  -1		  1
XLB		   1 nup       1028  -.2467607
XLB		   1 up 	671   .3695231

Elapsed: 00:00:00.01
20:21:59 SQL> 
20:21:59 SQL> -- Derive NTILE based params:
20:21:59 SQL> 
20:21:59 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.14
20:21:59 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
20:21:59   2  SELECT
20:21:59   3  tkr
20:21:59   4  ,ydate
20:21:59   5  ,tkrdate
20:21:59   6  ,clse
20:21:59   7  ,g1
20:21:59   8  ,gatt
20:21:59   9  ,gattn
20:21:59  10  ,trend
20:21:59  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:21:59  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:21:59  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:21:59  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:21:59  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:21:59  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:21:59  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:21:59  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:21:59  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:21:59  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:21:59  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:21:59  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:21:59  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:21:59  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:21:59  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:21:59  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:21:59  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:21:59  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:21:59  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:21:59  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:21:59  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:21:59  32  ,hh  att21
20:21:59  33  ,d   att22
20:21:59  34  ,w   att23
20:21:59  35  ,mpm att24
20:21:59  36  ,mph att25
20:21:59  37  ,trend att26
20:21:59  38  FROM stk_svmd14
20:21:59  39  ORDER BY ydate
20:21:59  40  /

Table created.

Elapsed: 00:00:00.43
20:22:00 SQL> 
20:22:00 SQL> -- rpt
20:22:00 SQL> 
20:22:00 SQL> SELECT
20:22:00   2  tkr
20:22:00   3  ,trend
20:22:00   4  ,gatt
20:22:00   5  ,COUNT(tkr)
20:22:00   6  ,AVG(g1)
20:22:00   7  FROM stk_svmd16
20:22:00   8  GROUP BY tkr,trend,gatt
20:22:00   9  ORDER BY tkr,trend,gatt
20:22:00  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XLB		  -1 nup	760    -.30925
XLB		  -1 up 	609 .425205255
XLB		  -1		  1
XLB		   1 nup       1028  -.2467607
XLB		   1 up 	671   .3695231

Elapsed: 00:00:00.01
20:22:00 SQL> 
20:22:00 SQL> -- Comment out feedback related syntax:
20:22:00 SQL> 
20:22:00 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
20:22:00 SQL> -- SELECT
20:22:00 SQL> -- m.tkr
20:22:00 SQL> -- ,m.ydate
20:22:00 SQL> -- ,m.tkrdate
20:22:00 SQL> -- ,l.score score_long
20:22:00 SQL> -- ,s.score score_short
20:22:00 SQL> -- ,m.g1
20:22:00 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
20:22:00 SQL> -- WHERE l.targ='gatt'
20:22:00 SQL> -- AND	 s.targ='gattn'
20:22:00 SQL> -- AND l.tkrdate = s.tkrdate
20:22:00 SQL> -- AND l.tkrdate = m.tkrdate
20:22:00 SQL> -- -- Speed things up:
20:22:00 SQL> -- AND l.tkr = '&1'
20:22:00 SQL> -- AND s.tkr = '&1'
20:22:00 SQL> -- /
20:22:00 SQL> --
20:22:00 SQL> -- DROP TABLE score_corr_tkr;
20:22:00 SQL> --
20:22:00 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
20:22:00 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:22:00 SQL> -- (
20:22:00 SQL> --   SELECT
20:22:00 SQL> --   tkrdate
20:22:00 SQL> --   -- Find corr() tween score and g1 over 8 day period:
20:22:00 SQL> --   ,CORR((score_long - score_short),g1)
20:22:00 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
20:22:00 SQL> --   FROM sc12tkr
20:22:00 SQL> -- )
20:22:00 SQL> -- GROUP BY tkrdate
20:22:00 SQL> -- /
20:22:00 SQL> 
20:22:00 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:22:00 SQL> 
20:22:00 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.11
20:22:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
20:22:00 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
20:22:00   2  SELECT
20:22:00   3  tkr
20:22:00   4  ,ydate
20:22:00   5  ,tkrdate
20:22:00   6  ,trend
20:22:00   7  ,g1
20:22:00   8  ,gatt
20:22:00   9  ,gattn
20:22:00  10  -- Goodness attributes:
20:22:00  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
20:22:00  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
20:22:00  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
20:22:00  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
20:22:00  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
20:22:00  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
20:22:00  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
20:22:00  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
20:22:00  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
20:22:00  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
20:22:00  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
20:22:00  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
20:22:00  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
20:22:00  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
20:22:00  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
20:22:00  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
20:22:00  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
20:22:00  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
20:22:00  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
20:22:00  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
20:22:00  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
20:22:00  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
20:22:00  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
20:22:00  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
20:22:00  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
20:22:00  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
20:22:00  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
20:22:00  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:22:00  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
20:22:00  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
20:22:00  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
20:22:00  42  FROM stk_svmd16
20:22:00  43  /

Table created.

Elapsed: 00:00:00.57
20:22:01 SQL> 
20:22:01 SQL> -- rpt
20:22:01 SQL> 
20:22:01 SQL> SELECT
20:22:01   2  tkr
20:22:01   3  ,trend
20:22:01   4  ,gatt
20:22:01   5  ,COUNT(tkr)
20:22:01   6  ,AVG(g1)
20:22:01   7  FROM stk_ms_svmd_svmspy
20:22:01   8  GROUP BY tkr,trend,gatt
20:22:01   9  ORDER BY tkr,trend,gatt
20:22:01  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
XLB		  -1 nup	760    -.30925
XLB		  -1 up 	609 .425205255
XLB		  -1		  1
XLB		   1 nup       1028  -.2467607
XLB		   1 up 	671   .3695231

Elapsed: 00:00:00.02
20:22:01 SQL> 
20:22:01 SQL> SELECT
20:22:01   2  tkr
20:22:01   3  ,COUNT(tkr)
20:22:01   4  ,MIN(ydate),MAX(ydate)
20:22:01   5  FROM stk_ms_svmd_svmspy
20:22:01   6  GROUP BY tkr
20:22:01   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
XLB		3069 1998-12-22 20:00:00 2011-05-05 20:00:00

Elapsed: 00:00:00.00
20:22:01 SQL> 
20:22:01 SQL> -- exit
20:22:01 SQL> 
20:22:01 SQL> 
20:22:01 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.20
20:22:01 SQL> 
20:22:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
20:22:01 SQL> 
20:22:01 SQL> CREATE TABLE stk_ms_u COMPRESS AS
20:22:01   2  SELECT * FROM stk_ms_svmspy
20:22:01   3  UNION
20:22:01   4  SELECT * FROM stk_ms_svmd_svmspy
20:22:01   5  /

Table created.

Elapsed: 00:00:00.25
20:22:01 SQL> 
20:22:01 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
