
SQL*Plus: Release 11.2.0.1.0 Production on Wed Mar 30 04:11:32 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:11:32 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
04:11:32 SQL> 
04:11:32 SQL> 04:11:32 SQL> --
04:11:32 SQL> -- stk10u.sql
04:11:32 SQL> --
04:11:32 SQL> 
04:11:32 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
04:11:32 SQL> 
04:11:32 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
04:11:32 SQL> @stk10.sql     '&1'
04:11:32 SQL> --
04:11:32 SQL> -- stk10.sql
04:11:32 SQL> --
04:11:32 SQL> 
04:11:32 SQL> -- Creates views and tables for demonstrating SVM.
04:11:32 SQL> 
04:11:32 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.06
04:11:32 SQL> 
04:11:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
04:11:32 SQL> 
04:11:32 SQL> CREATE TABLE stk10svmspy COMPRESS AS
04:11:32   2  SELECT
04:11:32   3  tkr
04:11:32   4  ,ydate
04:11:32   5  ,tkr||ydate tkrdate
04:11:32   6  ,clse
04:11:32   7  ,clse2
04:11:32   8  ,rownum rnum -- acts as t in my time-series
04:11:32   9  -- g1 is important. I want to predict g1:
04:11:32  10  ,gain1day g1
04:11:32  11  -- Derive some attributes from clse.
04:11:32  12  -- Each row spans 5 minutes.
04:11:32  13  -- The number of rows in 1 day is 24*60/5.
04:11:32  14  -- I want the aggregations to span from 3 days to 9 days:
04:11:32  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
04:11:32  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
04:11:32  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
04:11:32  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
04:11:32  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
04:11:32  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
04:11:32  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
04:11:32  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
04:11:32  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
04:11:32  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
04:11:32  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
04:11:32  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
04:11:32  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
04:11:32  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
04:11:32  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
04:11:32  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
04:11:32  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
04:11:32  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
04:11:32  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
04:11:32  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
04:11:32  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
04:11:32  36  FROM di5min_stk_c2
04:11:32  37  WHERE UPPER(tkr)='&1'
04:11:32  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
04:11:32  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
04:11:32  40  ORDER BY ydate
04:11:32  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='MVG'

Table created.

Elapsed: 00:00:02.70
04:11:35 SQL> 
04:11:35 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
04:11:35 SQL> 
04:11:35 SQL> -- rpt
04:11:35 SQL> 
04:11:35 SQL> SELECT
04:11:35   2  tkr
04:11:35   3  ,COUNT(tkr)ccount
04:11:35   4  ,MIN(clse)mnclse,MAX(clse)mxclse
04:11:35   5  -- ,MIN(avg4),MAX(avg4)
04:11:35   6  ,MIN(ydate),MAX(ydate)
04:11:35   7  ,MIN(g1)
04:11:35   8  ,MAX(g1)
04:11:35   9  FROM stk10svmspy
04:11:35  10  GROUP BY tkr
04:11:35  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
MVG	      3380	 9.25	   13.35 2011-01-21 14:30:00 2011-03-29 15:40:00      -1.54	  1.31

Elapsed: 00:00:00.01
04:11:35 SQL> 
04:11:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:11:35 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:05.23
04:11:41 SQL> CREATE TABLE stk12svmspy COMPRESS AS
04:11:41   2  SELECT
04:11:41   3  tkr
04:11:41   4  ,ydate
04:11:41   5  ,tkrdate
04:11:41   6  ,clse
04:11:41   7  ,rnum
04:11:41   8  ,g1
04:11:41   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
04:11:41  10  -- I want more attributes from the ones I derived above:
04:11:41  11  -- clse relation to moving-min
04:11:41  12  ,clse-min3  cm3
04:11:41  13  ,clse-min4  cm4
04:11:41  14  ,clse-min5  cm5
04:11:41  15  ,clse-min6  cm6
04:11:41  16  ,clse-min7  cm7
04:11:41  17  ,clse-min8  cm8
04:11:41  18  ,clse-min9  cm9
04:11:41  19  -- clse relation to moving-avg
04:11:41  20  ,clse-avg3  ca3
04:11:41  21  ,clse-avg4  ca4
04:11:41  22  ,clse-avg5  ca5
04:11:41  23  ,clse-avg6  ca6
04:11:41  24  ,clse-avg7  ca7
04:11:41  25  ,clse-avg8  ca8
04:11:41  26  ,clse-avg9  ca9
04:11:41  27  -- clse relation to moving-max
04:11:41  28  ,clse-max3  cx3
04:11:41  29  ,clse-max4  cx4
04:11:41  30  ,clse-max5  cx5
04:11:41  31  ,clse-max6  cx6
04:11:41  32  ,clse-max7  cx7
04:11:41  33  ,clse-max8  cx8
04:11:41  34  ,clse-max9  cx9
04:11:41  35  -- Derive date related attributes:
04:11:41  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:11:41  37  ,0+TO_CHAR(ydate,'D')d
04:11:41  38  ,0+TO_CHAR(ydate,'W')w
04:11:41  39  -- mpm stands for minutes-past-midnight:
04:11:41  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:11:41  41  -- mph stands for minutes-past-hour:
04:11:41  42  ,0+TO_CHAR(ydate,'MI')mph
04:11:41  43  FROM stk10svmspy
04:11:41  44  ORDER BY ydate
04:11:41  45  /

Table created.

Elapsed: 00:00:00.12
04:11:41 SQL> 
04:11:41 SQL> -- rpt
04:11:41 SQL> 
04:11:41 SQL> SELECT
04:11:41   2  tkr
04:11:41   3  ,COUNT(tkr)ccount
04:11:41   4  ,MIN(clse)mnclse,MAX(clse)mxclse
04:11:41   5  -- ,MIN(avg4),MAX(avg4)
04:11:41   6  ,MIN(ydate),MAX(ydate)
04:11:41   7  ,MIN(g1)
04:11:41   8  ,AVG(g1)
04:11:41   9  ,MAX(g1)
04:11:41  10  FROM stk12svmspy
04:11:41  11  GROUP BY tkr
04:11:41  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
MVG	      3380	 9.25	   13.35 2011-01-21 14:30:00 2011-03-29 15:40:00      -1.54 .049502075	     1.31

Elapsed: 00:00:00.01
04:11:41 SQL> 
04:11:41 SQL> -- Prepare for derivation of NTILE based parameters.
04:11:41 SQL> -- Also derive the "trend" parameter:
04:11:41 SQL> 
04:11:41 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
04:11:41 SQL> CREATE TABLE stk14svmspy COMPRESS AS
04:11:41   2  SELECT
04:11:41   3  tkr
04:11:41   4  ,ydate
04:11:41   5  ,tkrdate
04:11:41   6  ,clse
04:11:41   7  ,g1
04:11:41   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
04:11:41   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
04:11:41  10  ,CASE WHEN trend IS NULL THEN 1
04:11:41  11  	    WHEN trend =0      THEN 1
04:11:41  12  	    ELSE trend END trend
04:11:41  13  ,cm3
04:11:41  14  ,cm4
04:11:41  15  ,cm5
04:11:41  16  ,cm6
04:11:41  17  ,cm7
04:11:41  18  ,cm8
04:11:41  19  ,cm9
04:11:41  20  ,ca3
04:11:41  21  ,ca4
04:11:41  22  ,ca5
04:11:41  23  ,ca6
04:11:41  24  ,ca7
04:11:41  25  ,ca8
04:11:41  26  ,ca9
04:11:41  27  ,cx3
04:11:41  28  ,cx4
04:11:41  29  ,cx5
04:11:41  30  ,cx6
04:11:41  31  ,cx7
04:11:41  32  ,cx8
04:11:41  33  ,cx9
04:11:41  34  ,hh
04:11:41  35  ,d
04:11:41  36  ,w
04:11:41  37  ,mpm
04:11:41  38  ,mph
04:11:41  39  FROM stk12svmspy
04:11:41  40  -- Guard against divide by 0:
04:11:41  41  WHERE clse > 0
04:11:41  42  ORDER BY ydate
04:11:41  43  /

Table created.

Elapsed: 00:00:00.08
04:11:41 SQL> 
04:11:41 SQL> -- rpt
04:11:41 SQL> 
04:11:41 SQL> SELECT
04:11:41   2  tkr
04:11:41   3  ,trend
04:11:41   4  ,gatt
04:11:41   5  ,COUNT(tkr)
04:11:41   6  ,AVG(g1)
04:11:41   7  FROM stk14svmspy
04:11:41   8  GROUP BY tkr,trend,gatt
04:11:41   9  ORDER BY tkr,trend,gatt
04:11:41  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MVG		-1 nup	      169 -.24402367
MVG		-1 up	      395 .211620253
MVG		-1	       79
MVG		 1 nup	     1359 -.27381894
MVG		 1 up	     1210 .400710695
MVG		 1	      168

6 rows selected.

Elapsed: 00:00:00.01
04:11:41 SQL> 
04:11:41 SQL> -- Derive NTILE based params:
04:11:41 SQL> 
04:11:41 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
04:11:41 SQL> CREATE TABLE stk16svmspy COMPRESS AS
04:11:41   2  SELECT
04:11:41   3  tkr
04:11:41   4  ,ydate
04:11:41   5  ,tkrdate
04:11:41   6  ,clse
04:11:41   7  ,g1
04:11:41   8  ,gatt
04:11:41   9  ,gattn
04:11:41  10  ,trend
04:11:41  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
04:11:41  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
04:11:41  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
04:11:41  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
04:11:41  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
04:11:41  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
04:11:41  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
04:11:41  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
04:11:41  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
04:11:41  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
04:11:41  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
04:11:41  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
04:11:41  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
04:11:41  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
04:11:41  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
04:11:41  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
04:11:41  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
04:11:41  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
04:11:41  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
04:11:41  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
04:11:41  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
04:11:41  32  ,hh  att21
04:11:41  33  ,d   att22
04:11:41  34  ,w   att23
04:11:41  35  ,mpm att24
04:11:41  36  ,mph att25
04:11:41  37  ,trend att26
04:11:41  38  FROM stk14svmspy
04:11:41  39  ORDER BY ydate
04:11:41  40  /

Table created.

Elapsed: 00:00:00.44
04:11:41 SQL> 
04:11:41 SQL> -- rpt
04:11:41 SQL> 
04:11:41 SQL> SELECT
04:11:41   2  tkr
04:11:41   3  ,trend
04:11:41   4  ,gatt
04:11:41   5  ,COUNT(tkr)
04:11:41   6  ,AVG(g1)
04:11:41   7  FROM stk16svmspy
04:11:41   8  GROUP BY tkr,trend,gatt
04:11:41   9  ORDER BY tkr,trend,gatt
04:11:41  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MVG		-1 nup	      169 -.24402367
MVG		-1 up	      395 .211620253
MVG		-1	       79
MVG		 1 nup	     1359 -.27381894
MVG		 1 up	     1210 .400710695
MVG		 1	      168

6 rows selected.

Elapsed: 00:00:00.01
04:11:41 SQL> 
04:11:41 SQL> -- Comment out feedback related syntax:
04:11:41 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
04:11:41 SQL> -- SELECT
04:11:41 SQL> -- m.tkr
04:11:41 SQL> -- ,m.ydate
04:11:41 SQL> -- ,m.tkrdate
04:11:41 SQL> -- ,l.score score_long
04:11:41 SQL> -- ,s.score score_short
04:11:41 SQL> -- ,m.g1
04:11:41 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
04:11:41 SQL> -- WHERE l.targ='gatt'
04:11:41 SQL> -- AND	 s.targ='gattn'
04:11:41 SQL> -- AND l.tkrdate = s.tkrdate
04:11:41 SQL> -- AND l.tkrdate = m.tkrdate
04:11:41 SQL> -- -- Speed things up:
04:11:41 SQL> -- AND l.tkr = '&1'
04:11:41 SQL> -- AND s.tkr = '&1'
04:11:41 SQL> -- /
04:11:41 SQL> --
04:11:41 SQL> -- DROP TABLE score_corr_tkr;
04:11:41 SQL> --
04:11:41 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
04:11:41 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
04:11:41 SQL> -- (
04:11:41 SQL> --   SELECT
04:11:41 SQL> --   tkrdate
04:11:41 SQL> --   -- Find corr() tween score and g1 over 8 day period:
04:11:41 SQL> --   ,CORR((score_long - score_short),g1)
04:11:41 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
04:11:41 SQL> --   FROM sc12tkr
04:11:41 SQL> -- )
04:11:41 SQL> -- GROUP BY tkrdate
04:11:41 SQL> -- /
04:11:41 SQL> 
04:11:41 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
04:11:41 SQL> 
04:11:41 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.05
04:11:41 SQL> 
04:11:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
04:11:42 SQL> 
04:11:42 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
04:11:42   2  SELECT
04:11:42   3  tkr
04:11:42   4  ,ydate
04:11:42   5  ,tkrdate
04:11:42   6  ,trend
04:11:42   7  ,g1
04:11:42   8  ,gatt
04:11:42   9  ,gattn
04:11:42  10  -- Goodness attributes:
04:11:42  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
04:11:42  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
04:11:42  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
04:11:42  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
04:11:42  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
04:11:42  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
04:11:42  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
04:11:42  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
04:11:42  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
04:11:42  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
04:11:42  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
04:11:42  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
04:11:42  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
04:11:42  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
04:11:42  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
04:11:42  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
04:11:42  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
04:11:42  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
04:11:42  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
04:11:42  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
04:11:42  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
04:11:42  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
04:11:42  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
04:11:42  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
04:11:42  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
04:11:42  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
04:11:42  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
04:11:42  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
04:11:42  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
04:11:42  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
04:11:42  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
04:11:42  42  FROM stk16svmspy
04:11:42  43  /

Table created.

Elapsed: 00:00:00.57
04:11:42 SQL> 
04:11:42 SQL> -- rpt
04:11:42 SQL> 
04:11:42 SQL> SELECT
04:11:42   2  tkr
04:11:42   3  ,trend
04:11:42   4  ,gatt
04:11:42   5  ,COUNT(tkr)
04:11:42   6  ,AVG(g1)
04:11:42   7  FROM stk_ms_svmspy
04:11:42   8  GROUP BY tkr,trend,gatt
04:11:42   9  ORDER BY tkr,trend,gatt
04:11:42  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
MVG		-1 nup	      169 -.24402367
MVG		-1 up	      395 .211620253
MVG		-1	       79
MVG		 1 nup	     1359 -.27381894
MVG		 1 up	     1210 .400710695
MVG		 1	      168

6 rows selected.

Elapsed: 00:00:00.01
04:11:42 SQL> 
04:11:42 SQL> SELECT
04:11:42   2  tkr
04:11:42   3  ,0+TO_CHAR(ydate,'D')daynum
04:11:42   4  ,COUNT(tkr)
04:11:42   5  ,MIN(ydate),MAX(ydate)
04:11:42   6  FROM stk_ms_svmspy
04:11:42   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
04:11:42   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
04:11:42   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
MVG		 2	  623 2011-01-24 14:30:00 2011-03-28 19:55:00
MVG		 3	  651 2011-01-25 14:30:00 2011-03-29 15:40:00
MVG		 4	  624 2011-01-26 14:30:00 2011-03-23 19:55:00
MVG		 5	  702 2011-01-27 14:30:00 2011-03-24 19:55:00
MVG		 6	  780 2011-01-21 14:30:00 2011-03-25 19:55:00

Elapsed: 00:00:00.01
04:11:42 SQL> 
04:11:42 SQL> -- exit
04:11:42 SQL> @stk10svmd.sql '&1'
04:11:42 SQL> --
04:11:42 SQL> -- stk10svmd.sql
04:11:42 SQL> --
04:11:42 SQL> 
04:11:42 SQL> -- Creates views and tables for demonstrating SVM.
04:11:42 SQL> -- I need to run this after I run stk10.sql
04:11:42 SQL> 
04:11:42 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.04
04:11:42 SQL> 
04:11:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
04:11:42 SQL> 
04:11:42 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
04:11:42   2  SELECT
04:11:42   3  tkr
04:11:42   4  ,ydate
04:11:42   5  ,tkr||ydate tkrdate
04:11:42   6  ,clse
04:11:42   7  ,rownum rnum -- acts as t in my time-series
04:11:42   8  -- Derive some attributes from clse.
04:11:42   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
04:11:42  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
04:11:42  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
04:11:42  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
04:11:42  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
04:11:42  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
04:11:42  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
04:11:42  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
04:11:42  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
04:11:42  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
04:11:42  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
04:11:42  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
04:11:42  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
04:11:42  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
04:11:42  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
04:11:42  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
04:11:42  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
04:11:42  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
04:11:42  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
04:11:42  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
04:11:42  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
04:11:42  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
04:11:42  31  -- ystk21 created here: svmd/cr_ystk21.sql
04:11:42  32  FROM ystk21
04:11:42  33  WHERE UPPER(tkr)='&1'
04:11:42  34  AND ydate > '1990-01-01'
04:11:42  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
04:11:42  36  ORDER BY ydate
04:11:42  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='MVG'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='MVG')

Table created.

Elapsed: 00:00:02.01
04:11:44 SQL> 
04:11:44 SQL> -- rpt
04:11:44 SQL> 
04:11:44 SQL> SELECT
04:11:44   2  tkr
04:11:44   3  ,COUNT(tkr)
04:11:44   4  ,MIN(clse),MAX(clse)
04:11:44   5  ,MIN(avg4),MAX(avg4)
04:11:44   6  ,MIN(ydate),MAX(ydate)
04:11:44   7  FROM stk_svmd10svmspy
04:11:44   8  GROUP BY tkr
04:11:44   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
MVG		1019	   3.16      17.38	 3.49	  16.806 2007-03-14 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.00
04:11:44 SQL> 
04:11:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:11:44 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.07
04:11:44 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
04:11:44   2  SELECT
04:11:44   3  tkr
04:11:44   4  ,ydate
04:11:44   5  ,tkrdate
04:11:44   6  ,clse
04:11:44   7  ,rnum
04:11:44   8  -- g1 is important. I want to predict g1:
04:11:44   9  ,ld - clse g1
04:11:44  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
04:11:44  11  -- I want more attributes from the ones I derived above:
04:11:44  12  -- clse relation to moving-min
04:11:44  13  ,clse-min3  cm3
04:11:44  14  ,clse-min4  cm4
04:11:44  15  ,clse-min5  cm5
04:11:44  16  ,clse-min6  cm6
04:11:44  17  ,clse-min7  cm7
04:11:44  18  ,clse-min8  cm8
04:11:44  19  ,clse-min9  cm9
04:11:44  20  -- clse relation to moving-avg
04:11:44  21  ,clse-avg3  ca3
04:11:44  22  ,clse-avg4  ca4
04:11:44  23  ,clse-avg5  ca5
04:11:44  24  ,clse-avg6  ca6
04:11:44  25  ,clse-avg7  ca7
04:11:44  26  ,clse-avg8  ca8
04:11:44  27  ,clse-avg9  ca9
04:11:44  28  -- clse relation to moving-max
04:11:44  29  ,clse-max3  cx3
04:11:44  30  ,clse-max4  cx4
04:11:44  31  ,clse-max5  cx5
04:11:44  32  ,clse-max6  cx6
04:11:44  33  ,clse-max7  cx7
04:11:44  34  ,clse-max8  cx8
04:11:44  35  ,clse-max9  cx9
04:11:44  36  -- Derive date related attributes:
04:11:44  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:11:44  38  ,0+TO_CHAR(ydate,'D')d
04:11:44  39  ,0+TO_CHAR(ydate,'W')w
04:11:44  40  -- mpm stands for minutes-past-midnight:
04:11:44  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:11:44  42  -- mph stands for minutes-past-hour:
04:11:44  43  ,0+TO_CHAR(ydate,'MI')mph
04:11:44  44  FROM stk_svmd10svmspy
04:11:44  45  ORDER BY ydate
04:11:44  46  /

Table created.

Elapsed: 00:00:00.10
04:11:45 SQL> 
04:11:45 SQL> -- rpt
04:11:45 SQL> 
04:11:45 SQL> SELECT
04:11:45   2  tkr
04:11:45   3  ,COUNT(tkr)
04:11:45   4  ,MIN(clse),MAX(clse)
04:11:45   5  ,MIN(ydate),MAX(ydate)
04:11:45   6  FROM stk_svmd12
04:11:45   7  GROUP BY tkr
04:11:45   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
MVG		1019	   3.16      17.38 2007-03-14 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.02
04:11:45 SQL> 
04:11:45 SQL> -- Prepare for derivation of NTILE based parameters.
04:11:45 SQL> -- Also derive the "trend" parameter:
04:11:45 SQL> 
04:11:45 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
04:11:45 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
04:11:45   2  SELECT
04:11:45   3  tkr
04:11:45   4  ,ydate
04:11:45   5  ,tkrdate
04:11:45   6  ,clse
04:11:45   7  ,g1
04:11:45   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
04:11:45   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
04:11:45  10  ,CASE WHEN trend IS NULL THEN 1
04:11:45  11  	    WHEN trend =0      THEN 1
04:11:45  12  	    ELSE trend END trend
04:11:45  13  ,cm3
04:11:45  14  ,cm4
04:11:45  15  ,cm5
04:11:45  16  ,cm6
04:11:45  17  ,cm7
04:11:45  18  ,cm8
04:11:45  19  ,cm9
04:11:45  20  ,ca3
04:11:45  21  ,ca4
04:11:45  22  ,ca5
04:11:45  23  ,ca6
04:11:45  24  ,ca7
04:11:45  25  ,ca8
04:11:45  26  ,ca9
04:11:45  27  ,cx3
04:11:45  28  ,cx4
04:11:45  29  ,cx5
04:11:45  30  ,cx6
04:11:45  31  ,cx7
04:11:45  32  ,cx8
04:11:45  33  ,cx9
04:11:45  34  ,hh
04:11:45  35  ,d
04:11:45  36  ,w
04:11:45  37  ,mpm
04:11:45  38  ,mph
04:11:45  39  FROM stk_svmd12
04:11:45  40  -- Guard against divide by 0:
04:11:45  41  WHERE clse > 0
04:11:45  42  ORDER BY ydate
04:11:45  43  /

Table created.

Elapsed: 00:00:00.06
04:11:45 SQL> 
04:11:45 SQL> -- rpt
04:11:45 SQL> 
04:11:45 SQL> SELECT
04:11:45   2  tkr
04:11:45   3  ,trend
04:11:45   4  ,gatt
04:11:45   5  ,COUNT(tkr)
04:11:45   6  ,AVG(g1)
04:11:45   7  FROM stk_svmd14
04:11:45   8  GROUP BY tkr,trend,gatt
04:11:45   9  ORDER BY tkr,trend,gatt
04:11:45  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MVG		  -1 nup	281 -.18932384
MVG		  -1 up 	222 .231396396
MVG		   1 nup	283 -.17618375
MVG		   1 up 	232 .241767241
MVG		   1		  1

Elapsed: 00:00:00.01
04:11:45 SQL> 
04:11:45 SQL> -- Derive NTILE based params:
04:11:45 SQL> 
04:11:45 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.03
04:11:45 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
04:11:45   2  SELECT
04:11:45   3  tkr
04:11:45   4  ,ydate
04:11:45   5  ,tkrdate
04:11:45   6  ,clse
04:11:45   7  ,g1
04:11:45   8  ,gatt
04:11:45   9  ,gattn
04:11:45  10  ,trend
04:11:45  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
04:11:45  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
04:11:45  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
04:11:45  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
04:11:45  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
04:11:45  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
04:11:45  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
04:11:45  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
04:11:45  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
04:11:45  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
04:11:45  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
04:11:45  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
04:11:45  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
04:11:45  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
04:11:45  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
04:11:45  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
04:11:45  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
04:11:45  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
04:11:45  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
04:11:45  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
04:11:45  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
04:11:45  32  ,hh  att21
04:11:45  33  ,d   att22
04:11:45  34  ,w   att23
04:11:45  35  ,mpm att24
04:11:45  36  ,mph att25
04:11:45  37  ,trend att26
04:11:45  38  FROM stk_svmd14
04:11:45  39  ORDER BY ydate
04:11:45  40  /

Table created.

Elapsed: 00:00:00.13
04:11:45 SQL> 
04:11:45 SQL> -- rpt
04:11:45 SQL> 
04:11:45 SQL> SELECT
04:11:45   2  tkr
04:11:45   3  ,trend
04:11:45   4  ,gatt
04:11:45   5  ,COUNT(tkr)
04:11:45   6  ,AVG(g1)
04:11:45   7  FROM stk_svmd16
04:11:45   8  GROUP BY tkr,trend,gatt
04:11:45   9  ORDER BY tkr,trend,gatt
04:11:45  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MVG		  -1 nup	281 -.18932384
MVG		  -1 up 	222 .231396396
MVG		   1 nup	283 -.17618375
MVG		   1 up 	232 .241767241
MVG		   1		  1

Elapsed: 00:00:00.00
04:11:45 SQL> 
04:11:45 SQL> -- Comment out feedback related syntax:
04:11:45 SQL> 
04:11:45 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
04:11:45 SQL> -- SELECT
04:11:45 SQL> -- m.tkr
04:11:45 SQL> -- ,m.ydate
04:11:45 SQL> -- ,m.tkrdate
04:11:45 SQL> -- ,l.score score_long
04:11:45 SQL> -- ,s.score score_short
04:11:45 SQL> -- ,m.g1
04:11:45 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
04:11:45 SQL> -- WHERE l.targ='gatt'
04:11:45 SQL> -- AND	 s.targ='gattn'
04:11:45 SQL> -- AND l.tkrdate = s.tkrdate
04:11:45 SQL> -- AND l.tkrdate = m.tkrdate
04:11:45 SQL> -- -- Speed things up:
04:11:45 SQL> -- AND l.tkr = '&1'
04:11:45 SQL> -- AND s.tkr = '&1'
04:11:45 SQL> -- /
04:11:45 SQL> --
04:11:45 SQL> -- DROP TABLE score_corr_tkr;
04:11:45 SQL> --
04:11:45 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
04:11:45 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
04:11:45 SQL> -- (
04:11:45 SQL> --   SELECT
04:11:45 SQL> --   tkrdate
04:11:45 SQL> --   -- Find corr() tween score and g1 over 8 day period:
04:11:45 SQL> --   ,CORR((score_long - score_short),g1)
04:11:45 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
04:11:45 SQL> --   FROM sc12tkr
04:11:45 SQL> -- )
04:11:45 SQL> -- GROUP BY tkrdate
04:11:45 SQL> -- /
04:11:45 SQL> 
04:11:45 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
04:11:45 SQL> 
04:11:45 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.07
04:11:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
04:11:45 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
04:11:45   2  SELECT
04:11:45   3  tkr
04:11:45   4  ,ydate
04:11:45   5  ,tkrdate
04:11:45   6  ,trend
04:11:45   7  ,g1
04:11:45   8  ,gatt
04:11:45   9  ,gattn
04:11:45  10  -- Goodness attributes:
04:11:45  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
04:11:45  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
04:11:45  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
04:11:45  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
04:11:45  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
04:11:45  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
04:11:45  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
04:11:45  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
04:11:45  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
04:11:45  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
04:11:45  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
04:11:45  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
04:11:45  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
04:11:45  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
04:11:45  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
04:11:45  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
04:11:45  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
04:11:45  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
04:11:45  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
04:11:45  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
04:11:45  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
04:11:45  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
04:11:45  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
04:11:45  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
04:11:45  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
04:11:45  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
04:11:45  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
04:11:45  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
04:11:45  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
04:11:45  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
04:11:45  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
04:11:45  42  FROM stk_svmd16
04:11:45  43  /

Table created.

Elapsed: 00:00:00.23
04:11:45 SQL> 
04:11:45 SQL> -- rpt
04:11:45 SQL> 
04:11:45 SQL> SELECT
04:11:45   2  tkr
04:11:45   3  ,trend
04:11:45   4  ,gatt
04:11:45   5  ,COUNT(tkr)
04:11:45   6  ,AVG(g1)
04:11:45   7  FROM stk_ms_svmd_svmspy
04:11:45   8  GROUP BY tkr,trend,gatt
04:11:45   9  ORDER BY tkr,trend,gatt
04:11:45  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
MVG		  -1 nup	281 -.18932384
MVG		  -1 up 	222 .231396396
MVG		   1 nup	283 -.17618375
MVG		   1 up 	232 .241767241
MVG		   1		  1

Elapsed: 00:00:00.01
04:11:45 SQL> 
04:11:45 SQL> SELECT
04:11:45   2  tkr
04:11:45   3  ,COUNT(tkr)
04:11:45   4  ,MIN(ydate),MAX(ydate)
04:11:45   5  FROM stk_ms_svmd_svmspy
04:11:45   6  GROUP BY tkr
04:11:45   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
MVG		1019 2007-03-14 21:00:00 2011-03-28 21:00:00

Elapsed: 00:00:00.00
04:11:45 SQL> 
04:11:45 SQL> -- exit
04:11:45 SQL> 
04:11:45 SQL> 
04:11:45 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.05
04:11:45 SQL> 
04:11:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
04:11:46 SQL> 
04:11:46 SQL> CREATE TABLE stk_ms_u COMPRESS AS
04:11:46   2  SELECT * FROM stk_ms_svmspy
04:11:46   3  UNION
04:11:46   4  SELECT * FROM stk_ms_svmd_svmspy
04:11:46   5  /

Table created.

Elapsed: 00:00:00.11
04:11:46 SQL> 
04:11:46 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
