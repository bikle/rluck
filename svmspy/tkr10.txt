
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 14 14:26:34 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

14:26:34 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
14:26:34 SQL> 14:26:34 SQL> --
14:26:34 SQL> -- stk10.sql
14:26:34 SQL> --
14:26:34 SQL> 
14:26:34 SQL> -- Creates views and tables for demonstrating SVM.
14:26:34 SQL> 
14:26:34 SQL> DROP VIEW stk10;
DROP VIEW stk10
*
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.27
14:26:34 SQL> 
14:26:34 SQL> DROP TABLE stk10;

Table dropped.

Elapsed: 00:00:00.86
14:26:35 SQL> 
14:26:35 SQL> CREATE TABLE stk10 COMPRESS AS
14:26:35   2  SELECT
14:26:35   3  tkr
14:26:35   4  ,ydate
14:26:35   5  ,tkr||ydate tkrdate
14:26:35   6  ,clse
14:26:35   7  ,clse2
14:26:35   8  ,gain1day
14:26:35   9  ,rownum rnum -- acts as t in my time-series
14:26:35  10  -- Derive some attributes from clse.
14:26:35  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
14:26:35  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
14:26:35  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:26:35  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
14:26:35  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:26:35  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
14:26:35  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:26:35  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
14:26:35  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
14:26:35  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:26:35  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
14:26:35  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:26:35  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
14:26:35  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:26:35  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
14:26:35  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
14:26:35  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:26:35  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
14:26:35  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:26:35  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
14:26:35  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:26:35  32  FROM di5min_stk_c2
14:26:35  33  WHERE UPPER(tkr)='&1'
14:26:35  34  AND 0+TO_CHAR(ydate,'D')BETWEEN 2 AND 6
14:26:35  35  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
14:26:35  36  ORDER BY ydate
14:26:35  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='QQQQ'

Table created.

Elapsed: 00:00:01.36
14:26:37 SQL> 
14:26:37 SQL> ANALYZE TABLE stk10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.85
14:26:39 SQL> 
14:26:39 SQL> -- rpt
14:26:39 SQL> 
14:26:39 SQL> SELECT
14:26:39   2  tkr
14:26:39   3  ,COUNT(tkr)
14:26:39   4  ,MIN(clse),MAX(clse)
14:26:39   5  ,MIN(avg4),MAX(avg4)
14:26:39   6  ,MIN(ydate),MAX(ydate)
14:26:39   7  FROM stk10
14:26:39   8  GROUP BY tkr
14:26:39   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
QQQQ	     24574	 40.7	    56.5 40.9803061	 56.27 2009-10-28 18:10:00 2011-01-12 16:50:00

Elapsed: 00:00:00.03
14:26:40 SQL> 
14:26:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:26:40 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.10
14:26:40 SQL> CREATE TABLE stk12 COMPRESS AS
14:26:40   2  SELECT
14:26:40   3  tkr
14:26:40   4  ,ydate
14:26:40   5  ,tkrdate
14:26:40   6  ,clse
14:26:40   7  ,rnum
14:26:40   8  -- g4 is important. I want to predict g4:
14:26:40   9  ,gain1day g4
14:26:40  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
14:26:40  11  -- I want more attributes from the ones I derived above:
14:26:40  12  -- clse relation to moving-min
14:26:40  13  ,clse-min2  cm2
14:26:40  14  ,clse-min3  cm3
14:26:40  15  ,clse-min4  cm4
14:26:40  16  ,clse-min5  cm5
14:26:40  17  ,clse-min6  cm6
14:26:40  18  ,clse-min7  cm7
14:26:40  19  ,clse-min8  cm8
14:26:40  20  -- clse relation to moving-avg
14:26:40  21  ,clse-avg2  ca2
14:26:40  22  ,clse-avg3  ca3
14:26:40  23  ,clse-avg4  ca4
14:26:40  24  ,clse-avg5  ca5
14:26:40  25  ,clse-avg6  ca6
14:26:40  26  ,clse-avg7  ca7
14:26:40  27  ,clse-avg8  ca8
14:26:40  28  -- clse relation to moving-max
14:26:40  29  ,clse-max2  cx2
14:26:40  30  ,clse-max3  cx3
14:26:40  31  ,clse-max4  cx4
14:26:40  32  ,clse-max5  cx5
14:26:40  33  ,clse-max6  cx6
14:26:40  34  ,clse-max7  cx7
14:26:40  35  ,clse-max8  cx8
14:26:40  36  -- Derive date related attributes:
14:26:40  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:26:40  38  ,0+TO_CHAR(ydate,'D')d
14:26:40  39  ,0+TO_CHAR(ydate,'W')w
14:26:40  40  -- mpm stands for minutes-past-midnight:
14:26:40  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:26:40  42  -- mph stands for minutes-past-hour:
14:26:40  43  ,0+TO_CHAR(ydate,'MI')mph
14:26:40  44  FROM stk10
14:26:40  45  ORDER BY ydate
14:26:40  46  /

Table created.

Elapsed: 00:00:00.57
14:26:40 SQL> 
14:26:40 SQL> -- rpt
14:26:40 SQL> 
14:26:40 SQL> SELECT
14:26:40   2  tkr
14:26:40   3  ,COUNT(tkr)
14:26:40   4  ,MIN(clse),MAX(clse)
14:26:40   5  ,MIN(ydate),MAX(ydate)
14:26:40   6  FROM stk12
14:26:40   7  GROUP BY tkr
14:26:40   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
QQQQ	     24574	 40.7	    56.5 2009-10-28 18:10:00 2011-01-12 16:50:00

Elapsed: 00:00:00.04
14:26:40 SQL> 
14:26:40 SQL> -- Prepare for derivation of NTILE based parameters.
14:26:40 SQL> -- Also derive the "trend" parameter:
14:26:40 SQL> 
14:26:40 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.31
14:26:41 SQL> CREATE TABLE stk14 COMPRESS AS
14:26:41   2  SELECT
14:26:41   3  tkr
14:26:41   4  ,ydate
14:26:41   5  ,tkrdate
14:26:41   6  ,clse
14:26:41   7  ,g4
14:26:41   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.5/100 THEN 'up' ELSE 'nup' END gatt
14:26:41   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.5/100 THEN 'up' ELSE 'nup' END gattn
14:26:41  10  ,CASE WHEN trend IS NULL THEN 1
14:26:41  11  	    WHEN trend =0      THEN 1
14:26:41  12  	    ELSE trend END trend
14:26:41  13  ,cm2
14:26:41  14  ,cm3
14:26:41  15  ,cm4
14:26:41  16  ,cm5
14:26:41  17  ,cm6
14:26:41  18  ,cm7
14:26:41  19  ,cm8
14:26:41  20  ,ca2
14:26:41  21  ,ca3
14:26:41  22  ,ca4
14:26:41  23  ,ca5
14:26:41  24  ,ca6
14:26:41  25  ,ca7
14:26:41  26  ,ca8
14:26:41  27  ,cx2
14:26:41  28  ,cx3
14:26:41  29  ,cx4
14:26:41  30  ,cx5
14:26:41  31  ,cx6
14:26:41  32  ,cx7
14:26:41  33  ,cx8
14:26:41  34  ,hh
14:26:41  35  ,d
14:26:41  36  ,w
14:26:41  37  ,mpm
14:26:41  38  ,mph
14:26:41  39  FROM stk12
14:26:41  40  -- Guard against divide by 0:
14:26:41  41  WHERE clse > 0
14:26:41  42  ORDER BY ydate
14:26:41  43  /

Table created.

Elapsed: 00:00:00.35
14:26:41 SQL> 
14:26:41 SQL> -- rpt
14:26:41 SQL> 
14:26:41 SQL> SELECT
14:26:41   2  tkr
14:26:41   3  ,trend
14:26:41   4  ,gatt
14:26:41   5  ,COUNT(tkr)
14:26:41   6  ,AVG(g4)
14:26:41   7  FROM stk14
14:26:41   8  GROUP BY tkr,trend,gatt
14:26:41   9  ORDER BY tkr,trend,gatt
14:26:41  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     6682 -.25069459
QQQQ		-1 up	     3949 .630511838
QQQQ		-1	       78
QQQQ		 1 nup	     9413 -.18451689
QQQQ		 1 up	     4300 .495844767
QQQQ		 1	      152

6 rows selected.

Elapsed: 00:00:00.04
14:26:41 SQL> 
14:26:41 SQL> -- Derive NTILE based params:
14:26:41 SQL> 
14:26:41 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.24
14:26:41 SQL> CREATE TABLE stk16 COMPRESS AS
14:26:41   2  SELECT
14:26:41   3  tkr
14:26:41   4  ,ydate
14:26:41   5  ,tkrdate
14:26:41   6  ,clse
14:26:41   7  ,g4
14:26:41   8  ,gatt
14:26:41   9  ,gattn
14:26:41  10  ,trend
14:26:41  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
14:26:41  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
14:26:41  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
14:26:41  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
14:26:41  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
14:26:41  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
14:26:41  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
14:26:41  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
14:26:41  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
14:26:41  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
14:26:41  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
14:26:41  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
14:26:41  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
14:26:41  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
14:26:41  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
14:26:41  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
14:26:41  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
14:26:41  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
14:26:41  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
14:26:41  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
14:26:41  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
14:26:41  32  ,hh  att21
14:26:41  33  ,d   att22
14:26:41  34  ,w   att23
14:26:41  35  ,mpm att24
14:26:41  36  ,mph att25
14:26:41  37  ,trend att26
14:26:41  38  FROM stk14
14:26:41  39  ORDER BY ydate
14:26:41  40  /

Table created.

Elapsed: 00:00:02.75
14:26:44 SQL> 
14:26:44 SQL> -- rpt
14:26:44 SQL> 
14:26:44 SQL> SELECT
14:26:44   2  tkr
14:26:44   3  ,trend
14:26:44   4  ,gatt
14:26:44   5  ,COUNT(tkr)
14:26:44   6  ,AVG(g4)
14:26:44   7  FROM stk16
14:26:44   8  GROUP BY tkr,trend,gatt
14:26:44   9  ORDER BY tkr,trend,gatt
14:26:44  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     6682 -.25069459
QQQQ		-1 up	     3949 .630511838
QQQQ		-1	       78
QQQQ		 1 nup	     9413 -.18451689
QQQQ		 1 up	     4300 .495844767
QQQQ		 1	      152

6 rows selected.

Elapsed: 00:00:00.02
14:26:44 SQL> 
14:26:44 SQL> -- Now I derive goodness attributes:
14:26:44 SQL> 
14:26:44 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.16
14:26:44 SQL> CREATE TABLE stk_ms COMPRESS AS
14:26:44   2  SELECT
14:26:44   3  tkr
14:26:44   4  ,ydate
14:26:44   5  ,tkrdate
14:26:44   6  ,trend
14:26:44   7  ,g4
14:26:44   8  ,gatt
14:26:44   9  ,gattn
14:26:44  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
14:26:44  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
14:26:44  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
14:26:44  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
14:26:44  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
14:26:44  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
14:26:44  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
14:26:44  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
14:26:44  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
14:26:44  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
14:26:44  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
14:26:44  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
14:26:44  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
14:26:44  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
14:26:44  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
14:26:44  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
14:26:44  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
14:26:44  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
14:26:44  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
14:26:44  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
14:26:44  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
14:26:44  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
14:26:44  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
14:26:44  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
14:26:44  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
14:26:44  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
14:26:44  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
14:26:44  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
14:26:44  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
14:26:44  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
14:26:44  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
14:26:44  41  FROM stk16
14:26:44  42  /

Table created.

Elapsed: 00:00:03.84
14:26:48 SQL> 
14:26:48 SQL> -- rpt
14:26:48 SQL> 
14:26:48 SQL> SELECT
14:26:48   2  tkr
14:26:48   3  ,trend
14:26:48   4  ,gatt
14:26:48   5  ,COUNT(tkr)
14:26:48   6  ,AVG(g4)
14:26:48   7  FROM stk_ms
14:26:48   8  GROUP BY tkr,trend,gatt
14:26:48   9  ORDER BY tkr,trend,gatt
14:26:48  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
QQQQ		-1 nup	     6682 -.25069459
QQQQ		-1 up	     3949 .630511838
QQQQ		-1	       78
QQQQ		 1 nup	     9413 -.18451689
QQQQ		 1 up	     4300 .495844767
QQQQ		 1	      152

6 rows selected.

Elapsed: 00:00:00.03
14:26:48 SQL> 
14:26:48 SQL> SELECT
14:26:48   2  tkr
14:26:48   3  ,0+TO_CHAR(ydate,'D')daynum
14:26:48   4  ,COUNT(tkr)
14:26:48   5  ,MIN(ydate),MAX(ydate)
14:26:48   6  FROM stk_ms
14:26:48   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
14:26:48   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
14:26:48   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
QQQQ		 2	 4904 2009-11-02 13:25:00 2011-01-10 20:55:00
QQQQ		 3	 4908 2009-11-03 13:25:00 2011-01-11 20:55:00
QQQQ		 4	 4872 2009-10-28 18:10:00 2011-01-12 16:50:00
QQQQ		 5	 4940 2009-10-29 13:25:00 2011-01-06 20:55:00
QQQQ		 6	 4950 2009-10-30 13:25:00 2011-01-07 20:55:00

Elapsed: 00:00:00.03
14:26:48 SQL> 
14:26:48 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
