
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 21 03:00:35 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:00:35 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:00:35 SQL> 
03:00:35 SQL> 03:00:35 SQL> --
03:00:35 SQL> -- stk10u.sql
03:00:35 SQL> --
03:00:35 SQL> 
03:00:35 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
03:00:35 SQL> 
03:00:35 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
03:00:35 SQL> @stk10.sql     '&1'
03:00:35 SQL> --
03:00:35 SQL> -- stk10.sql
03:00:35 SQL> --
03:00:35 SQL> 
03:00:35 SQL> -- Creates views and tables for demonstrating SVM.
03:00:35 SQL> 
03:00:35 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:09.37
03:00:45 SQL> 
03:00:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:08.01
03:00:53 SQL> 
03:00:53 SQL> CREATE TABLE stk10svmspy COMPRESS AS
03:00:53   2  SELECT
03:00:53   3  tkr
03:00:53   4  ,ydate
03:00:53   5  ,tkr||ydate tkrdate
03:00:53   6  ,clse
03:00:53   7  ,clse2
03:00:53   8  ,rownum rnum -- acts as t in my time-series
03:00:53   9  -- g1 is important. I want to predict g1:
03:00:53  10  ,gain1day g1
03:00:53  11  -- Derive some attributes from clse.
03:00:53  12  -- Each row spans 5 minutes.
03:00:53  13  -- The number of rows in 1 day is 24*60/5.
03:00:53  14  -- I want the aggregations to span from 3 days to 9 days:
03:00:53  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
03:00:53  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
03:00:53  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
03:00:53  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
03:00:53  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
03:00:53  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
03:00:53  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
03:00:53  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
03:00:53  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
03:00:53  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
03:00:53  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
03:00:53  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
03:00:53  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
03:00:53  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
03:00:53  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
03:00:53  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
03:00:53  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
03:00:53  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
03:00:53  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
03:00:53  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
03:00:53  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
03:00:53  36  FROM di5min_stk_c2
03:00:53  37  WHERE UPPER(tkr)='&1'
03:00:53  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
03:00:53  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
03:00:53  40  ORDER BY ydate
03:00:53  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='ABT'

Table created.

Elapsed: 00:00:00.29
03:00:53 SQL> 
03:00:53 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.06
03:00:53 SQL> 
03:00:53 SQL> -- rpt
03:00:53 SQL> 
03:00:53 SQL> SELECT
03:00:53   2  tkr
03:00:53   3  ,COUNT(tkr)ccount
03:00:53   4  ,MIN(clse)mnclse,MAX(clse)mxclse
03:00:53   5  -- ,MIN(avg4),MAX(avg4)
03:00:53   6  ,MIN(ydate),MAX(ydate)
03:00:53   7  ,MIN(g1)
03:00:53   8  ,MAX(g1)
03:00:53   9  FROM stk10svmspy
03:00:53  10  GROUP BY tkr
03:00:53  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
ABT	       936	46.65	   48.76 2011-01-04 14:30:00 2011-01-20 20:55:00       -.75	   .91

Elapsed: 00:00:00.01
03:00:53 SQL> 
03:00:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:00:53 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.07
03:00:53 SQL> CREATE TABLE stk12svmspy COMPRESS AS
03:00:53   2  SELECT
03:00:53   3  tkr
03:00:53   4  ,ydate
03:00:53   5  ,tkrdate
03:00:53   6  ,clse
03:00:53   7  ,rnum
03:00:53   8  ,g1
03:00:53   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
03:00:53  10  -- I want more attributes from the ones I derived above:
03:00:53  11  -- clse relation to moving-min
03:00:53  12  ,clse-min3  cm3
03:00:53  13  ,clse-min4  cm4
03:00:53  14  ,clse-min5  cm5
03:00:53  15  ,clse-min6  cm6
03:00:53  16  ,clse-min7  cm7
03:00:53  17  ,clse-min8  cm8
03:00:53  18  ,clse-min9  cm9
03:00:53  19  -- clse relation to moving-avg
03:00:53  20  ,clse-avg3  ca3
03:00:53  21  ,clse-avg4  ca4
03:00:53  22  ,clse-avg5  ca5
03:00:53  23  ,clse-avg6  ca6
03:00:53  24  ,clse-avg7  ca7
03:00:53  25  ,clse-avg8  ca8
03:00:53  26  ,clse-avg9  ca9
03:00:53  27  -- clse relation to moving-max
03:00:53  28  ,clse-max3  cx3
03:00:53  29  ,clse-max4  cx4
03:00:53  30  ,clse-max5  cx5
03:00:53  31  ,clse-max6  cx6
03:00:53  32  ,clse-max7  cx7
03:00:53  33  ,clse-max8  cx8
03:00:53  34  ,clse-max9  cx9
03:00:53  35  -- Derive date related attributes:
03:00:53  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:00:53  37  ,0+TO_CHAR(ydate,'D')d
03:00:53  38  ,0+TO_CHAR(ydate,'W')w
03:00:53  39  -- mpm stands for minutes-past-midnight:
03:00:53  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:00:53  41  -- mph stands for minutes-past-hour:
03:00:53  42  ,0+TO_CHAR(ydate,'MI')mph
03:00:53  43  FROM stk10svmspy
03:00:53  44  ORDER BY ydate
03:00:53  45  /

Table created.

Elapsed: 00:00:00.09
03:00:53 SQL> 
03:00:53 SQL> -- rpt
03:00:53 SQL> 
03:00:53 SQL> SELECT
03:00:53   2  tkr
03:00:53   3  ,COUNT(tkr)ccount
03:00:53   4  ,MIN(clse)mnclse,MAX(clse)mxclse
03:00:53   5  -- ,MIN(avg4),MAX(avg4)
03:00:53   6  ,MIN(ydate),MAX(ydate)
03:00:53   7  ,MIN(g1)
03:00:53   8  ,AVG(g1)
03:00:53   9  ,MAX(g1)
03:00:53  10  FROM stk12svmspy
03:00:53  11  GROUP BY tkr
03:00:53  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
ABT	       936	46.65	   48.76 2011-01-04 14:30:00 2011-01-20 20:55:00       -.75 -.04762179	      .91

Elapsed: 00:00:00.00
03:00:53 SQL> 
03:00:53 SQL> -- Prepare for derivation of NTILE based parameters.
03:00:53 SQL> -- Also derive the "trend" parameter:
03:00:53 SQL> 
03:00:53 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.06
03:00:53 SQL> CREATE TABLE stk14svmspy COMPRESS AS
03:00:53   2  SELECT
03:00:53   3  tkr
03:00:53   4  ,ydate
03:00:53   5  ,tkrdate
03:00:53   6  ,clse
03:00:53   7  ,g1
03:00:53   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
03:00:53   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
03:00:53  10  ,CASE WHEN trend IS NULL THEN 1
03:00:53  11  	    WHEN trend =0      THEN 1
03:00:53  12  	    ELSE trend END trend
03:00:53  13  ,cm3
03:00:53  14  ,cm4
03:00:53  15  ,cm5
03:00:53  16  ,cm6
03:00:53  17  ,cm7
03:00:53  18  ,cm8
03:00:53  19  ,cm9
03:00:53  20  ,ca3
03:00:53  21  ,ca4
03:00:53  22  ,ca5
03:00:53  23  ,ca6
03:00:53  24  ,ca7
03:00:53  25  ,ca8
03:00:53  26  ,ca9
03:00:53  27  ,cx3
03:00:53  28  ,cx4
03:00:53  29  ,cx5
03:00:53  30  ,cx6
03:00:53  31  ,cx7
03:00:53  32  ,cx8
03:00:53  33  ,cx9
03:00:53  34  ,hh
03:00:53  35  ,d
03:00:53  36  ,w
03:00:53  37  ,mpm
03:00:53  38  ,mph
03:00:53  39  FROM stk12svmspy
03:00:53  40  -- Guard against divide by 0:
03:00:53  41  WHERE clse > 0
03:00:53  42  ORDER BY ydate
03:00:53  43  /

Table created.

Elapsed: 00:00:00.05
03:00:53 SQL> 
03:00:53 SQL> -- rpt
03:00:53 SQL> 
03:00:53 SQL> SELECT
03:00:53   2  tkr
03:00:53   3  ,trend
03:00:53   4  ,gatt
03:00:53   5  ,COUNT(tkr)
03:00:53   6  ,AVG(g1)
03:00:53   7  FROM stk14svmspy
03:00:53   8  GROUP BY tkr,trend,gatt
03:00:53   9  ORDER BY tkr,trend,gatt
03:00:53  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ABT		-1 nup	      360 -.22744444
ABT		-1 up	      187 .416871658
ABT		-1	      118
ABT		 1 nup	      172  -.3055814
ABT		 1 up	       61  .31704918
ABT		 1	       38

6 rows selected.

Elapsed: 00:00:00.01
03:00:53 SQL> 
03:00:53 SQL> -- Derive NTILE based params:
03:00:53 SQL> 
03:00:53 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.28
03:00:54 SQL> CREATE TABLE stk16svmspy COMPRESS AS
03:00:54   2  SELECT
03:00:54   3  tkr
03:00:54   4  ,ydate
03:00:54   5  ,tkrdate
03:00:54   6  ,clse
03:00:54   7  ,g1
03:00:54   8  ,gatt
03:00:54   9  ,gattn
03:00:54  10  ,trend
03:00:54  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
03:00:54  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
03:00:54  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
03:00:54  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
03:00:54  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
03:00:54  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
03:00:54  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
03:00:54  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
03:00:54  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
03:00:54  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
03:00:54  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
03:00:54  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
03:00:54  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
03:00:54  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
03:00:54  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
03:00:54  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
03:00:54  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
03:00:54  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
03:00:54  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
03:00:54  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
03:00:54  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
03:00:54  32  ,hh  att21
03:00:54  33  ,d   att22
03:00:54  34  ,w   att23
03:00:54  35  ,mpm att24
03:00:54  36  ,mph att25
03:00:54  37  ,trend att26
03:00:54  38  FROM stk14svmspy
03:00:54  39  ORDER BY ydate
03:00:54  40  /

Table created.

Elapsed: 00:00:00.16
03:00:54 SQL> 
03:00:54 SQL> -- rpt
03:00:54 SQL> 
03:00:54 SQL> SELECT
03:00:54   2  tkr
03:00:54   3  ,trend
03:00:54   4  ,gatt
03:00:54   5  ,COUNT(tkr)
03:00:54   6  ,AVG(g1)
03:00:54   7  FROM stk16svmspy
03:00:54   8  GROUP BY tkr,trend,gatt
03:00:54   9  ORDER BY tkr,trend,gatt
03:00:54  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ABT		-1 nup	      360 -.22744444
ABT		-1 up	      187 .416871658
ABT		-1	      118
ABT		 1 nup	      172  -.3055814
ABT		 1 up	       61  .31704918
ABT		 1	       38

6 rows selected.

Elapsed: 00:00:00.01
03:00:54 SQL> 
03:00:54 SQL> -- Now I derive goodness attributes:
03:00:54 SQL> 
03:00:54 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.05
03:00:54 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
03:00:54   2  SELECT
03:00:54   3  tkr
03:00:54   4  ,ydate
03:00:54   5  ,tkrdate
03:00:54   6  ,trend
03:00:54   7  ,g1
03:00:54   8  ,gatt
03:00:54   9  ,gattn
03:00:54  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
03:00:54  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
03:00:54  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
03:00:54  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
03:00:54  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
03:00:54  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
03:00:54  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
03:00:54  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
03:00:54  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
03:00:54  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
03:00:54  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
03:00:54  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
03:00:54  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
03:00:54  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
03:00:54  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
03:00:54  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
03:00:54  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
03:00:54  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
03:00:54  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
03:00:54  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
03:00:54  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
03:00:54  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
03:00:54  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
03:00:54  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
03:00:54  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
03:00:54  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
03:00:54  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
03:00:54  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
03:00:54  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
03:00:54  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
03:00:54  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
03:00:54  41  FROM stk16svmspy
03:00:54  42  /

Table created.

Elapsed: 00:00:00.31
03:00:54 SQL> 
03:00:54 SQL> -- rpt
03:00:54 SQL> 
03:00:54 SQL> SELECT
03:00:54   2  tkr
03:00:54   3  ,trend
03:00:54   4  ,gatt
03:00:54   5  ,COUNT(tkr)
03:00:54   6  ,AVG(g1)
03:00:54   7  FROM stk_ms_svmspy
03:00:54   8  GROUP BY tkr,trend,gatt
03:00:54   9  ORDER BY tkr,trend,gatt
03:00:54  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ABT		-1 nup	      360 -.22744444
ABT		-1 up	      187 .416871658
ABT		-1	      118
ABT		 1 nup	      172  -.3055814
ABT		 1 up	       61  .31704918
ABT		 1	       38

6 rows selected.

Elapsed: 00:00:00.01
03:00:54 SQL> 
03:00:54 SQL> SELECT
03:00:54   2  tkr
03:00:54   3  ,0+TO_CHAR(ydate,'D')daynum
03:00:54   4  ,COUNT(tkr)
03:00:54   5  ,MIN(ydate),MAX(ydate)
03:00:54   6  FROM stk_ms_svmspy
03:00:54   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
03:00:54   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
03:00:54   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
ABT		 2	   78 2011-01-10 14:30:00 2011-01-10 20:55:00
ABT		 3	  234 2011-01-04 14:30:00 2011-01-18 20:55:00
ABT		 4	  234 2011-01-05 14:30:00 2011-01-19 20:55:00
ABT		 5	  234 2011-01-06 14:30:00 2011-01-20 20:55:00
ABT		 6	  156 2011-01-07 14:30:00 2011-01-14 20:55:00

Elapsed: 00:00:00.01
03:00:54 SQL> 
03:00:54 SQL> -- exit
03:00:54 SQL> @stk10svmd.sql '&1'
03:00:54 SQL> --
03:00:54 SQL> -- stk10svmd.sql
03:00:54 SQL> --
03:00:54 SQL> 
03:00:54 SQL> -- Creates views and tables for demonstrating SVM.
03:00:54 SQL> -- I need to run this after I run stk10.sql
03:00:54 SQL> 
03:00:54 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.09
03:00:54 SQL> 
03:00:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.30
03:00:55 SQL> 
03:00:55 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
03:00:55   2  SELECT
03:00:55   3  tkr
03:00:55   4  ,ydate
03:00:55   5  ,tkr||ydate tkrdate
03:00:55   6  ,clse
03:00:55   7  ,rownum rnum -- acts as t in my time-series
03:00:55   8  -- Derive some attributes from clse.
03:00:55   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
03:00:55  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
03:00:55  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
03:00:55  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
03:00:55  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
03:00:55  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
03:00:55  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
03:00:55  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
03:00:55  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
03:00:55  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
03:00:55  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
03:00:55  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
03:00:55  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
03:00:55  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
03:00:55  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
03:00:55  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
03:00:55  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
03:00:55  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
03:00:55  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
03:00:55  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
03:00:55  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
03:00:55  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
03:00:55  31  FROM ystk
03:00:55  32  WHERE UPPER(tkr)='&1'
03:00:55  33  AND ydate > '1990-01-01'
03:00:55  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
03:00:55  35  ORDER BY ydate
03:00:55  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='ABT'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='ABT')

Table created.

Elapsed: 00:00:02.45
03:00:58 SQL> 
03:00:58 SQL> -- rpt
03:00:58 SQL> 
03:00:58 SQL> SELECT
03:00:58   2  tkr
03:00:58   3  ,COUNT(tkr)
03:00:58   4  ,MIN(clse),MAX(clse)
03:00:58   5  ,MIN(avg4),MAX(avg4)
03:00:58   6  ,MIN(ydate),MAX(ydate)
03:00:58   7  FROM stk_svmd10svmspy
03:00:58   8  GROUP BY tkr
03:00:58   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
ABT		5307	   4.56      55.06	4.596	  54.586 1990-01-02 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.03
03:00:58 SQL> 
03:00:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:00:58 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.92
03:00:59 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
03:00:59   2  SELECT
03:00:59   3  tkr
03:00:59   4  ,ydate
03:00:59   5  ,tkrdate
03:00:59   6  ,clse
03:00:59   7  ,rnum
03:00:59   8  -- g1 is important. I want to predict g1:
03:00:59   9  ,ld - clse g1
03:00:59  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
03:00:59  11  -- I want more attributes from the ones I derived above:
03:00:59  12  -- clse relation to moving-min
03:00:59  13  ,clse-min3  cm3
03:00:59  14  ,clse-min4  cm4
03:00:59  15  ,clse-min5  cm5
03:00:59  16  ,clse-min6  cm6
03:00:59  17  ,clse-min7  cm7
03:00:59  18  ,clse-min8  cm8
03:00:59  19  ,clse-min9  cm9
03:00:59  20  -- clse relation to moving-avg
03:00:59  21  ,clse-avg3  ca3
03:00:59  22  ,clse-avg4  ca4
03:00:59  23  ,clse-avg5  ca5
03:00:59  24  ,clse-avg6  ca6
03:00:59  25  ,clse-avg7  ca7
03:00:59  26  ,clse-avg8  ca8
03:00:59  27  ,clse-avg9  ca9
03:00:59  28  -- clse relation to moving-max
03:00:59  29  ,clse-max3  cx3
03:00:59  30  ,clse-max4  cx4
03:00:59  31  ,clse-max5  cx5
03:00:59  32  ,clse-max6  cx6
03:00:59  33  ,clse-max7  cx7
03:00:59  34  ,clse-max8  cx8
03:00:59  35  ,clse-max9  cx9
03:00:59  36  -- Derive date related attributes:
03:00:59  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:00:59  38  ,0+TO_CHAR(ydate,'D')d
03:00:59  39  ,0+TO_CHAR(ydate,'W')w
03:00:59  40  -- mpm stands for minutes-past-midnight:
03:00:59  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:00:59  42  -- mph stands for minutes-past-hour:
03:00:59  43  ,0+TO_CHAR(ydate,'MI')mph
03:00:59  44  FROM stk_svmd10svmspy
03:00:59  45  ORDER BY ydate
03:00:59  46  /

Table created.

Elapsed: 00:00:00.18
03:00:59 SQL> 
03:00:59 SQL> -- rpt
03:00:59 SQL> 
03:00:59 SQL> SELECT
03:00:59   2  tkr
03:00:59   3  ,COUNT(tkr)
03:00:59   4  ,MIN(clse),MAX(clse)
03:00:59   5  ,MIN(ydate),MAX(ydate)
03:00:59   6  FROM stk_svmd12
03:00:59   7  GROUP BY tkr
03:00:59   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
ABT		5307	   4.56      55.06 1990-01-02 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.02
03:00:59 SQL> 
03:00:59 SQL> -- Prepare for derivation of NTILE based parameters.
03:00:59 SQL> -- Also derive the "trend" parameter:
03:00:59 SQL> 
03:00:59 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.07
03:00:59 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
03:00:59   2  SELECT
03:00:59   3  tkr
03:00:59   4  ,ydate
03:00:59   5  ,tkrdate
03:00:59   6  ,clse
03:00:59   7  ,g1
03:00:59   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
03:00:59   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
03:00:59  10  ,CASE WHEN trend IS NULL THEN 1
03:00:59  11  	    WHEN trend =0      THEN 1
03:00:59  12  	    ELSE trend END trend
03:00:59  13  ,cm3
03:00:59  14  ,cm4
03:00:59  15  ,cm5
03:00:59  16  ,cm6
03:00:59  17  ,cm7
03:00:59  18  ,cm8
03:00:59  19  ,cm9
03:00:59  20  ,ca3
03:00:59  21  ,ca4
03:00:59  22  ,ca5
03:00:59  23  ,ca6
03:00:59  24  ,ca7
03:00:59  25  ,ca8
03:00:59  26  ,ca9
03:00:59  27  ,cx3
03:00:59  28  ,cx4
03:00:59  29  ,cx5
03:00:59  30  ,cx6
03:00:59  31  ,cx7
03:00:59  32  ,cx8
03:00:59  33  ,cx9
03:00:59  34  ,hh
03:00:59  35  ,d
03:00:59  36  ,w
03:00:59  37  ,mpm
03:00:59  38  ,mph
03:00:59  39  FROM stk_svmd12
03:00:59  40  -- Guard against divide by 0:
03:00:59  41  WHERE clse > 0
03:00:59  42  ORDER BY ydate
03:00:59  43  /

Table created.

Elapsed: 00:00:00.14
03:00:59 SQL> 
03:00:59 SQL> -- rpt
03:00:59 SQL> 
03:00:59 SQL> SELECT
03:00:59   2  tkr
03:00:59   3  ,trend
03:00:59   4  ,gatt
03:00:59   5  ,COUNT(tkr)
03:00:59   6  ,AVG(g1)
03:00:59   7  FROM stk_svmd14
03:00:59   8  GROUP BY tkr,trend,gatt
03:00:59   9  ORDER BY tkr,trend,gatt
03:00:59  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ABT		  -1 nup       1387  -.2849243
ABT		  -1 up        1088 .418235294
ABT		  -1		  1
ABT		   1 nup       1667 -.26258548
ABT		   1 up        1164 .361022337

Elapsed: 00:00:00.02
03:00:59 SQL> 
03:00:59 SQL> -- Derive NTILE based params:
03:00:59 SQL> 
03:00:59 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.07
03:00:59 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
03:00:59   2  SELECT
03:00:59   3  tkr
03:00:59   4  ,ydate
03:00:59   5  ,tkrdate
03:00:59   6  ,clse
03:00:59   7  ,g1
03:00:59   8  ,gatt
03:00:59   9  ,gattn
03:00:59  10  ,trend
03:00:59  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
03:00:59  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
03:00:59  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
03:00:59  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
03:00:59  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
03:00:59  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
03:00:59  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
03:00:59  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
03:00:59  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
03:00:59  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
03:00:59  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
03:00:59  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
03:00:59  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
03:00:59  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
03:00:59  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
03:00:59  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
03:00:59  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
03:00:59  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
03:00:59  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
03:00:59  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
03:00:59  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
03:00:59  32  ,hh  att21
03:00:59  33  ,d   att22
03:00:59  34  ,w   att23
03:00:59  35  ,mpm att24
03:00:59  36  ,mph att25
03:00:59  37  ,trend att26
03:00:59  38  FROM stk_svmd14
03:00:59  39  ORDER BY ydate
03:00:59  40  /

Table created.

Elapsed: 00:00:00.65
03:01:00 SQL> 
03:01:00 SQL> -- rpt
03:01:00 SQL> 
03:01:00 SQL> SELECT
03:01:00   2  tkr
03:01:00   3  ,trend
03:01:00   4  ,gatt
03:01:00   5  ,COUNT(tkr)
03:01:00   6  ,AVG(g1)
03:01:00   7  FROM stk_svmd16
03:01:00   8  GROUP BY tkr,trend,gatt
03:01:00   9  ORDER BY tkr,trend,gatt
03:01:00  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ABT		  -1 nup       1387  -.2849243
ABT		  -1 up        1088 .418235294
ABT		  -1		  1
ABT		   1 nup       1667 -.26258548
ABT		   1 up        1164 .361022337

Elapsed: 00:00:00.02
03:01:00 SQL> 
03:01:00 SQL> -- Now I derive goodness attributes:
03:01:00 SQL> 
03:01:00 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.13
03:01:00 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
03:01:00   2  SELECT
03:01:00   3  tkr
03:01:00   4  ,ydate
03:01:00   5  ,tkrdate
03:01:00   6  ,trend
03:01:00   7  ,g1
03:01:00   8  ,gatt
03:01:00   9  ,gattn
03:01:00  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
03:01:00  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
03:01:00  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
03:01:00  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
03:01:00  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
03:01:00  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
03:01:00  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
03:01:00  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
03:01:00  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
03:01:00  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
03:01:00  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
03:01:00  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
03:01:00  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
03:01:00  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
03:01:00  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
03:01:00  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
03:01:00  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
03:01:00  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
03:01:00  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
03:01:00  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
03:01:00  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
03:01:00  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
03:01:00  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
03:01:00  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
03:01:00  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
03:01:00  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
03:01:00  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
03:01:00  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
03:01:00  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
03:01:00  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
03:01:00  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
03:01:00  41  FROM stk_svmd16
03:01:00  42  /

Table created.

Elapsed: 00:00:00.95
03:01:01 SQL> 
03:01:01 SQL> -- rpt
03:01:01 SQL> 
03:01:01 SQL> SELECT
03:01:01   2  tkr
03:01:01   3  ,trend
03:01:01   4  ,gatt
03:01:01   5  ,COUNT(tkr)
03:01:01   6  ,AVG(g1)
03:01:01   7  FROM stk_ms_svmd_svmspy
03:01:01   8  GROUP BY tkr,trend,gatt
03:01:01   9  ORDER BY tkr,trend,gatt
03:01:01  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ABT		  -1 nup       1387  -.2849243
ABT		  -1 up        1088 .418235294
ABT		  -1		  1
ABT		   1 nup       1667 -.26258548
ABT		   1 up        1164 .361022337

Elapsed: 00:00:00.02
03:01:01 SQL> 
03:01:01 SQL> SELECT
03:01:01   2  tkr
03:01:01   3  ,COUNT(tkr)
03:01:01   4  ,MIN(ydate),MAX(ydate)
03:01:01   5  FROM stk_ms_svmd_svmspy
03:01:01   6  GROUP BY tkr
03:01:01   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
ABT		5307 1990-01-02 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.01
03:01:01 SQL> 
03:01:01 SQL> -- exit
03:01:01 SQL> 
03:01:01 SQL> 
03:01:01 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.06
03:01:01 SQL> 
03:01:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
03:01:02 SQL> 
03:01:02 SQL> CREATE TABLE stk_ms_u COMPRESS AS
03:01:02   2  SELECT * FROM stk_ms_svmspy
03:01:02   3  UNION
03:01:02   4  SELECT * FROM stk_ms_svmd_svmspy
03:01:02   5  /

Table created.

Elapsed: 00:00:00.13
03:01:02 SQL> 
03:01:02 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
