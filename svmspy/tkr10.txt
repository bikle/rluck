
SQL*Plus: Release 11.2.0.1.0 Production on Sat Jan 8 04:58:48 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:58:48 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:58:48 SQL> 04:58:48 SQL> --
04:58:48 SQL> -- stk10.sql
04:58:48 SQL> --
04:58:48 SQL> 
04:58:48 SQL> -- Creates views and tables for demonstrating SVM.
04:58:48 SQL> 
04:58:48 SQL> CREATE OR REPLACE VIEW stk10 AS
04:58:48   2  SELECT
04:58:48   3  tkr
04:58:48   4  ,ydate
04:58:48   5  ,tkr||ydate tkrdate
04:58:48   6  ,clse
04:58:48   7  ,rownum rnum -- acts as t in my time-series
04:58:48   8  -- Derive some attributes from clse.
04:58:48   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
04:58:48  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
04:58:48  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:58:48  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
04:58:48  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:58:48  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
04:58:48  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:58:48  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
04:58:48  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
04:58:48  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:58:48  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
04:58:48  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:58:48  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
04:58:48  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:58:48  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
04:58:48  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
04:58:48  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:58:48  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
04:58:48  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:58:48  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
04:58:48  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:58:48  30  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
04:58:48  31  -- FROM dukas5min_stk WHERE UPPER(tkr)='&1'
04:58:48  32  FROM di5min_stk WHERE UPPER(tkr)='&1'
04:58:48  33  ORDER BY ydate
04:58:48  34  /
old  31: -- FROM dukas5min_stk WHERE UPPER(tkr)='&1'
new  31: -- FROM dukas5min_stk WHERE UPPER(tkr)='EBAY'
old  32: FROM di5min_stk WHERE UPPER(tkr)='&1'
new  32: FROM di5min_stk WHERE UPPER(tkr)='EBAY'

View created.

Elapsed: 00:00:00.04
04:58:48 SQL> 
04:58:48 SQL> -- rpt
04:58:48 SQL> 
04:58:48 SQL> SELECT
04:58:48   2  tkr
04:58:48   3  ,COUNT(tkr)
04:58:48   4  ,MIN(clse),MAX(clse)
04:58:48   5  ,MIN(avg4),MAX(avg4)
04:58:48   6  ,MIN(ydate),MAX(ydate)
04:58:48   7  FROM stk10
04:58:48   8  GROUP BY tkr
04:58:48   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
EBAY	     25035	19.17	   31.48 19.2297959  31.270102 2009-10-28 18:10:01 2011-01-07 22:25:00

Elapsed: 00:00:00.73
04:58:49 SQL> 
04:58:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:58:49 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.22
04:58:49 SQL> CREATE TABLE stk12 COMPRESS AS
04:58:49   2  SELECT
04:58:49   3  tkr
04:58:49   4  ,ydate
04:58:49   5  ,tkrdate
04:58:49   6  ,clse
04:58:49   7  ,rnum
04:58:49   8  -- g4 is important. I want to predict g4:
04:58:49   9  ,ld4 - clse g4
04:58:49  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
04:58:49  11  -- I want more attributes from the ones I derived above:
04:58:49  12  -- clse relation to moving-min
04:58:49  13  ,clse-min2  cm2
04:58:49  14  ,clse-min3  cm3
04:58:49  15  ,clse-min4  cm4
04:58:49  16  ,clse-min5  cm5
04:58:49  17  ,clse-min6  cm6
04:58:49  18  ,clse-min7  cm7
04:58:49  19  ,clse-min8  cm8
04:58:49  20  -- clse relation to moving-avg
04:58:49  21  ,clse-avg2  ca2
04:58:49  22  ,clse-avg3  ca3
04:58:49  23  ,clse-avg4  ca4
04:58:49  24  ,clse-avg5  ca5
04:58:49  25  ,clse-avg6  ca6
04:58:49  26  ,clse-avg7  ca7
04:58:49  27  ,clse-avg8  ca8
04:58:49  28  -- clse relation to moving-max
04:58:49  29  ,clse-max2  cx2
04:58:49  30  ,clse-max3  cx3
04:58:49  31  ,clse-max4  cx4
04:58:49  32  ,clse-max5  cx5
04:58:49  33  ,clse-max6  cx6
04:58:49  34  ,clse-max7  cx7
04:58:49  35  ,clse-max8  cx8
04:58:49  36  -- Derive date related attributes:
04:58:49  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:58:49  38  ,0+TO_CHAR(ydate,'D')d
04:58:49  39  ,0+TO_CHAR(ydate,'W')w
04:58:49  40  -- mpm stands for minutes-past-midnight:
04:58:49  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:58:49  42  -- mph stands for minutes-past-hour:
04:58:49  43  ,0+TO_CHAR(ydate,'MI')mph
04:58:49  44  FROM stk10
04:58:49  45  ORDER BY ydate
04:58:49  46  /

Table created.

Elapsed: 00:00:01.58
04:58:51 SQL> 
04:58:51 SQL> -- rpt
04:58:51 SQL> 
04:58:51 SQL> SELECT
04:58:51   2  tkr
04:58:51   3  ,COUNT(tkr)
04:58:51   4  ,MIN(clse),MAX(clse)
04:58:51   5  ,MIN(ydate),MAX(ydate)
04:58:51   6  FROM stk12
04:58:51   7  GROUP BY tkr
04:58:51   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
EBAY	     25035	19.17	   31.48 2009-10-28 18:10:01 2011-01-07 22:25:00

Elapsed: 00:00:00.04
04:58:51 SQL> 
04:58:51 SQL> -- Prepare for derivation of NTILE based parameters.
04:58:51 SQL> -- Also derive the "trend" parameter:
04:58:51 SQL> 
04:58:51 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.24
04:58:51 SQL> CREATE TABLE stk14 COMPRESS AS
04:58:51   2  SELECT
04:58:51   3  tkr
04:58:51   4  ,ydate
04:58:51   5  ,tkrdate
04:58:51   6  ,clse
04:58:51   7  ,g4
04:58:51   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.30/120 THEN 'up' ELSE 'nup' END gatt
04:58:51   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.30/120 THEN 'up' ELSE 'nup' END gattn
04:58:51  10  ,CASE WHEN trend IS NULL THEN 1
04:58:51  11  	    WHEN trend =0      THEN 1
04:58:51  12  	    ELSE trend END trend
04:58:51  13  ,cm2
04:58:51  14  ,cm3
04:58:51  15  ,cm4
04:58:51  16  ,cm5
04:58:51  17  ,cm6
04:58:51  18  ,cm7
04:58:51  19  ,cm8
04:58:51  20  ,ca2
04:58:51  21  ,ca3
04:58:51  22  ,ca4
04:58:51  23  ,ca5
04:58:51  24  ,ca6
04:58:51  25  ,ca7
04:58:51  26  ,ca8
04:58:51  27  ,cx2
04:58:51  28  ,cx3
04:58:51  29  ,cx4
04:58:51  30  ,cx5
04:58:51  31  ,cx6
04:58:51  32  ,cx7
04:58:51  33  ,cx8
04:58:51  34  ,hh
04:58:51  35  ,d
04:58:51  36  ,w
04:58:51  37  ,mpm
04:58:51  38  ,mph
04:58:51  39  FROM stk12
04:58:51  40  -- Guard against divide by 0:
04:58:51  41  WHERE clse > 0
04:58:51  42  ORDER BY ydate
04:58:51  43  /

Table created.

Elapsed: 00:00:00.49
04:58:51 SQL> 
04:58:51 SQL> -- rpt
04:58:51 SQL> 
04:58:51 SQL> SELECT
04:58:51   2  tkr
04:58:51   3  ,trend
04:58:51   4  ,gatt
04:58:51   5  ,COUNT(tkr)
04:58:51   6  ,AVG(g4)
04:58:51   7  FROM stk14
04:58:51   8  GROUP BY tkr,trend,gatt
04:58:51   9  ORDER BY tkr,trend,gatt
04:58:51  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
EBAY		-1 nup	     7217 -.18873389
EBAY		-1 up	     5368 .317916822
EBAY		-1	       31
EBAY		 1 nup	     7832 -.19823034
EBAY		 1 up	     4570  .31347593
EBAY		 1	       17

6 rows selected.

Elapsed: 00:00:00.03
04:58:51 SQL> 
04:58:51 SQL> -- Derive NTILE based params:
04:58:51 SQL> 
04:58:51 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.19
04:58:52 SQL> CREATE TABLE stk16 COMPRESS AS
04:58:52   2  SELECT
04:58:52   3  tkr
04:58:52   4  ,ydate
04:58:52   5  ,tkrdate
04:58:52   6  ,clse
04:58:52   7  ,g4
04:58:52   8  ,gatt
04:58:52   9  ,gattn
04:58:52  10  ,trend
04:58:52  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
04:58:52  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
04:58:52  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
04:58:52  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
04:58:52  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
04:58:52  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
04:58:52  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
04:58:52  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
04:58:52  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
04:58:52  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
04:58:52  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
04:58:52  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
04:58:52  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
04:58:52  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
04:58:52  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
04:58:52  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
04:58:52  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
04:58:52  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
04:58:52  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
04:58:52  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
04:58:52  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
04:58:52  32  ,hh  att21
04:58:52  33  ,d   att22
04:58:52  34  ,w   att23
04:58:52  35  ,mpm att24
04:58:52  36  ,mph att25
04:58:52  37  ,trend att26
04:58:52  38  FROM stk14
04:58:52  39  ORDER BY ydate
04:58:52  40  /

Table created.

Elapsed: 00:00:02.80
04:58:54 SQL> 
04:58:54 SQL> -- rpt
04:58:54 SQL> 
04:58:54 SQL> SELECT
04:58:54   2  tkr
04:58:54   3  ,trend
04:58:54   4  ,gatt
04:58:54   5  ,COUNT(tkr)
04:58:54   6  ,AVG(g4)
04:58:54   7  FROM stk16
04:58:54   8  GROUP BY tkr,trend,gatt
04:58:54   9  ORDER BY tkr,trend,gatt
04:58:54  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
EBAY		-1 nup	     7217 -.18873389
EBAY		-1 up	     5368 .317916822
EBAY		-1	       31
EBAY		 1 nup	     7832 -.19823034
EBAY		 1 up	     4570  .31347593
EBAY		 1	       17

6 rows selected.

Elapsed: 00:00:00.03
04:58:54 SQL> 
04:58:54 SQL> -- Now I derive goodness attributes:
04:58:54 SQL> 
04:58:54 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.19
04:58:55 SQL> CREATE TABLE stk_ms COMPRESS AS
04:58:55   2  SELECT
04:58:55   3  tkr
04:58:55   4  ,ydate
04:58:55   5  ,tkrdate
04:58:55   6  ,trend
04:58:55   7  ,g4
04:58:55   8  ,gatt
04:58:55   9  ,gattn
04:58:55  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
04:58:55  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
04:58:55  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
04:58:55  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
04:58:55  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
04:58:55  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
04:58:55  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
04:58:55  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
04:58:55  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
04:58:55  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
04:58:55  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
04:58:55  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
04:58:55  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
04:58:55  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
04:58:55  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
04:58:55  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
04:58:55  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
04:58:55  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
04:58:55  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
04:58:55  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
04:58:55  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
04:58:55  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
04:58:55  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
04:58:55  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
04:58:55  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
04:58:55  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
04:58:55  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
04:58:55  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
04:58:55  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
04:58:55  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
04:58:55  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
04:58:55  41  FROM stk16
04:58:55  42  /

Table created.

Elapsed: 00:00:03.94
04:58:59 SQL> 
04:58:59 SQL> -- rpt
04:58:59 SQL> 
04:58:59 SQL> SELECT
04:58:59   2  tkr
04:58:59   3  ,trend
04:58:59   4  ,gatt
04:58:59   5  ,COUNT(tkr)
04:58:59   6  ,AVG(g4)
04:58:59   7  FROM stk_ms
04:58:59   8  GROUP BY tkr,trend,gatt
04:58:59   9  ORDER BY tkr,trend,gatt
04:58:59  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
EBAY		-1 nup	     7217 -.18873389
EBAY		-1 up	     5368 .317916822
EBAY		-1	       31
EBAY		 1 nup	     7832 -.19823034
EBAY		 1 up	     4570  .31347593
EBAY		 1	       17

6 rows selected.

Elapsed: 00:00:00.03
04:58:59 SQL> 
04:58:59 SQL> SELECT
04:58:59   2  tkr
04:58:59   3  ,COUNT(tkr)
04:58:59   4  ,MIN(ydate),MAX(ydate)
04:58:59   5  FROM stk_ms
04:58:59   6  GROUP BY tkr
04:58:59   7  /

TKR	COUNT(TKR) MIN(YDATE)	       MAX(YDATE)
------- ---------- ------------------- -------------------
EBAY	     25035 2009-10-28 18:10:01 2011-01-07 22:25:00

Elapsed: 00:00:00.01
04:58:59 SQL> 
04:58:59 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
