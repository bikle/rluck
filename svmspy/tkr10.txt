
SQL*Plus: Release 11.2.0.1.0 Production on Thu Apr 14 00:21:47 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:21:48 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:21:48 SQL> 
00:21:48 SQL> 00:21:48 SQL> --
00:21:48 SQL> -- stk10u.sql
00:21:48 SQL> --
00:21:48 SQL> 
00:21:48 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
00:21:48 SQL> 
00:21:48 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
00:21:48 SQL> @stk10.sql     '&1'
00:21:48 SQL> --
00:21:48 SQL> -- stk10.sql
00:21:48 SQL> --
00:21:48 SQL> 
00:21:48 SQL> -- Creates views and tables for demonstrating SVM.
00:21:48 SQL> 
00:21:48 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.05
00:21:48 SQL> 
00:21:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.25
00:21:49 SQL> 
00:21:49 SQL> CREATE TABLE stk10svmspy COMPRESS AS
00:21:49   2  SELECT
00:21:49   3  tkr
00:21:49   4  ,ydate
00:21:49   5  ,tkr||ydate tkrdate
00:21:49   6  ,clse
00:21:49   7  ,clse2
00:21:49   8  ,rownum rnum -- acts as t in my time-series
00:21:49   9  -- g1 is important. I want to predict g1:
00:21:49  10  ,gain1day g1
00:21:49  11  -- Derive some attributes from clse.
00:21:49  12  -- Each row spans 5 minutes.
00:21:49  13  -- The number of rows in 1 day is 24*60/5.
00:21:49  14  -- I want the aggregations to span from 3 days to 9 days:
00:21:49  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
00:21:49  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
00:21:49  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
00:21:49  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
00:21:49  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
00:21:49  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
00:21:49  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
00:21:49  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
00:21:49  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
00:21:49  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
00:21:49  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
00:21:49  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
00:21:49  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
00:21:49  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
00:21:49  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
00:21:49  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
00:21:49  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
00:21:49  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
00:21:49  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
00:21:49  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
00:21:49  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
00:21:49  36  FROM di5min_stk_c2
00:21:49  37  WHERE UPPER(tkr)='&1'
00:21:49  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
00:21:49  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
00:21:49  40  ORDER BY ydate
00:21:49  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='FCX'

Table created.

Elapsed: 00:00:00.77
00:21:49 SQL> 
00:21:49 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:21:50 SQL> 
00:21:50 SQL> -- rpt
00:21:50 SQL> 
00:21:50 SQL> SELECT
00:21:50   2  tkr
00:21:50   3  ,COUNT(tkr)ccount
00:21:50   4  ,MIN(clse)mnclse,MAX(clse)mxclse
00:21:50   5  -- ,MIN(avg4),MAX(avg4)
00:21:50   6  ,MIN(ydate),MAX(ydate)
00:21:50   7  ,MIN(g1)
00:21:50   8  ,MAX(g1)
00:21:50   9  FROM stk10svmspy
00:21:50  10  GROUP BY tkr
00:21:50  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
FCX	      5460	46.43	  122.49 2011-01-04 14:30:00 2011-04-13 19:55:00   -56.2475 48.3005005

Elapsed: 00:00:00.02
00:21:50 SQL> 
00:21:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:21:50 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.03
00:21:50 SQL> CREATE TABLE stk12svmspy COMPRESS AS
00:21:50   2  SELECT
00:21:50   3  tkr
00:21:50   4  ,ydate
00:21:50   5  ,tkrdate
00:21:50   6  ,clse
00:21:50   7  ,rnum
00:21:50   8  ,g1
00:21:50   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
00:21:50  10  -- I want more attributes from the ones I derived above:
00:21:50  11  -- clse relation to moving-min
00:21:50  12  ,clse-min3  cm3
00:21:50  13  ,clse-min4  cm4
00:21:50  14  ,clse-min5  cm5
00:21:50  15  ,clse-min6  cm6
00:21:50  16  ,clse-min7  cm7
00:21:50  17  ,clse-min8  cm8
00:21:50  18  ,clse-min9  cm9
00:21:50  19  -- clse relation to moving-avg
00:21:50  20  ,clse-avg3  ca3
00:21:50  21  ,clse-avg4  ca4
00:21:50  22  ,clse-avg5  ca5
00:21:50  23  ,clse-avg6  ca6
00:21:50  24  ,clse-avg7  ca7
00:21:50  25  ,clse-avg8  ca8
00:21:50  26  ,clse-avg9  ca9
00:21:50  27  -- clse relation to moving-max
00:21:50  28  ,clse-max3  cx3
00:21:50  29  ,clse-max4  cx4
00:21:50  30  ,clse-max5  cx5
00:21:50  31  ,clse-max6  cx6
00:21:50  32  ,clse-max7  cx7
00:21:50  33  ,clse-max8  cx8
00:21:50  34  ,clse-max9  cx9
00:21:50  35  -- Derive date related attributes:
00:21:50  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:21:50  37  ,0+TO_CHAR(ydate,'D')d
00:21:50  38  ,0+TO_CHAR(ydate,'W')w
00:21:50  39  -- mpm stands for minutes-past-midnight:
00:21:50  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:21:50  41  -- mph stands for minutes-past-hour:
00:21:50  42  ,0+TO_CHAR(ydate,'MI')mph
00:21:50  43  FROM stk10svmspy
00:21:50  44  ORDER BY ydate
00:21:50  45  /

Table created.

Elapsed: 00:00:00.17
00:21:50 SQL> 
00:21:50 SQL> -- rpt
00:21:50 SQL> 
00:21:50 SQL> SELECT
00:21:50   2  tkr
00:21:50   3  ,COUNT(tkr)ccount
00:21:50   4  ,MIN(clse)mnclse,MAX(clse)mxclse
00:21:50   5  -- ,MIN(avg4),MAX(avg4)
00:21:50   6  ,MIN(ydate),MAX(ydate)
00:21:50   7  ,MIN(g1)
00:21:50   8  ,AVG(g1)
00:21:50   9  ,MAX(g1)
00:21:50  10  FROM stk12svmspy
00:21:50  11  GROUP BY tkr
00:21:50  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
FCX	      5460	46.43	  122.49 2011-01-04 14:30:00 2011-04-13 19:55:00   -56.2475 -1.7756885 48.3005005

Elapsed: 00:00:00.02
00:21:50 SQL> 
00:21:50 SQL> -- Prepare for derivation of NTILE based parameters.
00:21:50 SQL> -- Also derive the "trend" parameter:
00:21:50 SQL> 
00:21:50 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
00:21:50 SQL> CREATE TABLE stk14svmspy COMPRESS AS
00:21:50   2  SELECT
00:21:50   3  tkr
00:21:50   4  ,ydate
00:21:50   5  ,tkrdate
00:21:50   6  ,clse
00:21:50   7  ,g1
00:21:50   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
00:21:50   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
00:21:50  10  ,CASE WHEN trend IS NULL THEN 1
00:21:50  11  	    WHEN trend =0      THEN 1
00:21:50  12  	    ELSE trend END trend
00:21:50  13  ,cm3
00:21:50  14  ,cm4
00:21:50  15  ,cm5
00:21:50  16  ,cm6
00:21:50  17  ,cm7
00:21:50  18  ,cm8
00:21:50  19  ,cm9
00:21:50  20  ,ca3
00:21:50  21  ,ca4
00:21:50  22  ,ca5
00:21:50  23  ,ca6
00:21:50  24  ,ca7
00:21:50  25  ,ca8
00:21:50  26  ,ca9
00:21:50  27  ,cx3
00:21:50  28  ,cx4
00:21:50  29  ,cx5
00:21:50  30  ,cx6
00:21:50  31  ,cx7
00:21:50  32  ,cx8
00:21:50  33  ,cx9
00:21:50  34  ,hh
00:21:50  35  ,d
00:21:50  36  ,w
00:21:50  37  ,mpm
00:21:50  38  ,mph
00:21:50  39  FROM stk12svmspy
00:21:50  40  -- Guard against divide by 0:
00:21:50  41  WHERE clse > 0
00:21:50  42  ORDER BY ydate
00:21:50  43  /

Table created.

Elapsed: 00:00:00.12
00:21:50 SQL> 
00:21:50 SQL> -- rpt
00:21:50 SQL> 
00:21:50 SQL> SELECT
00:21:50   2  tkr
00:21:50   3  ,trend
00:21:50   4  ,gatt
00:21:50   5  ,COUNT(tkr)
00:21:50   6  ,AVG(g1)
00:21:50   7  FROM stk14svmspy
00:21:50   8  GROUP BY tkr,trend,gatt
00:21:50   9  ORDER BY tkr,trend,gatt
00:21:50  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
FCX		-1 nup	     2173 -4.8096695
FCX		-1 up	     1147 4.96607844
FCX		-1	      197
FCX		 1 nup	     1060 -5.1798167
FCX		 1 up	      834 1.18403547
FCX		 1	       49

6 rows selected.

Elapsed: 00:00:00.01
00:21:50 SQL> 
00:21:50 SQL> -- Derive NTILE based params:
00:21:50 SQL> 
00:21:50 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
00:21:50 SQL> CREATE TABLE stk16svmspy COMPRESS AS
00:21:50   2  SELECT
00:21:50   3  tkr
00:21:50   4  ,ydate
00:21:50   5  ,tkrdate
00:21:50   6  ,clse
00:21:50   7  ,g1
00:21:50   8  ,gatt
00:21:50   9  ,gattn
00:21:50  10  ,trend
00:21:50  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
00:21:50  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
00:21:50  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
00:21:50  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
00:21:50  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
00:21:50  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
00:21:50  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
00:21:50  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
00:21:50  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
00:21:50  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
00:21:50  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
00:21:50  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
00:21:50  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
00:21:50  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
00:21:50  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
00:21:50  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
00:21:50  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
00:21:50  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
00:21:50  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
00:21:50  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
00:21:50  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
00:21:50  32  ,hh  att21
00:21:50  33  ,d   att22
00:21:50  34  ,w   att23
00:21:50  35  ,mpm att24
00:21:50  36  ,mph att25
00:21:50  37  ,trend att26
00:21:50  38  FROM stk14svmspy
00:21:50  39  ORDER BY ydate
00:21:50  40  /

Table created.

Elapsed: 00:00:00.71
00:21:51 SQL> 
00:21:51 SQL> -- rpt
00:21:51 SQL> 
00:21:51 SQL> SELECT
00:21:51   2  tkr
00:21:51   3  ,trend
00:21:51   4  ,gatt
00:21:51   5  ,COUNT(tkr)
00:21:51   6  ,AVG(g1)
00:21:51   7  FROM stk16svmspy
00:21:51   8  GROUP BY tkr,trend,gatt
00:21:51   9  ORDER BY tkr,trend,gatt
00:21:51  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
FCX		-1 nup	     2173 -4.8096695
FCX		-1 up	     1147 4.96607844
FCX		-1	      197
FCX		 1 nup	     1060 -5.1798167
FCX		 1 up	      834 1.18403547
FCX		 1	       49

6 rows selected.

Elapsed: 00:00:00.01
00:21:51 SQL> 
00:21:51 SQL> -- Comment out feedback related syntax:
00:21:51 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
00:21:51 SQL> -- SELECT
00:21:51 SQL> -- m.tkr
00:21:51 SQL> -- ,m.ydate
00:21:51 SQL> -- ,m.tkrdate
00:21:51 SQL> -- ,l.score score_long
00:21:51 SQL> -- ,s.score score_short
00:21:51 SQL> -- ,m.g1
00:21:51 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
00:21:51 SQL> -- WHERE l.targ='gatt'
00:21:51 SQL> -- AND	 s.targ='gattn'
00:21:51 SQL> -- AND l.tkrdate = s.tkrdate
00:21:51 SQL> -- AND l.tkrdate = m.tkrdate
00:21:51 SQL> -- -- Speed things up:
00:21:51 SQL> -- AND l.tkr = '&1'
00:21:51 SQL> -- AND s.tkr = '&1'
00:21:51 SQL> -- /
00:21:51 SQL> --
00:21:51 SQL> -- DROP TABLE score_corr_tkr;
00:21:51 SQL> --
00:21:51 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
00:21:51 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
00:21:51 SQL> -- (
00:21:51 SQL> --   SELECT
00:21:51 SQL> --   tkrdate
00:21:51 SQL> --   -- Find corr() tween score and g1 over 8 day period:
00:21:51 SQL> --   ,CORR((score_long - score_short),g1)
00:21:51 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
00:21:51 SQL> --   FROM sc12tkr
00:21:51 SQL> -- )
00:21:51 SQL> -- GROUP BY tkrdate
00:21:51 SQL> -- /
00:21:51 SQL> 
00:21:51 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
00:21:51 SQL> 
00:21:51 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.03
00:21:51 SQL> 
00:21:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
00:21:51 SQL> 
00:21:51 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
00:21:51   2  SELECT
00:21:51   3  tkr
00:21:51   4  ,ydate
00:21:51   5  ,tkrdate
00:21:51   6  ,trend
00:21:51   7  ,g1
00:21:51   8  ,gatt
00:21:51   9  ,gattn
00:21:51  10  -- Goodness attributes:
00:21:51  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
00:21:51  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
00:21:51  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
00:21:51  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
00:21:51  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
00:21:51  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
00:21:51  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
00:21:51  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
00:21:51  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
00:21:51  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
00:21:51  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
00:21:51  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
00:21:51  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
00:21:51  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
00:21:51  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
00:21:51  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
00:21:51  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
00:21:51  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
00:21:51  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
00:21:51  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
00:21:51  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
00:21:51  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
00:21:51  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
00:21:51  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
00:21:51  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
00:21:51  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
00:21:51  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
00:21:51  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
00:21:51  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
00:21:51  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
00:21:51  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
00:21:51  42  FROM stk16svmspy
00:21:51  43  /

Table created.

Elapsed: 00:00:01.07
00:21:52 SQL> 
00:21:52 SQL> -- rpt
00:21:52 SQL> 
00:21:52 SQL> SELECT
00:21:52   2  tkr
00:21:52   3  ,trend
00:21:52   4  ,gatt
00:21:52   5  ,COUNT(tkr)
00:21:52   6  ,AVG(g1)
00:21:52   7  FROM stk_ms_svmspy
00:21:52   8  GROUP BY tkr,trend,gatt
00:21:52   9  ORDER BY tkr,trend,gatt
00:21:52  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
FCX		-1 nup	     2173 -4.8096695
FCX		-1 up	     1147 4.96607844
FCX		-1	      197
FCX		 1 nup	     1060 -5.1798167
FCX		 1 up	      834 1.18403547
FCX		 1	       49

6 rows selected.

Elapsed: 00:00:00.02
00:21:52 SQL> 
00:21:52 SQL> SELECT
00:21:52   2  tkr
00:21:52   3  ,0+TO_CHAR(ydate,'D')daynum
00:21:52   4  ,COUNT(tkr)
00:21:52   5  ,MIN(ydate),MAX(ydate)
00:21:52   6  FROM stk_ms_svmspy
00:21:52   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
00:21:52   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
00:21:52   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
FCX		 2	  936 2011-01-10 14:30:00 2011-04-11 19:55:00
FCX		 3	 1170 2011-01-04 14:30:00 2011-04-12 19:55:00
FCX		 4	 1170 2011-01-05 14:30:00 2011-04-13 19:55:00
FCX		 5	 1092 2011-01-06 14:30:00 2011-04-07 19:55:00
FCX		 6	 1092 2011-01-07 14:30:00 2011-04-08 19:55:00

Elapsed: 00:00:00.01
00:21:52 SQL> 
00:21:52 SQL> -- exit
00:21:52 SQL> @stk10svmd.sql '&1'
00:21:52 SQL> --
00:21:52 SQL> -- stk10svmd.sql
00:21:52 SQL> --
00:21:52 SQL> 
00:21:52 SQL> -- Creates views and tables for demonstrating SVM.
00:21:52 SQL> -- I need to run this after I run stk10.sql
00:21:52 SQL> 
00:21:52 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.31
00:21:53 SQL> 
00:21:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
00:21:53 SQL> 
00:21:53 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
00:21:53   2  SELECT
00:21:53   3  tkr
00:21:53   4  ,ydate
00:21:53   5  ,tkr||ydate tkrdate
00:21:53   6  ,clse
00:21:53   7  ,rownum rnum -- acts as t in my time-series
00:21:53   8  -- Derive some attributes from clse.
00:21:53   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
00:21:53  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
00:21:53  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
00:21:53  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
00:21:53  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
00:21:53  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
00:21:53  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
00:21:53  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
00:21:53  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
00:21:53  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
00:21:53  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
00:21:53  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
00:21:53  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
00:21:53  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
00:21:53  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
00:21:53  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
00:21:53  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
00:21:53  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
00:21:53  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
00:21:53  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
00:21:53  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
00:21:53  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
00:21:53  31  -- ystk21 created here: svmd/cr_ystk21.sql
00:21:53  32  FROM ystk21
00:21:53  33  WHERE UPPER(tkr)='&1'
00:21:53  34  AND ydate > '1990-01-01'
00:21:53  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
00:21:53  36  ORDER BY ydate
00:21:53  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='FCX'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='FCX')

Table created.

Elapsed: 00:00:00.32
00:21:53 SQL> 
00:21:53 SQL> -- rpt
00:21:53 SQL> 
00:21:53 SQL> SELECT
00:21:53   2  tkr
00:21:53   3  ,COUNT(tkr)
00:21:53   4  ,MIN(clse),MAX(clse)
00:21:53   5  ,MIN(avg4),MAX(avg4)
00:21:53   6  ,MIN(ydate),MAX(ydate)
00:21:53   7  FROM stk_svmd10svmspy
00:21:53   8  GROUP BY tkr
00:21:53   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
FCX		3970	   2.72      60.92	2.812	  59.814 1995-07-10 21:00:00 2011-04-12 21:00:00

Elapsed: 00:00:00.01
00:21:53 SQL> 
00:21:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:21:53 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.06
00:21:53 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
00:21:53   2  SELECT
00:21:53   3  tkr
00:21:53   4  ,ydate
00:21:53   5  ,tkrdate
00:21:53   6  ,clse
00:21:53   7  ,rnum
00:21:53   8  -- g1 is important. I want to predict g1:
00:21:53   9  ,ld - clse g1
00:21:53  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
00:21:53  11  -- I want more attributes from the ones I derived above:
00:21:53  12  -- clse relation to moving-min
00:21:53  13  ,clse-min3  cm3
00:21:53  14  ,clse-min4  cm4
00:21:53  15  ,clse-min5  cm5
00:21:53  16  ,clse-min6  cm6
00:21:53  17  ,clse-min7  cm7
00:21:53  18  ,clse-min8  cm8
00:21:53  19  ,clse-min9  cm9
00:21:53  20  -- clse relation to moving-avg
00:21:53  21  ,clse-avg3  ca3
00:21:53  22  ,clse-avg4  ca4
00:21:53  23  ,clse-avg5  ca5
00:21:53  24  ,clse-avg6  ca6
00:21:53  25  ,clse-avg7  ca7
00:21:53  26  ,clse-avg8  ca8
00:21:53  27  ,clse-avg9  ca9
00:21:53  28  -- clse relation to moving-max
00:21:53  29  ,clse-max3  cx3
00:21:53  30  ,clse-max4  cx4
00:21:53  31  ,clse-max5  cx5
00:21:53  32  ,clse-max6  cx6
00:21:53  33  ,clse-max7  cx7
00:21:53  34  ,clse-max8  cx8
00:21:53  35  ,clse-max9  cx9
00:21:53  36  -- Derive date related attributes:
00:21:53  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:21:53  38  ,0+TO_CHAR(ydate,'D')d
00:21:53  39  ,0+TO_CHAR(ydate,'W')w
00:21:53  40  -- mpm stands for minutes-past-midnight:
00:21:53  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:21:53  42  -- mph stands for minutes-past-hour:
00:21:53  43  ,0+TO_CHAR(ydate,'MI')mph
00:21:53  44  FROM stk_svmd10svmspy
00:21:53  45  ORDER BY ydate
00:21:53  46  /

Table created.

Elapsed: 00:00:00.17
00:21:53 SQL> 
00:21:53 SQL> -- rpt
00:21:53 SQL> 
00:21:53 SQL> SELECT
00:21:53   2  tkr
00:21:53   3  ,COUNT(tkr)
00:21:53   4  ,MIN(clse),MAX(clse)
00:21:53   5  ,MIN(ydate),MAX(ydate)
00:21:53   6  FROM stk_svmd12
00:21:53   7  GROUP BY tkr
00:21:53   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
FCX		3970	   2.72      60.92 1995-07-10 21:00:00 2011-04-12 21:00:00

Elapsed: 00:00:00.01
00:21:53 SQL> 
00:21:53 SQL> -- Prepare for derivation of NTILE based parameters.
00:21:53 SQL> -- Also derive the "trend" parameter:
00:21:53 SQL> 
00:21:53 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
00:21:53 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
00:21:53   2  SELECT
00:21:53   3  tkr
00:21:53   4  ,ydate
00:21:53   5  ,tkrdate
00:21:53   6  ,clse
00:21:53   7  ,g1
00:21:53   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
00:21:53   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
00:21:53  10  ,CASE WHEN trend IS NULL THEN 1
00:21:53  11  	    WHEN trend =0      THEN 1
00:21:53  12  	    ELSE trend END trend
00:21:53  13  ,cm3
00:21:53  14  ,cm4
00:21:53  15  ,cm5
00:21:53  16  ,cm6
00:21:53  17  ,cm7
00:21:53  18  ,cm8
00:21:53  19  ,cm9
00:21:53  20  ,ca3
00:21:53  21  ,ca4
00:21:53  22  ,ca5
00:21:53  23  ,ca6
00:21:53  24  ,ca7
00:21:53  25  ,ca8
00:21:53  26  ,ca9
00:21:53  27  ,cx3
00:21:53  28  ,cx4
00:21:53  29  ,cx5
00:21:53  30  ,cx6
00:21:53  31  ,cx7
00:21:53  32  ,cx8
00:21:53  33  ,cx9
00:21:53  34  ,hh
00:21:53  35  ,d
00:21:53  36  ,w
00:21:53  37  ,mpm
00:21:53  38  ,mph
00:21:53  39  FROM stk_svmd12
00:21:53  40  -- Guard against divide by 0:
00:21:53  41  WHERE clse > 0
00:21:53  42  ORDER BY ydate
00:21:53  43  /

Table created.

Elapsed: 00:00:00.11
00:21:53 SQL> 
00:21:53 SQL> -- rpt
00:21:53 SQL> 
00:21:53 SQL> SELECT
00:21:53   2  tkr
00:21:53   3  ,trend
00:21:53   4  ,gatt
00:21:53   5  ,COUNT(tkr)
00:21:53   6  ,AVG(g1)
00:21:53   7  FROM stk_svmd14
00:21:53   8  GROUP BY tkr,trend,gatt
00:21:53   9  ORDER BY tkr,trend,gatt
00:21:53  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FCX		  -1 nup	972 -.39638889
FCX		  -1 up 	861 .464146341
FCX		  -1		  1
FCX		   1 nup       1154 -.34728769
FCX		   1 up 	982  .43889002

Elapsed: 00:00:00.02
00:21:53 SQL> 
00:21:53 SQL> -- Derive NTILE based params:
00:21:53 SQL> 
00:21:53 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.02
00:21:53 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
00:21:53   2  SELECT
00:21:53   3  tkr
00:21:53   4  ,ydate
00:21:53   5  ,tkrdate
00:21:53   6  ,clse
00:21:53   7  ,g1
00:21:53   8  ,gatt
00:21:53   9  ,gattn
00:21:53  10  ,trend
00:21:53  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
00:21:53  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
00:21:53  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
00:21:53  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
00:21:53  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
00:21:53  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
00:21:53  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
00:21:53  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
00:21:53  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
00:21:53  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
00:21:53  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
00:21:53  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
00:21:53  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
00:21:53  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
00:21:53  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
00:21:53  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
00:21:53  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
00:21:53  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
00:21:53  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
00:21:53  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
00:21:53  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
00:21:53  32  ,hh  att21
00:21:53  33  ,d   att22
00:21:53  34  ,w   att23
00:21:53  35  ,mpm att24
00:21:53  36  ,mph att25
00:21:53  37  ,trend att26
00:21:53  38  FROM stk_svmd14
00:21:53  39  ORDER BY ydate
00:21:53  40  /

Table created.

Elapsed: 00:00:00.45
00:21:54 SQL> 
00:21:54 SQL> -- rpt
00:21:54 SQL> 
00:21:54 SQL> SELECT
00:21:54   2  tkr
00:21:54   3  ,trend
00:21:54   4  ,gatt
00:21:54   5  ,COUNT(tkr)
00:21:54   6  ,AVG(g1)
00:21:54   7  FROM stk_svmd16
00:21:54   8  GROUP BY tkr,trend,gatt
00:21:54   9  ORDER BY tkr,trend,gatt
00:21:54  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FCX		  -1 nup	972 -.39638889
FCX		  -1 up 	861 .464146341
FCX		  -1		  1
FCX		   1 nup       1154 -.34728769
FCX		   1 up 	982  .43889002

Elapsed: 00:00:00.01
00:21:54 SQL> 
00:21:54 SQL> -- Comment out feedback related syntax:
00:21:54 SQL> 
00:21:54 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
00:21:54 SQL> -- SELECT
00:21:54 SQL> -- m.tkr
00:21:54 SQL> -- ,m.ydate
00:21:54 SQL> -- ,m.tkrdate
00:21:54 SQL> -- ,l.score score_long
00:21:54 SQL> -- ,s.score score_short
00:21:54 SQL> -- ,m.g1
00:21:54 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
00:21:54 SQL> -- WHERE l.targ='gatt'
00:21:54 SQL> -- AND	 s.targ='gattn'
00:21:54 SQL> -- AND l.tkrdate = s.tkrdate
00:21:54 SQL> -- AND l.tkrdate = m.tkrdate
00:21:54 SQL> -- -- Speed things up:
00:21:54 SQL> -- AND l.tkr = '&1'
00:21:54 SQL> -- AND s.tkr = '&1'
00:21:54 SQL> -- /
00:21:54 SQL> --
00:21:54 SQL> -- DROP TABLE score_corr_tkr;
00:21:54 SQL> --
00:21:54 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
00:21:54 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
00:21:54 SQL> -- (
00:21:54 SQL> --   SELECT
00:21:54 SQL> --   tkrdate
00:21:54 SQL> --   -- Find corr() tween score and g1 over 8 day period:
00:21:54 SQL> --   ,CORR((score_long - score_short),g1)
00:21:54 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
00:21:54 SQL> --   FROM sc12tkr
00:21:54 SQL> -- )
00:21:54 SQL> -- GROUP BY tkrdate
00:21:54 SQL> -- /
00:21:54 SQL> 
00:21:54 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
00:21:54 SQL> 
00:21:54 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.03
00:21:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
00:21:54 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
00:21:54   2  SELECT
00:21:54   3  tkr
00:21:54   4  ,ydate
00:21:54   5  ,tkrdate
00:21:54   6  ,trend
00:21:54   7  ,g1
00:21:54   8  ,gatt
00:21:54   9  ,gattn
00:21:54  10  -- Goodness attributes:
00:21:54  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
00:21:54  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
00:21:54  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
00:21:54  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
00:21:54  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
00:21:54  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
00:21:54  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
00:21:54  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
00:21:54  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
00:21:54  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
00:21:54  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
00:21:54  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
00:21:54  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
00:21:54  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
00:21:54  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
00:21:54  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
00:21:54  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
00:21:54  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
00:21:54  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
00:21:54  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
00:21:54  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
00:21:54  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
00:21:54  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
00:21:54  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
00:21:54  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
00:21:54  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
00:21:54  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
00:21:54  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
00:21:54  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
00:21:54  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
00:21:54  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
00:21:54  42  FROM stk_svmd16
00:21:54  43  /

Table created.

Elapsed: 00:00:00.76
00:21:55 SQL> 
00:21:55 SQL> -- rpt
00:21:55 SQL> 
00:21:55 SQL> SELECT
00:21:55   2  tkr
00:21:55   3  ,trend
00:21:55   4  ,gatt
00:21:55   5  ,COUNT(tkr)
00:21:55   6  ,AVG(g1)
00:21:55   7  FROM stk_ms_svmd_svmspy
00:21:55   8  GROUP BY tkr,trend,gatt
00:21:55   9  ORDER BY tkr,trend,gatt
00:21:55  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
FCX		  -1 nup	972 -.39638889
FCX		  -1 up 	861 .464146341
FCX		  -1		  1
FCX		   1 nup       1154 -.34728769
FCX		   1 up 	982  .43889002

Elapsed: 00:00:00.01
00:21:55 SQL> 
00:21:55 SQL> SELECT
00:21:55   2  tkr
00:21:55   3  ,COUNT(tkr)
00:21:55   4  ,MIN(ydate),MAX(ydate)
00:21:55   5  FROM stk_ms_svmd_svmspy
00:21:55   6  GROUP BY tkr
00:21:55   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
FCX		3970 1995-07-10 21:00:00 2011-04-12 21:00:00

Elapsed: 00:00:00.01
00:21:55 SQL> 
00:21:55 SQL> -- exit
00:21:55 SQL> 
00:21:55 SQL> 
00:21:55 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.18
00:21:55 SQL> 
00:21:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
00:21:55 SQL> 
00:21:55 SQL> CREATE TABLE stk_ms_u COMPRESS AS
00:21:55   2  SELECT * FROM stk_ms_svmspy
00:21:55   3  UNION
00:21:55   4  SELECT * FROM stk_ms_svmd_svmspy
00:21:55   5  /

Table created.

Elapsed: 00:00:00.24
00:21:56 SQL> 
00:21:56 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
