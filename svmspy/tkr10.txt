
SQL*Plus: Release 11.2.0.1.0 Production on Thu Apr 28 12:38:53 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

12:38:53 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
12:38:53 SQL> 
12:38:53 SQL> 12:38:53 SQL> --
12:38:53 SQL> -- stk10u.sql
12:38:53 SQL> --
12:38:53 SQL> 
12:38:53 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
12:38:53 SQL> 
12:38:53 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
12:38:53 SQL> @stk10.sql     '&1'
12:38:53 SQL> --
12:38:53 SQL> -- stk10.sql
12:38:53 SQL> --
12:38:53 SQL> 
12:38:53 SQL> -- Creates views and tables for demonstrating SVM.
12:38:53 SQL> 
12:38:53 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.13
12:38:53 SQL> 
12:38:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
12:38:54 SQL> 
12:38:54 SQL> CREATE TABLE stk10svmspy COMPRESS AS
12:38:54   2  SELECT
12:38:54   3  tkr
12:38:54   4  ,ydate
12:38:54   5  ,tkr||ydate tkrdate
12:38:54   6  ,clse
12:38:54   7  ,clse2
12:38:54   8  ,rownum rnum -- acts as t in my time-series
12:38:54   9  -- g1 is important. I want to predict g1:
12:38:54  10  ,gain1day g1
12:38:54  11  -- Derive some attributes from clse.
12:38:54  12  -- Each row spans 5 minutes.
12:38:54  13  -- The number of rows in 1 day is 24*60/5.
12:38:54  14  -- I want the aggregations to span from 3 days to 9 days:
12:38:54  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
12:38:54  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
12:38:54  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
12:38:54  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
12:38:54  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
12:38:54  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
12:38:54  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
12:38:54  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
12:38:54  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
12:38:54  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
12:38:54  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
12:38:54  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
12:38:54  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
12:38:54  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
12:38:54  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
12:38:54  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
12:38:54  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
12:38:54  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
12:38:54  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
12:38:54  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
12:38:54  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
12:38:54  36  FROM di5min_stk_c2
12:38:54  37  WHERE UPPER(tkr)='&1'
12:38:54  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
12:38:54  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
12:38:54  40  ORDER BY ydate
12:38:54  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='ABT'

Table created.

Elapsed: 00:00:01.84
12:38:56 SQL> 
12:38:56 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
12:38:56 SQL> 
12:38:56 SQL> -- rpt
12:38:56 SQL> 
12:38:56 SQL> SELECT
12:38:56   2  tkr
12:38:56   3  ,COUNT(tkr)ccount
12:38:56   4  ,MIN(clse)mnclse,MAX(clse)mxclse
12:38:56   5  -- ,MIN(avg4),MAX(avg4)
12:38:56   6  ,MIN(ydate),MAX(ydate)
12:38:56   7  ,MIN(g1)
12:38:56   8  ,MAX(g1)
12:38:56   9  FROM stk10svmspy
12:38:56  10  GROUP BY tkr
12:38:56  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
ABT	      6162     39.115	   52.76 2011-01-04 14:30:00 2011-04-27 19:55:00      -1.36	8.3225

Elapsed: 00:00:00.01
12:38:56 SQL> 
12:38:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:38:56 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.04
12:38:56 SQL> CREATE TABLE stk12svmspy COMPRESS AS
12:38:56   2  SELECT
12:38:56   3  tkr
12:38:56   4  ,ydate
12:38:56   5  ,tkrdate
12:38:56   6  ,clse
12:38:56   7  ,rnum
12:38:56   8  ,g1
12:38:56   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
12:38:56  10  -- I want more attributes from the ones I derived above:
12:38:56  11  -- clse relation to moving-min
12:38:56  12  ,clse-min3  cm3
12:38:56  13  ,clse-min4  cm4
12:38:56  14  ,clse-min5  cm5
12:38:56  15  ,clse-min6  cm6
12:38:56  16  ,clse-min7  cm7
12:38:56  17  ,clse-min8  cm8
12:38:56  18  ,clse-min9  cm9
12:38:56  19  -- clse relation to moving-avg
12:38:56  20  ,clse-avg3  ca3
12:38:56  21  ,clse-avg4  ca4
12:38:56  22  ,clse-avg5  ca5
12:38:56  23  ,clse-avg6  ca6
12:38:56  24  ,clse-avg7  ca7
12:38:56  25  ,clse-avg8  ca8
12:38:56  26  ,clse-avg9  ca9
12:38:56  27  -- clse relation to moving-max
12:38:56  28  ,clse-max3  cx3
12:38:56  29  ,clse-max4  cx4
12:38:56  30  ,clse-max5  cx5
12:38:56  31  ,clse-max6  cx6
12:38:56  32  ,clse-max7  cx7
12:38:56  33  ,clse-max8  cx8
12:38:56  34  ,clse-max9  cx9
12:38:56  35  -- Derive date related attributes:
12:38:56  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:38:56  37  ,0+TO_CHAR(ydate,'D')d
12:38:56  38  ,0+TO_CHAR(ydate,'W')w
12:38:56  39  -- mpm stands for minutes-past-midnight:
12:38:56  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:38:56  41  -- mph stands for minutes-past-hour:
12:38:56  42  ,0+TO_CHAR(ydate,'MI')mph
12:38:56  43  FROM stk10svmspy
12:38:56  44  ORDER BY ydate
12:38:56  45  /

Table created.

Elapsed: 00:00:00.17
12:38:56 SQL> 
12:38:56 SQL> -- rpt
12:38:56 SQL> 
12:38:56 SQL> SELECT
12:38:56   2  tkr
12:38:56   3  ,COUNT(tkr)ccount
12:38:56   4  ,MIN(clse)mnclse,MAX(clse)mxclse
12:38:56   5  -- ,MIN(avg4),MAX(avg4)
12:38:56   6  ,MIN(ydate),MAX(ydate)
12:38:56   7  ,MIN(g1)
12:38:56   8  ,AVG(g1)
12:38:56   9  ,MAX(g1)
12:38:56  10  FROM stk12svmspy
12:38:56  11  GROUP BY tkr
12:38:56  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
ABT	      6162     39.115	   52.76 2011-01-04 14:30:00 2011-04-27 19:55:00      -1.36 .148583419	   8.3225

Elapsed: 00:00:00.05
12:38:56 SQL> 
12:38:56 SQL> -- Prepare for derivation of NTILE based parameters.
12:38:56 SQL> -- Also derive the "trend" parameter:
12:38:56 SQL> 
12:38:56 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
12:38:56 SQL> CREATE TABLE stk14svmspy COMPRESS AS
12:38:56   2  SELECT
12:38:56   3  tkr
12:38:56   4  ,ydate
12:38:56   5  ,tkrdate
12:38:56   6  ,clse
12:38:56   7  ,g1
12:38:56   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
12:38:56   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
12:38:56  10  ,CASE WHEN trend IS NULL THEN 1
12:38:56  11  	    WHEN trend =0      THEN 1
12:38:56  12  	    ELSE trend END trend
12:38:56  13  ,cm3
12:38:56  14  ,cm4
12:38:56  15  ,cm5
12:38:56  16  ,cm6
12:38:56  17  ,cm7
12:38:56  18  ,cm8
12:38:56  19  ,cm9
12:38:56  20  ,ca3
12:38:56  21  ,ca4
12:38:56  22  ,ca5
12:38:56  23  ,ca6
12:38:56  24  ,ca7
12:38:56  25  ,ca8
12:38:56  26  ,ca9
12:38:56  27  ,cx3
12:38:56  28  ,cx4
12:38:56  29  ,cx5
12:38:56  30  ,cx6
12:38:56  31  ,cx7
12:38:56  32  ,cx8
12:38:56  33  ,cx9
12:38:56  34  ,hh
12:38:56  35  ,d
12:38:56  36  ,w
12:38:56  37  ,mpm
12:38:56  38  ,mph
12:38:56  39  FROM stk12svmspy
12:38:56  40  -- Guard against divide by 0:
12:38:56  41  WHERE clse > 0
12:38:56  42  ORDER BY ydate
12:38:56  43  /

Table created.

Elapsed: 00:00:00.14
12:38:56 SQL> 
12:38:56 SQL> -- rpt
12:38:56 SQL> 
12:38:56 SQL> SELECT
12:38:56   2  tkr
12:38:56   3  ,trend
12:38:56   4  ,gatt
12:38:56   5  ,COUNT(tkr)
12:38:56   6  ,AVG(g1)
12:38:56   7  FROM stk14svmspy
12:38:56   8  GROUP BY tkr,trend,gatt
12:38:56   9  ORDER BY tkr,trend,gatt
12:38:56  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ABT		-1 nup	     1620 -.17860811
ABT		-1 up	      962 1.02294491
ABT		-1	       78
ABT		 1 nup	     1961 -.24988468
ABT		 1 up	     1295 .511757521
ABT		 1	      246

6 rows selected.

Elapsed: 00:00:00.02
12:38:56 SQL> 
12:38:56 SQL> -- Derive NTILE based params:
12:38:56 SQL> 
12:38:56 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.12
12:38:57 SQL> CREATE TABLE stk16svmspy COMPRESS AS
12:38:57   2  SELECT
12:38:57   3  tkr
12:38:57   4  ,ydate
12:38:57   5  ,tkrdate
12:38:57   6  ,clse
12:38:57   7  ,g1
12:38:57   8  ,gatt
12:38:57   9  ,gattn
12:38:57  10  ,trend
12:38:57  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
12:38:57  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
12:38:57  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
12:38:57  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
12:38:57  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
12:38:57  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
12:38:57  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
12:38:57  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
12:38:57  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
12:38:57  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
12:38:57  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
12:38:57  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
12:38:57  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
12:38:57  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
12:38:57  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
12:38:57  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
12:38:57  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
12:38:57  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
12:38:57  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
12:38:57  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
12:38:57  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
12:38:57  32  ,hh  att21
12:38:57  33  ,d   att22
12:38:57  34  ,w   att23
12:38:57  35  ,mpm att24
12:38:57  36  ,mph att25
12:38:57  37  ,trend att26
12:38:57  38  FROM stk14svmspy
12:38:57  39  ORDER BY ydate
12:38:57  40  /

Table created.

Elapsed: 00:00:00.79
12:38:57 SQL> 
12:38:57 SQL> -- rpt
12:38:57 SQL> 
12:38:57 SQL> SELECT
12:38:57   2  tkr
12:38:57   3  ,trend
12:38:57   4  ,gatt
12:38:57   5  ,COUNT(tkr)
12:38:57   6  ,AVG(g1)
12:38:57   7  FROM stk16svmspy
12:38:57   8  GROUP BY tkr,trend,gatt
12:38:57   9  ORDER BY tkr,trend,gatt
12:38:57  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ABT		-1 nup	     1620 -.17860811
ABT		-1 up	      962 1.02294491
ABT		-1	       78
ABT		 1 nup	     1961 -.24988468
ABT		 1 up	     1295 .511757521
ABT		 1	      246

6 rows selected.

Elapsed: 00:00:00.01
12:38:57 SQL> 
12:38:57 SQL> -- Comment out feedback related syntax:
12:38:57 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
12:38:57 SQL> -- SELECT
12:38:57 SQL> -- m.tkr
12:38:57 SQL> -- ,m.ydate
12:38:57 SQL> -- ,m.tkrdate
12:38:57 SQL> -- ,l.score score_long
12:38:57 SQL> -- ,s.score score_short
12:38:57 SQL> -- ,m.g1
12:38:57 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
12:38:57 SQL> -- WHERE l.targ='gatt'
12:38:57 SQL> -- AND	 s.targ='gattn'
12:38:57 SQL> -- AND l.tkrdate = s.tkrdate
12:38:57 SQL> -- AND l.tkrdate = m.tkrdate
12:38:57 SQL> -- -- Speed things up:
12:38:57 SQL> -- AND l.tkr = '&1'
12:38:57 SQL> -- AND s.tkr = '&1'
12:38:57 SQL> -- /
12:38:57 SQL> --
12:38:57 SQL> -- DROP TABLE score_corr_tkr;
12:38:57 SQL> --
12:38:57 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
12:38:57 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
12:38:57 SQL> -- (
12:38:57 SQL> --   SELECT
12:38:57 SQL> --   tkrdate
12:38:57 SQL> --   -- Find corr() tween score and g1 over 8 day period:
12:38:57 SQL> --   ,CORR((score_long - score_short),g1)
12:38:57 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
12:38:57 SQL> --   FROM sc12tkr
12:38:57 SQL> -- )
12:38:57 SQL> -- GROUP BY tkrdate
12:38:57 SQL> -- /
12:38:57 SQL> 
12:38:57 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
12:38:57 SQL> 
12:38:57 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.03
12:38:57 SQL> 
12:38:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
12:38:58 SQL> 
12:38:58 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
12:38:58   2  SELECT
12:38:58   3  tkr
12:38:58   4  ,ydate
12:38:58   5  ,tkrdate
12:38:58   6  ,trend
12:38:58   7  ,g1
12:38:58   8  ,gatt
12:38:58   9  ,gattn
12:38:58  10  -- Goodness attributes:
12:38:58  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
12:38:58  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
12:38:58  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
12:38:58  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
12:38:58  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
12:38:58  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
12:38:58  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
12:38:58  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
12:38:58  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
12:38:58  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
12:38:58  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
12:38:58  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
12:38:58  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
12:38:58  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
12:38:58  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
12:38:58  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
12:38:58  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
12:38:58  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
12:38:58  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
12:38:58  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
12:38:58  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
12:38:58  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
12:38:58  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
12:38:58  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
12:38:58  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
12:38:58  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
12:38:58  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
12:38:58  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
12:38:58  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
12:38:58  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
12:38:58  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
12:38:58  42  FROM stk16svmspy
12:38:58  43  /

Table created.

Elapsed: 00:00:01.32
12:38:59 SQL> 
12:38:59 SQL> -- rpt
12:38:59 SQL> 
12:38:59 SQL> SELECT
12:38:59   2  tkr
12:38:59   3  ,trend
12:38:59   4  ,gatt
12:38:59   5  ,COUNT(tkr)
12:38:59   6  ,AVG(g1)
12:38:59   7  FROM stk_ms_svmspy
12:38:59   8  GROUP BY tkr,trend,gatt
12:38:59   9  ORDER BY tkr,trend,gatt
12:38:59  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
ABT		-1 nup	     1620 -.17860811
ABT		-1 up	      962 1.02294491
ABT		-1	       78
ABT		 1 nup	     1961 -.24988468
ABT		 1 up	     1295 .511757521
ABT		 1	      246

6 rows selected.

Elapsed: 00:00:00.02
12:38:59 SQL> 
12:38:59 SQL> SELECT
12:38:59   2  tkr
12:38:59   3  ,0+TO_CHAR(ydate,'D')daynum
12:38:59   4  ,COUNT(tkr)
12:38:59   5  ,MIN(ydate),MAX(ydate)
12:38:59   6  FROM stk_ms_svmspy
12:38:59   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
12:38:59   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
12:38:59   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
ABT		 2	 1092 2011-01-10 14:30:00 2011-04-25 19:55:00
ABT		 3	 1326 2011-01-04 14:30:00 2011-04-26 19:55:00
ABT		 4	 1326 2011-01-05 14:30:00 2011-04-27 19:55:00
ABT		 5	 1248 2011-01-06 14:30:00 2011-04-21 19:55:00
ABT		 6	 1170 2011-01-07 14:30:00 2011-04-15 19:55:00

Elapsed: 00:00:00.00
12:38:59 SQL> 
12:38:59 SQL> -- exit
12:38:59 SQL> @stk10svmd.sql '&1'
12:38:59 SQL> --
12:38:59 SQL> -- stk10svmd.sql
12:38:59 SQL> --
12:38:59 SQL> 
12:38:59 SQL> -- Creates views and tables for demonstrating SVM.
12:38:59 SQL> -- I need to run this after I run stk10.sql
12:38:59 SQL> 
12:38:59 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.05
12:38:59 SQL> 
12:38:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.14
12:38:59 SQL> 
12:38:59 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
12:38:59   2  SELECT
12:38:59   3  tkr
12:38:59   4  ,ydate
12:38:59   5  ,tkr||ydate tkrdate
12:38:59   6  ,clse
12:38:59   7  ,rownum rnum -- acts as t in my time-series
12:38:59   8  -- Derive some attributes from clse.
12:38:59   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
12:38:59  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
12:38:59  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
12:38:59  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
12:38:59  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
12:38:59  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
12:38:59  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
12:38:59  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
12:38:59  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
12:38:59  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
12:38:59  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
12:38:59  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
12:38:59  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
12:38:59  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
12:38:59  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
12:38:59  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
12:38:59  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
12:38:59  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
12:38:59  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
12:38:59  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
12:38:59  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
12:38:59  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
12:38:59  31  -- ystk21 created here: svmd/cr_ystk21.sql
12:38:59  32  FROM ystk21
12:38:59  33  WHERE UPPER(tkr)='&1'
12:38:59  34  AND ydate > '1990-01-01'
12:38:59  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
12:38:59  36  ORDER BY ydate
12:38:59  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='ABT'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='ABT')

Table created.

Elapsed: 00:00:00.40
12:39:00 SQL> 
12:39:00 SQL> -- rpt
12:39:00 SQL> 
12:39:00 SQL> SELECT
12:39:00   2  tkr
12:39:00   3  ,COUNT(tkr)
12:39:00   4  ,MIN(clse),MAX(clse)
12:39:00   5  ,MIN(avg4),MAX(avg4)
12:39:00   6  ,MIN(ydate),MAX(ydate)
12:39:00   7  FROM stk_svmd10svmspy
12:39:00   8  GROUP BY tkr
12:39:00   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
ABT		5327	   4.51      54.54	4.552	  54.076 1990-01-02 20:00:00 2011-04-26 20:00:00

Elapsed: 00:00:00.01
12:39:00 SQL> 
12:39:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:39:00 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.11
12:39:00 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
12:39:00   2  SELECT
12:39:00   3  tkr
12:39:00   4  ,ydate
12:39:00   5  ,tkrdate
12:39:00   6  ,clse
12:39:00   7  ,rnum
12:39:00   8  -- g1 is important. I want to predict g1:
12:39:00   9  ,ld - clse g1
12:39:00  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
12:39:00  11  -- I want more attributes from the ones I derived above:
12:39:00  12  -- clse relation to moving-min
12:39:00  13  ,clse-min3  cm3
12:39:00  14  ,clse-min4  cm4
12:39:00  15  ,clse-min5  cm5
12:39:00  16  ,clse-min6  cm6
12:39:00  17  ,clse-min7  cm7
12:39:00  18  ,clse-min8  cm8
12:39:00  19  ,clse-min9  cm9
12:39:00  20  -- clse relation to moving-avg
12:39:00  21  ,clse-avg3  ca3
12:39:00  22  ,clse-avg4  ca4
12:39:00  23  ,clse-avg5  ca5
12:39:00  24  ,clse-avg6  ca6
12:39:00  25  ,clse-avg7  ca7
12:39:00  26  ,clse-avg8  ca8
12:39:00  27  ,clse-avg9  ca9
12:39:00  28  -- clse relation to moving-max
12:39:00  29  ,clse-max3  cx3
12:39:00  30  ,clse-max4  cx4
12:39:00  31  ,clse-max5  cx5
12:39:00  32  ,clse-max6  cx6
12:39:00  33  ,clse-max7  cx7
12:39:00  34  ,clse-max8  cx8
12:39:00  35  ,clse-max9  cx9
12:39:00  36  -- Derive date related attributes:
12:39:00  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:39:00  38  ,0+TO_CHAR(ydate,'D')d
12:39:00  39  ,0+TO_CHAR(ydate,'W')w
12:39:00  40  -- mpm stands for minutes-past-midnight:
12:39:00  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:39:00  42  -- mph stands for minutes-past-hour:
12:39:00  43  ,0+TO_CHAR(ydate,'MI')mph
12:39:00  44  FROM stk_svmd10svmspy
12:39:00  45  ORDER BY ydate
12:39:00  46  /

Table created.

Elapsed: 00:00:00.22
12:39:00 SQL> 
12:39:00 SQL> -- rpt
12:39:00 SQL> 
12:39:00 SQL> SELECT
12:39:00   2  tkr
12:39:00   3  ,COUNT(tkr)
12:39:00   4  ,MIN(clse),MAX(clse)
12:39:00   5  ,MIN(ydate),MAX(ydate)
12:39:00   6  FROM stk_svmd12
12:39:00   7  GROUP BY tkr
12:39:00   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
ABT		5327	   4.51      54.54 1990-01-02 20:00:00 2011-04-26 20:00:00

Elapsed: 00:00:00.02
12:39:00 SQL> 
12:39:00 SQL> -- Prepare for derivation of NTILE based parameters.
12:39:00 SQL> -- Also derive the "trend" parameter:
12:39:00 SQL> 
12:39:00 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.05
12:39:00 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
12:39:00   2  SELECT
12:39:00   3  tkr
12:39:00   4  ,ydate
12:39:00   5  ,tkrdate
12:39:00   6  ,clse
12:39:00   7  ,g1
12:39:00   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
12:39:00   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
12:39:00  10  ,CASE WHEN trend IS NULL THEN 1
12:39:00  11  	    WHEN trend =0      THEN 1
12:39:00  12  	    ELSE trend END trend
12:39:00  13  ,cm3
12:39:00  14  ,cm4
12:39:00  15  ,cm5
12:39:00  16  ,cm6
12:39:00  17  ,cm7
12:39:00  18  ,cm8
12:39:00  19  ,cm9
12:39:00  20  ,ca3
12:39:00  21  ,ca4
12:39:00  22  ,ca5
12:39:00  23  ,ca6
12:39:00  24  ,ca7
12:39:00  25  ,ca8
12:39:00  26  ,ca9
12:39:00  27  ,cx3
12:39:00  28  ,cx4
12:39:00  29  ,cx5
12:39:00  30  ,cx6
12:39:00  31  ,cx7
12:39:00  32  ,cx8
12:39:00  33  ,cx9
12:39:00  34  ,hh
12:39:00  35  ,d
12:39:00  36  ,w
12:39:00  37  ,mpm
12:39:00  38  ,mph
12:39:00  39  FROM stk_svmd12
12:39:00  40  -- Guard against divide by 0:
12:39:00  41  WHERE clse > 0
12:39:00  42  ORDER BY ydate
12:39:00  43  /

Table created.

Elapsed: 00:00:00.15
12:39:00 SQL> 
12:39:00 SQL> -- rpt
12:39:00 SQL> 
12:39:00 SQL> SELECT
12:39:00   2  tkr
12:39:00   3  ,trend
12:39:00   4  ,gatt
12:39:00   5  ,COUNT(tkr)
12:39:00   6  ,AVG(g1)
12:39:00   7  FROM stk_svmd14
12:39:00   8  GROUP BY tkr,trend,gatt
12:39:00   9  ORDER BY tkr,trend,gatt
12:39:00  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ABT		  -1 nup       1385 -.28235379
ABT		  -1 up        1084 .415691882
ABT		  -1		  1
ABT		   1 nup       1682 -.25916766
ABT		   1 up        1175 .360170213

Elapsed: 00:00:00.01
12:39:00 SQL> 
12:39:00 SQL> -- Derive NTILE based params:
12:39:00 SQL> 
12:39:00 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.04
12:39:00 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
12:39:00   2  SELECT
12:39:00   3  tkr
12:39:00   4  ,ydate
12:39:00   5  ,tkrdate
12:39:00   6  ,clse
12:39:00   7  ,g1
12:39:00   8  ,gatt
12:39:00   9  ,gattn
12:39:00  10  ,trend
12:39:00  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
12:39:00  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
12:39:00  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
12:39:00  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
12:39:00  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
12:39:00  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
12:39:00  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
12:39:00  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
12:39:00  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
12:39:00  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
12:39:00  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
12:39:00  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
12:39:00  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
12:39:00  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
12:39:00  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
12:39:00  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
12:39:00  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
12:39:00  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
12:39:00  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
12:39:00  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
12:39:00  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
12:39:00  32  ,hh  att21
12:39:00  33  ,d   att22
12:39:00  34  ,w   att23
12:39:00  35  ,mpm att24
12:39:00  36  ,mph att25
12:39:00  37  ,trend att26
12:39:00  38  FROM stk_svmd14
12:39:00  39  ORDER BY ydate
12:39:00  40  /

Table created.

Elapsed: 00:00:00.62
12:39:01 SQL> 
12:39:01 SQL> -- rpt
12:39:01 SQL> 
12:39:01 SQL> SELECT
12:39:01   2  tkr
12:39:01   3  ,trend
12:39:01   4  ,gatt
12:39:01   5  ,COUNT(tkr)
12:39:01   6  ,AVG(g1)
12:39:01   7  FROM stk_svmd16
12:39:01   8  GROUP BY tkr,trend,gatt
12:39:01   9  ORDER BY tkr,trend,gatt
12:39:01  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ABT		  -1 nup       1385 -.28235379
ABT		  -1 up        1084 .415691882
ABT		  -1		  1
ABT		   1 nup       1682 -.25916766
ABT		   1 up        1175 .360170213

Elapsed: 00:00:00.01
12:39:01 SQL> 
12:39:01 SQL> -- Comment out feedback related syntax:
12:39:01 SQL> 
12:39:01 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
12:39:01 SQL> -- SELECT
12:39:01 SQL> -- m.tkr
12:39:01 SQL> -- ,m.ydate
12:39:01 SQL> -- ,m.tkrdate
12:39:01 SQL> -- ,l.score score_long
12:39:01 SQL> -- ,s.score score_short
12:39:01 SQL> -- ,m.g1
12:39:01 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
12:39:01 SQL> -- WHERE l.targ='gatt'
12:39:01 SQL> -- AND	 s.targ='gattn'
12:39:01 SQL> -- AND l.tkrdate = s.tkrdate
12:39:01 SQL> -- AND l.tkrdate = m.tkrdate
12:39:01 SQL> -- -- Speed things up:
12:39:01 SQL> -- AND l.tkr = '&1'
12:39:01 SQL> -- AND s.tkr = '&1'
12:39:01 SQL> -- /
12:39:01 SQL> --
12:39:01 SQL> -- DROP TABLE score_corr_tkr;
12:39:01 SQL> --
12:39:01 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
12:39:01 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
12:39:01 SQL> -- (
12:39:01 SQL> --   SELECT
12:39:01 SQL> --   tkrdate
12:39:01 SQL> --   -- Find corr() tween score and g1 over 8 day period:
12:39:01 SQL> --   ,CORR((score_long - score_short),g1)
12:39:01 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
12:39:01 SQL> --   FROM sc12tkr
12:39:01 SQL> -- )
12:39:01 SQL> -- GROUP BY tkrdate
12:39:01 SQL> -- /
12:39:01 SQL> 
12:39:01 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
12:39:01 SQL> 
12:39:01 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
12:39:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
12:39:02 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
12:39:02   2  SELECT
12:39:02   3  tkr
12:39:02   4  ,ydate
12:39:02   5  ,tkrdate
12:39:02   6  ,trend
12:39:02   7  ,g1
12:39:02   8  ,gatt
12:39:02   9  ,gattn
12:39:02  10  -- Goodness attributes:
12:39:02  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
12:39:02  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
12:39:02  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
12:39:02  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
12:39:02  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
12:39:02  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
12:39:02  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
12:39:02  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
12:39:02  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
12:39:02  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
12:39:02  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
12:39:02  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
12:39:02  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
12:39:02  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
12:39:02  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
12:39:02  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
12:39:02  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
12:39:02  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
12:39:02  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
12:39:02  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
12:39:02  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
12:39:02  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
12:39:02  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
12:39:02  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
12:39:02  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
12:39:02  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
12:39:02  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
12:39:02  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
12:39:02  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
12:39:02  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
12:39:02  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
12:39:02  42  FROM stk_svmd16
12:39:02  43  /

Table created.

Elapsed: 00:00:00.99
12:39:03 SQL> 
12:39:03 SQL> -- rpt
12:39:03 SQL> 
12:39:03 SQL> SELECT
12:39:03   2  tkr
12:39:03   3  ,trend
12:39:03   4  ,gatt
12:39:03   5  ,COUNT(tkr)
12:39:03   6  ,AVG(g1)
12:39:03   7  FROM stk_ms_svmd_svmspy
12:39:03   8  GROUP BY tkr,trend,gatt
12:39:03   9  ORDER BY tkr,trend,gatt
12:39:03  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
ABT		  -1 nup       1385 -.28235379
ABT		  -1 up        1084 .415691882
ABT		  -1		  1
ABT		   1 nup       1682 -.25916766
ABT		   1 up        1175 .360170213

Elapsed: 00:00:00.03
12:39:03 SQL> 
12:39:03 SQL> SELECT
12:39:03   2  tkr
12:39:03   3  ,COUNT(tkr)
12:39:03   4  ,MIN(ydate),MAX(ydate)
12:39:03   5  FROM stk_ms_svmd_svmspy
12:39:03   6  GROUP BY tkr
12:39:03   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
ABT		5327 1990-01-02 20:00:00 2011-04-26 20:00:00

Elapsed: 00:00:00.01
12:39:03 SQL> 
12:39:03 SQL> -- exit
12:39:03 SQL> 
12:39:03 SQL> 
12:39:03 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.04
12:39:03 SQL> 
12:39:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.15
12:39:03 SQL> 
12:39:03 SQL> CREATE TABLE stk_ms_u COMPRESS AS
12:39:03   2  SELECT * FROM stk_ms_svmspy
12:39:03   3  UNION
12:39:03   4  SELECT * FROM stk_ms_svmd_svmspy
12:39:03   5  /

Table created.

Elapsed: 00:00:00.28
12:39:03 SQL> 
12:39:03 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
