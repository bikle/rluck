
SQL*Plus: Release 11.2.0.1.0 Production on Fri Apr 22 14:10:22 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

14:10:22 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
14:10:22 SQL> 
14:10:22 SQL> 14:10:22 SQL> --
14:10:22 SQL> -- stk10u.sql
14:10:22 SQL> --
14:10:22 SQL> 
14:10:22 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
14:10:22 SQL> 
14:10:22 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
14:10:22 SQL> @stk10.sql     '&1'
14:10:22 SQL> --
14:10:22 SQL> -- stk10.sql
14:10:22 SQL> --
14:10:22 SQL> 
14:10:22 SQL> -- Creates views and tables for demonstrating SVM.
14:10:22 SQL> 
14:10:22 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.19
14:10:22 SQL> 
14:10:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
14:10:22 SQL> 
14:10:22 SQL> CREATE TABLE stk10svmspy COMPRESS AS
14:10:22   2  SELECT
14:10:22   3  tkr
14:10:22   4  ,ydate
14:10:22   5  ,tkr||ydate tkrdate
14:10:22   6  ,clse
14:10:22   7  ,clse2
14:10:22   8  ,rownum rnum -- acts as t in my time-series
14:10:22   9  -- g1 is important. I want to predict g1:
14:10:22  10  ,gain1day g1
14:10:22  11  -- Derive some attributes from clse.
14:10:22  12  -- Each row spans 5 minutes.
14:10:22  13  -- The number of rows in 1 day is 24*60/5.
14:10:22  14  -- I want the aggregations to span from 3 days to 9 days:
14:10:22  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
14:10:22  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
14:10:22  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
14:10:22  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
14:10:22  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
14:10:22  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
14:10:22  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
14:10:22  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
14:10:22  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
14:10:22  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
14:10:22  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
14:10:22  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
14:10:22  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
14:10:22  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
14:10:22  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
14:10:22  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
14:10:22  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
14:10:22  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
14:10:22  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
14:10:22  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
14:10:22  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
14:10:22  36  FROM di5min_stk_c2
14:10:22  37  WHERE UPPER(tkr)='&1'
14:10:22  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
14:10:22  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
14:10:22  40  ORDER BY ydate
14:10:22  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='HOC'

Table created.

Elapsed: 00:00:00.57
14:10:23 SQL> 
14:10:23 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.12
14:10:23 SQL> 
14:10:23 SQL> -- rpt
14:10:23 SQL> 
14:10:23 SQL> SELECT
14:10:23   2  tkr
14:10:23   3  ,COUNT(tkr)ccount
14:10:23   4  ,MIN(clse)mnclse,MAX(clse)mxclse
14:10:23   5  -- ,MIN(avg4),MAX(avg4)
14:10:23   6  ,MIN(ydate),MAX(ydate)
14:10:23   7  ,MIN(g1)
14:10:23   8  ,MAX(g1)
14:10:23   9  FROM stk10svmspy
14:10:23  10  GROUP BY tkr
14:10:23  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
HOC	      3510	50.79	   66.41 2011-02-17 14:30:00 2011-04-21 19:55:00      -5.23	  5.16

Elapsed: 00:00:00.01
14:10:23 SQL> 
14:10:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:10:23 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.18
14:10:23 SQL> CREATE TABLE stk12svmspy COMPRESS AS
14:10:23   2  SELECT
14:10:23   3  tkr
14:10:23   4  ,ydate
14:10:23   5  ,tkrdate
14:10:23   6  ,clse
14:10:23   7  ,rnum
14:10:23   8  ,g1
14:10:23   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
14:10:23  10  -- I want more attributes from the ones I derived above:
14:10:23  11  -- clse relation to moving-min
14:10:23  12  ,clse-min3  cm3
14:10:23  13  ,clse-min4  cm4
14:10:23  14  ,clse-min5  cm5
14:10:23  15  ,clse-min6  cm6
14:10:23  16  ,clse-min7  cm7
14:10:23  17  ,clse-min8  cm8
14:10:23  18  ,clse-min9  cm9
14:10:23  19  -- clse relation to moving-avg
14:10:23  20  ,clse-avg3  ca3
14:10:23  21  ,clse-avg4  ca4
14:10:23  22  ,clse-avg5  ca5
14:10:23  23  ,clse-avg6  ca6
14:10:23  24  ,clse-avg7  ca7
14:10:23  25  ,clse-avg8  ca8
14:10:23  26  ,clse-avg9  ca9
14:10:23  27  -- clse relation to moving-max
14:10:23  28  ,clse-max3  cx3
14:10:23  29  ,clse-max4  cx4
14:10:23  30  ,clse-max5  cx5
14:10:23  31  ,clse-max6  cx6
14:10:23  32  ,clse-max7  cx7
14:10:23  33  ,clse-max8  cx8
14:10:23  34  ,clse-max9  cx9
14:10:23  35  -- Derive date related attributes:
14:10:23  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:10:23  37  ,0+TO_CHAR(ydate,'D')d
14:10:23  38  ,0+TO_CHAR(ydate,'W')w
14:10:23  39  -- mpm stands for minutes-past-midnight:
14:10:23  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:10:23  41  -- mph stands for minutes-past-hour:
14:10:23  42  ,0+TO_CHAR(ydate,'MI')mph
14:10:23  43  FROM stk10svmspy
14:10:23  44  ORDER BY ydate
14:10:23  45  /

Table created.

Elapsed: 00:00:00.12
14:10:23 SQL> 
14:10:23 SQL> -- rpt
14:10:23 SQL> 
14:10:23 SQL> SELECT
14:10:23   2  tkr
14:10:23   3  ,COUNT(tkr)ccount
14:10:23   4  ,MIN(clse)mnclse,MAX(clse)mxclse
14:10:23   5  -- ,MIN(avg4),MAX(avg4)
14:10:23   6  ,MIN(ydate),MAX(ydate)
14:10:23   7  ,MIN(g1)
14:10:23   8  ,AVG(g1)
14:10:23   9  ,MAX(g1)
14:10:23  10  FROM stk12svmspy
14:10:23  11  GROUP BY tkr
14:10:23  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
HOC	      3510	50.79	   66.41 2011-02-17 14:30:00 2011-04-21 19:55:00      -5.23 .085351859	     5.16

Elapsed: 00:00:00.01
14:10:23 SQL> 
14:10:23 SQL> -- Prepare for derivation of NTILE based parameters.
14:10:23 SQL> -- Also derive the "trend" parameter:
14:10:23 SQL> 
14:10:23 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.19
14:10:23 SQL> CREATE TABLE stk14svmspy COMPRESS AS
14:10:23   2  SELECT
14:10:23   3  tkr
14:10:23   4  ,ydate
14:10:23   5  ,tkrdate
14:10:23   6  ,clse
14:10:23   7  ,g1
14:10:23   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
14:10:23   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
14:10:23  10  ,CASE WHEN trend IS NULL THEN 1
14:10:23  11  	    WHEN trend =0      THEN 1
14:10:23  12  	    ELSE trend END trend
14:10:23  13  ,cm3
14:10:23  14  ,cm4
14:10:23  15  ,cm5
14:10:23  16  ,cm6
14:10:23  17  ,cm7
14:10:23  18  ,cm8
14:10:23  19  ,cm9
14:10:23  20  ,ca3
14:10:23  21  ,ca4
14:10:23  22  ,ca5
14:10:23  23  ,ca6
14:10:23  24  ,ca7
14:10:23  25  ,ca8
14:10:23  26  ,ca9
14:10:23  27  ,cx3
14:10:23  28  ,cx4
14:10:23  29  ,cx5
14:10:23  30  ,cx6
14:10:23  31  ,cx7
14:10:23  32  ,cx8
14:10:23  33  ,cx9
14:10:23  34  ,hh
14:10:23  35  ,d
14:10:23  36  ,w
14:10:23  37  ,mpm
14:10:23  38  ,mph
14:10:23  39  FROM stk12svmspy
14:10:23  40  -- Guard against divide by 0:
14:10:23  41  WHERE clse > 0
14:10:23  42  ORDER BY ydate
14:10:23  43  /

Table created.

Elapsed: 00:00:00.09
14:10:23 SQL> 
14:10:23 SQL> -- rpt
14:10:23 SQL> 
14:10:23 SQL> SELECT
14:10:23   2  tkr
14:10:23   3  ,trend
14:10:23   4  ,gatt
14:10:23   5  ,COUNT(tkr)
14:10:23   6  ,AVG(g1)
14:10:23   7  FROM stk14svmspy
14:10:23   8  GROUP BY tkr,trend,gatt
14:10:23   9  ORDER BY tkr,trend,gatt
14:10:23  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
HOC		-1 nup	      546 -1.3914351
HOC		-1 up	      792 2.34635664
HOC		-1	       90
HOC		 1 nup	     1233 -1.4339615
HOC		 1 up	      771 1.23830022
HOC		 1	       78

6 rows selected.

Elapsed: 00:00:00.01
14:10:23 SQL> 
14:10:23 SQL> -- Derive NTILE based params:
14:10:23 SQL> 
14:10:23 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.14
14:10:24 SQL> CREATE TABLE stk16svmspy COMPRESS AS
14:10:24   2  SELECT
14:10:24   3  tkr
14:10:24   4  ,ydate
14:10:24   5  ,tkrdate
14:10:24   6  ,clse
14:10:24   7  ,g1
14:10:24   8  ,gatt
14:10:24   9  ,gattn
14:10:24  10  ,trend
14:10:24  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
14:10:24  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
14:10:24  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
14:10:24  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
14:10:24  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
14:10:24  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
14:10:24  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
14:10:24  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
14:10:24  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
14:10:24  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
14:10:24  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
14:10:24  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
14:10:24  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
14:10:24  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
14:10:24  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
14:10:24  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
14:10:24  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
14:10:24  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
14:10:24  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
14:10:24  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
14:10:24  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
14:10:24  32  ,hh  att21
14:10:24  33  ,d   att22
14:10:24  34  ,w   att23
14:10:24  35  ,mpm att24
14:10:24  36  ,mph att25
14:10:24  37  ,trend att26
14:10:24  38  FROM stk14svmspy
14:10:24  39  ORDER BY ydate
14:10:24  40  /

Table created.

Elapsed: 00:00:00.45
14:10:24 SQL> 
14:10:24 SQL> -- rpt
14:10:24 SQL> 
14:10:24 SQL> SELECT
14:10:24   2  tkr
14:10:24   3  ,trend
14:10:24   4  ,gatt
14:10:24   5  ,COUNT(tkr)
14:10:24   6  ,AVG(g1)
14:10:24   7  FROM stk16svmspy
14:10:24   8  GROUP BY tkr,trend,gatt
14:10:24   9  ORDER BY tkr,trend,gatt
14:10:24  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
HOC		-1 nup	      546 -1.3914351
HOC		-1 up	      792 2.34635664
HOC		-1	       90
HOC		 1 nup	     1233 -1.4339615
HOC		 1 up	      771 1.23830022
HOC		 1	       78

6 rows selected.

Elapsed: 00:00:00.01
14:10:24 SQL> 
14:10:24 SQL> -- Comment out feedback related syntax:
14:10:24 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
14:10:24 SQL> -- SELECT
14:10:24 SQL> -- m.tkr
14:10:24 SQL> -- ,m.ydate
14:10:24 SQL> -- ,m.tkrdate
14:10:24 SQL> -- ,l.score score_long
14:10:24 SQL> -- ,s.score score_short
14:10:24 SQL> -- ,m.g1
14:10:24 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
14:10:24 SQL> -- WHERE l.targ='gatt'
14:10:24 SQL> -- AND	 s.targ='gattn'
14:10:24 SQL> -- AND l.tkrdate = s.tkrdate
14:10:24 SQL> -- AND l.tkrdate = m.tkrdate
14:10:24 SQL> -- -- Speed things up:
14:10:24 SQL> -- AND l.tkr = '&1'
14:10:24 SQL> -- AND s.tkr = '&1'
14:10:24 SQL> -- /
14:10:24 SQL> --
14:10:24 SQL> -- DROP TABLE score_corr_tkr;
14:10:24 SQL> --
14:10:24 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
14:10:24 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
14:10:24 SQL> -- (
14:10:24 SQL> --   SELECT
14:10:24 SQL> --   tkrdate
14:10:24 SQL> --   -- Find corr() tween score and g1 over 8 day period:
14:10:24 SQL> --   ,CORR((score_long - score_short),g1)
14:10:24 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
14:10:24 SQL> --   FROM sc12tkr
14:10:24 SQL> -- )
14:10:24 SQL> -- GROUP BY tkrdate
14:10:24 SQL> -- /
14:10:24 SQL> 
14:10:24 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
14:10:24 SQL> 
14:10:24 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.19
14:10:24 SQL> 
14:10:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
14:10:24 SQL> 
14:10:24 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
14:10:24   2  SELECT
14:10:24   3  tkr
14:10:24   4  ,ydate
14:10:24   5  ,tkrdate
14:10:24   6  ,trend
14:10:24   7  ,g1
14:10:24   8  ,gatt
14:10:24   9  ,gattn
14:10:24  10  -- Goodness attributes:
14:10:24  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
14:10:24  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
14:10:24  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
14:10:24  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
14:10:24  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
14:10:24  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
14:10:24  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
14:10:24  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
14:10:24  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
14:10:24  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
14:10:24  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
14:10:24  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
14:10:24  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
14:10:24  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
14:10:24  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
14:10:24  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
14:10:24  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
14:10:24  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
14:10:24  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
14:10:24  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
14:10:24  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
14:10:24  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
14:10:24  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
14:10:24  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
14:10:24  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
14:10:24  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
14:10:24  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
14:10:24  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
14:10:24  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
14:10:24  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
14:10:24  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
14:10:24  42  FROM stk16svmspy
14:10:24  43  /

Table created.

Elapsed: 00:00:00.64
14:10:25 SQL> 
14:10:25 SQL> -- rpt
14:10:25 SQL> 
14:10:25 SQL> SELECT
14:10:25   2  tkr
14:10:25   3  ,trend
14:10:25   4  ,gatt
14:10:25   5  ,COUNT(tkr)
14:10:25   6  ,AVG(g1)
14:10:25   7  FROM stk_ms_svmspy
14:10:25   8  GROUP BY tkr,trend,gatt
14:10:25   9  ORDER BY tkr,trend,gatt
14:10:25  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
HOC		-1 nup	      546 -1.3914351
HOC		-1 up	      792 2.34635664
HOC		-1	       90
HOC		 1 nup	     1233 -1.4339615
HOC		 1 up	      771 1.23830022
HOC		 1	       78

6 rows selected.

Elapsed: 00:00:00.01
14:10:25 SQL> 
14:10:25 SQL> SELECT
14:10:25   2  tkr
14:10:25   3  ,0+TO_CHAR(ydate,'D')daynum
14:10:25   4  ,COUNT(tkr)
14:10:25   5  ,MIN(ydate),MAX(ydate)
14:10:25   6  FROM stk_ms_svmspy
14:10:25   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
14:10:25   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
14:10:25   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
HOC		 2	  624 2011-02-28 14:30:00 2011-04-18 19:55:00
HOC		 3	  702 2011-02-22 14:30:00 2011-04-19 19:55:00
HOC		 4	  702 2011-02-23 14:30:00 2011-04-20 19:55:00
HOC		 5	  780 2011-02-17 14:30:00 2011-04-21 19:55:00
HOC		 6	  702 2011-02-18 14:30:00 2011-04-15 19:55:00

Elapsed: 00:00:00.01
14:10:25 SQL> 
14:10:25 SQL> -- exit
14:10:25 SQL> @stk10svmd.sql '&1'
14:10:25 SQL> --
14:10:25 SQL> -- stk10svmd.sql
14:10:25 SQL> --
14:10:25 SQL> 
14:10:25 SQL> -- Creates views and tables for demonstrating SVM.
14:10:25 SQL> -- I need to run this after I run stk10.sql
14:10:25 SQL> 
14:10:25 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.21
14:10:25 SQL> 
14:10:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
14:10:25 SQL> 
14:10:25 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
14:10:25   2  SELECT
14:10:25   3  tkr
14:10:25   4  ,ydate
14:10:25   5  ,tkr||ydate tkrdate
14:10:25   6  ,clse
14:10:25   7  ,rownum rnum -- acts as t in my time-series
14:10:25   8  -- Derive some attributes from clse.
14:10:25   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
14:10:25  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
14:10:25  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
14:10:25  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
14:10:25  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
14:10:25  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
14:10:25  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
14:10:25  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
14:10:25  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
14:10:25  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
14:10:25  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
14:10:25  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
14:10:25  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
14:10:25  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
14:10:25  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
14:10:25  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
14:10:25  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
14:10:25  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
14:10:25  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
14:10:25  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
14:10:25  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
14:10:25  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
14:10:25  31  -- ystk21 created here: svmd/cr_ystk21.sql
14:10:25  32  FROM ystk21
14:10:25  33  WHERE UPPER(tkr)='&1'
14:10:25  34  AND ydate > '1990-01-01'
14:10:25  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
14:10:25  36  ORDER BY ydate
14:10:25  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='HOC'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='HOC')

Table created.

Elapsed: 00:00:00.33
14:10:26 SQL> 
14:10:26 SQL> -- rpt
14:10:26 SQL> 
14:10:26 SQL> SELECT
14:10:26   2  tkr
14:10:26   3  ,COUNT(tkr)
14:10:26   4  ,MIN(clse),MAX(clse)
14:10:26   5  ,MIN(avg4),MAX(avg4)
14:10:26   6  ,MIN(ydate),MAX(ydate)
14:10:26   7  FROM stk_svmd10svmspy
14:10:26   8  GROUP BY tkr
14:10:26   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
HOC		4798	    .95      74.22	 .976	  73.324 1992-03-17 20:00:00 2011-04-21 20:00:00

Elapsed: 00:00:00.01
14:10:26 SQL> 
14:10:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:10:26 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.17
14:10:26 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
14:10:26   2  SELECT
14:10:26   3  tkr
14:10:26   4  ,ydate
14:10:26   5  ,tkrdate
14:10:26   6  ,clse
14:10:26   7  ,rnum
14:10:26   8  -- g1 is important. I want to predict g1:
14:10:26   9  ,ld - clse g1
14:10:26  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
14:10:26  11  -- I want more attributes from the ones I derived above:
14:10:26  12  -- clse relation to moving-min
14:10:26  13  ,clse-min3  cm3
14:10:26  14  ,clse-min4  cm4
14:10:26  15  ,clse-min5  cm5
14:10:26  16  ,clse-min6  cm6
14:10:26  17  ,clse-min7  cm7
14:10:26  18  ,clse-min8  cm8
14:10:26  19  ,clse-min9  cm9
14:10:26  20  -- clse relation to moving-avg
14:10:26  21  ,clse-avg3  ca3
14:10:26  22  ,clse-avg4  ca4
14:10:26  23  ,clse-avg5  ca5
14:10:26  24  ,clse-avg6  ca6
14:10:26  25  ,clse-avg7  ca7
14:10:26  26  ,clse-avg8  ca8
14:10:26  27  ,clse-avg9  ca9
14:10:26  28  -- clse relation to moving-max
14:10:26  29  ,clse-max3  cx3
14:10:26  30  ,clse-max4  cx4
14:10:26  31  ,clse-max5  cx5
14:10:26  32  ,clse-max6  cx6
14:10:26  33  ,clse-max7  cx7
14:10:26  34  ,clse-max8  cx8
14:10:26  35  ,clse-max9  cx9
14:10:26  36  -- Derive date related attributes:
14:10:26  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:10:26  38  ,0+TO_CHAR(ydate,'D')d
14:10:26  39  ,0+TO_CHAR(ydate,'W')w
14:10:26  40  -- mpm stands for minutes-past-midnight:
14:10:26  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:10:26  42  -- mph stands for minutes-past-hour:
14:10:26  43  ,0+TO_CHAR(ydate,'MI')mph
14:10:26  44  FROM stk_svmd10svmspy
14:10:26  45  ORDER BY ydate
14:10:26  46  /

Table created.

Elapsed: 00:00:00.16
14:10:26 SQL> 
14:10:26 SQL> -- rpt
14:10:26 SQL> 
14:10:26 SQL> SELECT
14:10:26   2  tkr
14:10:26   3  ,COUNT(tkr)
14:10:26   4  ,MIN(clse),MAX(clse)
14:10:26   5  ,MIN(ydate),MAX(ydate)
14:10:26   6  FROM stk_svmd12
14:10:26   7  GROUP BY tkr
14:10:26   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
HOC		4798	    .95      74.22 1992-03-17 20:00:00 2011-04-21 20:00:00

Elapsed: 00:00:00.01
14:10:26 SQL> 
14:10:26 SQL> -- Prepare for derivation of NTILE based parameters.
14:10:26 SQL> -- Also derive the "trend" parameter:
14:10:26 SQL> 
14:10:26 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.17
14:10:26 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
14:10:26   2  SELECT
14:10:26   3  tkr
14:10:26   4  ,ydate
14:10:26   5  ,tkrdate
14:10:26   6  ,clse
14:10:26   7  ,g1
14:10:26   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
14:10:26   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
14:10:26  10  ,CASE WHEN trend IS NULL THEN 1
14:10:26  11  	    WHEN trend =0      THEN 1
14:10:26  12  	    ELSE trend END trend
14:10:26  13  ,cm3
14:10:26  14  ,cm4
14:10:26  15  ,cm5
14:10:26  16  ,cm6
14:10:26  17  ,cm7
14:10:26  18  ,cm8
14:10:26  19  ,cm9
14:10:26  20  ,ca3
14:10:26  21  ,ca4
14:10:26  22  ,ca5
14:10:26  23  ,ca6
14:10:26  24  ,ca7
14:10:26  25  ,ca8
14:10:26  26  ,ca9
14:10:26  27  ,cx3
14:10:26  28  ,cx4
14:10:26  29  ,cx5
14:10:26  30  ,cx6
14:10:26  31  ,cx7
14:10:26  32  ,cx8
14:10:26  33  ,cx9
14:10:26  34  ,hh
14:10:26  35  ,d
14:10:26  36  ,w
14:10:26  37  ,mpm
14:10:26  38  ,mph
14:10:26  39  FROM stk_svmd12
14:10:26  40  -- Guard against divide by 0:
14:10:26  41  WHERE clse > 0
14:10:26  42  ORDER BY ydate
14:10:26  43  /

Table created.

Elapsed: 00:00:00.11
14:10:26 SQL> 
14:10:26 SQL> -- rpt
14:10:26 SQL> 
14:10:26 SQL> SELECT
14:10:26   2  tkr
14:10:26   3  ,trend
14:10:26   4  ,gatt
14:10:26   5  ,COUNT(tkr)
14:10:26   6  ,AVG(g1)
14:10:26   7  FROM stk_svmd14
14:10:26   8  GROUP BY tkr,trend,gatt
14:10:26   9  ORDER BY tkr,trend,gatt
14:10:26  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
HOC		  -1 nup       1283 -.22749026
HOC		  -1 up 	921 .337763301
HOC		   1 nup       1505 -.21762791
HOC		   1 up        1088 .339954044
HOC		   1		  1

Elapsed: 00:00:00.01
14:10:26 SQL> 
14:10:26 SQL> -- Derive NTILE based params:
14:10:26 SQL> 
14:10:26 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.15
14:10:27 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
14:10:27   2  SELECT
14:10:27   3  tkr
14:10:27   4  ,ydate
14:10:27   5  ,tkrdate
14:10:27   6  ,clse
14:10:27   7  ,g1
14:10:27   8  ,gatt
14:10:27   9  ,gattn
14:10:27  10  ,trend
14:10:27  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
14:10:27  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
14:10:27  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
14:10:27  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
14:10:27  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
14:10:27  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
14:10:27  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
14:10:27  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
14:10:27  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
14:10:27  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
14:10:27  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
14:10:27  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
14:10:27  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
14:10:27  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
14:10:27  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
14:10:27  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
14:10:27  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
14:10:27  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
14:10:27  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
14:10:27  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
14:10:27  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
14:10:27  32  ,hh  att21
14:10:27  33  ,d   att22
14:10:27  34  ,w   att23
14:10:27  35  ,mpm att24
14:10:27  36  ,mph att25
14:10:27  37  ,trend att26
14:10:27  38  FROM stk_svmd14
14:10:27  39  ORDER BY ydate
14:10:27  40  /

Table created.

Elapsed: 00:00:00.53
14:10:27 SQL> 
14:10:27 SQL> -- rpt
14:10:27 SQL> 
14:10:27 SQL> SELECT
14:10:27   2  tkr
14:10:27   3  ,trend
14:10:27   4  ,gatt
14:10:27   5  ,COUNT(tkr)
14:10:27   6  ,AVG(g1)
14:10:27   7  FROM stk_svmd16
14:10:27   8  GROUP BY tkr,trend,gatt
14:10:27   9  ORDER BY tkr,trend,gatt
14:10:27  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
HOC		  -1 nup       1283 -.22749026
HOC		  -1 up 	921 .337763301
HOC		   1 nup       1505 -.21762791
HOC		   1 up        1088 .339954044
HOC		   1		  1

Elapsed: 00:00:00.02
14:10:27 SQL> 
14:10:27 SQL> -- Comment out feedback related syntax:
14:10:27 SQL> 
14:10:27 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
14:10:27 SQL> -- SELECT
14:10:27 SQL> -- m.tkr
14:10:27 SQL> -- ,m.ydate
14:10:27 SQL> -- ,m.tkrdate
14:10:27 SQL> -- ,l.score score_long
14:10:27 SQL> -- ,s.score score_short
14:10:27 SQL> -- ,m.g1
14:10:27 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
14:10:27 SQL> -- WHERE l.targ='gatt'
14:10:27 SQL> -- AND	 s.targ='gattn'
14:10:27 SQL> -- AND l.tkrdate = s.tkrdate
14:10:27 SQL> -- AND l.tkrdate = m.tkrdate
14:10:27 SQL> -- -- Speed things up:
14:10:27 SQL> -- AND l.tkr = '&1'
14:10:27 SQL> -- AND s.tkr = '&1'
14:10:27 SQL> -- /
14:10:27 SQL> --
14:10:27 SQL> -- DROP TABLE score_corr_tkr;
14:10:27 SQL> --
14:10:27 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
14:10:27 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
14:10:27 SQL> -- (
14:10:27 SQL> --   SELECT
14:10:27 SQL> --   tkrdate
14:10:27 SQL> --   -- Find corr() tween score and g1 over 8 day period:
14:10:27 SQL> --   ,CORR((score_long - score_short),g1)
14:10:27 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
14:10:27 SQL> --   FROM sc12tkr
14:10:27 SQL> -- )
14:10:27 SQL> -- GROUP BY tkrdate
14:10:27 SQL> -- /
14:10:27 SQL> 
14:10:27 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
14:10:27 SQL> 
14:10:27 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.13
14:10:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.70
14:10:28 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
14:10:28   2  SELECT
14:10:28   3  tkr
14:10:28   4  ,ydate
14:10:28   5  ,tkrdate
14:10:28   6  ,trend
14:10:28   7  ,g1
14:10:28   8  ,gatt
14:10:28   9  ,gattn
14:10:28  10  -- Goodness attributes:
14:10:28  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
14:10:28  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
14:10:28  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
14:10:28  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
14:10:28  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
14:10:28  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
14:10:28  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
14:10:28  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
14:10:28  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
14:10:28  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
14:10:28  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
14:10:28  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
14:10:28  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
14:10:28  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
14:10:28  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
14:10:28  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
14:10:28  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
14:10:28  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
14:10:28  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
14:10:28  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
14:10:28  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
14:10:28  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
14:10:28  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
14:10:28  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
14:10:28  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
14:10:28  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
14:10:28  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
14:10:28  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
14:10:28  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
14:10:28  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
14:10:28  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
14:10:28  42  FROM stk_svmd16
14:10:28  43  /

Table created.

Elapsed: 00:00:00.86
14:10:29 SQL> 
14:10:29 SQL> -- rpt
14:10:29 SQL> 
14:10:29 SQL> SELECT
14:10:29   2  tkr
14:10:29   3  ,trend
14:10:29   4  ,gatt
14:10:29   5  ,COUNT(tkr)
14:10:29   6  ,AVG(g1)
14:10:29   7  FROM stk_ms_svmd_svmspy
14:10:29   8  GROUP BY tkr,trend,gatt
14:10:29   9  ORDER BY tkr,trend,gatt
14:10:29  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
HOC		  -1 nup       1283 -.22749026
HOC		  -1 up 	921 .337763301
HOC		   1 nup       1505 -.21762791
HOC		   1 up        1088 .339954044
HOC		   1		  1

Elapsed: 00:00:00.01
14:10:29 SQL> 
14:10:29 SQL> SELECT
14:10:29   2  tkr
14:10:29   3  ,COUNT(tkr)
14:10:29   4  ,MIN(ydate),MAX(ydate)
14:10:29   5  FROM stk_ms_svmd_svmspy
14:10:29   6  GROUP BY tkr
14:10:29   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
HOC		4798 1992-03-17 20:00:00 2011-04-21 20:00:00

Elapsed: 00:00:00.00
14:10:29 SQL> 
14:10:29 SQL> -- exit
14:10:29 SQL> 
14:10:29 SQL> 
14:10:29 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.21
14:10:29 SQL> 
14:10:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.12
14:10:29 SQL> 
14:10:29 SQL> CREATE TABLE stk_ms_u COMPRESS AS
14:10:29   2  SELECT * FROM stk_ms_svmspy
14:10:29   3  UNION
14:10:29   4  SELECT * FROM stk_ms_svmd_svmspy
14:10:29   5  /

Table created.

Elapsed: 00:00:00.20
14:10:29 SQL> 
14:10:29 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
