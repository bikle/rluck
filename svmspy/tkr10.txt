
SQL*Plus: Release 11.2.0.1.0 Production on Wed Apr 20 14:30:25 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

14:30:26 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
14:30:26 SQL> 
14:30:26 SQL> 14:30:26 SQL> --
14:30:26 SQL> -- stk10u.sql
14:30:26 SQL> --
14:30:26 SQL> 
14:30:26 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
14:30:26 SQL> 
14:30:26 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
14:30:26 SQL> @stk10.sql     '&1'
14:30:26 SQL> --
14:30:26 SQL> -- stk10.sql
14:30:26 SQL> --
14:30:26 SQL> 
14:30:26 SQL> -- Creates views and tables for demonstrating SVM.
14:30:26 SQL> 
14:30:26 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.26
14:30:26 SQL> 
14:30:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
14:30:27 SQL> 
14:30:27 SQL> CREATE TABLE stk10svmspy COMPRESS AS
14:30:27   2  SELECT
14:30:27   3  tkr
14:30:27   4  ,ydate
14:30:27   5  ,tkr||ydate tkrdate
14:30:27   6  ,clse
14:30:27   7  ,clse2
14:30:27   8  ,rownum rnum -- acts as t in my time-series
14:30:27   9  -- g1 is important. I want to predict g1:
14:30:27  10  ,gain1day g1
14:30:27  11  -- Derive some attributes from clse.
14:30:27  12  -- Each row spans 5 minutes.
14:30:27  13  -- The number of rows in 1 day is 24*60/5.
14:30:27  14  -- I want the aggregations to span from 3 days to 9 days:
14:30:27  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
14:30:27  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
14:30:27  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
14:30:27  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
14:30:27  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
14:30:27  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
14:30:27  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
14:30:27  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
14:30:27  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
14:30:27  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
14:30:27  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
14:30:27  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
14:30:27  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
14:30:27  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
14:30:27  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
14:30:27  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
14:30:27  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
14:30:27  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
14:30:27  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
14:30:27  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
14:30:27  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
14:30:27  36  FROM di5min_stk_c2
14:30:27  37  WHERE UPPER(tkr)='&1'
14:30:27  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
14:30:27  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
14:30:27  40  ORDER BY ydate
14:30:27  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='DIA'

Table created.

Elapsed: 00:00:03.79
14:30:30 SQL> 
14:30:30 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.27
14:30:32 SQL> 
14:30:32 SQL> -- rpt
14:30:32 SQL> 
14:30:32 SQL> SELECT
14:30:32   2  tkr
14:30:32   3  ,COUNT(tkr)ccount
14:30:32   4  ,MIN(clse)mnclse,MAX(clse)mxclse
14:30:32   5  -- ,MIN(avg4),MAX(avg4)
14:30:32   6  ,MIN(ydate),MAX(ydate)
14:30:32   7  ,MIN(g1)
14:30:32   8  ,MAX(g1)
14:30:32   9  FROM stk10svmspy
14:30:32  10  GROUP BY tkr
14:30:32  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
DIA	     29680	96.34	  124.41 2009-10-28 18:10:00 2011-04-20 14:20:00      -5.24	  4.35

Elapsed: 00:00:00.04
14:30:32 SQL> 
14:30:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:30:32 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.14
14:30:32 SQL> CREATE TABLE stk12svmspy COMPRESS AS
14:30:32   2  SELECT
14:30:32   3  tkr
14:30:32   4  ,ydate
14:30:32   5  ,tkrdate
14:30:32   6  ,clse
14:30:32   7  ,rnum
14:30:32   8  ,g1
14:30:32   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
14:30:32  10  -- I want more attributes from the ones I derived above:
14:30:32  11  -- clse relation to moving-min
14:30:32  12  ,clse-min3  cm3
14:30:32  13  ,clse-min4  cm4
14:30:32  14  ,clse-min5  cm5
14:30:32  15  ,clse-min6  cm6
14:30:32  16  ,clse-min7  cm7
14:30:32  17  ,clse-min8  cm8
14:30:32  18  ,clse-min9  cm9
14:30:32  19  -- clse relation to moving-avg
14:30:32  20  ,clse-avg3  ca3
14:30:32  21  ,clse-avg4  ca4
14:30:32  22  ,clse-avg5  ca5
14:30:32  23  ,clse-avg6  ca6
14:30:32  24  ,clse-avg7  ca7
14:30:32  25  ,clse-avg8  ca8
14:30:32  26  ,clse-avg9  ca9
14:30:32  27  -- clse relation to moving-max
14:30:32  28  ,clse-max3  cx3
14:30:32  29  ,clse-max4  cx4
14:30:32  30  ,clse-max5  cx5
14:30:32  31  ,clse-max6  cx6
14:30:32  32  ,clse-max7  cx7
14:30:32  33  ,clse-max8  cx8
14:30:32  34  ,clse-max9  cx9
14:30:32  35  -- Derive date related attributes:
14:30:32  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:30:32  37  ,0+TO_CHAR(ydate,'D')d
14:30:32  38  ,0+TO_CHAR(ydate,'W')w
14:30:32  39  -- mpm stands for minutes-past-midnight:
14:30:32  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:30:32  41  -- mph stands for minutes-past-hour:
14:30:32  42  ,0+TO_CHAR(ydate,'MI')mph
14:30:32  43  FROM stk10svmspy
14:30:32  44  ORDER BY ydate
14:30:32  45  /

Table created.

Elapsed: 00:00:00.80
14:30:33 SQL> 
14:30:33 SQL> -- rpt
14:30:33 SQL> 
14:30:33 SQL> SELECT
14:30:33   2  tkr
14:30:33   3  ,COUNT(tkr)ccount
14:30:33   4  ,MIN(clse)mnclse,MAX(clse)mxclse
14:30:33   5  -- ,MIN(avg4),MAX(avg4)
14:30:33   6  ,MIN(ydate),MAX(ydate)
14:30:33   7  ,MIN(g1)
14:30:33   8  ,AVG(g1)
14:30:33   9  ,MAX(g1)
14:30:33  10  FROM stk12svmspy
14:30:33  11  GROUP BY tkr
14:30:33  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
DIA	     29680	96.34	  124.41 2009-10-28 18:10:00 2011-04-20 14:20:00      -5.24 .067784545	     4.35

Elapsed: 00:00:00.05
14:30:33 SQL> 
14:30:33 SQL> -- Prepare for derivation of NTILE based parameters.
14:30:33 SQL> -- Also derive the "trend" parameter:
14:30:33 SQL> 
14:30:33 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.05
14:30:33 SQL> CREATE TABLE stk14svmspy COMPRESS AS
14:30:33   2  SELECT
14:30:33   3  tkr
14:30:33   4  ,ydate
14:30:33   5  ,tkrdate
14:30:33   6  ,clse
14:30:33   7  ,g1
14:30:33   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
14:30:33   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
14:30:33  10  ,CASE WHEN trend IS NULL THEN 1
14:30:33  11  	    WHEN trend =0      THEN 1
14:30:33  12  	    ELSE trend END trend
14:30:33  13  ,cm3
14:30:33  14  ,cm4
14:30:33  15  ,cm5
14:30:33  16  ,cm6
14:30:33  17  ,cm7
14:30:33  18  ,cm8
14:30:33  19  ,cm9
14:30:33  20  ,ca3
14:30:33  21  ,ca4
14:30:33  22  ,ca5
14:30:33  23  ,ca6
14:30:33  24  ,ca7
14:30:33  25  ,ca8
14:30:33  26  ,ca9
14:30:33  27  ,cx3
14:30:33  28  ,cx4
14:30:33  29  ,cx5
14:30:33  30  ,cx6
14:30:33  31  ,cx7
14:30:33  32  ,cx8
14:30:33  33  ,cx9
14:30:33  34  ,hh
14:30:33  35  ,d
14:30:33  36  ,w
14:30:33  37  ,mpm
14:30:33  38  ,mph
14:30:33  39  FROM stk12svmspy
14:30:33  40  -- Guard against divide by 0:
14:30:33  41  WHERE clse > 0
14:30:33  42  ORDER BY ydate
14:30:33  43  /

Table created.

Elapsed: 00:00:00.42
14:30:33 SQL> 
14:30:33 SQL> -- rpt
14:30:33 SQL> 
14:30:33 SQL> SELECT
14:30:33   2  tkr
14:30:33   3  ,trend
14:30:33   4  ,gatt
14:30:33   5  ,COUNT(tkr)
14:30:33   6  ,AVG(g1)
14:30:33   7  FROM stk14svmspy
14:30:33   8  GROUP BY tkr,trend,gatt
14:30:33   9  ORDER BY tkr,trend,gatt
14:30:33  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
DIA		-1 nup	     4988 -.72497217
DIA		-1 up	     3958  1.1351822
DIA		-1	       87
DIA		 1 nup	    13336  -.3450843
DIA		 1 up	     7017 .813905325
DIA		 1	      294

6 rows selected.

Elapsed: 00:00:00.05
14:30:33 SQL> 
14:30:33 SQL> -- Derive NTILE based params:
14:30:33 SQL> 
14:30:33 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.03
14:30:33 SQL> CREATE TABLE stk16svmspy COMPRESS AS
14:30:33   2  SELECT
14:30:33   3  tkr
14:30:33   4  ,ydate
14:30:33   5  ,tkrdate
14:30:33   6  ,clse
14:30:33   7  ,g1
14:30:33   8  ,gatt
14:30:33   9  ,gattn
14:30:33  10  ,trend
14:30:33  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
14:30:33  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
14:30:33  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
14:30:33  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
14:30:33  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
14:30:33  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
14:30:33  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
14:30:33  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
14:30:33  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
14:30:33  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
14:30:33  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
14:30:33  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
14:30:33  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
14:30:33  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
14:30:33  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
14:30:33  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
14:30:33  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
14:30:33  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
14:30:33  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
14:30:33  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
14:30:33  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
14:30:33  32  ,hh  att21
14:30:33  33  ,d   att22
14:30:33  34  ,w   att23
14:30:33  35  ,mpm att24
14:30:33  36  ,mph att25
14:30:33  37  ,trend att26
14:30:33  38  FROM stk14svmspy
14:30:33  39  ORDER BY ydate
14:30:33  40  /

Table created.

Elapsed: 00:00:03.69
14:30:37 SQL> 
14:30:37 SQL> -- rpt
14:30:37 SQL> 
14:30:37 SQL> SELECT
14:30:37   2  tkr
14:30:37   3  ,trend
14:30:37   4  ,gatt
14:30:37   5  ,COUNT(tkr)
14:30:37   6  ,AVG(g1)
14:30:37   7  FROM stk16svmspy
14:30:37   8  GROUP BY tkr,trend,gatt
14:30:37   9  ORDER BY tkr,trend,gatt
14:30:37  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
DIA		-1 nup	     4988 -.72497217
DIA		-1 up	     3958  1.1351822
DIA		-1	       87
DIA		 1 nup	    13336  -.3450843
DIA		 1 up	     7017 .813905325
DIA		 1	      294

6 rows selected.

Elapsed: 00:00:00.04
14:30:37 SQL> 
14:30:37 SQL> -- Comment out feedback related syntax:
14:30:37 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
14:30:37 SQL> -- SELECT
14:30:37 SQL> -- m.tkr
14:30:37 SQL> -- ,m.ydate
14:30:37 SQL> -- ,m.tkrdate
14:30:37 SQL> -- ,l.score score_long
14:30:37 SQL> -- ,s.score score_short
14:30:37 SQL> -- ,m.g1
14:30:37 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
14:30:37 SQL> -- WHERE l.targ='gatt'
14:30:37 SQL> -- AND	 s.targ='gattn'
14:30:37 SQL> -- AND l.tkrdate = s.tkrdate
14:30:37 SQL> -- AND l.tkrdate = m.tkrdate
14:30:37 SQL> -- -- Speed things up:
14:30:37 SQL> -- AND l.tkr = '&1'
14:30:37 SQL> -- AND s.tkr = '&1'
14:30:37 SQL> -- /
14:30:37 SQL> --
14:30:37 SQL> -- DROP TABLE score_corr_tkr;
14:30:37 SQL> --
14:30:37 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
14:30:37 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
14:30:37 SQL> -- (
14:30:37 SQL> --   SELECT
14:30:37 SQL> --   tkrdate
14:30:37 SQL> --   -- Find corr() tween score and g1 over 8 day period:
14:30:37 SQL> --   ,CORR((score_long - score_short),g1)
14:30:37 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
14:30:37 SQL> --   FROM sc12tkr
14:30:37 SQL> -- )
14:30:37 SQL> -- GROUP BY tkrdate
14:30:37 SQL> -- /
14:30:37 SQL> 
14:30:37 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
14:30:37 SQL> 
14:30:37 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.03
14:30:37 SQL> 
14:30:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
14:30:37 SQL> 
14:30:37 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
14:30:37   2  SELECT
14:30:37   3  tkr
14:30:37   4  ,ydate
14:30:37   5  ,tkrdate
14:30:37   6  ,trend
14:30:37   7  ,g1
14:30:37   8  ,gatt
14:30:37   9  ,gattn
14:30:37  10  -- Goodness attributes:
14:30:37  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
14:30:37  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
14:30:37  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
14:30:37  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
14:30:37  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
14:30:37  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
14:30:37  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
14:30:37  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
14:30:37  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
14:30:37  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
14:30:37  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
14:30:37  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
14:30:37  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
14:30:37  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
14:30:37  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
14:30:37  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
14:30:37  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
14:30:37  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
14:30:37  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
14:30:37  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
14:30:37  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
14:30:37  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
14:30:37  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
14:30:37  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
14:30:37  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
14:30:37  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
14:30:37  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
14:30:37  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
14:30:37  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
14:30:37  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
14:30:37  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
14:30:37  42  FROM stk16svmspy
14:30:37  43  /

Table created.

Elapsed: 00:00:05.02
14:30:42 SQL> 
14:30:42 SQL> -- rpt
14:30:42 SQL> 
14:30:42 SQL> SELECT
14:30:42   2  tkr
14:30:42   3  ,trend
14:30:42   4  ,gatt
14:30:42   5  ,COUNT(tkr)
14:30:42   6  ,AVG(g1)
14:30:42   7  FROM stk_ms_svmspy
14:30:42   8  GROUP BY tkr,trend,gatt
14:30:42   9  ORDER BY tkr,trend,gatt
14:30:42  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
DIA		-1 nup	     4988 -.72497217
DIA		-1 up	     3958  1.1351822
DIA		-1	       87
DIA		 1 nup	    13336  -.3450843
DIA		 1 up	     7017 .813905325
DIA		 1	      294

6 rows selected.

Elapsed: 00:00:00.04
14:30:42 SQL> 
14:30:42 SQL> SELECT
14:30:42   2  tkr
14:30:42   3  ,0+TO_CHAR(ydate,'D')daynum
14:30:42   4  ,COUNT(tkr)
14:30:42   5  ,MIN(ydate),MAX(ydate)
14:30:42   6  FROM stk_ms_svmspy
14:30:42   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
14:30:42   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
14:30:42   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
DIA		 2	 5804 2009-11-02 13:25:00 2011-04-18 19:55:00
DIA		 3	 5964 2009-11-03 13:25:00 2011-04-19 19:55:00
DIA		 4	 5910 2009-10-28 18:10:00 2011-04-20 14:20:00
DIA		 5	 5996 2009-10-29 13:25:00 2011-04-14 19:55:00
DIA		 6	 6006 2009-10-30 13:25:00 2011-04-15 19:55:00

Elapsed: 00:00:00.04
14:30:42 SQL> 
14:30:42 SQL> -- exit
14:30:42 SQL> @stk10svmd.sql '&1'
14:30:42 SQL> --
14:30:42 SQL> -- stk10svmd.sql
14:30:42 SQL> --
14:30:42 SQL> 
14:30:42 SQL> -- Creates views and tables for demonstrating SVM.
14:30:42 SQL> -- I need to run this after I run stk10.sql
14:30:42 SQL> 
14:30:42 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.24
14:30:43 SQL> 
14:30:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
14:30:43 SQL> 
14:30:43 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
14:30:43   2  SELECT
14:30:43   3  tkr
14:30:43   4  ,ydate
14:30:43   5  ,tkr||ydate tkrdate
14:30:43   6  ,clse
14:30:43   7  ,rownum rnum -- acts as t in my time-series
14:30:43   8  -- Derive some attributes from clse.
14:30:43   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
14:30:43  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
14:30:43  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
14:30:43  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
14:30:43  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
14:30:43  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
14:30:43  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
14:30:43  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
14:30:43  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
14:30:43  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
14:30:43  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
14:30:43  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
14:30:43  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
14:30:43  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
14:30:43  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
14:30:43  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
14:30:43  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
14:30:43  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
14:30:43  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
14:30:43  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
14:30:43  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
14:30:43  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
14:30:43  31  -- ystk21 created here: svmd/cr_ystk21.sql
14:30:43  32  FROM ystk21
14:30:43  33  WHERE UPPER(tkr)='&1'
14:30:43  34  AND ydate > '1990-01-01'
14:30:43  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
14:30:43  36  ORDER BY ydate
14:30:43  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='DIA'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='DIA')

Table created.

Elapsed: 00:00:02.65
14:30:45 SQL> 
14:30:45 SQL> -- rpt
14:30:45 SQL> 
14:30:45 SQL> SELECT
14:30:45   2  tkr
14:30:45   3  ,COUNT(tkr)
14:30:45   4  ,MIN(clse),MAX(clse)
14:30:45   5  ,MIN(avg4),MAX(avg4)
14:30:45   6  ,MIN(ydate),MAX(ydate)
14:30:45   7  FROM stk_svmd10svmspy
14:30:45   8  GROUP BY tkr
14:30:45   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
DIA		3158	   58.3     130.11     59.808	 129.384 1998-01-20 20:00:00 2011-04-19 20:00:00

Elapsed: 00:00:00.01
14:30:45 SQL> 
14:30:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:30:45 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:02.77
14:30:48 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
14:30:48   2  SELECT
14:30:48   3  tkr
14:30:48   4  ,ydate
14:30:48   5  ,tkrdate
14:30:48   6  ,clse
14:30:48   7  ,rnum
14:30:48   8  -- g1 is important. I want to predict g1:
14:30:48   9  ,ld - clse g1
14:30:48  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
14:30:48  11  -- I want more attributes from the ones I derived above:
14:30:48  12  -- clse relation to moving-min
14:30:48  13  ,clse-min3  cm3
14:30:48  14  ,clse-min4  cm4
14:30:48  15  ,clse-min5  cm5
14:30:48  16  ,clse-min6  cm6
14:30:48  17  ,clse-min7  cm7
14:30:48  18  ,clse-min8  cm8
14:30:48  19  ,clse-min9  cm9
14:30:48  20  -- clse relation to moving-avg
14:30:48  21  ,clse-avg3  ca3
14:30:48  22  ,clse-avg4  ca4
14:30:48  23  ,clse-avg5  ca5
14:30:48  24  ,clse-avg6  ca6
14:30:48  25  ,clse-avg7  ca7
14:30:48  26  ,clse-avg8  ca8
14:30:48  27  ,clse-avg9  ca9
14:30:48  28  -- clse relation to moving-max
14:30:48  29  ,clse-max3  cx3
14:30:48  30  ,clse-max4  cx4
14:30:48  31  ,clse-max5  cx5
14:30:48  32  ,clse-max6  cx6
14:30:48  33  ,clse-max7  cx7
14:30:48  34  ,clse-max8  cx8
14:30:48  35  ,clse-max9  cx9
14:30:48  36  -- Derive date related attributes:
14:30:48  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:30:48  38  ,0+TO_CHAR(ydate,'D')d
14:30:48  39  ,0+TO_CHAR(ydate,'W')w
14:30:48  40  -- mpm stands for minutes-past-midnight:
14:30:48  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:30:48  42  -- mph stands for minutes-past-hour:
14:30:48  43  ,0+TO_CHAR(ydate,'MI')mph
14:30:48  44  FROM stk_svmd10svmspy
14:30:48  45  ORDER BY ydate
14:30:48  46  /

Table created.

Elapsed: 00:00:00.12
14:30:48 SQL> 
14:30:48 SQL> -- rpt
14:30:48 SQL> 
14:30:48 SQL> SELECT
14:30:48   2  tkr
14:30:48   3  ,COUNT(tkr)
14:30:48   4  ,MIN(clse),MAX(clse)
14:30:48   5  ,MIN(ydate),MAX(ydate)
14:30:48   6  FROM stk_svmd12
14:30:48   7  GROUP BY tkr
14:30:48   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
DIA		3158	   58.3     130.11 1998-01-20 20:00:00 2011-04-19 20:00:00

Elapsed: 00:00:00.01
14:30:48 SQL> 
14:30:48 SQL> -- Prepare for derivation of NTILE based parameters.
14:30:48 SQL> -- Also derive the "trend" parameter:
14:30:48 SQL> 
14:30:48 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
14:30:48 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
14:30:48   2  SELECT
14:30:48   3  tkr
14:30:48   4  ,ydate
14:30:48   5  ,tkrdate
14:30:48   6  ,clse
14:30:48   7  ,g1
14:30:48   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
14:30:48   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
14:30:48  10  ,CASE WHEN trend IS NULL THEN 1
14:30:48  11  	    WHEN trend =0      THEN 1
14:30:48  12  	    ELSE trend END trend
14:30:48  13  ,cm3
14:30:48  14  ,cm4
14:30:48  15  ,cm5
14:30:48  16  ,cm6
14:30:48  17  ,cm7
14:30:48  18  ,cm8
14:30:48  19  ,cm9
14:30:48  20  ,ca3
14:30:48  21  ,ca4
14:30:48  22  ,ca5
14:30:48  23  ,ca6
14:30:48  24  ,ca7
14:30:48  25  ,ca8
14:30:48  26  ,ca9
14:30:48  27  ,cx3
14:30:48  28  ,cx4
14:30:48  29  ,cx5
14:30:48  30  ,cx6
14:30:48  31  ,cx7
14:30:48  32  ,cx8
14:30:48  33  ,cx9
14:30:48  34  ,hh
14:30:48  35  ,d
14:30:48  36  ,w
14:30:48  37  ,mpm
14:30:48  38  ,mph
14:30:48  39  FROM stk_svmd12
14:30:48  40  -- Guard against divide by 0:
14:30:48  41  WHERE clse > 0
14:30:48  42  ORDER BY ydate
14:30:48  43  /

Table created.

Elapsed: 00:00:00.15
14:30:48 SQL> 
14:30:48 SQL> -- rpt
14:30:48 SQL> 
14:30:48 SQL> SELECT
14:30:48   2  tkr
14:30:48   3  ,trend
14:30:48   4  ,gatt
14:30:48   5  ,COUNT(tkr)
14:30:48   6  ,AVG(g1)
14:30:48   7  FROM stk_svmd14
14:30:48   8  GROUP BY tkr,trend,gatt
14:30:48   9  ORDER BY tkr,trend,gatt
14:30:48  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
DIA		  -1 nup	837 -.71320191
DIA		  -1 up 	568 1.11690141
DIA		  -1		  1
DIA		   1 nup       1125 -.47623111
DIA		   1 up 	627 .892966507

Elapsed: 00:00:00.01
14:30:48 SQL> 
14:30:48 SQL> -- Derive NTILE based params:
14:30:48 SQL> 
14:30:48 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.03
14:30:48 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
14:30:48   2  SELECT
14:30:48   3  tkr
14:30:49   4  ,ydate
14:30:49   5  ,tkrdate
14:30:49   6  ,clse
14:30:49   7  ,g1
14:30:49   8  ,gatt
14:30:49   9  ,gattn
14:30:49  10  ,trend
14:30:49  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
14:30:49  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
14:30:49  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
14:30:49  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
14:30:49  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
14:30:49  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
14:30:49  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
14:30:49  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
14:30:49  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
14:30:49  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
14:30:49  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
14:30:49  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
14:30:49  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
14:30:49  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
14:30:49  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
14:30:49  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
14:30:49  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
14:30:49  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
14:30:49  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
14:30:49  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
14:30:49  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
14:30:49  32  ,hh  att21
14:30:49  33  ,d   att22
14:30:49  34  ,w   att23
14:30:49  35  ,mpm att24
14:30:49  36  ,mph att25
14:30:49  37  ,trend att26
14:30:49  38  FROM stk_svmd14
14:30:49  39  ORDER BY ydate
14:30:49  40  /

Table created.

Elapsed: 00:00:00.39
14:30:49 SQL> 
14:30:49 SQL> -- rpt
14:30:49 SQL> 
14:30:49 SQL> SELECT
14:30:49   2  tkr
14:30:49   3  ,trend
14:30:49   4  ,gatt
14:30:49   5  ,COUNT(tkr)
14:30:49   6  ,AVG(g1)
14:30:49   7  FROM stk_svmd16
14:30:49   8  GROUP BY tkr,trend,gatt
14:30:49   9  ORDER BY tkr,trend,gatt
14:30:49  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
DIA		  -1 nup	837 -.71320191
DIA		  -1 up 	568 1.11690141
DIA		  -1		  1
DIA		   1 nup       1125 -.47623111
DIA		   1 up 	627 .892966507

Elapsed: 00:00:00.01
14:30:49 SQL> 
14:30:49 SQL> -- Comment out feedback related syntax:
14:30:49 SQL> 
14:30:49 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
14:30:49 SQL> -- SELECT
14:30:49 SQL> -- m.tkr
14:30:49 SQL> -- ,m.ydate
14:30:49 SQL> -- ,m.tkrdate
14:30:49 SQL> -- ,l.score score_long
14:30:49 SQL> -- ,s.score score_short
14:30:49 SQL> -- ,m.g1
14:30:49 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
14:30:49 SQL> -- WHERE l.targ='gatt'
14:30:49 SQL> -- AND	 s.targ='gattn'
14:30:49 SQL> -- AND l.tkrdate = s.tkrdate
14:30:49 SQL> -- AND l.tkrdate = m.tkrdate
14:30:49 SQL> -- -- Speed things up:
14:30:49 SQL> -- AND l.tkr = '&1'
14:30:49 SQL> -- AND s.tkr = '&1'
14:30:49 SQL> -- /
14:30:49 SQL> --
14:30:49 SQL> -- DROP TABLE score_corr_tkr;
14:30:49 SQL> --
14:30:49 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
14:30:49 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
14:30:49 SQL> -- (
14:30:49 SQL> --   SELECT
14:30:49 SQL> --   tkrdate
14:30:49 SQL> --   -- Find corr() tween score and g1 over 8 day period:
14:30:49 SQL> --   ,CORR((score_long - score_short),g1)
14:30:49 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
14:30:49 SQL> --   FROM sc12tkr
14:30:49 SQL> -- )
14:30:49 SQL> -- GROUP BY tkrdate
14:30:49 SQL> -- /
14:30:49 SQL> 
14:30:49 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
14:30:49 SQL> 
14:30:49 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
14:30:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.23
14:30:49 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
14:30:49   2  SELECT
14:30:49   3  tkr
14:30:49   4  ,ydate
14:30:49   5  ,tkrdate
14:30:49   6  ,trend
14:30:49   7  ,g1
14:30:49   8  ,gatt
14:30:49   9  ,gattn
14:30:49  10  -- Goodness attributes:
14:30:49  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
14:30:49  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
14:30:49  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
14:30:49  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
14:30:49  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
14:30:49  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
14:30:49  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
14:30:49  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
14:30:49  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
14:30:49  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
14:30:49  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
14:30:49  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
14:30:49  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
14:30:49  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
14:30:49  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
14:30:49  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
14:30:49  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
14:30:49  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
14:30:49  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
14:30:49  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
14:30:49  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
14:30:49  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
14:30:49  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
14:30:49  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
14:30:49  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
14:30:49  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
14:30:49  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
14:30:49  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
14:30:49  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
14:30:49  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
14:30:49  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
14:30:49  42  FROM stk_svmd16
14:30:49  43  /

Table created.

Elapsed: 00:00:00.59
14:30:50 SQL> 
14:30:50 SQL> -- rpt
14:30:50 SQL> 
14:30:50 SQL> SELECT
14:30:50   2  tkr
14:30:50   3  ,trend
14:30:50   4  ,gatt
14:30:50   5  ,COUNT(tkr)
14:30:50   6  ,AVG(g1)
14:30:50   7  FROM stk_ms_svmd_svmspy
14:30:50   8  GROUP BY tkr,trend,gatt
14:30:50   9  ORDER BY tkr,trend,gatt
14:30:50  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
DIA		  -1 nup	837 -.71320191
DIA		  -1 up 	568 1.11690141
DIA		  -1		  1
DIA		   1 nup       1125 -.47623111
DIA		   1 up 	627 .892966507

Elapsed: 00:00:00.02
14:30:50 SQL> 
14:30:50 SQL> SELECT
14:30:50   2  tkr
14:30:50   3  ,COUNT(tkr)
14:30:50   4  ,MIN(ydate),MAX(ydate)
14:30:50   5  FROM stk_ms_svmd_svmspy
14:30:50   6  GROUP BY tkr
14:30:50   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
DIA		3158 1998-01-20 20:00:00 2011-04-19 20:00:00

Elapsed: 00:00:00.01
14:30:50 SQL> 
14:30:50 SQL> -- exit
14:30:50 SQL> 
14:30:50 SQL> 
14:30:50 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.03
14:30:50 SQL> 
14:30:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
14:30:50 SQL> 
14:30:50 SQL> CREATE TABLE stk_ms_u COMPRESS AS
14:30:50   2  SELECT * FROM stk_ms_svmspy
14:30:50   3  UNION
14:30:50   4  SELECT * FROM stk_ms_svmd_svmspy
14:30:50   5  /

Table created.

Elapsed: 00:00:00.54
14:30:50 SQL> 
14:30:50 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
