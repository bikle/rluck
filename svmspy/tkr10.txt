
SQL*Plus: Release 11.2.0.1.0 Production on Sun Feb 27 07:20:14 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:20:14 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:20:14 SQL> 
07:20:14 SQL> 07:20:14 SQL> --
07:20:14 SQL> -- stk10u.sql
07:20:14 SQL> --
07:20:14 SQL> 
07:20:14 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
07:20:14 SQL> 
07:20:14 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
07:20:14 SQL> @stk10.sql     '&1'
07:20:14 SQL> --
07:20:14 SQL> -- stk10.sql
07:20:14 SQL> --
07:20:14 SQL> 
07:20:14 SQL> -- Creates views and tables for demonstrating SVM.
07:20:14 SQL> 
07:20:14 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:01.05
07:20:15 SQL> 
07:20:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
07:20:16 SQL> 
07:20:16 SQL> CREATE TABLE stk10svmspy COMPRESS AS
07:20:16   2  SELECT
07:20:16   3  tkr
07:20:16   4  ,ydate
07:20:16   5  ,tkr||ydate tkrdate
07:20:16   6  ,clse
07:20:16   7  ,clse2
07:20:16   8  ,rownum rnum -- acts as t in my time-series
07:20:16   9  -- g1 is important. I want to predict g1:
07:20:16  10  ,gain1day g1
07:20:16  11  -- Derive some attributes from clse.
07:20:16  12  -- Each row spans 5 minutes.
07:20:16  13  -- The number of rows in 1 day is 24*60/5.
07:20:16  14  -- I want the aggregations to span from 3 days to 9 days:
07:20:16  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
07:20:16  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
07:20:16  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
07:20:16  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
07:20:16  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
07:20:16  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
07:20:16  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
07:20:16  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
07:20:16  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
07:20:16  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
07:20:16  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
07:20:16  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
07:20:16  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
07:20:16  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
07:20:16  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
07:20:16  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
07:20:16  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
07:20:16  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
07:20:16  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
07:20:16  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
07:20:16  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
07:20:16  36  FROM di5min_stk_c2
07:20:16  37  WHERE UPPER(tkr)='&1'
07:20:16  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
07:20:16  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
07:20:16  40  ORDER BY ydate
07:20:16  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='SWC'

Table created.

Elapsed: 00:00:01.95
07:20:18 SQL> 
07:20:18 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
07:20:18 SQL> 
07:20:18 SQL> -- rpt
07:20:18 SQL> 
07:20:18 SQL> SELECT
07:20:18   2  tkr
07:20:18   3  ,COUNT(tkr)ccount
07:20:18   4  ,MIN(clse)mnclse,MAX(clse)mxclse
07:20:18   5  -- ,MIN(avg4),MAX(avg4)
07:20:18   6  ,MIN(ydate),MAX(ydate)
07:20:18   7  ,MIN(g1)
07:20:18   8  ,MAX(g1)
07:20:18   9  FROM stk10svmspy
07:20:18  10  GROUP BY tkr
07:20:18  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
SWC	      1872	20.51	    25.1 2011-01-19 14:30:00 2011-02-25 20:55:00      -1.89	  1.99

Elapsed: 00:00:00.01
07:20:18 SQL> 
07:20:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:20:18 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:04.96
07:20:23 SQL> CREATE TABLE stk12svmspy COMPRESS AS
07:20:23   2  SELECT
07:20:23   3  tkr
07:20:23   4  ,ydate
07:20:23   5  ,tkrdate
07:20:23   6  ,clse
07:20:23   7  ,rnum
07:20:23   8  ,g1
07:20:23   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
07:20:23  10  -- I want more attributes from the ones I derived above:
07:20:23  11  -- clse relation to moving-min
07:20:23  12  ,clse-min3  cm3
07:20:23  13  ,clse-min4  cm4
07:20:23  14  ,clse-min5  cm5
07:20:23  15  ,clse-min6  cm6
07:20:23  16  ,clse-min7  cm7
07:20:23  17  ,clse-min8  cm8
07:20:23  18  ,clse-min9  cm9
07:20:23  19  -- clse relation to moving-avg
07:20:23  20  ,clse-avg3  ca3
07:20:23  21  ,clse-avg4  ca4
07:20:23  22  ,clse-avg5  ca5
07:20:23  23  ,clse-avg6  ca6
07:20:23  24  ,clse-avg7  ca7
07:20:23  25  ,clse-avg8  ca8
07:20:23  26  ,clse-avg9  ca9
07:20:23  27  -- clse relation to moving-max
07:20:23  28  ,clse-max3  cx3
07:20:23  29  ,clse-max4  cx4
07:20:23  30  ,clse-max5  cx5
07:20:23  31  ,clse-max6  cx6
07:20:23  32  ,clse-max7  cx7
07:20:23  33  ,clse-max8  cx8
07:20:23  34  ,clse-max9  cx9
07:20:23  35  -- Derive date related attributes:
07:20:23  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:23  37  ,0+TO_CHAR(ydate,'D')d
07:20:23  38  ,0+TO_CHAR(ydate,'W')w
07:20:23  39  -- mpm stands for minutes-past-midnight:
07:20:23  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:23  41  -- mph stands for minutes-past-hour:
07:20:23  42  ,0+TO_CHAR(ydate,'MI')mph
07:20:23  43  FROM stk10svmspy
07:20:23  44  ORDER BY ydate
07:20:23  45  /

Table created.

Elapsed: 00:00:00.17
07:20:23 SQL> 
07:20:23 SQL> -- rpt
07:20:23 SQL> 
07:20:23 SQL> SELECT
07:20:23   2  tkr
07:20:23   3  ,COUNT(tkr)ccount
07:20:23   4  ,MIN(clse)mnclse,MAX(clse)mxclse
07:20:23   5  -- ,MIN(avg4),MAX(avg4)
07:20:23   6  ,MIN(ydate),MAX(ydate)
07:20:23   7  ,MIN(g1)
07:20:23   8  ,AVG(g1)
07:20:23   9  ,MAX(g1)
07:20:23  10  FROM stk12svmspy
07:20:23  11  GROUP BY tkr
07:20:23  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
SWC	      1872	20.51	    25.1 2011-01-19 14:30:00 2011-02-25 20:55:00      -1.89 .075115995	     1.99

Elapsed: 00:00:00.01
07:20:23 SQL> 
07:20:23 SQL> -- Prepare for derivation of NTILE based parameters.
07:20:23 SQL> -- Also derive the "trend" parameter:
07:20:23 SQL> 
07:20:23 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
07:20:23 SQL> CREATE TABLE stk14svmspy COMPRESS AS
07:20:23   2  SELECT
07:20:23   3  tkr
07:20:23   4  ,ydate
07:20:23   5  ,tkrdate
07:20:23   6  ,clse
07:20:23   7  ,g1
07:20:23   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
07:20:23   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
07:20:23  10  ,CASE WHEN trend IS NULL THEN 1
07:20:23  11  	    WHEN trend =0      THEN 1
07:20:23  12  	    ELSE trend END trend
07:20:23  13  ,cm3
07:20:23  14  ,cm4
07:20:23  15  ,cm5
07:20:23  16  ,cm6
07:20:23  17  ,cm7
07:20:23  18  ,cm8
07:20:23  19  ,cm9
07:20:23  20  ,ca3
07:20:23  21  ,ca4
07:20:23  22  ,ca5
07:20:23  23  ,ca6
07:20:23  24  ,ca7
07:20:23  25  ,ca8
07:20:23  26  ,ca9
07:20:23  27  ,cx3
07:20:23  28  ,cx4
07:20:23  29  ,cx5
07:20:23  30  ,cx6
07:20:23  31  ,cx7
07:20:23  32  ,cx8
07:20:23  33  ,cx9
07:20:23  34  ,hh
07:20:23  35  ,d
07:20:23  36  ,w
07:20:23  37  ,mpm
07:20:23  38  ,mph
07:20:23  39  FROM stk12svmspy
07:20:23  40  -- Guard against divide by 0:
07:20:23  41  WHERE clse > 0
07:20:23  42  ORDER BY ydate
07:20:23  43  /

Table created.

Elapsed: 00:00:00.10
07:20:23 SQL> 
07:20:23 SQL> -- rpt
07:20:23 SQL> 
07:20:23 SQL> SELECT
07:20:23   2  tkr
07:20:23   3  ,trend
07:20:23   4  ,gatt
07:20:23   5  ,COUNT(tkr)
07:20:23   6  ,AVG(g1)
07:20:23   7  FROM stk14svmspy
07:20:23   8  GROUP BY tkr,trend,gatt
07:20:23   9  ORDER BY tkr,trend,gatt
07:20:23  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
SWC		-1 nup	      213 -.63906103
SWC		-1 up	      301 .659036545
SWC		 1 nup	      596 -.44317629
SWC		 1 up	      528 .615384605
SWC		 1	      234

Elapsed: 00:00:00.00
07:20:23 SQL> 
07:20:23 SQL> -- Derive NTILE based params:
07:20:23 SQL> 
07:20:23 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.21
07:20:23 SQL> CREATE TABLE stk16svmspy COMPRESS AS
07:20:23   2  SELECT
07:20:23   3  tkr
07:20:23   4  ,ydate
07:20:23   5  ,tkrdate
07:20:23   6  ,clse
07:20:23   7  ,g1
07:20:23   8  ,gatt
07:20:23   9  ,gattn
07:20:23  10  ,trend
07:20:23  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
07:20:23  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
07:20:23  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
07:20:23  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
07:20:23  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
07:20:23  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
07:20:23  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
07:20:23  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
07:20:23  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
07:20:23  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
07:20:23  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
07:20:23  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
07:20:23  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
07:20:23  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
07:20:23  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
07:20:23  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
07:20:23  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
07:20:23  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
07:20:23  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
07:20:23  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
07:20:23  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
07:20:23  32  ,hh  att21
07:20:23  33  ,d   att22
07:20:23  34  ,w   att23
07:20:23  35  ,mpm att24
07:20:23  36  ,mph att25
07:20:23  37  ,trend att26
07:20:23  38  FROM stk14svmspy
07:20:23  39  ORDER BY ydate
07:20:23  40  /

Table created.

Elapsed: 00:00:00.27
07:20:24 SQL> 
07:20:24 SQL> -- rpt
07:20:24 SQL> 
07:20:24 SQL> SELECT
07:20:24   2  tkr
07:20:24   3  ,trend
07:20:24   4  ,gatt
07:20:24   5  ,COUNT(tkr)
07:20:24   6  ,AVG(g1)
07:20:24   7  FROM stk16svmspy
07:20:24   8  GROUP BY tkr,trend,gatt
07:20:24   9  ORDER BY tkr,trend,gatt
07:20:24  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
SWC		-1 nup	      213 -.63906103
SWC		-1 up	      301 .659036545
SWC		 1 nup	      596 -.44317629
SWC		 1 up	      528 .615384605
SWC		 1	      234

Elapsed: 00:00:00.01
07:20:24 SQL> 
07:20:24 SQL> -- Comment out feedback related syntax:
07:20:24 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
07:20:24 SQL> -- SELECT
07:20:24 SQL> -- m.tkr
07:20:24 SQL> -- ,m.ydate
07:20:24 SQL> -- ,m.tkrdate
07:20:24 SQL> -- ,l.score score_long
07:20:24 SQL> -- ,s.score score_short
07:20:24 SQL> -- ,m.g1
07:20:24 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
07:20:24 SQL> -- WHERE l.targ='gatt'
07:20:24 SQL> -- AND	 s.targ='gattn'
07:20:24 SQL> -- AND l.tkrdate = s.tkrdate
07:20:24 SQL> -- AND l.tkrdate = m.tkrdate
07:20:24 SQL> -- -- Speed things up:
07:20:24 SQL> -- AND l.tkr = '&1'
07:20:24 SQL> -- AND s.tkr = '&1'
07:20:24 SQL> -- /
07:20:24 SQL> --
07:20:24 SQL> -- DROP TABLE score_corr_tkr;
07:20:24 SQL> --
07:20:24 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
07:20:24 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
07:20:24 SQL> -- (
07:20:24 SQL> --   SELECT
07:20:24 SQL> --   tkrdate
07:20:24 SQL> --   -- Find corr() tween score and g1 over 8 day period:
07:20:24 SQL> --   ,CORR((score_long - score_short),g1)
07:20:24 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
07:20:24 SQL> --   FROM sc12tkr
07:20:24 SQL> -- )
07:20:24 SQL> -- GROUP BY tkrdate
07:20:24 SQL> -- /
07:20:24 SQL> 
07:20:24 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
07:20:24 SQL> 
07:20:24 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.06
07:20:24 SQL> 
07:20:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
07:20:24 SQL> 
07:20:24 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
07:20:24   2  SELECT
07:20:24   3  tkr
07:20:24   4  ,ydate
07:20:24   5  ,tkrdate
07:20:24   6  ,trend
07:20:24   7  ,g1
07:20:24   8  ,gatt
07:20:24   9  ,gattn
07:20:24  10  -- Goodness attributes:
07:20:24  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
07:20:24  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
07:20:24  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
07:20:24  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
07:20:24  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
07:20:24  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
07:20:24  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
07:20:24  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
07:20:24  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
07:20:24  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
07:20:24  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
07:20:24  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
07:20:24  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
07:20:24  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
07:20:24  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
07:20:24  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
07:20:24  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
07:20:24  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
07:20:24  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
07:20:24  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
07:20:24  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
07:20:24  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
07:20:24  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
07:20:24  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
07:20:24  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
07:20:24  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
07:20:24  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
07:20:24  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
07:20:24  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
07:20:24  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
07:20:24  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
07:20:24  42  FROM stk16svmspy
07:20:24  43  /

Table created.

Elapsed: 00:00:00.48
07:20:24 SQL> 
07:20:24 SQL> -- rpt
07:20:24 SQL> 
07:20:24 SQL> SELECT
07:20:24   2  tkr
07:20:24   3  ,trend
07:20:24   4  ,gatt
07:20:24   5  ,COUNT(tkr)
07:20:24   6  ,AVG(g1)
07:20:24   7  FROM stk_ms_svmspy
07:20:24   8  GROUP BY tkr,trend,gatt
07:20:24   9  ORDER BY tkr,trend,gatt
07:20:24  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
SWC		-1 nup	      213 -.63906103
SWC		-1 up	      301 .659036545
SWC		 1 nup	      596 -.44317629
SWC		 1 up	      528 .615384605
SWC		 1	      234

Elapsed: 00:00:00.01
07:20:24 SQL> 
07:20:24 SQL> SELECT
07:20:24   2  tkr
07:20:24   3  ,0+TO_CHAR(ydate,'D')daynum
07:20:24   4  ,COUNT(tkr)
07:20:24   5  ,MIN(ydate),MAX(ydate)
07:20:24   6  FROM stk_ms_svmspy
07:20:24   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
07:20:24   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
07:20:24   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
SWC		 2	  234 2011-01-24 14:30:00 2011-02-07 20:55:00
SWC		 3	  312 2011-01-25 14:30:00 2011-02-22 20:55:00
SWC		 4	  390 2011-01-19 14:30:00 2011-02-23 20:55:00
SWC		 5	  468 2011-01-20 14:30:00 2011-02-24 20:55:00
SWC		 6	  468 2011-01-21 14:30:00 2011-02-25 20:55:00

Elapsed: 00:00:00.01
07:20:24 SQL> 
07:20:24 SQL> -- exit
07:20:24 SQL> @stk10svmd.sql '&1'
07:20:24 SQL> --
07:20:24 SQL> -- stk10svmd.sql
07:20:24 SQL> --
07:20:24 SQL> 
07:20:24 SQL> -- Creates views and tables for demonstrating SVM.
07:20:24 SQL> -- I need to run this after I run stk10.sql
07:20:24 SQL> 
07:20:24 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.14
07:20:25 SQL> 
07:20:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
07:20:25 SQL> 
07:20:25 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
07:20:25   2  SELECT
07:20:25   3  tkr
07:20:25   4  ,ydate
07:20:25   5  ,tkr||ydate tkrdate
07:20:25   6  ,clse
07:20:25   7  ,rownum rnum -- acts as t in my time-series
07:20:25   8  -- Derive some attributes from clse.
07:20:25   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
07:20:25  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
07:20:25  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
07:20:25  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
07:20:25  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
07:20:25  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
07:20:25  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
07:20:25  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
07:20:25  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
07:20:25  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
07:20:25  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
07:20:25  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
07:20:25  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
07:20:25  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
07:20:25  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
07:20:25  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
07:20:25  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
07:20:25  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
07:20:25  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
07:20:25  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
07:20:25  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
07:20:25  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
07:20:25  31  -- ystk21 created here: svmd/cr_ystk21.sql
07:20:25  32  FROM ystk21
07:20:25  33  WHERE UPPER(tkr)='&1'
07:20:25  34  AND ydate > '1990-01-01'
07:20:25  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
07:20:25  36  ORDER BY ydate
07:20:25  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='SWC'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='SWC')

Table created.

Elapsed: 00:00:02.66
07:20:27 SQL> 
07:20:27 SQL> -- rpt
07:20:27 SQL> 
07:20:27 SQL> SELECT
07:20:27   2  tkr
07:20:27   3  ,COUNT(tkr)
07:20:27   4  ,MIN(clse),MAX(clse)
07:20:27   5  ,MIN(avg4),MAX(avg4)
07:20:27   6  ,MIN(ydate),MAX(ydate)
07:20:27   7  FROM stk_svmd10svmspy
07:20:27   8  GROUP BY tkr
07:20:27   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
SWC		4070	   1.76 	47	2.116	  44.976 1994-12-19 21:00:00 2011-02-25 21:00:00

Elapsed: 00:00:00.02
07:20:27 SQL> 
07:20:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:20:27 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:02.23
07:20:30 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
07:20:30   2  SELECT
07:20:30   3  tkr
07:20:30   4  ,ydate
07:20:30   5  ,tkrdate
07:20:30   6  ,clse
07:20:30   7  ,rnum
07:20:30   8  -- g1 is important. I want to predict g1:
07:20:30   9  ,ld - clse g1
07:20:30  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
07:20:30  11  -- I want more attributes from the ones I derived above:
07:20:30  12  -- clse relation to moving-min
07:20:30  13  ,clse-min3  cm3
07:20:30  14  ,clse-min4  cm4
07:20:30  15  ,clse-min5  cm5
07:20:30  16  ,clse-min6  cm6
07:20:30  17  ,clse-min7  cm7
07:20:30  18  ,clse-min8  cm8
07:20:30  19  ,clse-min9  cm9
07:20:30  20  -- clse relation to moving-avg
07:20:30  21  ,clse-avg3  ca3
07:20:30  22  ,clse-avg4  ca4
07:20:30  23  ,clse-avg5  ca5
07:20:30  24  ,clse-avg6  ca6
07:20:30  25  ,clse-avg7  ca7
07:20:30  26  ,clse-avg8  ca8
07:20:30  27  ,clse-avg9  ca9
07:20:30  28  -- clse relation to moving-max
07:20:30  29  ,clse-max3  cx3
07:20:30  30  ,clse-max4  cx4
07:20:30  31  ,clse-max5  cx5
07:20:30  32  ,clse-max6  cx6
07:20:30  33  ,clse-max7  cx7
07:20:30  34  ,clse-max8  cx8
07:20:30  35  ,clse-max9  cx9
07:20:30  36  -- Derive date related attributes:
07:20:30  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:30  38  ,0+TO_CHAR(ydate,'D')d
07:20:30  39  ,0+TO_CHAR(ydate,'W')w
07:20:30  40  -- mpm stands for minutes-past-midnight:
07:20:30  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:30  42  -- mph stands for minutes-past-hour:
07:20:30  43  ,0+TO_CHAR(ydate,'MI')mph
07:20:30  44  FROM stk_svmd10svmspy
07:20:30  45  ORDER BY ydate
07:20:30  46  /

Table created.

Elapsed: 00:00:00.18
07:20:30 SQL> 
07:20:30 SQL> -- rpt
07:20:30 SQL> 
07:20:30 SQL> SELECT
07:20:30   2  tkr
07:20:30   3  ,COUNT(tkr)
07:20:30   4  ,MIN(clse),MAX(clse)
07:20:30   5  ,MIN(ydate),MAX(ydate)
07:20:30   6  FROM stk_svmd12
07:20:30   7  GROUP BY tkr
07:20:30   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
SWC		4070	   1.76 	47 1994-12-19 21:00:00 2011-02-25 21:00:00

Elapsed: 00:00:00.02
07:20:30 SQL> 
07:20:30 SQL> -- Prepare for derivation of NTILE based parameters.
07:20:30 SQL> -- Also derive the "trend" parameter:
07:20:30 SQL> 
07:20:30 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.06
07:20:30 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
07:20:30   2  SELECT
07:20:30   3  tkr
07:20:30   4  ,ydate
07:20:30   5  ,tkrdate
07:20:30   6  ,clse
07:20:30   7  ,g1
07:20:30   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
07:20:30   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
07:20:30  10  ,CASE WHEN trend IS NULL THEN 1
07:20:30  11  	    WHEN trend =0      THEN 1
07:20:30  12  	    ELSE trend END trend
07:20:30  13  ,cm3
07:20:30  14  ,cm4
07:20:30  15  ,cm5
07:20:30  16  ,cm6
07:20:30  17  ,cm7
07:20:30  18  ,cm8
07:20:30  19  ,cm9
07:20:30  20  ,ca3
07:20:30  21  ,ca4
07:20:30  22  ,ca5
07:20:30  23  ,ca6
07:20:30  24  ,ca7
07:20:30  25  ,ca8
07:20:30  26  ,ca9
07:20:30  27  ,cx3
07:20:30  28  ,cx4
07:20:30  29  ,cx5
07:20:30  30  ,cx6
07:20:30  31  ,cx7
07:20:30  32  ,cx8
07:20:30  33  ,cx9
07:20:30  34  ,hh
07:20:30  35  ,d
07:20:30  36  ,w
07:20:30  37  ,mpm
07:20:30  38  ,mph
07:20:30  39  FROM stk_svmd12
07:20:30  40  -- Guard against divide by 0:
07:20:30  41  WHERE clse > 0
07:20:30  42  ORDER BY ydate
07:20:30  43  /

Table created.

Elapsed: 00:00:00.10
07:20:30 SQL> 
07:20:30 SQL> -- rpt
07:20:30 SQL> 
07:20:30 SQL> SELECT
07:20:30   2  tkr
07:20:30   3  ,trend
07:20:30   4  ,gatt
07:20:30   5  ,COUNT(tkr)
07:20:30   6  ,AVG(g1)
07:20:30   7  FROM stk_svmd14
07:20:30   8  GROUP BY tkr,trend,gatt
07:20:30   9  ORDER BY tkr,trend,gatt
07:20:30  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
SWC		  -1 nup	992 -.37070565
SWC		  -1 up 	910 .448153846
SWC		  -1		  1
SWC		   1 nup       1194 -.37078727
SWC		   1 up 	973 .429044193

Elapsed: 00:00:00.02
07:20:30 SQL> 
07:20:30 SQL> -- Derive NTILE based params:
07:20:30 SQL> 
07:20:30 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.09
07:20:30 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
07:20:30   2  SELECT
07:20:30   3  tkr
07:20:30   4  ,ydate
07:20:30   5  ,tkrdate
07:20:30   6  ,clse
07:20:30   7  ,g1
07:20:30   8  ,gatt
07:20:30   9  ,gattn
07:20:30  10  ,trend
07:20:30  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
07:20:30  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
07:20:30  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
07:20:30  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
07:20:30  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
07:20:30  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
07:20:30  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
07:20:30  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
07:20:30  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
07:20:30  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
07:20:30  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
07:20:30  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
07:20:30  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
07:20:30  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
07:20:30  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
07:20:30  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
07:20:30  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
07:20:30  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
07:20:30  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
07:20:30  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
07:20:30  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
07:20:30  32  ,hh  att21
07:20:30  33  ,d   att22
07:20:30  34  ,w   att23
07:20:30  35  ,mpm att24
07:20:30  36  ,mph att25
07:20:30  37  ,trend att26
07:20:30  38  FROM stk_svmd14
07:20:30  39  ORDER BY ydate
07:20:30  40  /

Table created.

Elapsed: 00:00:00.47
07:20:31 SQL> 
07:20:31 SQL> -- rpt
07:20:31 SQL> 
07:20:31 SQL> SELECT
07:20:31   2  tkr
07:20:31   3  ,trend
07:20:31   4  ,gatt
07:20:31   5  ,COUNT(tkr)
07:20:31   6  ,AVG(g1)
07:20:31   7  FROM stk_svmd16
07:20:31   8  GROUP BY tkr,trend,gatt
07:20:31   9  ORDER BY tkr,trend,gatt
07:20:31  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
SWC		  -1 nup	992 -.37070565
SWC		  -1 up 	910 .448153846
SWC		  -1		  1
SWC		   1 nup       1194 -.37078727
SWC		   1 up 	973 .429044193

Elapsed: 00:00:00.01
07:20:31 SQL> 
07:20:31 SQL> -- Comment out feedback related syntax:
07:20:31 SQL> 
07:20:31 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
07:20:31 SQL> -- SELECT
07:20:31 SQL> -- m.tkr
07:20:31 SQL> -- ,m.ydate
07:20:31 SQL> -- ,m.tkrdate
07:20:31 SQL> -- ,l.score score_long
07:20:31 SQL> -- ,s.score score_short
07:20:31 SQL> -- ,m.g1
07:20:31 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
07:20:31 SQL> -- WHERE l.targ='gatt'
07:20:31 SQL> -- AND	 s.targ='gattn'
07:20:31 SQL> -- AND l.tkrdate = s.tkrdate
07:20:31 SQL> -- AND l.tkrdate = m.tkrdate
07:20:31 SQL> -- -- Speed things up:
07:20:31 SQL> -- AND l.tkr = '&1'
07:20:31 SQL> -- AND s.tkr = '&1'
07:20:31 SQL> -- /
07:20:31 SQL> --
07:20:31 SQL> -- DROP TABLE score_corr_tkr;
07:20:31 SQL> --
07:20:31 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
07:20:31 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
07:20:31 SQL> -- (
07:20:31 SQL> --   SELECT
07:20:31 SQL> --   tkrdate
07:20:31 SQL> --   -- Find corr() tween score and g1 over 8 day period:
07:20:31 SQL> --   ,CORR((score_long - score_short),g1)
07:20:31 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
07:20:31 SQL> --   FROM sc12tkr
07:20:31 SQL> -- )
07:20:31 SQL> -- GROUP BY tkrdate
07:20:31 SQL> -- /
07:20:31 SQL> 
07:20:31 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
07:20:31 SQL> 
07:20:31 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.09
07:20:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.25
07:20:31 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
07:20:31   2  SELECT
07:20:31   3  tkr
07:20:31   4  ,ydate
07:20:31   5  ,tkrdate
07:20:31   6  ,trend
07:20:31   7  ,g1
07:20:31   8  ,gatt
07:20:31   9  ,gattn
07:20:31  10  -- Goodness attributes:
07:20:31  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
07:20:31  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
07:20:31  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
07:20:31  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
07:20:31  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
07:20:31  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
07:20:31  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
07:20:31  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
07:20:31  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
07:20:31  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
07:20:31  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
07:20:31  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
07:20:31  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
07:20:31  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
07:20:31  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
07:20:31  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
07:20:31  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
07:20:31  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
07:20:31  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
07:20:31  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
07:20:31  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
07:20:31  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
07:20:31  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
07:20:31  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
07:20:31  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
07:20:31  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
07:20:31  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
07:20:31  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
07:20:31  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
07:20:31  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
07:20:31  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
07:20:31  42  FROM stk_svmd16
07:20:31  43  /

Table created.

Elapsed: 00:00:00.80
07:20:32 SQL> 
07:20:32 SQL> -- rpt
07:20:32 SQL> 
07:20:32 SQL> SELECT
07:20:32   2  tkr
07:20:32   3  ,trend
07:20:32   4  ,gatt
07:20:32   5  ,COUNT(tkr)
07:20:32   6  ,AVG(g1)
07:20:32   7  FROM stk_ms_svmd_svmspy
07:20:32   8  GROUP BY tkr,trend,gatt
07:20:32   9  ORDER BY tkr,trend,gatt
07:20:32  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
SWC		  -1 nup	992 -.37070565
SWC		  -1 up 	910 .448153846
SWC		  -1		  1
SWC		   1 nup       1194 -.37078727
SWC		   1 up 	973 .429044193

Elapsed: 00:00:00.02
07:20:32 SQL> 
07:20:32 SQL> SELECT
07:20:32   2  tkr
07:20:32   3  ,COUNT(tkr)
07:20:32   4  ,MIN(ydate),MAX(ydate)
07:20:32   5  FROM stk_ms_svmd_svmspy
07:20:32   6  GROUP BY tkr
07:20:32   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
SWC		4070 1994-12-19 21:00:00 2011-02-25 21:00:00

Elapsed: 00:00:00.01
07:20:32 SQL> 
07:20:32 SQL> -- exit
07:20:32 SQL> 
07:20:32 SQL> 
07:20:32 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.06
07:20:32 SQL> 
07:20:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
07:20:32 SQL> 
07:20:32 SQL> CREATE TABLE stk_ms_u COMPRESS AS
07:20:32   2  SELECT * FROM stk_ms_svmspy
07:20:32   3  UNION
07:20:32   4  SELECT * FROM stk_ms_svmd_svmspy
07:20:32   5  /

Table created.

Elapsed: 00:00:00.16
07:20:32 SQL> 
07:20:32 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
