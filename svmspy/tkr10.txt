
SQL*Plus: Release 11.2.0.1.0 Production on Tue Apr 19 06:44:54 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:44:54 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:44:54 SQL> 
06:44:54 SQL> 06:44:54 SQL> --
06:44:54 SQL> -- stk10u.sql
06:44:54 SQL> --
06:44:54 SQL> 
06:44:54 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
06:44:54 SQL> 
06:44:54 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
06:44:54 SQL> @stk10.sql     '&1'
06:44:54 SQL> --
06:44:54 SQL> -- stk10.sql
06:44:54 SQL> --
06:44:54 SQL> 
06:44:54 SQL> -- Creates views and tables for demonstrating SVM.
06:44:54 SQL> 
06:44:54 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.11
06:44:54 SQL> 
06:44:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
06:44:54 SQL> 
06:44:54 SQL> CREATE TABLE stk10svmspy COMPRESS AS
06:44:54   2  SELECT
06:44:54   3  tkr
06:44:54   4  ,ydate
06:44:54   5  ,tkr||ydate tkrdate
06:44:54   6  ,clse
06:44:54   7  ,clse2
06:44:54   8  ,rownum rnum -- acts as t in my time-series
06:44:54   9  -- g1 is important. I want to predict g1:
06:44:54  10  ,gain1day g1
06:44:54  11  -- Derive some attributes from clse.
06:44:54  12  -- Each row spans 5 minutes.
06:44:54  13  -- The number of rows in 1 day is 24*60/5.
06:44:54  14  -- I want the aggregations to span from 3 days to 9 days:
06:44:54  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
06:44:54  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
06:44:54  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
06:44:54  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
06:44:54  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
06:44:54  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
06:44:54  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
06:44:54  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
06:44:54  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
06:44:54  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
06:44:54  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
06:44:54  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
06:44:54  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
06:44:54  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
06:44:54  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
06:44:54  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
06:44:54  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
06:44:54  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
06:44:54  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
06:44:54  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
06:44:54  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
06:44:54  36  FROM di5min_stk_c2
06:44:54  37  WHERE UPPER(tkr)='&1'
06:44:54  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
06:44:54  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
06:44:54  40  ORDER BY ydate
06:44:54  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='EWZ'

Table created.

Elapsed: 00:00:00.75
06:44:55 SQL> 
06:44:55 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
06:44:55 SQL> 
06:44:55 SQL> -- rpt
06:44:55 SQL> 
06:44:55 SQL> SELECT
06:44:55   2  tkr
06:44:55   3  ,COUNT(tkr)ccount
06:44:55   4  ,MIN(clse)mnclse,MAX(clse)mxclse
06:44:55   5  -- ,MIN(avg4),MAX(avg4)
06:44:55   6  ,MIN(ydate),MAX(ydate)
06:44:55   7  ,MIN(g1)
06:44:55   8  ,MAX(g1)
06:44:55   9  FROM stk10svmspy
06:44:55  10  GROUP BY tkr
06:44:55  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
EWZ	      5694	70.16	   80.07 2011-01-04 14:30:00 2011-04-18 19:55:00      -2.83	  2.02

Elapsed: 00:00:00.01
06:44:55 SQL> 
06:44:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:44:55 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.19
06:44:56 SQL> CREATE TABLE stk12svmspy COMPRESS AS
06:44:56   2  SELECT
06:44:56   3  tkr
06:44:56   4  ,ydate
06:44:56   5  ,tkrdate
06:44:56   6  ,clse
06:44:56   7  ,rnum
06:44:56   8  ,g1
06:44:56   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:44:56  10  -- I want more attributes from the ones I derived above:
06:44:56  11  -- clse relation to moving-min
06:44:56  12  ,clse-min3  cm3
06:44:56  13  ,clse-min4  cm4
06:44:56  14  ,clse-min5  cm5
06:44:56  15  ,clse-min6  cm6
06:44:56  16  ,clse-min7  cm7
06:44:56  17  ,clse-min8  cm8
06:44:56  18  ,clse-min9  cm9
06:44:56  19  -- clse relation to moving-avg
06:44:56  20  ,clse-avg3  ca3
06:44:56  21  ,clse-avg4  ca4
06:44:56  22  ,clse-avg5  ca5
06:44:56  23  ,clse-avg6  ca6
06:44:56  24  ,clse-avg7  ca7
06:44:56  25  ,clse-avg8  ca8
06:44:56  26  ,clse-avg9  ca9
06:44:56  27  -- clse relation to moving-max
06:44:56  28  ,clse-max3  cx3
06:44:56  29  ,clse-max4  cx4
06:44:56  30  ,clse-max5  cx5
06:44:56  31  ,clse-max6  cx6
06:44:56  32  ,clse-max7  cx7
06:44:56  33  ,clse-max8  cx8
06:44:56  34  ,clse-max9  cx9
06:44:56  35  -- Derive date related attributes:
06:44:56  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:44:56  37  ,0+TO_CHAR(ydate,'D')d
06:44:56  38  ,0+TO_CHAR(ydate,'W')w
06:44:56  39  -- mpm stands for minutes-past-midnight:
06:44:56  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:44:56  41  -- mph stands for minutes-past-hour:
06:44:56  42  ,0+TO_CHAR(ydate,'MI')mph
06:44:56  43  FROM stk10svmspy
06:44:56  44  ORDER BY ydate
06:44:56  45  /

Table created.

Elapsed: 00:00:00.18
06:44:56 SQL> 
06:44:56 SQL> -- rpt
06:44:56 SQL> 
06:44:56 SQL> SELECT
06:44:56   2  tkr
06:44:56   3  ,COUNT(tkr)ccount
06:44:56   4  ,MIN(clse)mnclse,MAX(clse)mxclse
06:44:56   5  -- ,MIN(avg4),MAX(avg4)
06:44:56   6  ,MIN(ydate),MAX(ydate)
06:44:56   7  ,MIN(g1)
06:44:56   8  ,AVG(g1)
06:44:56   9  ,MAX(g1)
06:44:56  10  FROM stk12svmspy
06:44:56  11  GROUP BY tkr
06:44:56  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
EWZ	      5694	70.16	   80.07 2011-01-04 14:30:00 2011-04-18 19:55:00      -2.83 -.00938499	     2.02

Elapsed: 00:00:00.02
06:44:56 SQL> 
06:44:56 SQL> -- Prepare for derivation of NTILE based parameters.
06:44:56 SQL> -- Also derive the "trend" parameter:
06:44:56 SQL> 
06:44:56 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.05
06:44:56 SQL> CREATE TABLE stk14svmspy COMPRESS AS
06:44:56   2  SELECT
06:44:56   3  tkr
06:44:56   4  ,ydate
06:44:56   5  ,tkrdate
06:44:56   6  ,clse
06:44:56   7  ,g1
06:44:56   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
06:44:56   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
06:44:56  10  ,CASE WHEN trend IS NULL THEN 1
06:44:56  11  	    WHEN trend =0      THEN 1
06:44:56  12  	    ELSE trend END trend
06:44:56  13  ,cm3
06:44:56  14  ,cm4
06:44:56  15  ,cm5
06:44:56  16  ,cm6
06:44:56  17  ,cm7
06:44:56  18  ,cm8
06:44:56  19  ,cm9
06:44:56  20  ,ca3
06:44:56  21  ,ca4
06:44:56  22  ,ca5
06:44:56  23  ,ca6
06:44:56  24  ,ca7
06:44:56  25  ,ca8
06:44:56  26  ,ca9
06:44:56  27  ,cx3
06:44:56  28  ,cx4
06:44:56  29  ,cx5
06:44:56  30  ,cx6
06:44:56  31  ,cx7
06:44:56  32  ,cx8
06:44:56  33  ,cx9
06:44:56  34  ,hh
06:44:56  35  ,d
06:44:56  36  ,w
06:44:56  37  ,mpm
06:44:56  38  ,mph
06:44:56  39  FROM stk12svmspy
06:44:56  40  -- Guard against divide by 0:
06:44:56  41  WHERE clse > 0
06:44:56  42  ORDER BY ydate
06:44:56  43  /

Table created.

Elapsed: 00:00:00.12
06:44:56 SQL> 
06:44:56 SQL> -- rpt
06:44:56 SQL> 
06:44:56 SQL> SELECT
06:44:56   2  tkr
06:44:56   3  ,trend
06:44:56   4  ,gatt
06:44:56   5  ,COUNT(tkr)
06:44:56   6  ,AVG(g1)
06:44:56   7  FROM stk14svmspy
06:44:56   8  GROUP BY tkr,trend,gatt
06:44:56   9  ORDER BY tkr,trend,gatt
06:44:56  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
EWZ		-1 nup	     1399  -.6745091
EWZ		-1 up	     1341 .839853631
EWZ		-1	       65
EWZ		 1 nup	     1601 -.65839786
EWZ		 1 up	     1107 .741066006
EWZ		 1	      181

6 rows selected.

Elapsed: 00:00:00.02
06:44:56 SQL> 
06:44:56 SQL> -- Derive NTILE based params:
06:44:56 SQL> 
06:44:56 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.43
06:44:56 SQL> CREATE TABLE stk16svmspy COMPRESS AS
06:44:56   2  SELECT
06:44:56   3  tkr
06:44:56   4  ,ydate
06:44:56   5  ,tkrdate
06:44:56   6  ,clse
06:44:56   7  ,g1
06:44:56   8  ,gatt
06:44:56   9  ,gattn
06:44:56  10  ,trend
06:44:56  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
06:44:56  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
06:44:56  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
06:44:56  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
06:44:56  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
06:44:56  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
06:44:56  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
06:44:56  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
06:44:56  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
06:44:56  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
06:44:56  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
06:44:56  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
06:44:56  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
06:44:56  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
06:44:56  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
06:44:56  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
06:44:56  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
06:44:56  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
06:44:56  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
06:44:56  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
06:44:56  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
06:44:56  32  ,hh  att21
06:44:56  33  ,d   att22
06:44:56  34  ,w   att23
06:44:56  35  ,mpm att24
06:44:56  36  ,mph att25
06:44:56  37  ,trend att26
06:44:56  38  FROM stk14svmspy
06:44:56  39  ORDER BY ydate
06:44:56  40  /

Table created.

Elapsed: 00:00:00.74
06:44:57 SQL> 
06:44:57 SQL> -- rpt
06:44:57 SQL> 
06:44:57 SQL> SELECT
06:44:57   2  tkr
06:44:57   3  ,trend
06:44:57   4  ,gatt
06:44:57   5  ,COUNT(tkr)
06:44:57   6  ,AVG(g1)
06:44:57   7  FROM stk16svmspy
06:44:57   8  GROUP BY tkr,trend,gatt
06:44:57   9  ORDER BY tkr,trend,gatt
06:44:57  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
EWZ		-1 nup	     1399  -.6745091
EWZ		-1 up	     1341 .839853631
EWZ		-1	       65
EWZ		 1 nup	     1601 -.65839786
EWZ		 1 up	     1107 .741066006
EWZ		 1	      181

6 rows selected.

Elapsed: 00:00:00.01
06:44:57 SQL> 
06:44:57 SQL> -- Comment out feedback related syntax:
06:44:57 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
06:44:57 SQL> -- SELECT
06:44:57 SQL> -- m.tkr
06:44:57 SQL> -- ,m.ydate
06:44:57 SQL> -- ,m.tkrdate
06:44:57 SQL> -- ,l.score score_long
06:44:57 SQL> -- ,s.score score_short
06:44:57 SQL> -- ,m.g1
06:44:57 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
06:44:57 SQL> -- WHERE l.targ='gatt'
06:44:57 SQL> -- AND	 s.targ='gattn'
06:44:57 SQL> -- AND l.tkrdate = s.tkrdate
06:44:57 SQL> -- AND l.tkrdate = m.tkrdate
06:44:57 SQL> -- -- Speed things up:
06:44:57 SQL> -- AND l.tkr = '&1'
06:44:57 SQL> -- AND s.tkr = '&1'
06:44:57 SQL> -- /
06:44:57 SQL> --
06:44:57 SQL> -- DROP TABLE score_corr_tkr;
06:44:57 SQL> --
06:44:57 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
06:44:57 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
06:44:57 SQL> -- (
06:44:57 SQL> --   SELECT
06:44:57 SQL> --   tkrdate
06:44:57 SQL> --   -- Find corr() tween score and g1 over 8 day period:
06:44:57 SQL> --   ,CORR((score_long - score_short),g1)
06:44:57 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
06:44:57 SQL> --   FROM sc12tkr
06:44:57 SQL> -- )
06:44:57 SQL> -- GROUP BY tkrdate
06:44:57 SQL> -- /
06:44:57 SQL> 
06:44:57 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
06:44:57 SQL> 
06:44:57 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
06:44:57 SQL> 
06:44:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.27
06:44:57 SQL> 
06:44:57 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
06:44:57   2  SELECT
06:44:57   3  tkr
06:44:57   4  ,ydate
06:44:57   5  ,tkrdate
06:44:57   6  ,trend
06:44:57   7  ,g1
06:44:57   8  ,gatt
06:44:57   9  ,gattn
06:44:57  10  -- Goodness attributes:
06:44:57  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
06:44:57  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
06:44:57  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
06:44:57  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
06:44:57  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
06:44:57  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
06:44:57  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
06:44:57  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
06:44:57  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
06:44:57  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
06:44:57  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
06:44:57  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
06:44:57  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
06:44:57  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
06:44:57  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
06:44:57  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
06:44:57  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
06:44:57  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
06:44:57  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
06:44:57  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
06:44:57  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
06:44:57  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
06:44:57  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
06:44:57  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
06:44:57  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
06:44:57  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
06:44:57  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
06:44:57  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:44:57  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
06:44:57  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
06:44:57  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
06:44:57  42  FROM stk16svmspy
06:44:57  43  /

Table created.

Elapsed: 00:00:01.14
06:44:59 SQL> 
06:44:59 SQL> -- rpt
06:44:59 SQL> 
06:44:59 SQL> SELECT
06:44:59   2  tkr
06:44:59   3  ,trend
06:44:59   4  ,gatt
06:44:59   5  ,COUNT(tkr)
06:44:59   6  ,AVG(g1)
06:44:59   7  FROM stk_ms_svmspy
06:44:59   8  GROUP BY tkr,trend,gatt
06:44:59   9  ORDER BY tkr,trend,gatt
06:44:59  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
EWZ		-1 nup	     1399  -.6745091
EWZ		-1 up	     1341 .839853631
EWZ		-1	       65
EWZ		 1 nup	     1601 -.65839786
EWZ		 1 up	     1107 .741066006
EWZ		 1	      181

6 rows selected.

Elapsed: 00:00:00.01
06:44:59 SQL> 
06:44:59 SQL> SELECT
06:44:59   2  tkr
06:44:59   3  ,0+TO_CHAR(ydate,'D')daynum
06:44:59   4  ,COUNT(tkr)
06:44:59   5  ,MIN(ydate),MAX(ydate)
06:44:59   6  FROM stk_ms_svmspy
06:44:59   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
06:44:59   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
06:44:59   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
EWZ		 2	 1014 2011-01-10 14:30:00 2011-04-18 19:55:00
EWZ		 3	 1170 2011-01-04 14:30:00 2011-04-12 19:55:00
EWZ		 4	 1170 2011-01-05 14:30:00 2011-04-13 19:55:00
EWZ		 5	 1170 2011-01-06 14:30:00 2011-04-14 19:55:00
EWZ		 6	 1170 2011-01-07 14:30:00 2011-04-15 19:55:00

Elapsed: 00:00:00.01
06:44:59 SQL> 
06:44:59 SQL> -- exit
06:44:59 SQL> @stk10svmd.sql '&1'
06:44:59 SQL> --
06:44:59 SQL> -- stk10svmd.sql
06:44:59 SQL> --
06:44:59 SQL> 
06:44:59 SQL> -- Creates views and tables for demonstrating SVM.
06:44:59 SQL> -- I need to run this after I run stk10.sql
06:44:59 SQL> 
06:44:59 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.50
06:44:59 SQL> 
06:44:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
06:44:59 SQL> 
06:44:59 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
06:44:59   2  SELECT
06:44:59   3  tkr
06:44:59   4  ,ydate
06:44:59   5  ,tkr||ydate tkrdate
06:44:59   6  ,clse
06:44:59   7  ,rownum rnum -- acts as t in my time-series
06:44:59   8  -- Derive some attributes from clse.
06:44:59   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
06:44:59  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
06:44:59  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
06:44:59  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
06:44:59  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
06:44:59  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
06:44:59  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
06:44:59  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
06:44:59  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
06:44:59  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
06:44:59  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
06:44:59  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
06:44:59  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
06:44:59  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
06:44:59  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
06:44:59  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
06:44:59  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
06:44:59  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
06:44:59  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
06:44:59  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
06:44:59  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
06:44:59  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
06:44:59  31  -- ystk21 created here: svmd/cr_ystk21.sql
06:44:59  32  FROM ystk21
06:44:59  33  WHERE UPPER(tkr)='&1'
06:44:59  34  AND ydate > '1990-01-01'
06:44:59  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
06:44:59  36  ORDER BY ydate
06:44:59  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='EWZ'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='EWZ')

Table created.

Elapsed: 00:00:00.52
06:45:00 SQL> 
06:45:00 SQL> -- rpt
06:45:00 SQL> 
06:45:00 SQL> SELECT
06:45:00   2  tkr
06:45:00   3  ,COUNT(tkr)
06:45:00   4  ,MIN(clse),MAX(clse)
06:45:00   5  ,MIN(avg4),MAX(avg4)
06:45:00   6  ,MIN(ydate),MAX(ydate)
06:45:00   7  FROM stk_svmd10svmspy
06:45:00   8  GROUP BY tkr
06:45:00   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
EWZ		2659	   4.35      88.83	4.616	  87.754 2000-07-14 20:00:00 2011-04-15 20:00:00

Elapsed: 00:00:00.02
06:45:00 SQL> 
06:45:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:45:00 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.99
06:45:01 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
06:45:01   2  SELECT
06:45:01   3  tkr
06:45:01   4  ,ydate
06:45:01   5  ,tkrdate
06:45:01   6  ,clse
06:45:01   7  ,rnum
06:45:01   8  -- g1 is important. I want to predict g1:
06:45:01   9  ,ld - clse g1
06:45:01  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
06:45:01  11  -- I want more attributes from the ones I derived above:
06:45:01  12  -- clse relation to moving-min
06:45:01  13  ,clse-min3  cm3
06:45:01  14  ,clse-min4  cm4
06:45:01  15  ,clse-min5  cm5
06:45:01  16  ,clse-min6  cm6
06:45:01  17  ,clse-min7  cm7
06:45:01  18  ,clse-min8  cm8
06:45:01  19  ,clse-min9  cm9
06:45:01  20  -- clse relation to moving-avg
06:45:01  21  ,clse-avg3  ca3
06:45:01  22  ,clse-avg4  ca4
06:45:01  23  ,clse-avg5  ca5
06:45:01  24  ,clse-avg6  ca6
06:45:01  25  ,clse-avg7  ca7
06:45:01  26  ,clse-avg8  ca8
06:45:01  27  ,clse-avg9  ca9
06:45:01  28  -- clse relation to moving-max
06:45:01  29  ,clse-max3  cx3
06:45:01  30  ,clse-max4  cx4
06:45:01  31  ,clse-max5  cx5
06:45:01  32  ,clse-max6  cx6
06:45:01  33  ,clse-max7  cx7
06:45:01  34  ,clse-max8  cx8
06:45:01  35  ,clse-max9  cx9
06:45:01  36  -- Derive date related attributes:
06:45:01  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:45:01  38  ,0+TO_CHAR(ydate,'D')d
06:45:01  39  ,0+TO_CHAR(ydate,'W')w
06:45:01  40  -- mpm stands for minutes-past-midnight:
06:45:01  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:45:01  42  -- mph stands for minutes-past-hour:
06:45:01  43  ,0+TO_CHAR(ydate,'MI')mph
06:45:01  44  FROM stk_svmd10svmspy
06:45:01  45  ORDER BY ydate
06:45:01  46  /

Table created.

Elapsed: 00:00:00.10
06:45:01 SQL> 
06:45:01 SQL> -- rpt
06:45:01 SQL> 
06:45:01 SQL> SELECT
06:45:01   2  tkr
06:45:01   3  ,COUNT(tkr)
06:45:01   4  ,MIN(clse),MAX(clse)
06:45:01   5  ,MIN(ydate),MAX(ydate)
06:45:01   6  FROM stk_svmd12
06:45:01   7  GROUP BY tkr
06:45:01   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
EWZ		2659	   4.35      88.83 2000-07-14 20:00:00 2011-04-15 20:00:00

Elapsed: 00:00:00.01
06:45:01 SQL> 
06:45:01 SQL> -- Prepare for derivation of NTILE based parameters.
06:45:01 SQL> -- Also derive the "trend" parameter:
06:45:01 SQL> 
06:45:01 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.03
06:45:01 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
06:45:01   2  SELECT
06:45:01   3  tkr
06:45:01   4  ,ydate
06:45:01   5  ,tkrdate
06:45:01   6  ,clse
06:45:01   7  ,g1
06:45:01   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
06:45:01   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
06:45:01  10  ,CASE WHEN trend IS NULL THEN 1
06:45:01  11  	    WHEN trend =0      THEN 1
06:45:01  12  	    ELSE trend END trend
06:45:01  13  ,cm3
06:45:01  14  ,cm4
06:45:01  15  ,cm5
06:45:01  16  ,cm6
06:45:01  17  ,cm7
06:45:01  18  ,cm8
06:45:01  19  ,cm9
06:45:01  20  ,ca3
06:45:01  21  ,ca4
06:45:01  22  ,ca5
06:45:01  23  ,ca6
06:45:01  24  ,ca7
06:45:01  25  ,ca8
06:45:01  26  ,ca9
06:45:01  27  ,cx3
06:45:01  28  ,cx4
06:45:01  29  ,cx5
06:45:01  30  ,cx6
06:45:01  31  ,cx7
06:45:01  32  ,cx8
06:45:01  33  ,cx9
06:45:01  34  ,hh
06:45:01  35  ,d
06:45:01  36  ,w
06:45:01  37  ,mpm
06:45:01  38  ,mph
06:45:01  39  FROM stk_svmd12
06:45:01  40  -- Guard against divide by 0:
06:45:01  41  WHERE clse > 0
06:45:01  42  ORDER BY ydate
06:45:01  43  /

Table created.

Elapsed: 00:00:00.12
06:45:01 SQL> 
06:45:01 SQL> -- rpt
06:45:01 SQL> 
06:45:01 SQL> SELECT
06:45:01   2  tkr
06:45:01   3  ,trend
06:45:01   4  ,gatt
06:45:01   5  ,COUNT(tkr)
06:45:01   6  ,AVG(g1)
06:45:01   7  FROM stk_svmd14
06:45:01   8  GROUP BY tkr,trend,gatt
06:45:01   9  ORDER BY tkr,trend,gatt
06:45:01  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
EWZ		  -1 nup	586  -.6637372
EWZ		  -1 up 	556 .787104317
EWZ		  -1		  1
EWZ		   1 nup	823 -.47696233
EWZ		   1 up 	693 .586883117

Elapsed: 00:00:00.01
06:45:01 SQL> 
06:45:01 SQL> -- Derive NTILE based params:
06:45:01 SQL> 
06:45:01 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.03
06:45:01 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
06:45:01   2  SELECT
06:45:01   3  tkr
06:45:01   4  ,ydate
06:45:01   5  ,tkrdate
06:45:01   6  ,clse
06:45:01   7  ,g1
06:45:01   8  ,gatt
06:45:01   9  ,gattn
06:45:01  10  ,trend
06:45:01  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
06:45:01  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
06:45:01  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
06:45:01  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
06:45:01  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
06:45:01  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
06:45:01  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
06:45:01  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
06:45:01  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
06:45:01  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
06:45:01  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
06:45:01  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
06:45:01  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
06:45:01  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
06:45:01  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
06:45:01  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
06:45:01  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
06:45:01  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
06:45:01  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
06:45:01  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
06:45:01  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
06:45:01  32  ,hh  att21
06:45:01  33  ,d   att22
06:45:01  34  ,w   att23
06:45:01  35  ,mpm att24
06:45:01  36  ,mph att25
06:45:01  37  ,trend att26
06:45:01  38  FROM stk_svmd14
06:45:01  39  ORDER BY ydate
06:45:01  40  /

Table created.

Elapsed: 00:00:00.43
06:45:01 SQL> 
06:45:01 SQL> -- rpt
06:45:01 SQL> 
06:45:01 SQL> SELECT
06:45:01   2  tkr
06:45:01   3  ,trend
06:45:01   4  ,gatt
06:45:01   5  ,COUNT(tkr)
06:45:01   6  ,AVG(g1)
06:45:01   7  FROM stk_svmd16
06:45:01   8  GROUP BY tkr,trend,gatt
06:45:01   9  ORDER BY tkr,trend,gatt
06:45:01  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
EWZ		  -1 nup	586  -.6637372
EWZ		  -1 up 	556 .787104317
EWZ		  -1		  1
EWZ		   1 nup	823 -.47696233
EWZ		   1 up 	693 .586883117

Elapsed: 00:00:00.00
06:45:01 SQL> 
06:45:01 SQL> -- Comment out feedback related syntax:
06:45:01 SQL> 
06:45:01 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
06:45:01 SQL> -- SELECT
06:45:01 SQL> -- m.tkr
06:45:01 SQL> -- ,m.ydate
06:45:01 SQL> -- ,m.tkrdate
06:45:01 SQL> -- ,l.score score_long
06:45:01 SQL> -- ,s.score score_short
06:45:01 SQL> -- ,m.g1
06:45:01 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
06:45:01 SQL> -- WHERE l.targ='gatt'
06:45:01 SQL> -- AND	 s.targ='gattn'
06:45:01 SQL> -- AND l.tkrdate = s.tkrdate
06:45:01 SQL> -- AND l.tkrdate = m.tkrdate
06:45:01 SQL> -- -- Speed things up:
06:45:01 SQL> -- AND l.tkr = '&1'
06:45:01 SQL> -- AND s.tkr = '&1'
06:45:01 SQL> -- /
06:45:01 SQL> --
06:45:01 SQL> -- DROP TABLE score_corr_tkr;
06:45:01 SQL> --
06:45:01 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
06:45:01 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
06:45:01 SQL> -- (
06:45:01 SQL> --   SELECT
06:45:01 SQL> --   tkrdate
06:45:01 SQL> --   -- Find corr() tween score and g1 over 8 day period:
06:45:01 SQL> --   ,CORR((score_long - score_short),g1)
06:45:01 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
06:45:01 SQL> --   FROM sc12tkr
06:45:01 SQL> -- )
06:45:01 SQL> -- GROUP BY tkrdate
06:45:01 SQL> -- /
06:45:01 SQL> 
06:45:01 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
06:45:01 SQL> 
06:45:01 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
06:45:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
06:45:02 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
06:45:02   2  SELECT
06:45:02   3  tkr
06:45:02   4  ,ydate
06:45:02   5  ,tkrdate
06:45:02   6  ,trend
06:45:02   7  ,g1
06:45:02   8  ,gatt
06:45:02   9  ,gattn
06:45:02  10  -- Goodness attributes:
06:45:02  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
06:45:02  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
06:45:02  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
06:45:02  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
06:45:02  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
06:45:02  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
06:45:02  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
06:45:02  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
06:45:02  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
06:45:02  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
06:45:02  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
06:45:02  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
06:45:02  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
06:45:02  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
06:45:02  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
06:45:02  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
06:45:02  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
06:45:02  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
06:45:02  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
06:45:02  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
06:45:02  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
06:45:02  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
06:45:02  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
06:45:02  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
06:45:02  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
06:45:02  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
06:45:02  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
06:45:02  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
06:45:02  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
06:45:02  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
06:45:02  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
06:45:02  42  FROM stk_svmd16
06:45:02  43  /

Table created.

Elapsed: 00:00:00.50
06:45:02 SQL> 
06:45:02 SQL> -- rpt
06:45:02 SQL> 
06:45:02 SQL> SELECT
06:45:02   2  tkr
06:45:02   3  ,trend
06:45:02   4  ,gatt
06:45:02   5  ,COUNT(tkr)
06:45:02   6  ,AVG(g1)
06:45:02   7  FROM stk_ms_svmd_svmspy
06:45:02   8  GROUP BY tkr,trend,gatt
06:45:02   9  ORDER BY tkr,trend,gatt
06:45:02  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
EWZ		  -1 nup	586  -.6637372
EWZ		  -1 up 	556 .787104317
EWZ		  -1		  1
EWZ		   1 nup	823 -.47696233
EWZ		   1 up 	693 .586883117

Elapsed: 00:00:00.01
06:45:02 SQL> 
06:45:02 SQL> SELECT
06:45:02   2  tkr
06:45:02   3  ,COUNT(tkr)
06:45:02   4  ,MIN(ydate),MAX(ydate)
06:45:02   5  FROM stk_ms_svmd_svmspy
06:45:02   6  GROUP BY tkr
06:45:02   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
EWZ		2659 2000-07-14 20:00:00 2011-04-15 20:00:00

Elapsed: 00:00:00.00
06:45:02 SQL> 
06:45:02 SQL> -- exit
06:45:02 SQL> 
06:45:02 SQL> 
06:45:02 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.05
06:45:02 SQL> 
06:45:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
06:45:03 SQL> 
06:45:03 SQL> CREATE TABLE stk_ms_u COMPRESS AS
06:45:03   2  SELECT * FROM stk_ms_svmspy
06:45:03   3  UNION
06:45:03   4  SELECT * FROM stk_ms_svmd_svmspy
06:45:03   5  /

Table created.

Elapsed: 00:00:00.20
06:45:03 SQL> 
06:45:03 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
