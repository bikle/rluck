
SQL*Plus: Release 11.2.0.1.0 Production on Wed Mar 16 21:05:25 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:05:25 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:05:25 SQL> 
21:05:25 SQL> 21:05:25 SQL> --
21:05:25 SQL> -- stk10u.sql
21:05:25 SQL> --
21:05:25 SQL> 
21:05:25 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
21:05:25 SQL> 
21:05:25 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
21:05:25 SQL> @stk10.sql     '&1'
21:05:25 SQL> --
21:05:25 SQL> -- stk10.sql
21:05:25 SQL> --
21:05:25 SQL> 
21:05:25 SQL> -- Creates views and tables for demonstrating SVM.
21:05:25 SQL> 
21:05:25 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.17
21:05:25 SQL> 
21:05:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.12
21:05:25 SQL> 
21:05:25 SQL> CREATE TABLE stk10svmspy COMPRESS AS
21:05:25   2  SELECT
21:05:25   3  tkr
21:05:25   4  ,ydate
21:05:25   5  ,tkr||ydate tkrdate
21:05:25   6  ,clse
21:05:25   7  ,clse2
21:05:25   8  ,rownum rnum -- acts as t in my time-series
21:05:25   9  -- g1 is important. I want to predict g1:
21:05:25  10  ,gain1day g1
21:05:25  11  -- Derive some attributes from clse.
21:05:25  12  -- Each row spans 5 minutes.
21:05:25  13  -- The number of rows in 1 day is 24*60/5.
21:05:25  14  -- I want the aggregations to span from 3 days to 9 days:
21:05:25  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
21:05:25  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
21:05:25  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
21:05:25  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
21:05:25  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
21:05:25  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
21:05:25  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
21:05:25  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
21:05:25  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
21:05:25  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
21:05:25  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
21:05:25  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
21:05:25  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
21:05:25  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
21:05:25  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
21:05:25  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
21:05:25  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
21:05:25  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
21:05:25  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
21:05:25  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
21:05:25  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
21:05:25  36  FROM di5min_stk_c2
21:05:25  37  WHERE UPPER(tkr)='&1'
21:05:25  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
21:05:25  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
21:05:25  40  ORDER BY ydate
21:05:25  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='AAPL'

Table created.

Elapsed: 00:00:00.49
21:05:26 SQL> 
21:05:26 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:05:26 SQL> 
21:05:26 SQL> -- rpt
21:05:26 SQL> 
21:05:26 SQL> SELECT
21:05:26   2  tkr
21:05:26   3  ,COUNT(tkr)ccount
21:05:26   4  ,MIN(clse)mnclse,MAX(clse)mxclse
21:05:26   5  -- ,MIN(avg4),MAX(avg4)
21:05:26   6  ,MIN(ydate),MAX(ydate)
21:05:26   7  ,MIN(g1)
21:05:26   8  ,MAX(g1)
21:05:26   9  FROM stk10svmspy
21:05:26  10  GROUP BY tkr
21:05:26  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
AAPL	      3822    200.725	  364.83 2011-01-04 14:30:00 2011-03-15 19:55:00     -14.83 145.278438

Elapsed: 00:00:00.01
21:05:26 SQL> 
21:05:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:05:26 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.18
21:05:26 SQL> CREATE TABLE stk12svmspy COMPRESS AS
21:05:26   2  SELECT
21:05:26   3  tkr
21:05:26   4  ,ydate
21:05:26   5  ,tkrdate
21:05:26   6  ,clse
21:05:26   7  ,rnum
21:05:26   8  ,g1
21:05:26   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
21:05:26  10  -- I want more attributes from the ones I derived above:
21:05:26  11  -- clse relation to moving-min
21:05:26  12  ,clse-min3  cm3
21:05:26  13  ,clse-min4  cm4
21:05:26  14  ,clse-min5  cm5
21:05:26  15  ,clse-min6  cm6
21:05:26  16  ,clse-min7  cm7
21:05:26  17  ,clse-min8  cm8
21:05:26  18  ,clse-min9  cm9
21:05:26  19  -- clse relation to moving-avg
21:05:26  20  ,clse-avg3  ca3
21:05:26  21  ,clse-avg4  ca4
21:05:26  22  ,clse-avg5  ca5
21:05:26  23  ,clse-avg6  ca6
21:05:26  24  ,clse-avg7  ca7
21:05:26  25  ,clse-avg8  ca8
21:05:26  26  ,clse-avg9  ca9
21:05:26  27  -- clse relation to moving-max
21:05:26  28  ,clse-max3  cx3
21:05:26  29  ,clse-max4  cx4
21:05:26  30  ,clse-max5  cx5
21:05:26  31  ,clse-max6  cx6
21:05:26  32  ,clse-max7  cx7
21:05:26  33  ,clse-max8  cx8
21:05:26  34  ,clse-max9  cx9
21:05:26  35  -- Derive date related attributes:
21:05:26  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:05:26  37  ,0+TO_CHAR(ydate,'D')d
21:05:26  38  ,0+TO_CHAR(ydate,'W')w
21:05:26  39  -- mpm stands for minutes-past-midnight:
21:05:26  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:05:26  41  -- mph stands for minutes-past-hour:
21:05:26  42  ,0+TO_CHAR(ydate,'MI')mph
21:05:26  43  FROM stk10svmspy
21:05:26  44  ORDER BY ydate
21:05:26  45  /

Table created.

Elapsed: 00:00:00.12
21:05:26 SQL> 
21:05:26 SQL> -- rpt
21:05:26 SQL> 
21:05:26 SQL> SELECT
21:05:26   2  tkr
21:05:26   3  ,COUNT(tkr)ccount
21:05:26   4  ,MIN(clse)mnclse,MAX(clse)mxclse
21:05:26   5  -- ,MIN(avg4),MAX(avg4)
21:05:26   6  ,MIN(ydate),MAX(ydate)
21:05:26   7  ,MIN(g1)
21:05:26   8  ,AVG(g1)
21:05:26   9  ,MAX(g1)
21:05:26  10  FROM stk12svmspy
21:05:26  11  GROUP BY tkr
21:05:26  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
AAPL	      3822    200.725	  364.83 2011-01-04 14:30:00 2011-03-15 19:55:00     -14.83  3.7798434 145.278438

Elapsed: 00:00:00.02
21:05:26 SQL> 
21:05:26 SQL> -- Prepare for derivation of NTILE based parameters.
21:05:26 SQL> -- Also derive the "trend" parameter:
21:05:26 SQL> 
21:05:26 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.16
21:05:27 SQL> CREATE TABLE stk14svmspy COMPRESS AS
21:05:27   2  SELECT
21:05:27   3  tkr
21:05:27   4  ,ydate
21:05:27   5  ,tkrdate
21:05:27   6  ,clse
21:05:27   7  ,g1
21:05:27   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
21:05:27   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
21:05:27  10  ,CASE WHEN trend IS NULL THEN 1
21:05:27  11  	    WHEN trend =0      THEN 1
21:05:27  12  	    ELSE trend END trend
21:05:27  13  ,cm3
21:05:27  14  ,cm4
21:05:27  15  ,cm5
21:05:27  16  ,cm6
21:05:27  17  ,cm7
21:05:27  18  ,cm8
21:05:27  19  ,cm9
21:05:27  20  ,ca3
21:05:27  21  ,ca4
21:05:27  22  ,ca5
21:05:27  23  ,ca6
21:05:27  24  ,ca7
21:05:27  25  ,ca8
21:05:27  26  ,ca9
21:05:27  27  ,cx3
21:05:27  28  ,cx4
21:05:27  29  ,cx5
21:05:27  30  ,cx6
21:05:27  31  ,cx7
21:05:27  32  ,cx8
21:05:27  33  ,cx9
21:05:27  34  ,hh
21:05:27  35  ,d
21:05:27  36  ,w
21:05:27  37  ,mpm
21:05:27  38  ,mph
21:05:27  39  FROM stk12svmspy
21:05:27  40  -- Guard against divide by 0:
21:05:27  41  WHERE clse > 0
21:05:27  42  ORDER BY ydate
21:05:27  43  /

Table created.

Elapsed: 00:00:00.11
21:05:27 SQL> 
21:05:27 SQL> -- rpt
21:05:27 SQL> 
21:05:27 SQL> SELECT
21:05:27   2  tkr
21:05:27   3  ,trend
21:05:27   4  ,gatt
21:05:27   5  ,COUNT(tkr)
21:05:27   6  ,AVG(g1)
21:05:27   7  FROM stk14svmspy
21:05:27   8  GROUP BY tkr,trend,gatt
21:05:27   9  ORDER BY tkr,trend,gatt
21:05:27  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AAPL		-1 nup	      471 -2.6411098
AAPL		-1 up	      800 17.9656501
AAPL		-1	       12
AAPL		 1 nup	     1256 -2.8249286
AAPL		 1 up	     1049 3.75240505
AAPL		 1	      234

6 rows selected.

Elapsed: 00:00:00.02
21:05:27 SQL> 
21:05:27 SQL> -- Derive NTILE based params:
21:05:27 SQL> 
21:05:27 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.15
21:05:27 SQL> CREATE TABLE stk16svmspy COMPRESS AS
21:05:27   2  SELECT
21:05:27   3  tkr
21:05:27   4  ,ydate
21:05:27   5  ,tkrdate
21:05:27   6  ,clse
21:05:27   7  ,g1
21:05:27   8  ,gatt
21:05:27   9  ,gattn
21:05:27  10  ,trend
21:05:27  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
21:05:27  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
21:05:27  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
21:05:27  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
21:05:27  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
21:05:27  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
21:05:27  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
21:05:27  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
21:05:27  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
21:05:27  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
21:05:27  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
21:05:27  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
21:05:27  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
21:05:27  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
21:05:27  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
21:05:27  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
21:05:27  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
21:05:27  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
21:05:27  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
21:05:27  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
21:05:27  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
21:05:27  32  ,hh  att21
21:05:27  33  ,d   att22
21:05:27  34  ,w   att23
21:05:27  35  ,mpm att24
21:05:27  36  ,mph att25
21:05:27  37  ,trend att26
21:05:27  38  FROM stk14svmspy
21:05:27  39  ORDER BY ydate
21:05:27  40  /

Table created.

Elapsed: 00:00:00.46
21:05:27 SQL> 
21:05:27 SQL> -- rpt
21:05:27 SQL> 
21:05:27 SQL> SELECT
21:05:27   2  tkr
21:05:27   3  ,trend
21:05:27   4  ,gatt
21:05:27   5  ,COUNT(tkr)
21:05:27   6  ,AVG(g1)
21:05:27   7  FROM stk16svmspy
21:05:27   8  GROUP BY tkr,trend,gatt
21:05:27   9  ORDER BY tkr,trend,gatt
21:05:27  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AAPL		-1 nup	      471 -2.6411098
AAPL		-1 up	      800 17.9656501
AAPL		-1	       12
AAPL		 1 nup	     1256 -2.8249286
AAPL		 1 up	     1049 3.75240505
AAPL		 1	      234

6 rows selected.

Elapsed: 00:00:00.01
21:05:27 SQL> 
21:05:27 SQL> -- Comment out feedback related syntax:
21:05:27 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
21:05:27 SQL> -- SELECT
21:05:27 SQL> -- m.tkr
21:05:27 SQL> -- ,m.ydate
21:05:27 SQL> -- ,m.tkrdate
21:05:27 SQL> -- ,l.score score_long
21:05:27 SQL> -- ,s.score score_short
21:05:27 SQL> -- ,m.g1
21:05:27 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
21:05:27 SQL> -- WHERE l.targ='gatt'
21:05:27 SQL> -- AND	 s.targ='gattn'
21:05:27 SQL> -- AND l.tkrdate = s.tkrdate
21:05:27 SQL> -- AND l.tkrdate = m.tkrdate
21:05:27 SQL> -- -- Speed things up:
21:05:27 SQL> -- AND l.tkr = '&1'
21:05:27 SQL> -- AND s.tkr = '&1'
21:05:27 SQL> -- /
21:05:27 SQL> --
21:05:27 SQL> -- DROP TABLE score_corr_tkr;
21:05:27 SQL> --
21:05:27 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
21:05:27 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
21:05:27 SQL> -- (
21:05:27 SQL> --   SELECT
21:05:27 SQL> --   tkrdate
21:05:27 SQL> --   -- Find corr() tween score and g1 over 8 day period:
21:05:27 SQL> --   ,CORR((score_long - score_short),g1)
21:05:27 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
21:05:27 SQL> --   FROM sc12tkr
21:05:27 SQL> -- )
21:05:27 SQL> -- GROUP BY tkrdate
21:05:27 SQL> -- /
21:05:27 SQL> 
21:05:27 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
21:05:27 SQL> 
21:05:27 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.20
21:05:28 SQL> 
21:05:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
21:05:28 SQL> 
21:05:28 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
21:05:28   2  SELECT
21:05:28   3  tkr
21:05:28   4  ,ydate
21:05:28   5  ,tkrdate
21:05:28   6  ,trend
21:05:28   7  ,g1
21:05:28   8  ,gatt
21:05:28   9  ,gattn
21:05:28  10  -- Goodness attributes:
21:05:28  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
21:05:28  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
21:05:28  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
21:05:28  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
21:05:28  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
21:05:28  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
21:05:28  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
21:05:28  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
21:05:28  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
21:05:28  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
21:05:28  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
21:05:28  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
21:05:28  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
21:05:28  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
21:05:28  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
21:05:28  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
21:05:28  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
21:05:28  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
21:05:28  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
21:05:28  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
21:05:28  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
21:05:28  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
21:05:28  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
21:05:28  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
21:05:28  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
21:05:28  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
21:05:28  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
21:05:28  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
21:05:28  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
21:05:28  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
21:05:28  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
21:05:28  42  FROM stk16svmspy
21:05:28  43  /

Table created.

Elapsed: 00:00:00.72
21:05:29 SQL> 
21:05:29 SQL> -- rpt
21:05:29 SQL> 
21:05:29 SQL> SELECT
21:05:29   2  tkr
21:05:29   3  ,trend
21:05:29   4  ,gatt
21:05:29   5  ,COUNT(tkr)
21:05:29   6  ,AVG(g1)
21:05:29   7  FROM stk_ms_svmspy
21:05:29   8  GROUP BY tkr,trend,gatt
21:05:29   9  ORDER BY tkr,trend,gatt
21:05:29  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AAPL		-1 nup	      471 -2.6411098
AAPL		-1 up	      800 17.9656501
AAPL		-1	       12
AAPL		 1 nup	     1256 -2.8249286
AAPL		 1 up	     1049 3.75240505
AAPL		 1	      234

6 rows selected.

Elapsed: 00:00:00.02
21:05:29 SQL> 
21:05:29 SQL> SELECT
21:05:29   2  tkr
21:05:29   3  ,0+TO_CHAR(ydate,'D')daynum
21:05:29   4  ,COUNT(tkr)
21:05:29   5  ,MIN(ydate),MAX(ydate)
21:05:29   6  FROM stk_ms_svmspy
21:05:29   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
21:05:29   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
21:05:29   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
AAPL		 2	  624 2011-01-10 14:30:00 2011-03-14 19:55:00
AAPL		 3	  858 2011-01-04 14:30:00 2011-03-15 19:55:00
AAPL		 4	  780 2011-01-05 14:30:00 2011-03-09 20:55:00
AAPL		 5	  780 2011-01-06 14:30:00 2011-03-10 20:55:00
AAPL		 6	  780 2011-01-07 14:30:00 2011-03-11 20:55:00

Elapsed: 00:00:00.00
21:05:29 SQL> 
21:05:29 SQL> -- exit
21:05:29 SQL> @stk10svmd.sql '&1'
21:05:29 SQL> --
21:05:29 SQL> -- stk10svmd.sql
21:05:29 SQL> --
21:05:29 SQL> 
21:05:29 SQL> -- Creates views and tables for demonstrating SVM.
21:05:29 SQL> -- I need to run this after I run stk10.sql
21:05:29 SQL> 
21:05:29 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.20
21:05:29 SQL> 
21:05:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
21:05:29 SQL> 
21:05:29 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
21:05:29   2  SELECT
21:05:29   3  tkr
21:05:29   4  ,ydate
21:05:29   5  ,tkr||ydate tkrdate
21:05:29   6  ,clse
21:05:29   7  ,rownum rnum -- acts as t in my time-series
21:05:29   8  -- Derive some attributes from clse.
21:05:29   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
21:05:29  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
21:05:29  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
21:05:29  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
21:05:29  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
21:05:29  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
21:05:29  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
21:05:29  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
21:05:29  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
21:05:29  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
21:05:29  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
21:05:29  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
21:05:29  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
21:05:29  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
21:05:29  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
21:05:29  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
21:05:29  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
21:05:29  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
21:05:29  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
21:05:29  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
21:05:29  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
21:05:29  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
21:05:29  31  -- ystk21 created here: svmd/cr_ystk21.sql
21:05:29  32  FROM ystk21
21:05:29  33  WHERE UPPER(tkr)='&1'
21:05:29  34  AND ydate > '1990-01-01'
21:05:29  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
21:05:29  36  ORDER BY ydate
21:05:29  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='AAPL'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='AAPL')

Table created.

Elapsed: 00:00:00.35
21:05:29 SQL> 
21:05:29 SQL> -- rpt
21:05:29 SQL> 
21:05:29 SQL> SELECT
21:05:29   2  tkr
21:05:29   3  ,COUNT(tkr)
21:05:29   4  ,MIN(clse),MAX(clse)
21:05:29   5  ,MIN(avg4),MAX(avg4)
21:05:29   6  ,MIN(ydate),MAX(ydate)
21:05:29   7  FROM stk_svmd10svmspy
21:05:29   8  GROUP BY tkr
21:05:29   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
AAPL		5345	   3.23     363.13	3.284	 359.472 1990-01-02 21:00:00 2011-03-15 21:00:00

Elapsed: 00:00:00.02
21:05:29 SQL> 
21:05:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:05:29 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.14
21:05:29 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
21:05:29   2  SELECT
21:05:29   3  tkr
21:05:29   4  ,ydate
21:05:29   5  ,tkrdate
21:05:29   6  ,clse
21:05:29   7  ,rnum
21:05:29   8  -- g1 is important. I want to predict g1:
21:05:29   9  ,ld - clse g1
21:05:29  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
21:05:29  11  -- I want more attributes from the ones I derived above:
21:05:29  12  -- clse relation to moving-min
21:05:29  13  ,clse-min3  cm3
21:05:29  14  ,clse-min4  cm4
21:05:29  15  ,clse-min5  cm5
21:05:29  16  ,clse-min6  cm6
21:05:29  17  ,clse-min7  cm7
21:05:29  18  ,clse-min8  cm8
21:05:29  19  ,clse-min9  cm9
21:05:29  20  -- clse relation to moving-avg
21:05:29  21  ,clse-avg3  ca3
21:05:29  22  ,clse-avg4  ca4
21:05:29  23  ,clse-avg5  ca5
21:05:29  24  ,clse-avg6  ca6
21:05:29  25  ,clse-avg7  ca7
21:05:29  26  ,clse-avg8  ca8
21:05:29  27  ,clse-avg9  ca9
21:05:29  28  -- clse relation to moving-max
21:05:29  29  ,clse-max3  cx3
21:05:29  30  ,clse-max4  cx4
21:05:29  31  ,clse-max5  cx5
21:05:29  32  ,clse-max6  cx6
21:05:29  33  ,clse-max7  cx7
21:05:29  34  ,clse-max8  cx8
21:05:29  35  ,clse-max9  cx9
21:05:29  36  -- Derive date related attributes:
21:05:29  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:05:29  38  ,0+TO_CHAR(ydate,'D')d
21:05:29  39  ,0+TO_CHAR(ydate,'W')w
21:05:29  40  -- mpm stands for minutes-past-midnight:
21:05:29  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:05:29  42  -- mph stands for minutes-past-hour:
21:05:29  43  ,0+TO_CHAR(ydate,'MI')mph
21:05:29  44  FROM stk_svmd10svmspy
21:05:29  45  ORDER BY ydate
21:05:29  46  /

Table created.

Elapsed: 00:00:00.14
21:05:30 SQL> 
21:05:30 SQL> -- rpt
21:05:30 SQL> 
21:05:30 SQL> SELECT
21:05:30   2  tkr
21:05:30   3  ,COUNT(tkr)
21:05:30   4  ,MIN(clse),MAX(clse)
21:05:30   5  ,MIN(ydate),MAX(ydate)
21:05:30   6  FROM stk_svmd12
21:05:30   7  GROUP BY tkr
21:05:30   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
AAPL		5345	   3.23     363.13 1990-01-02 21:00:00 2011-03-15 21:00:00

Elapsed: 00:00:00.02
21:05:30 SQL> 
21:05:30 SQL> -- Prepare for derivation of NTILE based parameters.
21:05:30 SQL> -- Also derive the "trend" parameter:
21:05:30 SQL> 
21:05:30 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.16
21:05:30 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
21:05:30   2  SELECT
21:05:30   3  tkr
21:05:30   4  ,ydate
21:05:30   5  ,tkrdate
21:05:30   6  ,clse
21:05:30   7  ,g1
21:05:30   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
21:05:30   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
21:05:30  10  ,CASE WHEN trend IS NULL THEN 1
21:05:30  11  	    WHEN trend =0      THEN 1
21:05:30  12  	    ELSE trend END trend
21:05:30  13  ,cm3
21:05:30  14  ,cm4
21:05:30  15  ,cm5
21:05:30  16  ,cm6
21:05:30  17  ,cm7
21:05:30  18  ,cm8
21:05:30  19  ,cm9
21:05:30  20  ,ca3
21:05:30  21  ,ca4
21:05:30  22  ,ca5
21:05:30  23  ,ca6
21:05:30  24  ,ca7
21:05:30  25  ,ca8
21:05:30  26  ,ca9
21:05:30  27  ,cx3
21:05:30  28  ,cx4
21:05:30  29  ,cx5
21:05:30  30  ,cx6
21:05:30  31  ,cx7
21:05:30  32  ,cx8
21:05:30  33  ,cx9
21:05:30  34  ,hh
21:05:30  35  ,d
21:05:30  36  ,w
21:05:30  37  ,mpm
21:05:30  38  ,mph
21:05:30  39  FROM stk_svmd12
21:05:30  40  -- Guard against divide by 0:
21:05:30  41  WHERE clse > 0
21:05:30  42  ORDER BY ydate
21:05:30  43  /

Table created.

Elapsed: 00:00:00.11
21:05:30 SQL> 
21:05:30 SQL> -- rpt
21:05:30 SQL> 
21:05:30 SQL> SELECT
21:05:30   2  tkr
21:05:30   3  ,trend
21:05:30   4  ,gatt
21:05:30   5  ,COUNT(tkr)
21:05:30   6  ,AVG(g1)
21:05:30   7  FROM stk_svmd14
21:05:30   8  GROUP BY tkr,trend,gatt
21:05:30   9  ORDER BY tkr,trend,gatt
21:05:30  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AAPL		  -1 nup       1328 -.81847139
AAPL		  -1 up        1133 .967458076
AAPL		  -1		  1
AAPL		   1 nup       1570  -.6452293
AAPL		   1 up        1313 1.02097487

Elapsed: 00:00:00.01
21:05:30 SQL> 
21:05:30 SQL> -- Derive NTILE based params:
21:05:30 SQL> 
21:05:30 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.14
21:05:30 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
21:05:30   2  SELECT
21:05:30   3  tkr
21:05:30   4  ,ydate
21:05:30   5  ,tkrdate
21:05:30   6  ,clse
21:05:30   7  ,g1
21:05:30   8  ,gatt
21:05:30   9  ,gattn
21:05:30  10  ,trend
21:05:30  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
21:05:30  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
21:05:30  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
21:05:30  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
21:05:30  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
21:05:30  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
21:05:30  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
21:05:30  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
21:05:30  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
21:05:30  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
21:05:30  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
21:05:30  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
21:05:30  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
21:05:30  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
21:05:30  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
21:05:30  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
21:05:30  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
21:05:30  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
21:05:30  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
21:05:30  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
21:05:30  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
21:05:30  32  ,hh  att21
21:05:30  33  ,d   att22
21:05:30  34  ,w   att23
21:05:30  35  ,mpm att24
21:05:30  36  ,mph att25
21:05:30  37  ,trend att26
21:05:30  38  FROM stk_svmd14
21:05:30  39  ORDER BY ydate
21:05:30  40  /

Table created.

Elapsed: 00:00:00.57
21:05:31 SQL> 
21:05:31 SQL> -- rpt
21:05:31 SQL> 
21:05:31 SQL> SELECT
21:05:31   2  tkr
21:05:31   3  ,trend
21:05:31   4  ,gatt
21:05:31   5  ,COUNT(tkr)
21:05:31   6  ,AVG(g1)
21:05:31   7  FROM stk_svmd16
21:05:31   8  GROUP BY tkr,trend,gatt
21:05:31   9  ORDER BY tkr,trend,gatt
21:05:31  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AAPL		  -1 nup       1328 -.81847139
AAPL		  -1 up        1133 .967458076
AAPL		  -1		  1
AAPL		   1 nup       1570  -.6452293
AAPL		   1 up        1313 1.02097487

Elapsed: 00:00:00.01
21:05:31 SQL> 
21:05:31 SQL> -- Comment out feedback related syntax:
21:05:31 SQL> 
21:05:31 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
21:05:31 SQL> -- SELECT
21:05:31 SQL> -- m.tkr
21:05:31 SQL> -- ,m.ydate
21:05:31 SQL> -- ,m.tkrdate
21:05:31 SQL> -- ,l.score score_long
21:05:31 SQL> -- ,s.score score_short
21:05:31 SQL> -- ,m.g1
21:05:31 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
21:05:31 SQL> -- WHERE l.targ='gatt'
21:05:31 SQL> -- AND	 s.targ='gattn'
21:05:31 SQL> -- AND l.tkrdate = s.tkrdate
21:05:31 SQL> -- AND l.tkrdate = m.tkrdate
21:05:31 SQL> -- -- Speed things up:
21:05:31 SQL> -- AND l.tkr = '&1'
21:05:31 SQL> -- AND s.tkr = '&1'
21:05:31 SQL> -- /
21:05:31 SQL> --
21:05:31 SQL> -- DROP TABLE score_corr_tkr;
21:05:31 SQL> --
21:05:31 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
21:05:31 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
21:05:31 SQL> -- (
21:05:31 SQL> --   SELECT
21:05:31 SQL> --   tkrdate
21:05:31 SQL> --   -- Find corr() tween score and g1 over 8 day period:
21:05:31 SQL> --   ,CORR((score_long - score_short),g1)
21:05:31 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
21:05:31 SQL> --   FROM sc12tkr
21:05:31 SQL> -- )
21:05:31 SQL> -- GROUP BY tkrdate
21:05:31 SQL> -- /
21:05:31 SQL> 
21:05:31 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
21:05:31 SQL> 
21:05:31 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.14
21:05:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
21:05:31 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
21:05:31   2  SELECT
21:05:31   3  tkr
21:05:31   4  ,ydate
21:05:31   5  ,tkrdate
21:05:31   6  ,trend
21:05:31   7  ,g1
21:05:31   8  ,gatt
21:05:31   9  ,gattn
21:05:31  10  -- Goodness attributes:
21:05:31  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
21:05:31  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
21:05:31  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
21:05:31  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
21:05:31  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
21:05:31  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
21:05:31  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
21:05:31  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
21:05:31  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
21:05:31  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
21:05:31  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
21:05:31  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
21:05:31  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
21:05:31  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
21:05:31  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
21:05:31  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
21:05:31  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
21:05:31  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
21:05:31  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
21:05:31  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
21:05:31  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
21:05:31  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
21:05:31  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
21:05:31  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
21:05:31  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
21:05:31  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
21:05:31  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
21:05:31  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
21:05:31  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
21:05:31  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
21:05:31  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
21:05:31  42  FROM stk_svmd16
21:05:31  43  /

Table created.

Elapsed: 00:00:00.95
21:05:32 SQL> 
21:05:32 SQL> -- rpt
21:05:32 SQL> 
21:05:32 SQL> SELECT
21:05:32   2  tkr
21:05:32   3  ,trend
21:05:32   4  ,gatt
21:05:32   5  ,COUNT(tkr)
21:05:32   6  ,AVG(g1)
21:05:32   7  FROM stk_ms_svmd_svmspy
21:05:32   8  GROUP BY tkr,trend,gatt
21:05:32   9  ORDER BY tkr,trend,gatt
21:05:32  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AAPL		  -1 nup       1328 -.81847139
AAPL		  -1 up        1133 .967458076
AAPL		  -1		  1
AAPL		   1 nup       1570  -.6452293
AAPL		   1 up        1313 1.02097487

Elapsed: 00:00:00.01
21:05:32 SQL> 
21:05:32 SQL> SELECT
21:05:32   2  tkr
21:05:32   3  ,COUNT(tkr)
21:05:32   4  ,MIN(ydate),MAX(ydate)
21:05:32   5  FROM stk_ms_svmd_svmspy
21:05:32   6  GROUP BY tkr
21:05:32   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
AAPL		5345 1990-01-02 21:00:00 2011-03-15 21:00:00

Elapsed: 00:00:00.01
21:05:32 SQL> 
21:05:32 SQL> -- exit
21:05:32 SQL> 
21:05:32 SQL> 
21:05:32 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.23
21:05:32 SQL> 
21:05:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
21:05:33 SQL> 
21:05:33 SQL> CREATE TABLE stk_ms_u COMPRESS AS
21:05:33   2  SELECT * FROM stk_ms_svmspy
21:05:33   3  UNION
21:05:33   4  SELECT * FROM stk_ms_svmd_svmspy
21:05:33   5  /

Table created.

Elapsed: 00:00:00.19
21:05:33 SQL> 
21:05:33 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
