
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 27 12:59:42 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

12:59:42 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
12:59:42 SQL> 
12:59:42 SQL> 12:59:42 SQL> --
12:59:42 SQL> -- stk10u.sql
12:59:42 SQL> --
12:59:42 SQL> 
12:59:42 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
12:59:42 SQL> 
12:59:42 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
12:59:42 SQL> @stk10.sql     '&1'
12:59:42 SQL> --
12:59:42 SQL> -- stk10.sql
12:59:42 SQL> --
12:59:42 SQL> 
12:59:42 SQL> -- Creates views and tables for demonstrating SVM.
12:59:42 SQL> 
12:59:42 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:02.81
12:59:45 SQL> 
12:59:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
12:59:45 SQL> 
12:59:45 SQL> CREATE TABLE stk10svmspy COMPRESS AS
12:59:45   2  SELECT
12:59:45   3  tkr
12:59:45   4  ,ydate
12:59:45   5  ,tkr||ydate tkrdate
12:59:45   6  ,clse
12:59:45   7  ,clse2
12:59:45   8  ,rownum rnum -- acts as t in my time-series
12:59:45   9  -- g1 is important. I want to predict g1:
12:59:45  10  ,gain1day g1
12:59:45  11  -- Derive some attributes from clse.
12:59:45  12  -- Each row spans 5 minutes.
12:59:45  13  -- The number of rows in 1 day is 24*60/5.
12:59:45  14  -- I want the aggregations to span from 3 days to 9 days:
12:59:45  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
12:59:45  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
12:59:45  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
12:59:45  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
12:59:45  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
12:59:45  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
12:59:45  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
12:59:45  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
12:59:45  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
12:59:45  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
12:59:45  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
12:59:45  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
12:59:45  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
12:59:45  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
12:59:45  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
12:59:45  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
12:59:45  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
12:59:45  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
12:59:45  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
12:59:45  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
12:59:45  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
12:59:45  36  FROM di5min_stk_c2
12:59:45  37  WHERE UPPER(tkr)='&1'
12:59:45  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
12:59:45  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
12:59:45  40  ORDER BY ydate
12:59:45  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='NUE'

Table created.

Elapsed: 00:00:00.24
12:59:45 SQL> 
12:59:45 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.06
12:59:45 SQL> 
12:59:45 SQL> -- rpt
12:59:45 SQL> 
12:59:45 SQL> SELECT
12:59:45   2  tkr
12:59:45   3  ,COUNT(tkr)ccount
12:59:45   4  ,MIN(clse)mnclse,MAX(clse)mxclse
12:59:45   5  -- ,MIN(avg4),MAX(avg4)
12:59:45   6  ,MIN(ydate),MAX(ydate)
12:59:45   7  ,MIN(g1)
12:59:45   8  ,MAX(g1)
12:59:45   9  FROM stk10svmspy
12:59:45  10  GROUP BY tkr
12:59:45  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
NUE	      1248	42.81	   46.63 2011-01-04 14:30:00 2011-01-26 20:55:00      -1.54	  2.14

Elapsed: 00:00:00.01
12:59:45 SQL> 
12:59:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:59:45 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.04
12:59:45 SQL> CREATE TABLE stk12svmspy COMPRESS AS
12:59:45   2  SELECT
12:59:45   3  tkr
12:59:45   4  ,ydate
12:59:45   5  ,tkrdate
12:59:45   6  ,clse
12:59:45   7  ,rnum
12:59:45   8  ,g1
12:59:45   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
12:59:45  10  -- I want more attributes from the ones I derived above:
12:59:45  11  -- clse relation to moving-min
12:59:45  12  ,clse-min3  cm3
12:59:45  13  ,clse-min4  cm4
12:59:45  14  ,clse-min5  cm5
12:59:45  15  ,clse-min6  cm6
12:59:45  16  ,clse-min7  cm7
12:59:45  17  ,clse-min8  cm8
12:59:45  18  ,clse-min9  cm9
12:59:45  19  -- clse relation to moving-avg
12:59:45  20  ,clse-avg3  ca3
12:59:45  21  ,clse-avg4  ca4
12:59:45  22  ,clse-avg5  ca5
12:59:45  23  ,clse-avg6  ca6
12:59:45  24  ,clse-avg7  ca7
12:59:45  25  ,clse-avg8  ca8
12:59:45  26  ,clse-avg9  ca9
12:59:45  27  -- clse relation to moving-max
12:59:45  28  ,clse-max3  cx3
12:59:45  29  ,clse-max4  cx4
12:59:45  30  ,clse-max5  cx5
12:59:45  31  ,clse-max6  cx6
12:59:45  32  ,clse-max7  cx7
12:59:45  33  ,clse-max8  cx8
12:59:45  34  ,clse-max9  cx9
12:59:45  35  -- Derive date related attributes:
12:59:45  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:59:45  37  ,0+TO_CHAR(ydate,'D')d
12:59:45  38  ,0+TO_CHAR(ydate,'W')w
12:59:45  39  -- mpm stands for minutes-past-midnight:
12:59:45  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:59:45  41  -- mph stands for minutes-past-hour:
12:59:45  42  ,0+TO_CHAR(ydate,'MI')mph
12:59:45  43  FROM stk10svmspy
12:59:45  44  ORDER BY ydate
12:59:45  45  /

Table created.

Elapsed: 00:00:00.06
12:59:45 SQL> 
12:59:45 SQL> -- rpt
12:59:45 SQL> 
12:59:45 SQL> SELECT
12:59:45   2  tkr
12:59:45   3  ,COUNT(tkr)ccount
12:59:45   4  ,MIN(clse)mnclse,MAX(clse)mxclse
12:59:45   5  -- ,MIN(avg4),MAX(avg4)
12:59:45   6  ,MIN(ydate),MAX(ydate)
12:59:45   7  ,MIN(g1)
12:59:45   8  ,AVG(g1)
12:59:45   9  ,MAX(g1)
12:59:45  10  FROM stk12svmspy
12:59:45  11  GROUP BY tkr
12:59:45  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
NUE	      1248	42.81	   46.63 2011-01-04 14:30:00 2011-01-26 20:55:00      -1.54 .158163919	     2.14

Elapsed: 00:00:00.01
12:59:45 SQL> 
12:59:45 SQL> -- Prepare for derivation of NTILE based parameters.
12:59:45 SQL> -- Also derive the "trend" parameter:
12:59:45 SQL> 
12:59:45 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
12:59:45 SQL> CREATE TABLE stk14svmspy COMPRESS AS
12:59:45   2  SELECT
12:59:45   3  tkr
12:59:45   4  ,ydate
12:59:45   5  ,tkrdate
12:59:45   6  ,clse
12:59:45   7  ,g1
12:59:45   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
12:59:45   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
12:59:45  10  ,CASE WHEN trend IS NULL THEN 1
12:59:45  11  	    WHEN trend =0      THEN 1
12:59:45  12  	    ELSE trend END trend
12:59:45  13  ,cm3
12:59:45  14  ,cm4
12:59:45  15  ,cm5
12:59:45  16  ,cm6
12:59:45  17  ,cm7
12:59:45  18  ,cm8
12:59:45  19  ,cm9
12:59:45  20  ,ca3
12:59:45  21  ,ca4
12:59:45  22  ,ca5
12:59:45  23  ,ca6
12:59:45  24  ,ca7
12:59:45  25  ,ca8
12:59:45  26  ,ca9
12:59:45  27  ,cx3
12:59:45  28  ,cx4
12:59:45  29  ,cx5
12:59:45  30  ,cx6
12:59:45  31  ,cx7
12:59:45  32  ,cx8
12:59:45  33  ,cx9
12:59:45  34  ,hh
12:59:45  35  ,d
12:59:45  36  ,w
12:59:45  37  ,mpm
12:59:45  38  ,mph
12:59:45  39  FROM stk12svmspy
12:59:45  40  -- Guard against divide by 0:
12:59:45  41  WHERE clse > 0
12:59:45  42  ORDER BY ydate
12:59:45  43  /

Table created.

Elapsed: 00:00:00.05
12:59:46 SQL> 
12:59:46 SQL> -- rpt
12:59:46 SQL> 
12:59:46 SQL> SELECT
12:59:46   2  tkr
12:59:46   3  ,trend
12:59:46   4  ,gatt
12:59:46   5  ,COUNT(tkr)
12:59:46   6  ,AVG(g1)
12:59:46   7  FROM stk14svmspy
12:59:46   8  GROUP BY tkr,trend,gatt
12:59:46   9  ORDER BY tkr,trend,gatt
12:59:46  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
NUE		-1 nup	       55 -.05072727
NUE		-1 up	      195 .831025641
NUE		-1	       19
NUE		 1 nup	      510 -.41083333
NUE		 1 up	      332 .671626506
NUE		 1	      137

6 rows selected.

Elapsed: 00:00:00.01
12:59:46 SQL> 
12:59:46 SQL> -- Derive NTILE based params:
12:59:46 SQL> 
12:59:46 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.12
12:59:46 SQL> CREATE TABLE stk16svmspy COMPRESS AS
12:59:46   2  SELECT
12:59:46   3  tkr
12:59:46   4  ,ydate
12:59:46   5  ,tkrdate
12:59:46   6  ,clse
12:59:46   7  ,g1
12:59:46   8  ,gatt
12:59:46   9  ,gattn
12:59:46  10  ,trend
12:59:46  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
12:59:46  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
12:59:46  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
12:59:46  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
12:59:46  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
12:59:46  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
12:59:46  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
12:59:46  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
12:59:46  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
12:59:46  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
12:59:46  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
12:59:46  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
12:59:46  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
12:59:46  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
12:59:46  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
12:59:46  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
12:59:46  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
12:59:46  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
12:59:46  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
12:59:46  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
12:59:46  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
12:59:46  32  ,hh  att21
12:59:46  33  ,d   att22
12:59:46  34  ,w   att23
12:59:46  35  ,mpm att24
12:59:46  36  ,mph att25
12:59:46  37  ,trend att26
12:59:46  38  FROM stk14svmspy
12:59:46  39  ORDER BY ydate
12:59:46  40  /

Table created.

Elapsed: 00:00:00.19
12:59:46 SQL> 
12:59:46 SQL> -- rpt
12:59:46 SQL> 
12:59:46 SQL> SELECT
12:59:46   2  tkr
12:59:46   3  ,trend
12:59:46   4  ,gatt
12:59:46   5  ,COUNT(tkr)
12:59:46   6  ,AVG(g1)
12:59:46   7  FROM stk16svmspy
12:59:46   8  GROUP BY tkr,trend,gatt
12:59:46   9  ORDER BY tkr,trend,gatt
12:59:46  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
NUE		-1 nup	       55 -.05072727
NUE		-1 up	      195 .831025641
NUE		-1	       19
NUE		 1 nup	      510 -.41083333
NUE		 1 up	      332 .671626506
NUE		 1	      137

6 rows selected.

Elapsed: 00:00:00.01
12:59:46 SQL> 
12:59:46 SQL> 
12:59:46 SQL> CREATE OR REPLACE VIEW sc12tkr AS
12:59:46   2  SELECT
12:59:46   3  m.tkr
12:59:46   4  ,m.ydate
12:59:46   5  ,m.tkrdate
12:59:46   6  ,l.score score_long
12:59:46   7  ,s.score score_short
12:59:46   8  ,m.g1
12:59:46   9  FROM stkscores l,stkscores s,stk16svmspy m
12:59:46  10  WHERE l.targ='gatt'
12:59:46  11  AND   s.targ='gattn'
12:59:46  12  AND l.tkrdate = s.tkrdate
12:59:46  13  AND l.tkrdate = m.tkrdate
12:59:46  14  -- Speed things up:
12:59:46  15  AND l.tkr = '&1'
12:59:46  16  AND s.tkr = '&1'
12:59:46  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'NUE'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'NUE'

View created.

Elapsed: 00:00:00.09
12:59:46 SQL> 
12:59:46 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.05
12:59:46 SQL> 
12:59:46 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
12:59:46   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
12:59:46   3  (
12:59:46   4  	SELECT
12:59:46   5  	tkrdate
12:59:46   6  	-- Find corr() tween score and g1 over 8 day period:
12:59:46   7  	,CORR((score_long - score_short),g1)
12:59:46   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
12:59:46   9  	FROM sc12tkr
12:59:46  10  )
12:59:46  11  GROUP BY tkrdate
12:59:46  12  /

Table created.

Elapsed: 00:00:00.14
12:59:46 SQL> 
12:59:46 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
12:59:46 SQL> 
12:59:46 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.05
12:59:46 SQL> 
12:59:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
12:59:47 SQL> 
12:59:47 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
12:59:47   2  SELECT
12:59:47   3  tkr
12:59:47   4  ,ydate
12:59:47   5  ,s.tkrdate
12:59:47   6  ,trend
12:59:47   7  ,g1
12:59:47   8  ,gatt
12:59:47   9  ,gattn
12:59:47  10  -- Recent CORR()tween scores and gains:
12:59:47  11  ,NVL(sc_corr,0)sc_corr
12:59:47  12  -- Goodness attributes:
12:59:47  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
12:59:47  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
12:59:47  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
12:59:47  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
12:59:47  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
12:59:47  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
12:59:47  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
12:59:47  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
12:59:47  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
12:59:47  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
12:59:47  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
12:59:47  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
12:59:47  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
12:59:47  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
12:59:47  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
12:59:47  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
12:59:47  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
12:59:47  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
12:59:47  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
12:59:47  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
12:59:47  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
12:59:47  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
12:59:47  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
12:59:47  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
12:59:47  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
12:59:47  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
12:59:47  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
12:59:47  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
12:59:47  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
12:59:47  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
12:59:47  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
12:59:47  44  FROM stk16svmspy s,score_corr_tkr c
12:59:47  45  WHERE s.tkrdate = c.tkrdate(+)
12:59:47  46  /

Table created.

Elapsed: 00:00:00.32
12:59:47 SQL> 
12:59:47 SQL> -- rpt
12:59:47 SQL> 
12:59:47 SQL> SELECT
12:59:47   2  tkr
12:59:47   3  ,trend
12:59:47   4  ,gatt
12:59:47   5  ,COUNT(tkr)
12:59:47   6  ,AVG(g1)
12:59:47   7  ,AVG(sc_corr)
12:59:47   8  FROM stk_ms_svmspy
12:59:47   9  GROUP BY tkr,trend,gatt
12:59:47  10  ORDER BY tkr,trend,gatt
12:59:47  11  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
------- ---------- --- ---------- ---------- ------------
NUE		-1 nup	       55 -.05072727   .107885777
NUE		-1 up	      195 .831025641   .214074899
NUE		-1	       19	       .122528572
NUE		 1 nup	      510 -.41083333   .164805427
NUE		 1 up	      332 .671626506   .179732548
NUE		 1	      137	       .057281855

6 rows selected.

Elapsed: 00:00:00.01
12:59:47 SQL> 
12:59:47 SQL> SELECT
12:59:47   2  tkr
12:59:47   3  ,0+TO_CHAR(ydate,'D')daynum
12:59:47   4  ,COUNT(tkr)
12:59:47   5  ,MIN(ydate),MAX(ydate)
12:59:47   6  FROM stk_ms_svmspy
12:59:47   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
12:59:47   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
12:59:47   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
NUE		 2	  156 2011-01-10 14:30:00 2011-01-24 20:55:00
NUE		 3	  312 2011-01-04 14:30:00 2011-01-25 20:55:00
NUE		 4	  312 2011-01-05 14:30:00 2011-01-26 20:55:00
NUE		 5	  234 2011-01-06 14:30:00 2011-01-20 20:55:00
NUE		 6	  234 2011-01-07 14:30:00 2011-01-21 20:55:00

Elapsed: 00:00:00.01
12:59:47 SQL> 
12:59:47 SQL> -- exit
12:59:47 SQL> @stk10svmd.sql '&1'
12:59:47 SQL> --
12:59:47 SQL> -- stk10svmd.sql
12:59:47 SQL> --
12:59:47 SQL> 
12:59:47 SQL> -- Creates views and tables for demonstrating SVM.
12:59:47 SQL> -- I need to run this after I run stk10.sql
12:59:47 SQL> 
12:59:47 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.23
12:59:47 SQL> 
12:59:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
12:59:47 SQL> 
12:59:47 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
12:59:47   2  SELECT
12:59:47   3  tkr
12:59:47   4  ,ydate
12:59:47   5  ,tkr||ydate tkrdate
12:59:47   6  ,clse
12:59:47   7  ,rownum rnum -- acts as t in my time-series
12:59:47   8  -- Derive some attributes from clse.
12:59:47   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
12:59:47  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
12:59:47  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
12:59:47  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
12:59:47  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
12:59:47  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
12:59:47  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
12:59:47  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
12:59:47  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
12:59:47  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
12:59:47  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
12:59:47  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
12:59:47  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
12:59:47  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
12:59:47  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
12:59:47  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
12:59:47  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
12:59:47  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
12:59:47  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
12:59:47  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
12:59:47  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
12:59:47  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
12:59:47  31  FROM ystk
12:59:47  32  WHERE UPPER(tkr)='&1'
12:59:47  33  AND ydate > '1990-01-01'
12:59:47  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
12:59:47  35  ORDER BY ydate
12:59:47  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='NUE'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='NUE')

Table created.

Elapsed: 00:00:02.27
12:59:50 SQL> 
12:59:50 SQL> -- rpt
12:59:50 SQL> 
12:59:50 SQL> SELECT
12:59:50   2  tkr
12:59:50   3  ,COUNT(tkr)
12:59:50   4  ,MIN(clse),MAX(clse)
12:59:50   5  ,MIN(avg4),MAX(avg4)
12:59:50   6  ,MIN(ydate),MAX(ydate)
12:59:50   7  FROM stk_svmd10svmspy
12:59:50   8  GROUP BY tkr
12:59:50   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
NUE		5312	   2.19      74.86	 2.22	   74.11 1990-01-02 00:00:00 2011-01-26 00:00:00

Elapsed: 00:00:00.02
12:59:50 SQL> 
12:59:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:59:50 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.14
12:59:50 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
12:59:50   2  SELECT
12:59:50   3  tkr
12:59:50   4  ,ydate
12:59:50   5  ,tkrdate
12:59:50   6  ,clse
12:59:50   7  ,rnum
12:59:50   8  -- g1 is important. I want to predict g1:
12:59:50   9  ,ld - clse g1
12:59:50  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
12:59:50  11  -- I want more attributes from the ones I derived above:
12:59:50  12  -- clse relation to moving-min
12:59:50  13  ,clse-min3  cm3
12:59:50  14  ,clse-min4  cm4
12:59:50  15  ,clse-min5  cm5
12:59:50  16  ,clse-min6  cm6
12:59:50  17  ,clse-min7  cm7
12:59:50  18  ,clse-min8  cm8
12:59:50  19  ,clse-min9  cm9
12:59:50  20  -- clse relation to moving-avg
12:59:50  21  ,clse-avg3  ca3
12:59:50  22  ,clse-avg4  ca4
12:59:50  23  ,clse-avg5  ca5
12:59:50  24  ,clse-avg6  ca6
12:59:50  25  ,clse-avg7  ca7
12:59:50  26  ,clse-avg8  ca8
12:59:50  27  ,clse-avg9  ca9
12:59:50  28  -- clse relation to moving-max
12:59:50  29  ,clse-max3  cx3
12:59:50  30  ,clse-max4  cx4
12:59:50  31  ,clse-max5  cx5
12:59:50  32  ,clse-max6  cx6
12:59:50  33  ,clse-max7  cx7
12:59:50  34  ,clse-max8  cx8
12:59:50  35  ,clse-max9  cx9
12:59:50  36  -- Derive date related attributes:
12:59:50  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:59:50  38  ,0+TO_CHAR(ydate,'D')d
12:59:50  39  ,0+TO_CHAR(ydate,'W')w
12:59:50  40  -- mpm stands for minutes-past-midnight:
12:59:50  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:59:50  42  -- mph stands for minutes-past-hour:
12:59:50  43  ,0+TO_CHAR(ydate,'MI')mph
12:59:50  44  FROM stk_svmd10svmspy
12:59:50  45  ORDER BY ydate
12:59:50  46  /

Table created.

Elapsed: 00:00:00.20
12:59:50 SQL> 
12:59:50 SQL> -- rpt
12:59:50 SQL> 
12:59:50 SQL> SELECT
12:59:50   2  tkr
12:59:50   3  ,COUNT(tkr)
12:59:50   4  ,MIN(clse),MAX(clse)
12:59:50   5  ,MIN(ydate),MAX(ydate)
12:59:50   6  FROM stk_svmd12
12:59:50   7  GROUP BY tkr
12:59:50   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
NUE		5312	   2.19      74.86 1990-01-02 00:00:00 2011-01-26 00:00:00

Elapsed: 00:00:00.02
12:59:50 SQL> 
12:59:50 SQL> -- Prepare for derivation of NTILE based parameters.
12:59:50 SQL> -- Also derive the "trend" parameter:
12:59:50 SQL> 
12:59:50 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.27
12:59:50 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
12:59:50   2  SELECT
12:59:50   3  tkr
12:59:50   4  ,ydate
12:59:50   5  ,tkrdate
12:59:50   6  ,clse
12:59:50   7  ,g1
12:59:50   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
12:59:50   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
12:59:50  10  ,CASE WHEN trend IS NULL THEN 1
12:59:50  11  	    WHEN trend =0      THEN 1
12:59:50  12  	    ELSE trend END trend
12:59:50  13  ,cm3
12:59:50  14  ,cm4
12:59:50  15  ,cm5
12:59:50  16  ,cm6
12:59:50  17  ,cm7
12:59:50  18  ,cm8
12:59:50  19  ,cm9
12:59:50  20  ,ca3
12:59:50  21  ,ca4
12:59:50  22  ,ca5
12:59:50  23  ,ca6
12:59:50  24  ,ca7
12:59:50  25  ,ca8
12:59:50  26  ,ca9
12:59:50  27  ,cx3
12:59:50  28  ,cx4
12:59:50  29  ,cx5
12:59:50  30  ,cx6
12:59:50  31  ,cx7
12:59:50  32  ,cx8
12:59:50  33  ,cx9
12:59:50  34  ,hh
12:59:50  35  ,d
12:59:50  36  ,w
12:59:50  37  ,mpm
12:59:50  38  ,mph
12:59:50  39  FROM stk_svmd12
12:59:50  40  -- Guard against divide by 0:
12:59:50  41  WHERE clse > 0
12:59:50  42  ORDER BY ydate
12:59:50  43  /

Table created.

Elapsed: 00:00:00.15
12:59:50 SQL> 
12:59:50 SQL> -- rpt
12:59:50 SQL> 
12:59:50 SQL> SELECT
12:59:50   2  tkr
12:59:50   3  ,trend
12:59:50   4  ,gatt
12:59:50   5  ,COUNT(tkr)
12:59:50   6  ,AVG(g1)
12:59:50   7  FROM stk_svmd14
12:59:50   8  GROUP BY tkr,trend,gatt
12:59:50   9  ORDER BY tkr,trend,gatt
12:59:50  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
NUE		  -1 nup       1352 -.32284024
NUE		  -1 up        1102 .461651543
NUE		   1 nup       1645  -.3077386
NUE		   1 up        1212 .394158416
NUE		   1		  1

Elapsed: 00:00:00.03
12:59:50 SQL> 
12:59:50 SQL> -- Derive NTILE based params:
12:59:50 SQL> 
12:59:50 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.21
12:59:51 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
12:59:51   2  SELECT
12:59:51   3  tkr
12:59:51   4  ,ydate
12:59:51   5  ,tkrdate
12:59:51   6  ,clse
12:59:51   7  ,g1
12:59:51   8  ,gatt
12:59:51   9  ,gattn
12:59:51  10  ,trend
12:59:51  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
12:59:51  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
12:59:51  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
12:59:51  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
12:59:51  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
12:59:51  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
12:59:51  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
12:59:51  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
12:59:51  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
12:59:51  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
12:59:51  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
12:59:51  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
12:59:51  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
12:59:51  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
12:59:51  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
12:59:51  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
12:59:51  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
12:59:51  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
12:59:51  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
12:59:51  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
12:59:51  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
12:59:51  32  ,hh  att21
12:59:51  33  ,d   att22
12:59:51  34  ,w   att23
12:59:51  35  ,mpm att24
12:59:51  36  ,mph att25
12:59:51  37  ,trend att26
12:59:51  38  FROM stk_svmd14
12:59:51  39  ORDER BY ydate
12:59:51  40  /

Table created.

Elapsed: 00:00:00.56
12:59:51 SQL> 
12:59:51 SQL> -- rpt
12:59:51 SQL> 
12:59:51 SQL> SELECT
12:59:51   2  tkr
12:59:51   3  ,trend
12:59:51   4  ,gatt
12:59:51   5  ,COUNT(tkr)
12:59:51   6  ,AVG(g1)
12:59:51   7  FROM stk_svmd16
12:59:51   8  GROUP BY tkr,trend,gatt
12:59:51   9  ORDER BY tkr,trend,gatt
12:59:51  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
NUE		  -1 nup       1352 -.32284024
NUE		  -1 up        1102 .461651543
NUE		   1 nup       1645  -.3077386
NUE		   1 up        1212 .394158416
NUE		   1		  1

Elapsed: 00:00:00.02
12:59:51 SQL> 
12:59:51 SQL> 
12:59:51 SQL> CREATE OR REPLACE VIEW sc12tkr AS
12:59:51   2  SELECT
12:59:51   3  m.tkr
12:59:51   4  ,m.ydate
12:59:51   5  ,m.tkrdate
12:59:51   6  ,l.score score_long
12:59:51   7  ,s.score score_short
12:59:51   8  ,m.g1
12:59:51   9  FROM stkscores l,stkscores s,stk_svmd16 m
12:59:51  10  WHERE l.targ='gatt'
12:59:51  11  AND   s.targ='gattn'
12:59:51  12  AND l.tkrdate = s.tkrdate
12:59:51  13  AND l.tkrdate = m.tkrdate
12:59:51  14  -- Speed things up:
12:59:51  15  AND l.tkr = '&1'
12:59:51  16  AND s.tkr = '&1'
12:59:51  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'NUE'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'NUE'

View created.

Elapsed: 00:00:00.03
12:59:51 SQL> 
12:59:51 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.12
12:59:51 SQL> 
12:59:51 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
12:59:51   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
12:59:51   3  (
12:59:51   4  	SELECT
12:59:51   5  	tkrdate
12:59:51   6  	-- Find corr() tween score and g1 over 8 day period:
12:59:51   7  	,CORR((score_long - score_short),g1)
12:59:51   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
12:59:51   9  	FROM sc12tkr
12:59:51  10  )
12:59:51  11  GROUP BY tkrdate
12:59:51  12  /

Table created.

Elapsed: 00:00:00.16
12:59:52 SQL> 
12:59:52 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
12:59:52 SQL> 
12:59:52 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.11
12:59:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
12:59:52 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
12:59:52   2  SELECT
12:59:52   3  tkr
12:59:52   4  ,ydate
12:59:52   5  ,s.tkrdate
12:59:52   6  ,trend
12:59:52   7  ,g1
12:59:52   8  ,gatt
12:59:52   9  ,gattn
12:59:52  10  -- Recent CORR()tween scores and gains:
12:59:52  11  ,NVL(sc_corr,0)sc_corr
12:59:52  12  -- Goodness attributes:
12:59:52  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
12:59:52  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
12:59:52  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
12:59:52  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
12:59:52  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
12:59:52  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
12:59:52  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
12:59:52  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
12:59:52  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
12:59:52  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
12:59:52  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
12:59:52  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
12:59:52  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
12:59:52  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
12:59:52  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
12:59:52  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
12:59:52  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
12:59:52  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
12:59:52  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
12:59:52  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
12:59:52  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
12:59:52  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
12:59:52  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
12:59:52  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
12:59:52  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
12:59:52  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
12:59:52  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
12:59:52  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
12:59:52  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
12:59:52  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
12:59:52  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
12:59:52  44  FROM stk_svmd16 s,score_corr_tkr c
12:59:52  45  WHERE s.tkrdate = c.tkrdate(+)
12:59:52  46  /

Table created.

Elapsed: 00:00:01.01
12:59:53 SQL> 
12:59:53 SQL> -- rpt
12:59:53 SQL> 
12:59:53 SQL> SELECT
12:59:53   2  tkr
12:59:53   3  ,trend
12:59:53   4  ,gatt
12:59:53   5  ,COUNT(tkr)
12:59:53   6  ,AVG(g1)
12:59:53   7  ,AVG(sc_corr)
12:59:53   8  FROM stk_ms_svmd_svmspy
12:59:53   9  GROUP BY tkr,trend,gatt
12:59:53  10  ORDER BY tkr,trend,gatt
12:59:53  11  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ------------
NUE		  -1 nup       1352 -.32284024	 .001086099
NUE		  -1 up        1102 .461651543	 .001070779
NUE		   1 nup       1645  -.3077386	 .001598863
NUE		   1 up        1212 .394158416	 -.00147893
NUE		   1		  1			  0

Elapsed: 00:00:00.01
12:59:53 SQL> 
12:59:53 SQL> SELECT
12:59:53   2  tkr
12:59:53   3  ,COUNT(tkr)
12:59:53   4  ,MIN(ydate),MAX(ydate)
12:59:53   5  FROM stk_ms_svmd_svmspy
12:59:53   6  GROUP BY tkr
12:59:53   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
NUE		5312 1990-01-02 00:00:00 2011-01-26 00:00:00

Elapsed: 00:00:00.01
12:59:53 SQL> 
12:59:53 SQL> -- exit
12:59:53 SQL> 
12:59:53 SQL> 
12:59:53 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.09
12:59:53 SQL> 
12:59:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
12:59:53 SQL> 
12:59:53 SQL> CREATE TABLE stk_ms_u COMPRESS AS
12:59:53   2  SELECT * FROM stk_ms_svmspy
12:59:53   3  UNION
12:59:53   4  SELECT * FROM stk_ms_svmd_svmspy
12:59:53   5  /

Table created.

Elapsed: 00:00:00.16
12:59:53 SQL> 
12:59:53 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
