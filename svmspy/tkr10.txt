
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 15:40:57 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:40:57 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:40:57 SQL> 15:40:57 SQL> --
15:40:57 SQL> -- stk10.sql
15:40:57 SQL> --
15:40:57 SQL> 
15:40:57 SQL> -- Creates views and tables for demonstrating SVM.
15:40:57 SQL> 
15:40:57 SQL> CREATE OR REPLACE VIEW stk10 AS
15:40:57   2  SELECT
15:40:57   3  tkr
15:40:57   4  ,ydate
15:40:57   5  ,tkr||ydate tkrdate
15:40:57   6  ,clse
15:40:57   7  ,rownum rnum -- acts as t in my time-series
15:40:57   8  -- Derive some attributes from clse.
15:40:57   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
15:40:57  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
15:40:57  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:40:57  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
15:40:57  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:40:57  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
15:40:57  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:40:57  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
15:40:57  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
15:40:57  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:40:57  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
15:40:57  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:40:57  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
15:40:57  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:40:57  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
15:40:57  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
15:40:57  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:40:57  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
15:40:57  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:40:57  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
15:40:57  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:40:57  30  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
15:40:57  31  -- FROM dukas5min_stk WHERE UPPER(tkr)='&1'
15:40:57  32  FROM di5min_stk WHERE UPPER(tkr)='&1'
15:40:57  33  ORDER BY ydate
15:40:57  34  /
old  31: -- FROM dukas5min_stk WHERE UPPER(tkr)='&1'
new  31: -- FROM dukas5min_stk WHERE UPPER(tkr)='SPY'
old  32: FROM di5min_stk WHERE UPPER(tkr)='&1'
new  32: FROM di5min_stk WHERE UPPER(tkr)='SPY'

View created.

Elapsed: 00:00:00.04
15:40:57 SQL> 
15:40:57 SQL> -- rpt
15:40:57 SQL> 
15:40:57 SQL> SELECT
15:40:57   2  tkr
15:40:57   3  ,COUNT(tkr)
15:40:57   4  ,MIN(clse),MAX(clse)
15:40:57   5  ,MIN(avg4),MAX(avg4)
15:40:57   6  ,MIN(ydate),MAX(ydate)
15:40:57   7  FROM stk10
15:40:57   8  GROUP BY tkr
15:40:57   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
SPY	     21138     103.18	  128.04 103.882959  127.88449 2009-10-28 18:10:01 2011-01-06 15:40:00

Elapsed: 00:00:01.65
15:40:59 SQL> 
15:40:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:40:59 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.40
15:40:59 SQL> CREATE TABLE stk12 COMPRESS AS
15:40:59   2  SELECT
15:40:59   3  tkr
15:40:59   4  ,ydate
15:40:59   5  ,tkrdate
15:40:59   6  ,clse
15:40:59   7  ,rnum
15:40:59   8  -- g4 is important. I want to predict g4:
15:40:59   9  ,ld4 - clse g4
15:40:59  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
15:40:59  11  -- I want more attributes from the ones I derived above:
15:40:59  12  -- clse relation to moving-min
15:40:59  13  ,clse-min2  cm2
15:40:59  14  ,clse-min3  cm3
15:40:59  15  ,clse-min4  cm4
15:40:59  16  ,clse-min5  cm5
15:40:59  17  ,clse-min6  cm6
15:40:59  18  ,clse-min7  cm7
15:40:59  19  ,clse-min8  cm8
15:40:59  20  -- clse relation to moving-avg
15:40:59  21  ,clse-avg2  ca2
15:40:59  22  ,clse-avg3  ca3
15:40:59  23  ,clse-avg4  ca4
15:40:59  24  ,clse-avg5  ca5
15:40:59  25  ,clse-avg6  ca6
15:40:59  26  ,clse-avg7  ca7
15:40:59  27  ,clse-avg8  ca8
15:40:59  28  -- clse relation to moving-max
15:40:59  29  ,clse-max2  cx2
15:40:59  30  ,clse-max3  cx3
15:40:59  31  ,clse-max4  cx4
15:40:59  32  ,clse-max5  cx5
15:40:59  33  ,clse-max6  cx6
15:40:59  34  ,clse-max7  cx7
15:40:59  35  ,clse-max8  cx8
15:40:59  36  -- Derive date related attributes:
15:40:59  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:40:59  38  ,0+TO_CHAR(ydate,'D')d
15:40:59  39  ,0+TO_CHAR(ydate,'W')w
15:40:59  40  -- mpm stands for minutes-past-midnight:
15:40:59  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:40:59  42  -- mph stands for minutes-past-hour:
15:40:59  43  ,0+TO_CHAR(ydate,'MI')mph
15:40:59  44  FROM stk10
15:40:59  45  ORDER BY ydate
15:40:59  46  /

Table created.

Elapsed: 00:00:03.05
15:41:02 SQL> 
15:41:02 SQL> -- rpt
15:41:02 SQL> 
15:41:02 SQL> SELECT
15:41:02   2  tkr
15:41:02   3  ,COUNT(tkr)
15:41:02   4  ,MIN(clse),MAX(clse)
15:41:02   5  ,MIN(ydate),MAX(ydate)
15:41:02   6  FROM stk12
15:41:02   7  GROUP BY tkr
15:41:02   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
SPY	     21138     103.18	  128.04 2009-10-28 18:10:01 2011-01-06 15:40:00

Elapsed: 00:00:00.04
15:41:02 SQL> 
15:41:02 SQL> -- Prepare for derivation of NTILE based parameters.
15:41:02 SQL> -- Also derive the "trend" parameter:
15:41:02 SQL> 
15:41:02 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.51
15:41:03 SQL> CREATE TABLE stk14 COMPRESS AS
15:41:03   2  SELECT
15:41:03   3  tkr
15:41:03   4  ,ydate
15:41:03   5  ,tkrdate
15:41:03   6  ,clse
15:41:03   7  ,g4
15:41:03   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.30/120 THEN 'up' ELSE 'nup' END gatt
15:41:03   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.30/120 THEN 'up' ELSE 'nup' END gattn
15:41:03  10  ,CASE WHEN trend IS NULL THEN 1
15:41:03  11  	    WHEN trend =0      THEN 1
15:41:03  12  	    ELSE trend END trend
15:41:03  13  ,cm2
15:41:03  14  ,cm3
15:41:03  15  ,cm4
15:41:03  16  ,cm5
15:41:03  17  ,cm6
15:41:03  18  ,cm7
15:41:03  19  ,cm8
15:41:03  20  ,ca2
15:41:03  21  ,ca3
15:41:03  22  ,ca4
15:41:03  23  ,ca5
15:41:03  24  ,ca6
15:41:03  25  ,ca7
15:41:03  26  ,ca8
15:41:03  27  ,cx2
15:41:03  28  ,cx3
15:41:03  29  ,cx4
15:41:03  30  ,cx5
15:41:03  31  ,cx6
15:41:03  32  ,cx7
15:41:03  33  ,cx8
15:41:03  34  ,hh
15:41:03  35  ,d
15:41:03  36  ,w
15:41:03  37  ,mpm
15:41:03  38  ,mph
15:41:03  39  FROM stk12
15:41:03  40  -- Guard against divide by 0:
15:41:03  41  WHERE clse > 0
15:41:03  42  ORDER BY ydate
15:41:03  43  /

Table created.

Elapsed: 00:00:00.62
15:41:03 SQL> 
15:41:03 SQL> -- rpt
15:41:03 SQL> 
15:41:03 SQL> SELECT
15:41:03   2  tkr
15:41:03   3  ,trend
15:41:03   4  ,gatt
15:41:03   5  ,COUNT(tkr)
15:41:03   6  ,AVG(g4)
15:41:03   7  FROM stk14
15:41:03   8  GROUP BY tkr,trend,gatt
15:41:03   9  ORDER BY tkr,trend,gatt
15:41:03  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
SPY		-1 nup	     5419 -.40605877
SPY		-1 up	     3649 .920347355
SPY		-1	       19
SPY		 1 nup	     8331 -.34151422
SPY		 1 up	     3691 .750724736
SPY		 1	       29

6 rows selected.

Elapsed: 00:00:00.04
15:41:03 SQL> 
15:41:03 SQL> -- Derive NTILE based params:
15:41:03 SQL> 
15:41:03 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.04
15:41:03 SQL> CREATE TABLE stk16 COMPRESS AS
15:41:03   2  SELECT
15:41:03   3  tkr
15:41:03   4  ,ydate
15:41:03   5  ,tkrdate
15:41:03   6  ,clse
15:41:03   7  ,g4
15:41:03   8  ,gatt
15:41:03   9  ,gattn
15:41:03  10  ,trend
15:41:03  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
15:41:03  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
15:41:03  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
15:41:03  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
15:41:03  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
15:41:03  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
15:41:03  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
15:41:03  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
15:41:03  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
15:41:03  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
15:41:03  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
15:41:03  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
15:41:03  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
15:41:03  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
15:41:03  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
15:41:03  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
15:41:03  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
15:41:03  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
15:41:03  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
15:41:03  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
15:41:03  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
15:41:03  32  ,hh  att21
15:41:03  33  ,d   att22
15:41:03  34  ,w   att23
15:41:03  35  ,mpm att24
15:41:03  36  ,mph att25
15:41:03  37  ,trend att26
15:41:03  38  FROM stk14
15:41:03  39  ORDER BY ydate
15:41:03  40  /

Table created.

Elapsed: 00:00:05.58
15:41:09 SQL> 
15:41:09 SQL> -- rpt
15:41:09 SQL> 
15:41:09 SQL> SELECT
15:41:09   2  tkr
15:41:09   3  ,trend
15:41:09   4  ,gatt
15:41:09   5  ,COUNT(tkr)
15:41:09   6  ,AVG(g4)
15:41:09   7  FROM stk16
15:41:09   8  GROUP BY tkr,trend,gatt
15:41:09   9  ORDER BY tkr,trend,gatt
15:41:09  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
SPY		-1 nup	     5419 -.40605877
SPY		-1 up	     3649 .920347355
SPY		-1	       19
SPY		 1 nup	     8331 -.34151422
SPY		 1 up	     3691 .750724736
SPY		 1	       29

6 rows selected.

Elapsed: 00:00:00.04
15:41:09 SQL> 
15:41:09 SQL> -- Now I derive goodness attributes:
15:41:09 SQL> 
15:41:09 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.04
15:41:09 SQL> CREATE TABLE stk_ms COMPRESS AS
15:41:09   2  SELECT
15:41:09   3  tkr
15:41:09   4  ,ydate
15:41:09   5  ,tkrdate
15:41:09   6  ,trend
15:41:09   7  ,g4
15:41:09   8  ,gatt
15:41:09   9  ,gattn
15:41:09  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
15:41:09  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
15:41:09  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
15:41:09  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
15:41:09  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
15:41:09  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
15:41:09  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
15:41:09  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
15:41:09  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
15:41:09  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
15:41:09  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
15:41:09  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
15:41:09  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
15:41:09  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
15:41:09  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
15:41:09  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
15:41:09  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
15:41:09  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
15:41:09  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
15:41:09  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
15:41:09  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
15:41:09  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
15:41:09  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
15:41:09  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
15:41:09  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
15:41:09  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
15:41:09  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
15:41:09  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
15:41:09  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
15:41:09  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
15:41:09  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
15:41:09  41  FROM stk16
15:41:09  42  /

Table created.

Elapsed: 00:00:08.07
15:41:17 SQL> 
15:41:17 SQL> -- rpt
15:41:17 SQL> 
15:41:17 SQL> SELECT
15:41:17   2  tkr
15:41:17   3  ,trend
15:41:17   4  ,gatt
15:41:17   5  ,COUNT(tkr)
15:41:17   6  ,AVG(g4)
15:41:17   7  FROM stk_ms
15:41:17   8  GROUP BY tkr,trend,gatt
15:41:17   9  ORDER BY tkr,trend,gatt
15:41:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
SPY		-1 nup	     5419 -.40605877
SPY		-1 up	     3649 .920347355
SPY		-1	       19
SPY		 1 nup	     8331 -.34151422
SPY		 1 up	     3691 .750724736
SPY		 1	       29

6 rows selected.

Elapsed: 00:00:00.04
15:41:17 SQL> 
15:41:17 SQL> SELECT
15:41:17   2  tkr
15:41:17   3  ,COUNT(tkr)
15:41:17   4  ,MIN(ydate),MAX(ydate)
15:41:17   5  FROM stk_ms
15:41:17   6  GROUP BY tkr
15:41:17   7  /

TKR	COUNT(TKR) MIN(YDATE)	       MAX(YDATE)
------- ---------- ------------------- -------------------
SPY	     21138 2009-10-28 18:10:01 2011-01-06 15:40:00

Elapsed: 00:00:00.03
15:41:17 SQL> 
15:41:17 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
