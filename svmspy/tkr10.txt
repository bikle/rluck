
SQL*Plus: Release 11.2.0.1.0 Production on Mon May 2 15:20:56 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:20:57 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:20:57 SQL> 
15:20:57 SQL> 15:20:57 SQL> --
15:20:57 SQL> -- stk10u.sql
15:20:57 SQL> --
15:20:57 SQL> 
15:20:57 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
15:20:57 SQL> 
15:20:57 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
15:20:57 SQL> @stk10.sql     '&1'
15:20:57 SQL> --
15:20:57 SQL> -- stk10.sql
15:20:57 SQL> --
15:20:57 SQL> 
15:20:57 SQL> -- Creates views and tables for demonstrating SVM.
15:20:57 SQL> 
15:20:57 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.86
15:20:58 SQL> 
15:20:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.23
15:20:58 SQL> 
15:20:58 SQL> CREATE TABLE stk10svmspy COMPRESS AS
15:20:58   2  SELECT
15:20:58   3  tkr
15:20:58   4  ,ydate
15:20:58   5  ,tkr||ydate tkrdate
15:20:58   6  ,clse
15:20:58   7  ,clse2
15:20:58   8  ,rownum rnum -- acts as t in my time-series
15:20:58   9  -- g1 is important. I want to predict g1:
15:20:58  10  ,gain1day g1
15:20:58  11  -- Derive some attributes from clse.
15:20:58  12  -- Each row spans 5 minutes.
15:20:58  13  -- The number of rows in 1 day is 24*60/5.
15:20:58  14  -- I want the aggregations to span from 3 days to 9 days:
15:20:58  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
15:20:58  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
15:20:58  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
15:20:58  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
15:20:58  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
15:20:58  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
15:20:58  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
15:20:58  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
15:20:58  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
15:20:58  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
15:20:58  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
15:20:58  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
15:20:58  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
15:20:58  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
15:20:58  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
15:20:58  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
15:20:58  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
15:20:58  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
15:20:58  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
15:20:58  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
15:20:58  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
15:20:58  36  FROM di5min_stk_c2
15:20:58  37  WHERE UPPER(tkr)='&1'
15:20:58  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
15:20:58  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
15:20:58  40  ORDER BY ydate
15:20:58  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='BP'

Table created.

Elapsed: 00:00:02.63
15:21:01 SQL> 
15:21:01 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
15:21:01 SQL> 
15:21:01 SQL> -- rpt
15:21:01 SQL> 
15:21:01 SQL> SELECT
15:21:01   2  tkr
15:21:01   3  ,COUNT(tkr)ccount
15:21:01   4  ,MIN(clse)mnclse,MAX(clse)mxclse
15:21:01   5  -- ,MIN(avg4),MAX(avg4)
15:21:01   6  ,MIN(ydate),MAX(ydate)
15:21:01   7  ,MIN(g1)
15:21:01   8  ,MAX(g1)
15:21:01   9  FROM stk10svmspy
15:21:01  10  GROUP BY tkr
15:21:01  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
BP	      6006	42.55	   49.38 2011-01-04 14:30:00 2011-04-29 19:55:00      -2.75	  1.83

Elapsed: 00:00:00.04
15:21:01 SQL> 
15:21:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:21:01 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.20
15:21:01 SQL> CREATE TABLE stk12svmspy COMPRESS AS
15:21:01   2  SELECT
15:21:01   3  tkr
15:21:01   4  ,ydate
15:21:01   5  ,tkrdate
15:21:01   6  ,clse
15:21:01   7  ,rnum
15:21:01   8  ,g1
15:21:01   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
15:21:01  10  -- I want more attributes from the ones I derived above:
15:21:01  11  -- clse relation to moving-min
15:21:01  12  ,clse-min3  cm3
15:21:01  13  ,clse-min4  cm4
15:21:01  14  ,clse-min5  cm5
15:21:01  15  ,clse-min6  cm6
15:21:01  16  ,clse-min7  cm7
15:21:01  17  ,clse-min8  cm8
15:21:01  18  ,clse-min9  cm9
15:21:01  19  -- clse relation to moving-avg
15:21:01  20  ,clse-avg3  ca3
15:21:01  21  ,clse-avg4  ca4
15:21:01  22  ,clse-avg5  ca5
15:21:01  23  ,clse-avg6  ca6
15:21:01  24  ,clse-avg7  ca7
15:21:01  25  ,clse-avg8  ca8
15:21:01  26  ,clse-avg9  ca9
15:21:01  27  -- clse relation to moving-max
15:21:01  28  ,clse-max3  cx3
15:21:01  29  ,clse-max4  cx4
15:21:01  30  ,clse-max5  cx5
15:21:01  31  ,clse-max6  cx6
15:21:01  32  ,clse-max7  cx7
15:21:01  33  ,clse-max8  cx8
15:21:01  34  ,clse-max9  cx9
15:21:01  35  -- Derive date related attributes:
15:21:01  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:21:01  37  ,0+TO_CHAR(ydate,'D')d
15:21:01  38  ,0+TO_CHAR(ydate,'W')w
15:21:01  39  -- mpm stands for minutes-past-midnight:
15:21:01  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:21:01  41  -- mph stands for minutes-past-hour:
15:21:01  42  ,0+TO_CHAR(ydate,'MI')mph
15:21:01  43  FROM stk10svmspy
15:21:01  44  ORDER BY ydate
15:21:01  45  /

Table created.

Elapsed: 00:00:00.21
15:21:01 SQL> 
15:21:01 SQL> -- rpt
15:21:01 SQL> 
15:21:01 SQL> SELECT
15:21:01   2  tkr
15:21:01   3  ,COUNT(tkr)ccount
15:21:01   4  ,MIN(clse)mnclse,MAX(clse)mxclse
15:21:01   5  -- ,MIN(avg4),MAX(avg4)
15:21:01   6  ,MIN(ydate),MAX(ydate)
15:21:01   7  ,MIN(g1)
15:21:01   8  ,AVG(g1)
15:21:01   9  ,MAX(g1)
15:21:01  10  FROM stk12svmspy
15:21:01  11  GROUP BY tkr
15:21:01  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
BP	      6006	42.55	   49.38 2011-01-04 14:30:00 2011-04-29 19:55:00      -2.75 -.01698093	     1.83

Elapsed: 00:00:00.03
15:21:01 SQL> 
15:21:01 SQL> -- Prepare for derivation of NTILE based parameters.
15:21:01 SQL> -- Also derive the "trend" parameter:
15:21:01 SQL> 
15:21:01 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.07
15:21:01 SQL> CREATE TABLE stk14svmspy COMPRESS AS
15:21:01   2  SELECT
15:21:01   3  tkr
15:21:01   4  ,ydate
15:21:01   5  ,tkrdate
15:21:01   6  ,clse
15:21:01   7  ,g1
15:21:01   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
15:21:01   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
15:21:01  10  ,CASE WHEN trend IS NULL THEN 1
15:21:01  11  	    WHEN trend =0      THEN 1
15:21:01  12  	    ELSE trend END trend
15:21:01  13  ,cm3
15:21:01  14  ,cm4
15:21:01  15  ,cm5
15:21:01  16  ,cm6
15:21:01  17  ,cm7
15:21:01  18  ,cm8
15:21:01  19  ,cm9
15:21:01  20  ,ca3
15:21:01  21  ,ca4
15:21:01  22  ,ca5
15:21:01  23  ,ca6
15:21:01  24  ,ca7
15:21:01  25  ,ca8
15:21:01  26  ,ca9
15:21:01  27  ,cx3
15:21:01  28  ,cx4
15:21:01  29  ,cx5
15:21:01  30  ,cx6
15:21:01  31  ,cx7
15:21:01  32  ,cx8
15:21:01  33  ,cx9
15:21:01  34  ,hh
15:21:01  35  ,d
15:21:01  36  ,w
15:21:01  37  ,mpm
15:21:01  38  ,mph
15:21:01  39  FROM stk12svmspy
15:21:01  40  -- Guard against divide by 0:
15:21:01  41  WHERE clse > 0
15:21:01  42  ORDER BY ydate
15:21:01  43  /

Table created.

Elapsed: 00:00:00.25
15:21:02 SQL> 
15:21:02 SQL> -- rpt
15:21:02 SQL> 
15:21:02 SQL> SELECT
15:21:02   2  tkr
15:21:02   3  ,trend
15:21:02   4  ,gatt
15:21:02   5  ,COUNT(tkr)
15:21:02   6  ,AVG(g1)
15:21:02   7  FROM stk14svmspy
15:21:02   8  GROUP BY tkr,trend,gatt
15:21:02   9  ORDER BY tkr,trend,gatt
15:21:02  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BP		-1 nup	     1623 -.39280659
BP		-1 up	     1198 .693184532
BP		-1	       90
BP		 1 nup	     1832 -.44101645
BP		 1 up	     1029 .503932459
BP		 1	      234

6 rows selected.

Elapsed: 00:00:00.01
15:21:02 SQL> 
15:21:02 SQL> -- Derive NTILE based params:
15:21:02 SQL> 
15:21:02 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.05
15:21:02 SQL> CREATE TABLE stk16svmspy COMPRESS AS
15:21:02   2  SELECT
15:21:02   3  tkr
15:21:02   4  ,ydate
15:21:02   5  ,tkrdate
15:21:02   6  ,clse
15:21:02   7  ,g1
15:21:02   8  ,gatt
15:21:02   9  ,gattn
15:21:02  10  ,trend
15:21:02  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
15:21:02  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
15:21:02  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
15:21:02  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
15:21:02  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
15:21:02  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
15:21:02  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
15:21:02  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
15:21:02  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
15:21:02  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
15:21:02  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
15:21:02  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
15:21:02  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
15:21:02  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
15:21:02  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
15:21:02  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
15:21:02  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
15:21:02  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
15:21:02  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
15:21:02  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
15:21:02  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
15:21:02  32  ,hh  att21
15:21:02  33  ,d   att22
15:21:02  34  ,w   att23
15:21:02  35  ,mpm att24
15:21:02  36  ,mph att25
15:21:02  37  ,trend att26
15:21:02  38  FROM stk14svmspy
15:21:02  39  ORDER BY ydate
15:21:02  40  /

Table created.

Elapsed: 00:00:00.75
15:21:02 SQL> 
15:21:02 SQL> -- rpt
15:21:02 SQL> 
15:21:02 SQL> SELECT
15:21:02   2  tkr
15:21:02   3  ,trend
15:21:02   4  ,gatt
15:21:02   5  ,COUNT(tkr)
15:21:02   6  ,AVG(g1)
15:21:02   7  FROM stk16svmspy
15:21:02   8  GROUP BY tkr,trend,gatt
15:21:02   9  ORDER BY tkr,trend,gatt
15:21:02  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BP		-1 nup	     1623 -.39280659
BP		-1 up	     1198 .693184532
BP		-1	       90
BP		 1 nup	     1832 -.44101645
BP		 1 up	     1029 .503932459
BP		 1	      234

6 rows selected.

Elapsed: 00:00:00.02
15:21:02 SQL> 
15:21:02 SQL> -- Comment out feedback related syntax:
15:21:02 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
15:21:02 SQL> -- SELECT
15:21:02 SQL> -- m.tkr
15:21:02 SQL> -- ,m.ydate
15:21:02 SQL> -- ,m.tkrdate
15:21:02 SQL> -- ,l.score score_long
15:21:02 SQL> -- ,s.score score_short
15:21:02 SQL> -- ,m.g1
15:21:02 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
15:21:02 SQL> -- WHERE l.targ='gatt'
15:21:02 SQL> -- AND	 s.targ='gattn'
15:21:02 SQL> -- AND l.tkrdate = s.tkrdate
15:21:02 SQL> -- AND l.tkrdate = m.tkrdate
15:21:02 SQL> -- -- Speed things up:
15:21:02 SQL> -- AND l.tkr = '&1'
15:21:02 SQL> -- AND s.tkr = '&1'
15:21:02 SQL> -- /
15:21:02 SQL> --
15:21:02 SQL> -- DROP TABLE score_corr_tkr;
15:21:02 SQL> --
15:21:02 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
15:21:02 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
15:21:02 SQL> -- (
15:21:02 SQL> --   SELECT
15:21:02 SQL> --   tkrdate
15:21:02 SQL> --   -- Find corr() tween score and g1 over 8 day period:
15:21:02 SQL> --   ,CORR((score_long - score_short),g1)
15:21:02 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
15:21:02 SQL> --   FROM sc12tkr
15:21:02 SQL> -- )
15:21:02 SQL> -- GROUP BY tkrdate
15:21:02 SQL> -- /
15:21:02 SQL> 
15:21:02 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
15:21:02 SQL> 
15:21:02 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
15:21:03 SQL> 
15:21:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
15:21:03 SQL> 
15:21:03 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
15:21:03   2  SELECT
15:21:03   3  tkr
15:21:03   4  ,ydate
15:21:03   5  ,tkrdate
15:21:03   6  ,trend
15:21:03   7  ,g1
15:21:03   8  ,gatt
15:21:03   9  ,gattn
15:21:03  10  -- Goodness attributes:
15:21:03  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
15:21:03  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
15:21:03  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
15:21:03  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
15:21:03  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
15:21:03  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
15:21:03  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
15:21:03  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
15:21:03  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
15:21:03  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
15:21:03  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
15:21:03  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
15:21:03  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
15:21:03  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
15:21:03  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
15:21:03  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
15:21:03  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
15:21:03  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
15:21:03  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
15:21:03  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
15:21:03  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
15:21:03  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
15:21:03  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
15:21:03  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
15:21:03  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
15:21:03  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
15:21:03  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
15:21:03  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
15:21:03  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
15:21:03  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
15:21:03  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
15:21:03  42  FROM stk16svmspy
15:21:03  43  /

Table created.

Elapsed: 00:00:01.05
15:21:04 SQL> 
15:21:04 SQL> -- rpt
15:21:04 SQL> 
15:21:04 SQL> SELECT
15:21:04   2  tkr
15:21:04   3  ,trend
15:21:04   4  ,gatt
15:21:04   5  ,COUNT(tkr)
15:21:04   6  ,AVG(g1)
15:21:04   7  FROM stk_ms_svmspy
15:21:04   8  GROUP BY tkr,trend,gatt
15:21:04   9  ORDER BY tkr,trend,gatt
15:21:04  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
BP		-1 nup	     1623 -.39280659
BP		-1 up	     1198 .693184532
BP		-1	       90
BP		 1 nup	     1832 -.44101645
BP		 1 up	     1029 .503932459
BP		 1	      234

6 rows selected.

Elapsed: 00:00:00.01
15:21:04 SQL> 
15:21:04 SQL> SELECT
15:21:04   2  tkr
15:21:04   3  ,0+TO_CHAR(ydate,'D')daynum
15:21:04   4  ,COUNT(tkr)
15:21:04   5  ,MIN(ydate),MAX(ydate)
15:21:04   6  FROM stk_ms_svmspy
15:21:04   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
15:21:04   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
15:21:04   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
BP		 2	 1092 2011-01-10 14:30:00 2011-04-25 19:55:00
BP		 3	 1248 2011-01-04 14:30:00 2011-04-26 19:55:00
BP		 4	 1248 2011-01-05 14:30:00 2011-04-27 19:55:00
BP		 5	 1248 2011-01-06 14:30:00 2011-04-28 19:55:00
BP		 6	 1170 2011-01-07 14:30:00 2011-04-29 19:55:00

Elapsed: 00:00:00.02
15:21:04 SQL> 
15:21:04 SQL> -- exit
15:21:04 SQL> @stk10svmd.sql '&1'
15:21:04 SQL> --
15:21:04 SQL> -- stk10svmd.sql
15:21:04 SQL> --
15:21:04 SQL> 
15:21:04 SQL> -- Creates views and tables for demonstrating SVM.
15:21:04 SQL> -- I need to run this after I run stk10.sql
15:21:04 SQL> 
15:21:04 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.19
15:21:04 SQL> 
15:21:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
15:21:04 SQL> 
15:21:04 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
15:21:04   2  SELECT
15:21:04   3  tkr
15:21:04   4  ,ydate
15:21:04   5  ,tkr||ydate tkrdate
15:21:04   6  ,clse
15:21:04   7  ,rownum rnum -- acts as t in my time-series
15:21:04   8  -- Derive some attributes from clse.
15:21:04   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
15:21:04  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
15:21:04  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
15:21:04  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
15:21:04  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
15:21:04  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
15:21:04  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
15:21:04  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
15:21:04  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
15:21:04  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
15:21:04  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
15:21:04  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
15:21:04  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
15:21:04  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
15:21:04  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
15:21:04  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
15:21:04  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
15:21:04  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
15:21:04  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
15:21:04  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
15:21:04  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
15:21:04  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
15:21:04  31  -- ystk21 created here: svmd/cr_ystk21.sql
15:21:04  32  FROM ystk21
15:21:04  33  WHERE UPPER(tkr)='&1'
15:21:04  34  AND ydate > '1990-01-01'
15:21:04  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
15:21:04  36  ORDER BY ydate
15:21:04  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='BP'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='BP')

Table created.

Elapsed: 00:00:02.67
15:21:07 SQL> 
15:21:07 SQL> -- rpt
15:21:07 SQL> 
15:21:07 SQL> SELECT
15:21:07   2  tkr
15:21:07   3  ,COUNT(tkr)
15:21:07   4  ,MIN(clse),MAX(clse)
15:21:07   5  ,MIN(avg4),MAX(avg4)
15:21:07   6  ,MIN(ydate),MAX(ydate)
15:21:07   7  FROM stk_svmd10svmspy
15:21:07   8  GROUP BY tkr
15:21:07   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
BP		5334	  27.02      146.5     27.872	 144.702 1990-01-02 20:00:00 2011-04-29 20:00:00

Elapsed: 00:00:00.02
15:21:07 SQL> 
15:21:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:21:07 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:02.55
15:21:09 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
15:21:09   2  SELECT
15:21:09   3  tkr
15:21:09   4  ,ydate
15:21:09   5  ,tkrdate
15:21:09   6  ,clse
15:21:09   7  ,rnum
15:21:09   8  -- g1 is important. I want to predict g1:
15:21:09   9  ,ld - clse g1
15:21:09  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
15:21:09  11  -- I want more attributes from the ones I derived above:
15:21:09  12  -- clse relation to moving-min
15:21:09  13  ,clse-min3  cm3
15:21:09  14  ,clse-min4  cm4
15:21:09  15  ,clse-min5  cm5
15:21:09  16  ,clse-min6  cm6
15:21:09  17  ,clse-min7  cm7
15:21:09  18  ,clse-min8  cm8
15:21:09  19  ,clse-min9  cm9
15:21:09  20  -- clse relation to moving-avg
15:21:09  21  ,clse-avg3  ca3
15:21:09  22  ,clse-avg4  ca4
15:21:09  23  ,clse-avg5  ca5
15:21:09  24  ,clse-avg6  ca6
15:21:09  25  ,clse-avg7  ca7
15:21:09  26  ,clse-avg8  ca8
15:21:09  27  ,clse-avg9  ca9
15:21:09  28  -- clse relation to moving-max
15:21:09  29  ,clse-max3  cx3
15:21:09  30  ,clse-max4  cx4
15:21:09  31  ,clse-max5  cx5
15:21:09  32  ,clse-max6  cx6
15:21:09  33  ,clse-max7  cx7
15:21:09  34  ,clse-max8  cx8
15:21:09  35  ,clse-max9  cx9
15:21:09  36  -- Derive date related attributes:
15:21:09  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:21:09  38  ,0+TO_CHAR(ydate,'D')d
15:21:09  39  ,0+TO_CHAR(ydate,'W')w
15:21:09  40  -- mpm stands for minutes-past-midnight:
15:21:09  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:21:09  42  -- mph stands for minutes-past-hour:
15:21:09  43  ,0+TO_CHAR(ydate,'MI')mph
15:21:09  44  FROM stk_svmd10svmspy
15:21:09  45  ORDER BY ydate
15:21:09  46  /

Table created.

Elapsed: 00:00:00.28
15:21:10 SQL> 
15:21:10 SQL> -- rpt
15:21:10 SQL> 
15:21:10 SQL> SELECT
15:21:10   2  tkr
15:21:10   3  ,COUNT(tkr)
15:21:10   4  ,MIN(clse),MAX(clse)
15:21:10   5  ,MIN(ydate),MAX(ydate)
15:21:10   6  FROM stk_svmd12
15:21:10   7  GROUP BY tkr
15:21:10   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
BP		5334	  27.02      146.5 1990-01-02 20:00:00 2011-04-29 20:00:00

Elapsed: 00:00:00.01
15:21:10 SQL> 
15:21:10 SQL> -- Prepare for derivation of NTILE based parameters.
15:21:10 SQL> -- Also derive the "trend" parameter:
15:21:10 SQL> 
15:21:10 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.27
15:21:10 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
15:21:10   2  SELECT
15:21:10   3  tkr
15:21:10   4  ,ydate
15:21:10   5  ,tkrdate
15:21:10   6  ,clse
15:21:10   7  ,g1
15:21:10   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
15:21:10   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
15:21:10  10  ,CASE WHEN trend IS NULL THEN 1
15:21:10  11  	    WHEN trend =0      THEN 1
15:21:10  12  	    ELSE trend END trend
15:21:10  13  ,cm3
15:21:10  14  ,cm4
15:21:10  15  ,cm5
15:21:10  16  ,cm6
15:21:10  17  ,cm7
15:21:10  18  ,cm8
15:21:10  19  ,cm9
15:21:10  20  ,ca3
15:21:10  21  ,ca4
15:21:10  22  ,ca5
15:21:10  23  ,ca6
15:21:10  24  ,ca7
15:21:10  25  ,ca8
15:21:10  26  ,ca9
15:21:10  27  ,cx3
15:21:10  28  ,cx4
15:21:10  29  ,cx5
15:21:10  30  ,cx6
15:21:10  31  ,cx7
15:21:10  32  ,cx8
15:21:10  33  ,cx9
15:21:10  34  ,hh
15:21:10  35  ,d
15:21:10  36  ,w
15:21:10  37  ,mpm
15:21:10  38  ,mph
15:21:10  39  FROM stk_svmd12
15:21:10  40  -- Guard against divide by 0:
15:21:10  41  WHERE clse > 0
15:21:10  42  ORDER BY ydate
15:21:10  43  /

Table created.

Elapsed: 00:00:00.11
15:21:10 SQL> 
15:21:10 SQL> -- rpt
15:21:10 SQL> 
15:21:10 SQL> SELECT
15:21:10   2  tkr
15:21:10   3  ,trend
15:21:10   4  ,gatt
15:21:10   5  ,COUNT(tkr)
15:21:10   6  ,AVG(g1)
15:21:10   7  FROM stk_svmd14
15:21:10   8  GROUP BY tkr,trend,gatt
15:21:10   9  ORDER BY tkr,trend,gatt
15:21:10  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BP		  -1 nup       1433 -.68672715
BP		  -1 up        1073 .941248835
BP		   1 nup       1681 -.64296847
BP		   1 up        1146 .903769634
BP		   1		  1

Elapsed: 00:00:00.01
15:21:10 SQL> 
15:21:10 SQL> -- Derive NTILE based params:
15:21:10 SQL> 
15:21:10 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.08
15:21:10 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
15:21:10   2  SELECT
15:21:10   3  tkr
15:21:10   4  ,ydate
15:21:10   5  ,tkrdate
15:21:10   6  ,clse
15:21:10   7  ,g1
15:21:10   8  ,gatt
15:21:10   9  ,gattn
15:21:10  10  ,trend
15:21:10  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
15:21:10  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
15:21:10  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
15:21:10  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
15:21:10  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
15:21:10  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
15:21:10  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
15:21:10  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
15:21:10  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
15:21:10  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
15:21:10  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
15:21:10  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
15:21:10  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
15:21:10  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
15:21:10  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
15:21:10  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
15:21:10  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
15:21:10  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
15:21:10  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
15:21:10  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
15:21:10  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
15:21:10  32  ,hh  att21
15:21:10  33  ,d   att22
15:21:10  34  ,w   att23
15:21:10  35  ,mpm att24
15:21:10  36  ,mph att25
15:21:10  37  ,trend att26
15:21:10  38  FROM stk_svmd14
15:21:10  39  ORDER BY ydate
15:21:10  40  /

Table created.

Elapsed: 00:00:00.59
15:21:11 SQL> 
15:21:11 SQL> -- rpt
15:21:11 SQL> 
15:21:11 SQL> SELECT
15:21:11   2  tkr
15:21:11   3  ,trend
15:21:11   4  ,gatt
15:21:11   5  ,COUNT(tkr)
15:21:11   6  ,AVG(g1)
15:21:11   7  FROM stk_svmd16
15:21:11   8  GROUP BY tkr,trend,gatt
15:21:11   9  ORDER BY tkr,trend,gatt
15:21:11  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BP		  -1 nup       1433 -.68672715
BP		  -1 up        1073 .941248835
BP		   1 nup       1681 -.64296847
BP		   1 up        1146 .903769634
BP		   1		  1

Elapsed: 00:00:00.01
15:21:11 SQL> 
15:21:11 SQL> -- Comment out feedback related syntax:
15:21:11 SQL> 
15:21:11 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
15:21:11 SQL> -- SELECT
15:21:11 SQL> -- m.tkr
15:21:11 SQL> -- ,m.ydate
15:21:11 SQL> -- ,m.tkrdate
15:21:11 SQL> -- ,l.score score_long
15:21:11 SQL> -- ,s.score score_short
15:21:11 SQL> -- ,m.g1
15:21:11 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
15:21:11 SQL> -- WHERE l.targ='gatt'
15:21:11 SQL> -- AND	 s.targ='gattn'
15:21:11 SQL> -- AND l.tkrdate = s.tkrdate
15:21:11 SQL> -- AND l.tkrdate = m.tkrdate
15:21:11 SQL> -- -- Speed things up:
15:21:11 SQL> -- AND l.tkr = '&1'
15:21:11 SQL> -- AND s.tkr = '&1'
15:21:11 SQL> -- /
15:21:11 SQL> --
15:21:11 SQL> -- DROP TABLE score_corr_tkr;
15:21:11 SQL> --
15:21:11 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
15:21:11 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
15:21:11 SQL> -- (
15:21:11 SQL> --   SELECT
15:21:11 SQL> --   tkrdate
15:21:11 SQL> --   -- Find corr() tween score and g1 over 8 day period:
15:21:11 SQL> --   ,CORR((score_long - score_short),g1)
15:21:11 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
15:21:11 SQL> --   FROM sc12tkr
15:21:11 SQL> -- )
15:21:11 SQL> -- GROUP BY tkrdate
15:21:11 SQL> -- /
15:21:11 SQL> 
15:21:11 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
15:21:11 SQL> 
15:21:11 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.05
15:21:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
15:21:11 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
15:21:11   2  SELECT
15:21:11   3  tkr
15:21:11   4  ,ydate
15:21:11   5  ,tkrdate
15:21:11   6  ,trend
15:21:11   7  ,g1
15:21:11   8  ,gatt
15:21:11   9  ,gattn
15:21:11  10  -- Goodness attributes:
15:21:11  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
15:21:11  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
15:21:11  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
15:21:11  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
15:21:11  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
15:21:11  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
15:21:11  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
15:21:11  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
15:21:11  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
15:21:11  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
15:21:11  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
15:21:11  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
15:21:11  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
15:21:11  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
15:21:11  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
15:21:11  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
15:21:11  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
15:21:11  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
15:21:11  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
15:21:11  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
15:21:11  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
15:21:11  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
15:21:11  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
15:21:11  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
15:21:11  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
15:21:11  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
15:21:11  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
15:21:11  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
15:21:11  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
15:21:11  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
15:21:11  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
15:21:11  42  FROM stk_svmd16
15:21:11  43  /

Table created.

Elapsed: 00:00:00.96
15:21:12 SQL> 
15:21:12 SQL> -- rpt
15:21:12 SQL> 
15:21:12 SQL> SELECT
15:21:12   2  tkr
15:21:12   3  ,trend
15:21:12   4  ,gatt
15:21:12   5  ,COUNT(tkr)
15:21:12   6  ,AVG(g1)
15:21:12   7  FROM stk_ms_svmd_svmspy
15:21:12   8  GROUP BY tkr,trend,gatt
15:21:12   9  ORDER BY tkr,trend,gatt
15:21:12  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
BP		  -1 nup       1433 -.68672715
BP		  -1 up        1073 .941248835
BP		   1 nup       1681 -.64296847
BP		   1 up        1146 .903769634
BP		   1		  1

Elapsed: 00:00:00.01
15:21:12 SQL> 
15:21:12 SQL> SELECT
15:21:12   2  tkr
15:21:12   3  ,COUNT(tkr)
15:21:12   4  ,MIN(ydate),MAX(ydate)
15:21:12   5  FROM stk_ms_svmd_svmspy
15:21:12   6  GROUP BY tkr
15:21:12   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
BP		5334 1990-01-02 20:00:00 2011-04-29 20:00:00

Elapsed: 00:00:00.01
15:21:12 SQL> 
15:21:12 SQL> -- exit
15:21:12 SQL> 
15:21:12 SQL> 
15:21:12 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.08
15:21:12 SQL> 
15:21:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.19
15:21:13 SQL> 
15:21:13 SQL> CREATE TABLE stk_ms_u COMPRESS AS
15:21:13   2  SELECT * FROM stk_ms_svmspy
15:21:13   3  UNION
15:21:13   4  SELECT * FROM stk_ms_svmd_svmspy
15:21:13   5  /

Table created.

Elapsed: 00:00:00.26
15:21:13 SQL> 
15:21:13 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
