
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 2 09:17:36 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:17:36 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:17:36 SQL> 09:17:36 SQL> --
09:17:36 SQL> -- stk10.sql
09:17:36 SQL> --
09:17:36 SQL> 
09:17:36 SQL> -- Creates views and tables for demonstrating SVM.
09:17:36 SQL> 
09:17:36 SQL> CREATE OR REPLACE VIEW stk10 AS
09:17:36   2  SELECT
09:17:36   3  tkr
09:17:36   4  ,ydate
09:17:36   5  ,tkr||ydate tkrdate
09:17:36   6  ,clse
09:17:36   7  ,rownum rnum -- acts as t in my time-series
09:17:36   8  -- Derive some attributes from clse.
09:17:36   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
09:17:36  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
09:17:36  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:17:36  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
09:17:36  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:17:36  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
09:17:36  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:17:36  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
09:17:36  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
09:17:36  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:17:36  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
09:17:36  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:17:36  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
09:17:36  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:17:36  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
09:17:36  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
09:17:36  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:17:36  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
09:17:36  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:17:36  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
09:17:36  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:17:36  30  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
09:17:36  31  FROM dukas5min_stk WHERE UPPER(tkr)='&1'
09:17:36  32  ORDER BY ydate
09:17:36  33  /
old  31: FROM dukas5min_stk WHERE UPPER(tkr)='&1'
new  31: FROM dukas5min_stk WHERE UPPER(tkr)='SPY'

View created.

Elapsed: 00:00:00.07
09:17:36 SQL> 
09:17:36 SQL> -- rpt
09:17:36 SQL> 
09:17:36 SQL> SELECT
09:17:36   2  tkr
09:17:36   3  ,COUNT(tkr)
09:17:36   4  ,MIN(clse),MAX(clse)
09:17:36   5  ,MIN(avg4),MAX(avg4)
09:17:36   6  ,MIN(ydate),MAX(ydate)
09:17:36   7  FROM stk10
09:17:36   8  GROUP BY tkr
09:17:36   9  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
-------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
SPY	      19911	103.18	    126.2 103.882959 126.128776 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.55
09:17:37 SQL> 
09:17:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:17:37 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.09
09:17:37 SQL> CREATE TABLE stk12 COMPRESS AS
09:17:37   2  SELECT
09:17:37   3  tkr
09:17:37   4  ,ydate
09:17:37   5  ,tkrdate
09:17:37   6  ,clse
09:17:37   7  ,rnum
09:17:37   8  -- g4 is important. I want to predict g4:
09:17:37   9  ,ld4 - clse g4
09:17:37  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
09:17:37  11  -- I want more attributes from the ones I derived above:
09:17:37  12  -- clse relation to moving-min
09:17:37  13  ,clse-min2  cm2
09:17:37  14  ,clse-min3  cm3
09:17:37  15  ,clse-min4  cm4
09:17:37  16  ,clse-min5  cm5
09:17:37  17  ,clse-min6  cm6
09:17:37  18  ,clse-min7  cm7
09:17:37  19  ,clse-min8  cm8
09:17:37  20  -- clse relation to moving-avg
09:17:37  21  ,clse-avg2  ca2
09:17:37  22  ,clse-avg3  ca3
09:17:37  23  ,clse-avg4  ca4
09:17:37  24  ,clse-avg5  ca5
09:17:37  25  ,clse-avg6  ca6
09:17:37  26  ,clse-avg7  ca7
09:17:37  27  ,clse-avg8  ca8
09:17:37  28  -- clse relation to moving-max
09:17:37  29  ,clse-max2  cx2
09:17:37  30  ,clse-max3  cx3
09:17:37  31  ,clse-max4  cx4
09:17:37  32  ,clse-max5  cx5
09:17:37  33  ,clse-max6  cx6
09:17:37  34  ,clse-max7  cx7
09:17:37  35  ,clse-max8  cx8
09:17:37  36  -- Derive date related attributes:
09:17:37  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:17:37  38  ,0+TO_CHAR(ydate,'D')d
09:17:37  39  ,0+TO_CHAR(ydate,'W')w
09:17:37  40  -- mpm stands for minutes-past-midnight:
09:17:37  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:17:37  42  -- mph stands for minutes-past-hour:
09:17:37  43  ,0+TO_CHAR(ydate,'MI')mph
09:17:37  44  FROM stk10
09:17:37  45  ORDER BY ydate
09:17:37  46  /

Table created.

Elapsed: 00:00:01.26
09:17:38 SQL> 
09:17:38 SQL> -- rpt
09:17:38 SQL> 
09:17:38 SQL> SELECT
09:17:38   2  tkr
09:17:38   3  ,COUNT(tkr)
09:17:38   4  ,MIN(clse),MAX(clse)
09:17:38   5  ,MIN(ydate),MAX(ydate)
09:17:38   6  FROM stk12
09:17:38   7  GROUP BY tkr
09:17:38   8  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
-------- ---------- ---------- ---------- ------------------- -------------------
SPY	      19911	103.18	    126.2 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.03
09:17:38 SQL> 
09:17:38 SQL> -- Prepare for derivation of NTILE based parameters.
09:17:38 SQL> -- Also derive the "trend" parameter:
09:17:38 SQL> 
09:17:38 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.04
09:17:38 SQL> CREATE TABLE stk14 COMPRESS AS
09:17:38   2  SELECT
09:17:38   3  tkr
09:17:38   4  ,ydate
09:17:38   5  ,tkrdate
09:17:38   6  ,clse
09:17:38   7  ,g4
09:17:38   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.30/120 THEN 'up' ELSE 'nup' END gatt
09:17:38   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.30/120 THEN 'up' ELSE 'nup' END gattn
09:17:38  10  ,CASE WHEN trend IS NULL THEN 1
09:17:38  11  	    WHEN trend =0      THEN 1
09:17:38  12  	    ELSE trend END trend
09:17:38  13  ,cm2
09:17:38  14  ,cm3
09:17:38  15  ,cm4
09:17:38  16  ,cm5
09:17:38  17  ,cm6
09:17:38  18  ,cm7
09:17:38  19  ,cm8
09:17:38  20  ,ca2
09:17:38  21  ,ca3
09:17:38  22  ,ca4
09:17:38  23  ,ca5
09:17:38  24  ,ca6
09:17:38  25  ,ca7
09:17:38  26  ,ca8
09:17:38  27  ,cx2
09:17:38  28  ,cx3
09:17:38  29  ,cx4
09:17:38  30  ,cx5
09:17:38  31  ,cx6
09:17:38  32  ,cx7
09:17:38  33  ,cx8
09:17:38  34  ,hh
09:17:38  35  ,d
09:17:38  36  ,w
09:17:38  37  ,mpm
09:17:38  38  ,mph
09:17:38  39  FROM stk12
09:17:38  40  -- Guard against divide by 0:
09:17:38  41  WHERE clse > 0
09:17:38  42  ORDER BY ydate
09:17:38  43  /

Table created.

Elapsed: 00:00:00.31
09:17:39 SQL> 
09:17:39 SQL> -- rpt
09:17:39 SQL> 
09:17:39 SQL> SELECT
09:17:39   2  tkr
09:17:39   3  ,trend
09:17:39   4  ,gatt
09:17:39   5  ,COUNT(tkr)
09:17:39   6  ,AVG(g4)
09:17:39   7  FROM stk14
09:17:39   8  GROUP BY tkr,trend,gatt
09:17:39   9  ORDER BY tkr,trend,gatt
09:17:39  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5064 -.43559439
SPY		 -1 up	      3547 .930148012
SPY		 -1		17
SPY		  1 nup       7736 -.35844041
SPY		  1 up	      3516 .758363197
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.03
09:17:39 SQL> 
09:17:39 SQL> -- Derive NTILE based params:
09:17:39 SQL> 
09:17:39 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.04
09:17:39 SQL> CREATE TABLE stk16 COMPRESS AS
09:17:39   2  SELECT
09:17:39   3  tkr
09:17:39   4  ,ydate
09:17:39   5  ,tkrdate
09:17:39   6  ,clse
09:17:39   7  ,g4
09:17:39   8  ,gatt
09:17:39   9  ,gattn
09:17:39  10  ,trend
09:17:39  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
09:17:39  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
09:17:39  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
09:17:39  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
09:17:39  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
09:17:39  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
09:17:39  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
09:17:39  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
09:17:39  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
09:17:39  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
09:17:39  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
09:17:39  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
09:17:39  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
09:17:39  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
09:17:39  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
09:17:39  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
09:17:39  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
09:17:39  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
09:17:39  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
09:17:39  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
09:17:39  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
09:17:39  32  ,hh  att21
09:17:39  33  ,d   att22
09:17:39  34  ,w   att23
09:17:39  35  ,mpm att24
09:17:39  36  ,mph att25
09:17:39  37  ,trend att26
09:17:39  38  FROM stk14
09:17:39  39  ORDER BY ydate
09:17:39  40  /

Table created.

Elapsed: 00:00:02.27
09:17:41 SQL> 
09:17:41 SQL> -- rpt
09:17:41 SQL> 
09:17:41 SQL> SELECT
09:17:41   2  tkr
09:17:41   3  ,trend
09:17:41   4  ,gatt
09:17:41   5  ,COUNT(tkr)
09:17:41   6  ,AVG(g4)
09:17:41   7  FROM stk16
09:17:41   8  GROUP BY tkr,trend,gatt
09:17:41   9  ORDER BY tkr,trend,gatt
09:17:41  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5064 -.43559439
SPY		 -1 up	      3547 .930148012
SPY		 -1		17
SPY		  1 nup       7736 -.35844041
SPY		  1 up	      3516 .758363197
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.03
09:17:41 SQL> 
09:17:41 SQL> -- Now I derive goodness attributes:
09:17:41 SQL> 
09:17:41 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.04
09:17:41 SQL> CREATE TABLE stk_ms COMPRESS AS
09:17:41   2  SELECT
09:17:41   3  tkr
09:17:41   4  ,ydate
09:17:41   5  ,tkrdate
09:17:41   6  ,trend
09:17:41   7  ,g4
09:17:41   8  ,gatt
09:17:41   9  ,gattn
09:17:41  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
09:17:41  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
09:17:41  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
09:17:41  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
09:17:41  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
09:17:41  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
09:17:41  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
09:17:41  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
09:17:41  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
09:17:41  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
09:17:41  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
09:17:41  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
09:17:41  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
09:17:41  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
09:17:41  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
09:17:41  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
09:17:41  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
09:17:41  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
09:17:41  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
09:17:41  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
09:17:41  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
09:17:41  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
09:17:41  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
09:17:41  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
09:17:41  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
09:17:41  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
09:17:41  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
09:17:41  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
09:17:41  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
09:17:41  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
09:17:41  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
09:17:41  41  FROM stk16
09:17:41  42  /

Table created.

Elapsed: 00:00:03.06
09:17:44 SQL> 
09:17:44 SQL> -- rpt
09:17:44 SQL> 
09:17:44 SQL> SELECT
09:17:44   2  tkr
09:17:44   3  ,trend
09:17:44   4  ,gatt
09:17:44   5  ,COUNT(tkr)
09:17:44   6  ,AVG(g4)
09:17:44   7  FROM stk_ms
09:17:44   8  GROUP BY tkr,trend,gatt
09:17:44   9  ORDER BY tkr,trend,gatt
09:17:44  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5064 -.43559439
SPY		 -1 up	      3547 .930148012
SPY		 -1		17
SPY		  1 nup       7736 -.35844041
SPY		  1 up	      3516 .758363197
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.03
09:17:44 SQL> 
09:17:44 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
