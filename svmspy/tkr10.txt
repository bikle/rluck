
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 12 16:10:57 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

16:10:57 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
16:10:57 SQL> 16:10:57 SQL> --
16:10:57 SQL> -- stk10.sql
16:10:57 SQL> --
16:10:57 SQL> 
16:10:57 SQL> -- Creates views and tables for demonstrating SVM.
16:10:57 SQL> 
16:10:57 SQL> -- Get Mon-Thurs
16:10:57 SQL> DROP TABLE stk10p14;
DROP TABLE stk10p14
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.10
16:10:57 SQL> 
16:10:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
16:10:57 SQL> 
16:10:57 SQL> CREATE TABLE stk10p14 COMPRESS AS
16:10:57   2  SELECT
16:10:57   3  tkr
16:10:57   4  ,ydate
16:10:57   5  ,clse
16:10:57   6  FROM di5min_stk
16:10:57   7  WHERE UPPER(tkr)='&1'
16:10:57   8  AND 0+TO_CHAR(ydate,'D')BETWEEN 1 AND 4
16:10:57   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
16:10:57  10  ORDER BY ydate
16:10:57  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.16
16:10:57 SQL> 
16:10:57 SQL> -- Get Fri
16:10:57 SQL> DROP TABLE stk10p5;
DROP TABLE stk10p5
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.02
16:10:57 SQL> 
16:10:57 SQL> CREATE TABLE stk10p5 COMPRESS AS
16:10:57   2  SELECT
16:10:57   3  tkr
16:10:57   4  ,ydate
16:10:57   5  ,clse
16:10:57   6  FROM di5min_stk
16:10:57   7  WHERE UPPER(tkr)='&1'
16:10:57   8  AND 0+TO_CHAR(ydate,'D')=5
16:10:57   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
16:10:57  10  ORDER BY ydate
16:10:57  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.08
16:10:57 SQL> 
16:10:57 SQL> -- Get Mon
16:10:57 SQL> DROP TABLE stk10f1;
DROP TABLE stk10f1
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.01
16:10:57 SQL> 
16:10:57 SQL> CREATE TABLE stk10f1 COMPRESS AS
16:10:57   2  SELECT
16:10:57   3  tkr
16:10:57   4  ,ydate
16:10:57   5  ,clse
16:10:57   6  FROM di5min_stk
16:10:57   7  WHERE UPPER(tkr)='&1'
16:10:57   8  AND 0+TO_CHAR(ydate,'D')=1
16:10:57   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
16:10:57  10  ORDER BY ydate
16:10:57  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.07
16:10:57 SQL> 
16:10:57 SQL> -- Get Tues - Fri
16:10:57 SQL> DROP TABLE stk10f25;
DROP TABLE stk10f25
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.02
16:10:57 SQL> 
16:10:57 SQL> CREATE TABLE stk10f25 COMPRESS AS
16:10:57   2  SELECT
16:10:57   3  tkr
16:10:57   4  ,ydate
16:10:57   5  ,clse
16:10:57   6  FROM di5min_stk
16:10:57   7  WHERE UPPER(tkr)='&1'
16:10:57   8  AND 0+TO_CHAR(ydate,'D')BETWEEN 2 AND 5
16:10:57   9  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
16:10:57  10  ORDER BY ydate
16:10:57  11  /
old   7: WHERE UPPER(tkr)='&1'
new   7: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.08
16:10:57 SQL> 
16:10:57 SQL> -- Join em
16:10:57 SQL> DROP TABLE stk10pf;
DROP TABLE stk10pf
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.02
16:10:57 SQL> 
16:10:57 SQL> -- Deal with m-thr 1st
16:10:57 SQL> CREATE TABLE stk10pf AS
16:10:57   2  SELECT
16:10:57   3  p.tkr
16:10:57   4  ,p.ydate
16:10:57   5  ,p.clse
16:10:57   6  ,f.clse clse2
16:10:57   7  FROM stk10p14 p, stk10f25 f
16:10:57   8  WHERE p.ydate + 1 = f.ydate
16:10:57   9  /

Table created.

Elapsed: 00:00:00.08
16:10:57 SQL> 
16:10:57 SQL> -- Deal with Fri (day 5 joined with day 1)
16:10:57 SQL> INSERT INTO stk10pf(tkr,ydate,clse,clse2)
16:10:57   2  SELECT
16:10:57   3  p.tkr
16:10:57   4  ,p.ydate
16:10:57   5  ,p.clse
16:10:57   6  ,f.clse clse2
16:10:57   7  FROM stk10p5 p, stk10f1 f
16:10:57   8  WHERE p.ydate + 3 = f.ydate
16:10:57   9  /

0 rows created.

Elapsed: 00:00:00.01
16:10:57 SQL> 
16:10:57 SQL> -- rpt
16:10:57 SQL> select count(*)from stk10pf;

  COUNT(*)
----------
       254

Elapsed: 00:00:00.01
16:10:57 SQL> 
16:10:57 SQL> DROP VIEW stk10;

View dropped.

Elapsed: 00:00:00.15
16:10:58 SQL> 
16:10:58 SQL> DROP TABLE stk10;
DROP TABLE stk10
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.01
16:10:58 SQL> 
16:10:58 SQL> CREATE TABLE stk10 COMPRESS AS
16:10:58   2  SELECT
16:10:58   3  tkr
16:10:58   4  ,ydate
16:10:58   5  ,tkr||ydate tkrdate
16:10:58   6  ,clse
16:10:58   7  ,clse2
16:10:58   8  ,rownum rnum -- acts as t in my time-series
16:10:58   9  -- Derive some attributes from clse.
16:10:58  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
16:10:58  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
16:10:58  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:10:58  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
16:10:58  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:10:58  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
16:10:58  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:10:58  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
16:10:58  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
16:10:58  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:10:58  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
16:10:58  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:10:58  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
16:10:58  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:10:58  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
16:10:58  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
16:10:58  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:10:58  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
16:10:58  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:10:58  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
16:10:58  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:10:58  31  FROM stk10pf
16:10:58  32  WHERE UPPER(tkr)='&1'
16:10:58  33  AND 0+TO_CHAR(ydate,'D')BETWEEN 1 AND 5
16:10:58  34  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
16:10:58  35  ORDER BY ydate
16:10:58  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='XLB'

Table created.

Elapsed: 00:00:00.16
16:10:58 SQL> 
16:10:58 SQL> ANALYZE TABLE stk10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.08
16:10:58 SQL> 
16:10:58 SQL> -- rpt
16:10:58 SQL> 
16:10:58 SQL> SELECT
16:10:58   2  tkr
16:10:58   3  ,COUNT(tkr)
16:10:58   4  ,MIN(clse),MAX(clse)
16:10:58   5  ,MIN(avg4),MAX(avg4)
16:10:58   6  ,MIN(ydate),MAX(ydate)
16:10:58   7  FROM stk10
16:10:58   8  GROUP BY tkr
16:10:58   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
XLB	       254	37.74	   38.83 38.1273469	38.815 2011-01-04 14:30:00 2011-01-11 16:05:00

Elapsed: 00:00:00.00
16:10:58 SQL> 
16:10:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:10:58 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.10
16:10:58 SQL> CREATE TABLE stk12 COMPRESS AS
16:10:58   2  SELECT
16:10:58   3  tkr
16:10:58   4  ,ydate
16:10:58   5  ,tkrdate
16:10:58   6  ,clse
16:10:58   7  ,rnum
16:10:58   8  -- g4 is important. I want to predict g4:
16:10:58   9  ,clse2 - clse g4
16:10:58  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
16:10:58  11  -- I want more attributes from the ones I derived above:
16:10:58  12  -- clse relation to moving-min
16:10:58  13  ,clse-min2  cm2
16:10:58  14  ,clse-min3  cm3
16:10:58  15  ,clse-min4  cm4
16:10:58  16  ,clse-min5  cm5
16:10:58  17  ,clse-min6  cm6
16:10:58  18  ,clse-min7  cm7
16:10:58  19  ,clse-min8  cm8
16:10:58  20  -- clse relation to moving-avg
16:10:58  21  ,clse-avg2  ca2
16:10:58  22  ,clse-avg3  ca3
16:10:58  23  ,clse-avg4  ca4
16:10:58  24  ,clse-avg5  ca5
16:10:58  25  ,clse-avg6  ca6
16:10:58  26  ,clse-avg7  ca7
16:10:58  27  ,clse-avg8  ca8
16:10:58  28  -- clse relation to moving-max
16:10:58  29  ,clse-max2  cx2
16:10:58  30  ,clse-max3  cx3
16:10:58  31  ,clse-max4  cx4
16:10:58  32  ,clse-max5  cx5
16:10:58  33  ,clse-max6  cx6
16:10:58  34  ,clse-max7  cx7
16:10:58  35  ,clse-max8  cx8
16:10:58  36  -- Derive date related attributes:
16:10:58  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:10:58  38  ,0+TO_CHAR(ydate,'D')d
16:10:58  39  ,0+TO_CHAR(ydate,'W')w
16:10:58  40  -- mpm stands for minutes-past-midnight:
16:10:58  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:10:58  42  -- mph stands for minutes-past-hour:
16:10:58  43  ,0+TO_CHAR(ydate,'MI')mph
16:10:58  44  FROM stk10
16:10:58  45  ORDER BY ydate
16:10:58  46  /

Table created.

Elapsed: 00:00:00.08
16:10:58 SQL> 
16:10:58 SQL> -- rpt
16:10:58 SQL> 
16:10:58 SQL> SELECT
16:10:58   2  tkr
16:10:58   3  ,COUNT(tkr)
16:10:58   4  ,MIN(clse),MAX(clse)
16:10:58   5  ,MIN(ydate),MAX(ydate)
16:10:58   6  FROM stk12
16:10:58   7  GROUP BY tkr
16:10:58   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
XLB	       254	37.74	   38.83 2011-01-04 14:30:00 2011-01-11 16:05:00

Elapsed: 00:00:00.00
16:10:58 SQL> 
16:10:58 SQL> -- Prepare for derivation of NTILE based parameters.
16:10:58 SQL> -- Also derive the "trend" parameter:
16:10:58 SQL> 
16:10:58 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.09
16:10:58 SQL> CREATE TABLE stk14 COMPRESS AS
16:10:58   2  SELECT
16:10:58   3  tkr
16:10:58   4  ,ydate
16:10:58   5  ,tkrdate
16:10:58   6  ,clse
16:10:58   7  ,g4
16:10:58   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.5/100 THEN 'up' ELSE 'nup' END gatt
16:10:58   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.5/100 THEN 'up' ELSE 'nup' END gattn
16:10:58  10  ,CASE WHEN trend IS NULL THEN 1
16:10:58  11  	    WHEN trend =0      THEN 1
16:10:58  12  	    ELSE trend END trend
16:10:58  13  ,cm2
16:10:58  14  ,cm3
16:10:58  15  ,cm4
16:10:58  16  ,cm5
16:10:58  17  ,cm6
16:10:58  18  ,cm7
16:10:58  19  ,cm8
16:10:58  20  ,ca2
16:10:58  21  ,ca3
16:10:58  22  ,ca4
16:10:58  23  ,ca5
16:10:58  24  ,ca6
16:10:58  25  ,ca7
16:10:58  26  ,ca8
16:10:58  27  ,cx2
16:10:58  28  ,cx3
16:10:58  29  ,cx4
16:10:58  30  ,cx5
16:10:58  31  ,cx6
16:10:58  32  ,cx7
16:10:58  33  ,cx8
16:10:58  34  ,hh
16:10:58  35  ,d
16:10:58  36  ,w
16:10:58  37  ,mpm
16:10:58  38  ,mph
16:10:58  39  FROM stk12
16:10:58  40  -- Guard against divide by 0:
16:10:58  41  WHERE clse > 0
16:10:58  42  ORDER BY ydate
16:10:58  43  /

Table created.

Elapsed: 00:00:00.05
16:10:58 SQL> 
16:10:58 SQL> -- rpt
16:10:58 SQL> 
16:10:58 SQL> SELECT
16:10:58   2  tkr
16:10:58   3  ,trend
16:10:58   4  ,gatt
16:10:58   5  ,COUNT(tkr)
16:10:58   6  ,AVG(g4)
16:10:58   7  FROM stk14
16:10:58   8  GROUP BY tkr,trend,gatt
16:10:58   9  ORDER BY tkr,trend,gatt
16:10:58  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
XLB		-1 nup	       35 -.05457143
XLB		-1 up	       82 .421829268
XLB		 1 nup	       73 -.09082192
XLB		 1 up	       64  .30640625

Elapsed: 00:00:00.02
16:10:58 SQL> 
16:10:58 SQL> -- Derive NTILE based params:
16:10:58 SQL> 
16:10:58 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.05
16:10:58 SQL> CREATE TABLE stk16 COMPRESS AS
16:10:58   2  SELECT
16:10:58   3  tkr
16:10:58   4  ,ydate
16:10:58   5  ,tkrdate
16:10:58   6  ,clse
16:10:58   7  ,g4
16:10:58   8  ,gatt
16:10:58   9  ,gattn
16:10:58  10  ,trend
16:10:58  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
16:10:58  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
16:10:58  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
16:10:58  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
16:10:58  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
16:10:58  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
16:10:58  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
16:10:58  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
16:10:58  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
16:10:58  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
16:10:58  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
16:10:58  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
16:10:58  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
16:10:58  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
16:10:58  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
16:10:58  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
16:10:58  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
16:10:58  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
16:10:58  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
16:10:58  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
16:10:58  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
16:10:58  32  ,hh  att21
16:10:58  33  ,d   att22
16:10:58  34  ,w   att23
16:10:58  35  ,mpm att24
16:10:58  36  ,mph att25
16:10:58  37  ,trend att26
16:10:58  38  FROM stk14
16:10:58  39  ORDER BY ydate
16:10:58  40  /

Table created.

Elapsed: 00:00:00.07
16:10:58 SQL> 
16:10:58 SQL> -- rpt
16:10:58 SQL> 
16:10:58 SQL> SELECT
16:10:58   2  tkr
16:10:58   3  ,trend
16:10:58   4  ,gatt
16:10:58   5  ,COUNT(tkr)
16:10:58   6  ,AVG(g4)
16:10:58   7  FROM stk16
16:10:58   8  GROUP BY tkr,trend,gatt
16:10:58   9  ORDER BY tkr,trend,gatt
16:10:58  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
XLB		-1 nup	       35 -.05457143
XLB		-1 up	       82 .421829268
XLB		 1 nup	       73 -.09082192
XLB		 1 up	       64  .30640625

Elapsed: 00:00:00.01
16:10:58 SQL> 
16:10:58 SQL> -- Now I derive goodness attributes:
16:10:58 SQL> 
16:10:58 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.08
16:10:58 SQL> CREATE TABLE stk_ms COMPRESS AS
16:10:58   2  SELECT
16:10:58   3  tkr
16:10:58   4  ,ydate
16:10:58   5  ,tkrdate
16:10:58   6  ,trend
16:10:58   7  ,g4
16:10:58   8  ,gatt
16:10:58   9  ,gattn
16:10:58  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
16:10:58  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
16:10:58  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
16:10:58  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
16:10:58  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
16:10:58  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
16:10:58  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
16:10:58  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
16:10:58  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
16:10:58  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
16:10:58  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
16:10:58  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
16:10:58  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
16:10:58  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
16:10:58  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
16:10:58  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
16:10:58  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
16:10:58  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
16:10:58  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
16:10:58  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
16:10:58  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
16:10:58  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
16:10:58  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
16:10:58  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
16:10:58  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
16:10:58  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
16:10:58  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
16:10:58  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
16:10:58  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
16:10:58  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
16:10:58  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
16:10:58  41  FROM stk16
16:10:58  42  /

Table created.

Elapsed: 00:00:00.08
16:10:59 SQL> 
16:10:59 SQL> -- rpt
16:10:59 SQL> 
16:10:59 SQL> SELECT
16:10:59   2  tkr
16:10:59   3  ,trend
16:10:59   4  ,gatt
16:10:59   5  ,COUNT(tkr)
16:10:59   6  ,AVG(g4)
16:10:59   7  FROM stk_ms
16:10:59   8  GROUP BY tkr,trend,gatt
16:10:59   9  ORDER BY tkr,trend,gatt
16:10:59  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
XLB		-1 nup	       35 -.05457143
XLB		-1 up	       82 .421829268
XLB		 1 nup	       73 -.09082192
XLB		 1 up	       64  .30640625

Elapsed: 00:00:00.00
16:10:59 SQL> 
16:10:59 SQL> SELECT
16:10:59   2  tkr
16:10:59   3  ,COUNT(tkr)
16:10:59   4  ,MIN(ydate),MAX(ydate)
16:10:59   5  FROM stk_ms
16:10:59   6  GROUP BY tkr
16:10:59   7  /

TKR	COUNT(TKR) MIN(YDATE)	       MAX(YDATE)
------- ---------- ------------------- -------------------
XLB	       254 2011-01-04 14:30:00 2011-01-11 16:05:00

Elapsed: 00:00:00.00
16:10:59 SQL> 
16:10:59 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
