
SQL*Plus: Release 11.2.0.1.0 Production on Sat Mar 19 05:29:16 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:29:16 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
05:29:16 SQL> 
05:29:16 SQL> 05:29:16 SQL> --
05:29:16 SQL> -- stk10u.sql
05:29:16 SQL> --
05:29:16 SQL> 
05:29:16 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
05:29:16 SQL> 
05:29:16 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
05:29:16 SQL> @stk10.sql     '&1'
05:29:16 SQL> --
05:29:16 SQL> -- stk10.sql
05:29:16 SQL> --
05:29:16 SQL> 
05:29:16 SQL> -- Creates views and tables for demonstrating SVM.
05:29:16 SQL> 
05:29:16 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.28
05:29:17 SQL> 
05:29:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
05:29:17 SQL> 
05:29:17 SQL> CREATE TABLE stk10svmspy COMPRESS AS
05:29:17   2  SELECT
05:29:17   3  tkr
05:29:17   4  ,ydate
05:29:17   5  ,tkr||ydate tkrdate
05:29:17   6  ,clse
05:29:17   7  ,clse2
05:29:17   8  ,rownum rnum -- acts as t in my time-series
05:29:17   9  -- g1 is important. I want to predict g1:
05:29:17  10  ,gain1day g1
05:29:17  11  -- Derive some attributes from clse.
05:29:17  12  -- Each row spans 5 minutes.
05:29:17  13  -- The number of rows in 1 day is 24*60/5.
05:29:17  14  -- I want the aggregations to span from 3 days to 9 days:
05:29:17  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
05:29:17  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
05:29:17  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
05:29:17  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
05:29:17  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
05:29:17  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
05:29:17  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
05:29:17  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
05:29:17  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
05:29:17  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
05:29:17  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
05:29:17  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
05:29:17  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
05:29:17  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
05:29:17  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
05:29:17  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
05:29:17  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
05:29:17  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
05:29:17  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
05:29:17  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
05:29:17  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
05:29:17  36  FROM di5min_stk_c2
05:29:17  37  WHERE UPPER(tkr)='&1'
05:29:17  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
05:29:17  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
05:29:17  40  ORDER BY ydate
05:29:17  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='SVM'

Table created.

Elapsed: 00:00:01.23
05:29:18 SQL> 
05:29:18 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.12
05:29:18 SQL> 
05:29:18 SQL> -- rpt
05:29:18 SQL> 
05:29:18 SQL> SELECT
05:29:18   2  tkr
05:29:18   3  ,COUNT(tkr)ccount
05:29:18   4  ,MIN(clse)mnclse,MAX(clse)mxclse
05:29:18   5  -- ,MIN(avg4),MAX(avg4)
05:29:18   6  ,MIN(ydate),MAX(ydate)
05:29:18   7  ,MIN(g1)
05:29:18   8  ,MAX(g1)
05:29:18   9  FROM stk10svmspy
05:29:18  10  GROUP BY tkr
05:29:18  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
SVM	      3366	 9.41	   15.33 2011-01-21 14:30:00 2011-03-18 19:55:00      -1.75	   1.1

Elapsed: 00:00:00.01
05:29:18 SQL> 
05:29:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:29:18 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.05
05:29:18 SQL> CREATE TABLE stk12svmspy COMPRESS AS
05:29:18   2  SELECT
05:29:18   3  tkr
05:29:18   4  ,ydate
05:29:18   5  ,tkrdate
05:29:18   6  ,clse
05:29:18   7  ,rnum
05:29:18   8  ,g1
05:29:18   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
05:29:18  10  -- I want more attributes from the ones I derived above:
05:29:18  11  -- clse relation to moving-min
05:29:18  12  ,clse-min3  cm3
05:29:18  13  ,clse-min4  cm4
05:29:18  14  ,clse-min5  cm5
05:29:18  15  ,clse-min6  cm6
05:29:18  16  ,clse-min7  cm7
05:29:18  17  ,clse-min8  cm8
05:29:18  18  ,clse-min9  cm9
05:29:18  19  -- clse relation to moving-avg
05:29:18  20  ,clse-avg3  ca3
05:29:18  21  ,clse-avg4  ca4
05:29:18  22  ,clse-avg5  ca5
05:29:18  23  ,clse-avg6  ca6
05:29:18  24  ,clse-avg7  ca7
05:29:18  25  ,clse-avg8  ca8
05:29:18  26  ,clse-avg9  ca9
05:29:18  27  -- clse relation to moving-max
05:29:18  28  ,clse-max3  cx3
05:29:18  29  ,clse-max4  cx4
05:29:18  30  ,clse-max5  cx5
05:29:18  31  ,clse-max6  cx6
05:29:18  32  ,clse-max7  cx7
05:29:18  33  ,clse-max8  cx8
05:29:18  34  ,clse-max9  cx9
05:29:18  35  -- Derive date related attributes:
05:29:18  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:29:18  37  ,0+TO_CHAR(ydate,'D')d
05:29:18  38  ,0+TO_CHAR(ydate,'W')w
05:29:18  39  -- mpm stands for minutes-past-midnight:
05:29:18  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:29:18  41  -- mph stands for minutes-past-hour:
05:29:18  42  ,0+TO_CHAR(ydate,'MI')mph
05:29:18  43  FROM stk10svmspy
05:29:18  44  ORDER BY ydate
05:29:18  45  /

Table created.

Elapsed: 00:00:00.12
05:29:18 SQL> 
05:29:18 SQL> -- rpt
05:29:18 SQL> 
05:29:18 SQL> SELECT
05:29:18   2  tkr
05:29:18   3  ,COUNT(tkr)ccount
05:29:18   4  ,MIN(clse)mnclse,MAX(clse)mxclse
05:29:18   5  -- ,MIN(avg4),MAX(avg4)
05:29:18   6  ,MIN(ydate),MAX(ydate)
05:29:18   7  ,MIN(g1)
05:29:18   8  ,AVG(g1)
05:29:18   9  ,MAX(g1)
05:29:18  10  FROM stk12svmspy
05:29:18  11  GROUP BY tkr
05:29:18  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
SVM	      3366	 9.41	   15.33 2011-01-21 14:30:00 2011-03-18 19:55:00      -1.75 .071905229	      1.1

Elapsed: 00:00:00.02
05:29:18 SQL> 
05:29:18 SQL> -- Prepare for derivation of NTILE based parameters.
05:29:18 SQL> -- Also derive the "trend" parameter:
05:29:18 SQL> 
05:29:18 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.03
05:29:18 SQL> CREATE TABLE stk14svmspy COMPRESS AS
05:29:18   2  SELECT
05:29:18   3  tkr
05:29:18   4  ,ydate
05:29:18   5  ,tkrdate
05:29:19   6  ,clse
05:29:19   7  ,g1
05:29:19   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
05:29:19   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
05:29:19  10  ,CASE WHEN trend IS NULL THEN 1
05:29:19  11  	    WHEN trend =0      THEN 1
05:29:19  12  	    ELSE trend END trend
05:29:19  13  ,cm3
05:29:19  14  ,cm4
05:29:19  15  ,cm5
05:29:19  16  ,cm6
05:29:19  17  ,cm7
05:29:19  18  ,cm8
05:29:19  19  ,cm9
05:29:19  20  ,ca3
05:29:19  21  ,ca4
05:29:19  22  ,ca5
05:29:19  23  ,ca6
05:29:19  24  ,ca7
05:29:19  25  ,ca8
05:29:19  26  ,ca9
05:29:19  27  ,cx3
05:29:19  28  ,cx4
05:29:19  29  ,cx5
05:29:19  30  ,cx6
05:29:19  31  ,cx7
05:29:19  32  ,cx8
05:29:19  33  ,cx9
05:29:19  34  ,hh
05:29:19  35  ,d
05:29:19  36  ,w
05:29:19  37  ,mpm
05:29:19  38  ,mph
05:29:19  39  FROM stk12svmspy
05:29:19  40  -- Guard against divide by 0:
05:29:19  41  WHERE clse > 0
05:29:19  42  ORDER BY ydate
05:29:19  43  /

Table created.

Elapsed: 00:00:00.10
05:29:19 SQL> 
05:29:19 SQL> -- rpt
05:29:19 SQL> 
05:29:19 SQL> SELECT
05:29:19   2  tkr
05:29:19   3  ,trend
05:29:19   4  ,gatt
05:29:19   5  ,COUNT(tkr)
05:29:19   6  ,AVG(g1)
05:29:19   7  FROM stk14svmspy
05:29:19   8  GROUP BY tkr,trend,gatt
05:29:19   9  ORDER BY tkr,trend,gatt
05:29:19  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
SVM		-1 nup	      216 -.35592593
SVM		-1 up	      249  .38502008
SVM		-1	       82
SVM		 1 nup	     1046 -.30071807
SVM		 1 up	     1549 .332854165
SVM		 1	      224

6 rows selected.

Elapsed: 00:00:00.01
05:29:19 SQL> 
05:29:19 SQL> -- Derive NTILE based params:
05:29:19 SQL> 
05:29:19 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.05
05:29:19 SQL> CREATE TABLE stk16svmspy COMPRESS AS
05:29:19   2  SELECT
05:29:19   3  tkr
05:29:19   4  ,ydate
05:29:19   5  ,tkrdate
05:29:19   6  ,clse
05:29:19   7  ,g1
05:29:19   8  ,gatt
05:29:19   9  ,gattn
05:29:19  10  ,trend
05:29:19  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
05:29:19  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
05:29:19  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
05:29:19  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
05:29:19  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
05:29:19  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
05:29:19  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
05:29:19  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
05:29:19  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
05:29:19  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
05:29:19  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
05:29:19  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
05:29:19  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
05:29:19  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
05:29:19  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
05:29:19  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
05:29:19  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
05:29:19  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
05:29:19  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
05:29:19  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
05:29:19  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
05:29:19  32  ,hh  att21
05:29:19  33  ,d   att22
05:29:19  34  ,w   att23
05:29:19  35  ,mpm att24
05:29:19  36  ,mph att25
05:29:19  37  ,trend att26
05:29:19  38  FROM stk14svmspy
05:29:19  39  ORDER BY ydate
05:29:19  40  /

Table created.

Elapsed: 00:00:00.41
05:29:19 SQL> 
05:29:19 SQL> -- rpt
05:29:19 SQL> 
05:29:19 SQL> SELECT
05:29:19   2  tkr
05:29:19   3  ,trend
05:29:19   4  ,gatt
05:29:19   5  ,COUNT(tkr)
05:29:19   6  ,AVG(g1)
05:29:19   7  FROM stk16svmspy
05:29:19   8  GROUP BY tkr,trend,gatt
05:29:19   9  ORDER BY tkr,trend,gatt
05:29:19  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
SVM		-1 nup	      216 -.35592593
SVM		-1 up	      249  .38502008
SVM		-1	       82
SVM		 1 nup	     1046 -.30071807
SVM		 1 up	     1549 .332854165
SVM		 1	      224

6 rows selected.

Elapsed: 00:00:00.01
05:29:19 SQL> 
05:29:19 SQL> -- Comment out feedback related syntax:
05:29:19 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
05:29:19 SQL> -- SELECT
05:29:19 SQL> -- m.tkr
05:29:19 SQL> -- ,m.ydate
05:29:19 SQL> -- ,m.tkrdate
05:29:19 SQL> -- ,l.score score_long
05:29:19 SQL> -- ,s.score score_short
05:29:19 SQL> -- ,m.g1
05:29:19 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
05:29:19 SQL> -- WHERE l.targ='gatt'
05:29:19 SQL> -- AND	 s.targ='gattn'
05:29:19 SQL> -- AND l.tkrdate = s.tkrdate
05:29:19 SQL> -- AND l.tkrdate = m.tkrdate
05:29:19 SQL> -- -- Speed things up:
05:29:19 SQL> -- AND l.tkr = '&1'
05:29:19 SQL> -- AND s.tkr = '&1'
05:29:19 SQL> -- /
05:29:19 SQL> --
05:29:19 SQL> -- DROP TABLE score_corr_tkr;
05:29:19 SQL> --
05:29:19 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
05:29:19 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
05:29:19 SQL> -- (
05:29:19 SQL> --   SELECT
05:29:19 SQL> --   tkrdate
05:29:19 SQL> --   -- Find corr() tween score and g1 over 8 day period:
05:29:19 SQL> --   ,CORR((score_long - score_short),g1)
05:29:19 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
05:29:19 SQL> --   FROM sc12tkr
05:29:19 SQL> -- )
05:29:19 SQL> -- GROUP BY tkrdate
05:29:19 SQL> -- /
05:29:19 SQL> 
05:29:19 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
05:29:19 SQL> 
05:29:19 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.17
05:29:19 SQL> 
05:29:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
05:29:20 SQL> 
05:29:20 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
05:29:20   2  SELECT
05:29:20   3  tkr
05:29:20   4  ,ydate
05:29:20   5  ,tkrdate
05:29:20   6  ,trend
05:29:20   7  ,g1
05:29:20   8  ,gatt
05:29:20   9  ,gattn
05:29:20  10  -- Goodness attributes:
05:29:20  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
05:29:20  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
05:29:20  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
05:29:20  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
05:29:20  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
05:29:20  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
05:29:20  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
05:29:20  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
05:29:20  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
05:29:20  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
05:29:20  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
05:29:20  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
05:29:20  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
05:29:20  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
05:29:20  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
05:29:20  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
05:29:20  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
05:29:20  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
05:29:20  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
05:29:20  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
05:29:20  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
05:29:20  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
05:29:20  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
05:29:20  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
05:29:20  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
05:29:20  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
05:29:20  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
05:29:20  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
05:29:20  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
05:29:20  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
05:29:20  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
05:29:20  42  FROM stk16svmspy
05:29:20  43  /

Table created.

Elapsed: 00:00:00.58
05:29:20 SQL> 
05:29:20 SQL> -- rpt
05:29:20 SQL> 
05:29:20 SQL> SELECT
05:29:20   2  tkr
05:29:20   3  ,trend
05:29:20   4  ,gatt
05:29:20   5  ,COUNT(tkr)
05:29:20   6  ,AVG(g1)
05:29:20   7  FROM stk_ms_svmspy
05:29:20   8  GROUP BY tkr,trend,gatt
05:29:20   9  ORDER BY tkr,trend,gatt
05:29:20  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
SVM		-1 nup	      216 -.35592593
SVM		-1 up	      249  .38502008
SVM		-1	       82
SVM		 1 nup	     1046 -.30071807
SVM		 1 up	     1549 .332854165
SVM		 1	      224

6 rows selected.

Elapsed: 00:00:00.01
05:29:20 SQL> 
05:29:20 SQL> SELECT
05:29:20   2  tkr
05:29:20   3  ,0+TO_CHAR(ydate,'D')daynum
05:29:20   4  ,COUNT(tkr)
05:29:20   5  ,MIN(ydate),MAX(ydate)
05:29:20   6  FROM stk_ms_svmspy
05:29:20   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
05:29:20   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
05:29:20   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
SVM		 2	  546 2011-01-24 14:30:00 2011-03-14 19:55:00
SVM		 3	  755 2011-01-25 13:00:00 2011-03-15 20:55:00
SVM		 4	  739 2011-01-26 13:35:00 2011-03-16 20:55:00
SVM		 5	  624 2011-01-27 14:30:00 2011-03-17 19:55:00
SVM		 6	  702 2011-01-21 14:30:00 2011-03-18 19:55:00

Elapsed: 00:00:00.01
05:29:20 SQL> 
05:29:20 SQL> -- exit
05:29:20 SQL> @stk10svmd.sql '&1'
05:29:20 SQL> --
05:29:20 SQL> -- stk10svmd.sql
05:29:20 SQL> --
05:29:20 SQL> 
05:29:20 SQL> -- Creates views and tables for demonstrating SVM.
05:29:20 SQL> -- I need to run this after I run stk10.sql
05:29:20 SQL> 
05:29:20 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.03
05:29:20 SQL> 
05:29:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
05:29:20 SQL> 
05:29:20 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
05:29:20   2  SELECT
05:29:20   3  tkr
05:29:20   4  ,ydate
05:29:20   5  ,tkr||ydate tkrdate
05:29:20   6  ,clse
05:29:20   7  ,rownum rnum -- acts as t in my time-series
05:29:20   8  -- Derive some attributes from clse.
05:29:20   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
05:29:20  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
05:29:20  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
05:29:20  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
05:29:20  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
05:29:20  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
05:29:20  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
05:29:20  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
05:29:20  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
05:29:20  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
05:29:20  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
05:29:20  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
05:29:20  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
05:29:20  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
05:29:20  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
05:29:20  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
05:29:20  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
05:29:20  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
05:29:20  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
05:29:20  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
05:29:20  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
05:29:20  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
05:29:20  31  -- ystk21 created here: svmd/cr_ystk21.sql
05:29:20  32  FROM ystk21
05:29:20  33  WHERE UPPER(tkr)='&1'
05:29:20  34  AND ydate > '1990-01-01'
05:29:20  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
05:29:20  36  ORDER BY ydate
05:29:20  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='SVM'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='SVM')

Table created.

Elapsed: 00:00:00.67
05:29:21 SQL> 
05:29:21 SQL> -- rpt
05:29:21 SQL> 
05:29:21 SQL> SELECT
05:29:21   2  tkr
05:29:21   3  ,COUNT(tkr)
05:29:21   4  ,MIN(clse),MAX(clse)
05:29:21   5  ,MIN(avg4),MAX(avg4)
05:29:21   6  ,MIN(ydate),MAX(ydate)
05:29:21   7  FROM stk_svmd10svmspy
05:29:21   8  GROUP BY tkr
05:29:21   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
SVM		1482	    .93      23.47	1.156	  22.782 2005-05-02 21:00:00 2011-03-18 21:00:00

Elapsed: 00:00:00.02
05:29:21 SQL> 
05:29:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:29:21 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:16.75
05:29:38 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
05:29:38   2  SELECT
05:29:38   3  tkr
05:29:38   4  ,ydate
05:29:38   5  ,tkrdate
05:29:38   6  ,clse
05:29:38   7  ,rnum
05:29:38   8  -- g1 is important. I want to predict g1:
05:29:38   9  ,ld - clse g1
05:29:38  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
05:29:38  11  -- I want more attributes from the ones I derived above:
05:29:38  12  -- clse relation to moving-min
05:29:38  13  ,clse-min3  cm3
05:29:38  14  ,clse-min4  cm4
05:29:38  15  ,clse-min5  cm5
05:29:38  16  ,clse-min6  cm6
05:29:38  17  ,clse-min7  cm7
05:29:38  18  ,clse-min8  cm8
05:29:38  19  ,clse-min9  cm9
05:29:38  20  -- clse relation to moving-avg
05:29:38  21  ,clse-avg3  ca3
05:29:38  22  ,clse-avg4  ca4
05:29:38  23  ,clse-avg5  ca5
05:29:38  24  ,clse-avg6  ca6
05:29:38  25  ,clse-avg7  ca7
05:29:38  26  ,clse-avg8  ca8
05:29:38  27  ,clse-avg9  ca9
05:29:38  28  -- clse relation to moving-max
05:29:38  29  ,clse-max3  cx3
05:29:38  30  ,clse-max4  cx4
05:29:38  31  ,clse-max5  cx5
05:29:38  32  ,clse-max6  cx6
05:29:38  33  ,clse-max7  cx7
05:29:38  34  ,clse-max8  cx8
05:29:38  35  ,clse-max9  cx9
05:29:38  36  -- Derive date related attributes:
05:29:38  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:29:38  38  ,0+TO_CHAR(ydate,'D')d
05:29:38  39  ,0+TO_CHAR(ydate,'W')w
05:29:38  40  -- mpm stands for minutes-past-midnight:
05:29:38  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:29:38  42  -- mph stands for minutes-past-hour:
05:29:38  43  ,0+TO_CHAR(ydate,'MI')mph
05:29:38  44  FROM stk_svmd10svmspy
05:29:38  45  ORDER BY ydate
05:29:38  46  /

Table created.

Elapsed: 00:00:00.13
05:29:38 SQL> 
05:29:38 SQL> -- rpt
05:29:38 SQL> 
05:29:38 SQL> SELECT
05:29:38   2  tkr
05:29:38   3  ,COUNT(tkr)
05:29:38   4  ,MIN(clse),MAX(clse)
05:29:38   5  ,MIN(ydate),MAX(ydate)
05:29:38   6  FROM stk_svmd12
05:29:38   7  GROUP BY tkr
05:29:38   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
SVM		1482	    .93      23.47 2005-05-02 21:00:00 2011-03-18 21:00:00

Elapsed: 00:00:00.00
05:29:38 SQL> 
05:29:38 SQL> -- Prepare for derivation of NTILE based parameters.
05:29:38 SQL> -- Also derive the "trend" parameter:
05:29:38 SQL> 
05:29:38 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.03
05:29:38 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
05:29:38   2  SELECT
05:29:38   3  tkr
05:29:38   4  ,ydate
05:29:38   5  ,tkrdate
05:29:38   6  ,clse
05:29:38   7  ,g1
05:29:38   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
05:29:38   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
05:29:38  10  ,CASE WHEN trend IS NULL THEN 1
05:29:38  11  	    WHEN trend =0      THEN 1
05:29:38  12  	    ELSE trend END trend
05:29:38  13  ,cm3
05:29:38  14  ,cm4
05:29:38  15  ,cm5
05:29:38  16  ,cm6
05:29:38  17  ,cm7
05:29:38  18  ,cm8
05:29:38  19  ,cm9
05:29:38  20  ,ca3
05:29:38  21  ,ca4
05:29:38  22  ,ca5
05:29:38  23  ,ca6
05:29:38  24  ,ca7
05:29:38  25  ,ca8
05:29:38  26  ,ca9
05:29:38  27  ,cx3
05:29:38  28  ,cx4
05:29:38  29  ,cx5
05:29:38  30  ,cx6
05:29:38  31  ,cx7
05:29:38  32  ,cx8
05:29:38  33  ,cx9
05:29:38  34  ,hh
05:29:38  35  ,d
05:29:38  36  ,w
05:29:38  37  ,mpm
05:29:38  38  ,mph
05:29:38  39  FROM stk_svmd12
05:29:38  40  -- Guard against divide by 0:
05:29:38  41  WHERE clse > 0
05:29:38  42  ORDER BY ydate
05:29:38  43  /

Table created.

Elapsed: 00:00:00.07
05:29:38 SQL> 
05:29:38 SQL> -- rpt
05:29:38 SQL> 
05:29:38 SQL> SELECT
05:29:38   2  tkr
05:29:38   3  ,trend
05:29:38   4  ,gatt
05:29:38   5  ,COUNT(tkr)
05:29:38   6  ,AVG(g1)
05:29:38   7  FROM stk_svmd14
05:29:38   8  GROUP BY tkr,trend,gatt
05:29:38   9  ORDER BY tkr,trend,gatt
05:29:38  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
SVM		  -1 nup	336 -.20470238
SVM		  -1 up 	306 .264673203
SVM		  -1		  1
SVM		   1 nup	450 -.22771111
SVM		   1 up 	389 .261902314

Elapsed: 00:00:00.00
05:29:38 SQL> 
05:29:38 SQL> -- Derive NTILE based params:
05:29:38 SQL> 
05:29:38 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.05
05:29:38 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
05:29:38   2  SELECT
05:29:38   3  tkr
05:29:38   4  ,ydate
05:29:38   5  ,tkrdate
05:29:38   6  ,clse
05:29:38   7  ,g1
05:29:38   8  ,gatt
05:29:38   9  ,gattn
05:29:38  10  ,trend
05:29:38  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
05:29:38  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
05:29:38  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
05:29:38  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
05:29:38  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
05:29:38  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
05:29:38  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
05:29:38  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
05:29:38  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
05:29:38  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
05:29:38  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
05:29:38  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
05:29:38  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
05:29:38  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
05:29:38  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
05:29:38  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
05:29:38  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
05:29:38  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
05:29:38  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
05:29:38  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
05:29:38  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
05:29:38  32  ,hh  att21
05:29:38  33  ,d   att22
05:29:38  34  ,w   att23
05:29:38  35  ,mpm att24
05:29:38  36  ,mph att25
05:29:38  37  ,trend att26
05:29:38  38  FROM stk_svmd14
05:29:38  39  ORDER BY ydate
05:29:38  40  /

Table created.

Elapsed: 00:00:00.19
05:29:38 SQL> 
05:29:38 SQL> -- rpt
05:29:38 SQL> 
05:29:38 SQL> SELECT
05:29:38   2  tkr
05:29:38   3  ,trend
05:29:38   4  ,gatt
05:29:38   5  ,COUNT(tkr)
05:29:38   6  ,AVG(g1)
05:29:38   7  FROM stk_svmd16
05:29:38   8  GROUP BY tkr,trend,gatt
05:29:38   9  ORDER BY tkr,trend,gatt
05:29:38  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
SVM		  -1 nup	336 -.20470238
SVM		  -1 up 	306 .264673203
SVM		  -1		  1
SVM		   1 nup	450 -.22771111
SVM		   1 up 	389 .261902314

Elapsed: 00:00:00.01
05:29:38 SQL> 
05:29:38 SQL> -- Comment out feedback related syntax:
05:29:38 SQL> 
05:29:38 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
05:29:38 SQL> -- SELECT
05:29:38 SQL> -- m.tkr
05:29:38 SQL> -- ,m.ydate
05:29:38 SQL> -- ,m.tkrdate
05:29:38 SQL> -- ,l.score score_long
05:29:38 SQL> -- ,s.score score_short
05:29:38 SQL> -- ,m.g1
05:29:38 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
05:29:38 SQL> -- WHERE l.targ='gatt'
05:29:38 SQL> -- AND	 s.targ='gattn'
05:29:38 SQL> -- AND l.tkrdate = s.tkrdate
05:29:38 SQL> -- AND l.tkrdate = m.tkrdate
05:29:38 SQL> -- -- Speed things up:
05:29:38 SQL> -- AND l.tkr = '&1'
05:29:38 SQL> -- AND s.tkr = '&1'
05:29:38 SQL> -- /
05:29:38 SQL> --
05:29:38 SQL> -- DROP TABLE score_corr_tkr;
05:29:38 SQL> --
05:29:38 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
05:29:38 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
05:29:38 SQL> -- (
05:29:38 SQL> --   SELECT
05:29:38 SQL> --   tkrdate
05:29:38 SQL> --   -- Find corr() tween score and g1 over 8 day period:
05:29:38 SQL> --   ,CORR((score_long - score_short),g1)
05:29:38 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
05:29:38 SQL> --   FROM sc12tkr
05:29:38 SQL> -- )
05:29:38 SQL> -- GROUP BY tkrdate
05:29:38 SQL> -- /
05:29:38 SQL> 
05:29:38 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
05:29:38 SQL> 
05:29:38 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.03
05:29:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
05:29:38 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
05:29:38   2  SELECT
05:29:38   3  tkr
05:29:38   4  ,ydate
05:29:38   5  ,tkrdate
05:29:38   6  ,trend
05:29:38   7  ,g1
05:29:38   8  ,gatt
05:29:38   9  ,gattn
05:29:38  10  -- Goodness attributes:
05:29:38  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
05:29:38  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
05:29:38  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
05:29:38  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
05:29:38  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
05:29:38  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
05:29:38  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
05:29:38  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
05:29:38  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
05:29:38  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
05:29:38  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
05:29:38  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
05:29:38  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
05:29:38  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
05:29:38  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
05:29:38  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
05:29:38  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
05:29:38  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
05:29:38  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
05:29:38  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
05:29:38  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
05:29:38  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
05:29:38  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
05:29:38  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
05:29:38  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
05:29:38  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
05:29:38  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
05:29:38  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
05:29:38  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
05:29:38  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
05:29:38  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
05:29:38  42  FROM stk_svmd16
05:29:38  43  /

Table created.

Elapsed: 00:00:00.29
05:29:39 SQL> 
05:29:39 SQL> -- rpt
05:29:39 SQL> 
05:29:39 SQL> SELECT
05:29:39   2  tkr
05:29:39   3  ,trend
05:29:39   4  ,gatt
05:29:39   5  ,COUNT(tkr)
05:29:39   6  ,AVG(g1)
05:29:39   7  FROM stk_ms_svmd_svmspy
05:29:39   8  GROUP BY tkr,trend,gatt
05:29:39   9  ORDER BY tkr,trend,gatt
05:29:39  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
SVM		  -1 nup	336 -.20470238
SVM		  -1 up 	306 .264673203
SVM		  -1		  1
SVM		   1 nup	450 -.22771111
SVM		   1 up 	389 .261902314

Elapsed: 00:00:00.01
05:29:39 SQL> 
05:29:39 SQL> SELECT
05:29:39   2  tkr
05:29:39   3  ,COUNT(tkr)
05:29:39   4  ,MIN(ydate),MAX(ydate)
05:29:39   5  FROM stk_ms_svmd_svmspy
05:29:39   6  GROUP BY tkr
05:29:39   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
SVM		1482 2005-05-02 21:00:00 2011-03-18 21:00:00

Elapsed: 00:00:00.01
05:29:39 SQL> 
05:29:39 SQL> -- exit
05:29:39 SQL> 
05:29:39 SQL> 
05:29:39 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.05
05:29:39 SQL> 
05:29:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
05:29:39 SQL> 
05:29:39 SQL> CREATE TABLE stk_ms_u COMPRESS AS
05:29:39   2  SELECT * FROM stk_ms_svmspy
05:29:39   3  UNION
05:29:39   4  SELECT * FROM stk_ms_svmd_svmspy
05:29:39   5  /

Table created.

Elapsed: 00:00:00.14
05:29:39 SQL> 
05:29:39 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
