
SQL*Plus: Release 11.2.0.1.0 Production on Sat Apr 9 22:14:29 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:14:30 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:14:30 SQL> 
22:14:30 SQL> 22:14:30 SQL> --
22:14:30 SQL> -- stk10u.sql
22:14:30 SQL> --
22:14:30 SQL> 
22:14:30 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
22:14:30 SQL> 
22:14:30 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
22:14:30 SQL> @stk10.sql     '&1'
22:14:30 SQL> --
22:14:30 SQL> -- stk10.sql
22:14:30 SQL> --
22:14:30 SQL> 
22:14:30 SQL> -- Creates views and tables for demonstrating SVM.
22:14:30 SQL> 
22:14:30 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.14
22:14:30 SQL> 
22:14:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.13
22:14:30 SQL> 
22:14:30 SQL> CREATE TABLE stk10svmspy COMPRESS AS
22:14:30   2  SELECT
22:14:30   3  tkr
22:14:30   4  ,ydate
22:14:30   5  ,tkr||ydate tkrdate
22:14:30   6  ,clse
22:14:30   7  ,clse2
22:14:30   8  ,rownum rnum -- acts as t in my time-series
22:14:30   9  -- g1 is important. I want to predict g1:
22:14:30  10  ,gain1day g1
22:14:30  11  -- Derive some attributes from clse.
22:14:30  12  -- Each row spans 5 minutes.
22:14:30  13  -- The number of rows in 1 day is 24*60/5.
22:14:30  14  -- I want the aggregations to span from 3 days to 9 days:
22:14:30  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
22:14:30  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
22:14:30  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
22:14:30  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
22:14:30  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
22:14:30  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
22:14:30  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
22:14:30  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
22:14:30  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
22:14:30  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
22:14:30  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
22:14:30  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
22:14:30  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
22:14:30  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
22:14:30  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
22:14:30  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
22:14:30  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
22:14:30  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
22:14:30  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
22:14:30  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
22:14:30  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
22:14:30  36  FROM di5min_stk_c2
22:14:30  37  WHERE UPPER(tkr)='&1'
22:14:30  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
22:14:30  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
22:14:30  40  ORDER BY ydate
22:14:30  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='VALE'

Table created.

Elapsed: 00:00:01.67
22:14:31 SQL> 
22:14:31 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
22:14:32 SQL> 
22:14:32 SQL> -- rpt
22:14:32 SQL> 
22:14:32 SQL> SELECT
22:14:32   2  tkr
22:14:32   3  ,COUNT(tkr)ccount
22:14:32   4  ,MIN(clse)mnclse,MAX(clse)mxclse
22:14:32   5  -- ,MIN(avg4),MAX(avg4)
22:14:32   6  ,MIN(ydate),MAX(ydate)
22:14:32   7  ,MIN(g1)
22:14:32   8  ,MAX(g1)
22:14:32   9  FROM stk10svmspy
22:14:32  10  GROUP BY tkr
22:14:32  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
VALE	      4212	 30.7	   36.36 2011-01-24 14:30:00 2011-04-08 19:55:00       -1.7	   1.3

Elapsed: 00:00:00.01
22:14:32 SQL> 
22:14:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:14:32 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.14
22:14:32 SQL> CREATE TABLE stk12svmspy COMPRESS AS
22:14:32   2  SELECT
22:14:32   3  tkr
22:14:32   4  ,ydate
22:14:32   5  ,tkrdate
22:14:32   6  ,clse
22:14:32   7  ,rnum
22:14:32   8  ,g1
22:14:32   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
22:14:32  10  -- I want more attributes from the ones I derived above:
22:14:32  11  -- clse relation to moving-min
22:14:32  12  ,clse-min3  cm3
22:14:32  13  ,clse-min4  cm4
22:14:32  14  ,clse-min5  cm5
22:14:32  15  ,clse-min6  cm6
22:14:32  16  ,clse-min7  cm7
22:14:32  17  ,clse-min8  cm8
22:14:32  18  ,clse-min9  cm9
22:14:32  19  -- clse relation to moving-avg
22:14:32  20  ,clse-avg3  ca3
22:14:32  21  ,clse-avg4  ca4
22:14:32  22  ,clse-avg5  ca5
22:14:32  23  ,clse-avg6  ca6
22:14:32  24  ,clse-avg7  ca7
22:14:32  25  ,clse-avg8  ca8
22:14:32  26  ,clse-avg9  ca9
22:14:32  27  -- clse relation to moving-max
22:14:32  28  ,clse-max3  cx3
22:14:32  29  ,clse-max4  cx4
22:14:32  30  ,clse-max5  cx5
22:14:32  31  ,clse-max6  cx6
22:14:32  32  ,clse-max7  cx7
22:14:32  33  ,clse-max8  cx8
22:14:32  34  ,clse-max9  cx9
22:14:32  35  -- Derive date related attributes:
22:14:32  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:14:32  37  ,0+TO_CHAR(ydate,'D')d
22:14:32  38  ,0+TO_CHAR(ydate,'W')w
22:14:32  39  -- mpm stands for minutes-past-midnight:
22:14:32  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:14:32  41  -- mph stands for minutes-past-hour:
22:14:32  42  ,0+TO_CHAR(ydate,'MI')mph
22:14:32  43  FROM stk10svmspy
22:14:32  44  ORDER BY ydate
22:14:32  45  /

Table created.

Elapsed: 00:00:00.15
22:14:32 SQL> 
22:14:32 SQL> -- rpt
22:14:32 SQL> 
22:14:32 SQL> SELECT
22:14:32   2  tkr
22:14:32   3  ,COUNT(tkr)ccount
22:14:32   4  ,MIN(clse)mnclse,MAX(clse)mxclse
22:14:32   5  -- ,MIN(avg4),MAX(avg4)
22:14:32   6  ,MIN(ydate),MAX(ydate)
22:14:32   7  ,MIN(g1)
22:14:32   8  ,AVG(g1)
22:14:32   9  ,MAX(g1)
22:14:32  10  FROM stk12svmspy
22:14:32  11  GROUP BY tkr
22:14:32  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
VALE	      4212	 30.7	   36.36 2011-01-24 14:30:00 2011-04-08 19:55:00       -1.7 -.01791543	      1.3

Elapsed: 00:00:00.02
22:14:32 SQL> 
22:14:32 SQL> -- Prepare for derivation of NTILE based parameters.
22:14:32 SQL> -- Also derive the "trend" parameter:
22:14:32 SQL> 
22:14:32 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
22:14:32 SQL> CREATE TABLE stk14svmspy COMPRESS AS
22:14:32   2  SELECT
22:14:32   3  tkr
22:14:32   4  ,ydate
22:14:32   5  ,tkrdate
22:14:32   6  ,clse
22:14:32   7  ,g1
22:14:32   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
22:14:32   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
22:14:32  10  ,CASE WHEN trend IS NULL THEN 1
22:14:32  11  	    WHEN trend =0      THEN 1
22:14:32  12  	    ELSE trend END trend
22:14:32  13  ,cm3
22:14:32  14  ,cm4
22:14:32  15  ,cm5
22:14:32  16  ,cm6
22:14:32  17  ,cm7
22:14:32  18  ,cm8
22:14:32  19  ,cm9
22:14:32  20  ,ca3
22:14:32  21  ,ca4
22:14:32  22  ,ca5
22:14:32  23  ,ca6
22:14:32  24  ,ca7
22:14:32  25  ,ca8
22:14:32  26  ,ca9
22:14:32  27  ,cx3
22:14:32  28  ,cx4
22:14:32  29  ,cx5
22:14:32  30  ,cx6
22:14:32  31  ,cx7
22:14:32  32  ,cx8
22:14:32  33  ,cx9
22:14:32  34  ,hh
22:14:32  35  ,d
22:14:32  36  ,w
22:14:32  37  ,mpm
22:14:32  38  ,mph
22:14:32  39  FROM stk12svmspy
22:14:32  40  -- Guard against divide by 0:
22:14:32  41  WHERE clse > 0
22:14:32  42  ORDER BY ydate
22:14:32  43  /

Table created.

Elapsed: 00:00:00.14
22:14:32 SQL> 
22:14:32 SQL> -- rpt
22:14:32 SQL> 
22:14:32 SQL> SELECT
22:14:32   2  tkr
22:14:32   3  ,trend
22:14:32   4  ,gatt
22:14:32   5  ,COUNT(tkr)
22:14:32   6  ,AVG(g1)
22:14:32   7  FROM stk14svmspy
22:14:32   8  GROUP BY tkr,trend,gatt
22:14:32   9  ORDER BY tkr,trend,gatt
22:14:32  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
VALE		-1 nup	     1548 -.37027364
VALE		-1 up	     1466 .465412478
VALE		-1	       12
VALE		 1 nup	      715 -.45203081
VALE		 1 up	      315  .44965377
VALE		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
22:14:32 SQL> 
22:14:32 SQL> -- Derive NTILE based params:
22:14:32 SQL> 
22:14:32 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.04
22:14:32 SQL> CREATE TABLE stk16svmspy COMPRESS AS
22:14:32   2  SELECT
22:14:32   3  tkr
22:14:32   4  ,ydate
22:14:32   5  ,tkrdate
22:14:32   6  ,clse
22:14:32   7  ,g1
22:14:32   8  ,gatt
22:14:32   9  ,gattn
22:14:32  10  ,trend
22:14:32  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
22:14:32  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
22:14:32  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
22:14:32  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
22:14:32  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
22:14:32  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
22:14:32  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
22:14:32  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
22:14:32  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
22:14:32  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
22:14:32  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
22:14:32  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
22:14:32  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
22:14:32  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
22:14:32  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
22:14:32  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
22:14:32  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
22:14:32  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
22:14:32  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
22:14:32  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
22:14:32  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
22:14:32  32  ,hh  att21
22:14:32  33  ,d   att22
22:14:32  34  ,w   att23
22:14:32  35  ,mpm att24
22:14:32  36  ,mph att25
22:14:32  37  ,trend att26
22:14:32  38  FROM stk14svmspy
22:14:32  39  ORDER BY ydate
22:14:32  40  /

Table created.

Elapsed: 00:00:00.59
22:14:33 SQL> 
22:14:33 SQL> -- rpt
22:14:33 SQL> 
22:14:33 SQL> SELECT
22:14:33   2  tkr
22:14:33   3  ,trend
22:14:33   4  ,gatt
22:14:33   5  ,COUNT(tkr)
22:14:33   6  ,AVG(g1)
22:14:33   7  FROM stk16svmspy
22:14:33   8  GROUP BY tkr,trend,gatt
22:14:33   9  ORDER BY tkr,trend,gatt
22:14:33  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
VALE		-1 nup	     1548 -.37027364
VALE		-1 up	     1466 .465412478
VALE		-1	       12
VALE		 1 nup	      715 -.45203081
VALE		 1 up	      315  .44965377
VALE		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
22:14:33 SQL> 
22:14:33 SQL> -- Comment out feedback related syntax:
22:14:33 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
22:14:33 SQL> -- SELECT
22:14:33 SQL> -- m.tkr
22:14:33 SQL> -- ,m.ydate
22:14:33 SQL> -- ,m.tkrdate
22:14:33 SQL> -- ,l.score score_long
22:14:33 SQL> -- ,s.score score_short
22:14:33 SQL> -- ,m.g1
22:14:33 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
22:14:33 SQL> -- WHERE l.targ='gatt'
22:14:33 SQL> -- AND	 s.targ='gattn'
22:14:33 SQL> -- AND l.tkrdate = s.tkrdate
22:14:33 SQL> -- AND l.tkrdate = m.tkrdate
22:14:33 SQL> -- -- Speed things up:
22:14:33 SQL> -- AND l.tkr = '&1'
22:14:33 SQL> -- AND s.tkr = '&1'
22:14:33 SQL> -- /
22:14:33 SQL> --
22:14:33 SQL> -- DROP TABLE score_corr_tkr;
22:14:33 SQL> --
22:14:33 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
22:14:33 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
22:14:33 SQL> -- (
22:14:33 SQL> --   SELECT
22:14:33 SQL> --   tkrdate
22:14:33 SQL> --   -- Find corr() tween score and g1 over 8 day period:
22:14:33 SQL> --   ,CORR((score_long - score_short),g1)
22:14:33 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
22:14:33 SQL> --   FROM sc12tkr
22:14:33 SQL> -- )
22:14:33 SQL> -- GROUP BY tkrdate
22:14:33 SQL> -- /
22:14:33 SQL> 
22:14:33 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
22:14:33 SQL> 
22:14:33 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
22:14:33 SQL> 
22:14:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.27
22:14:33 SQL> 
22:14:33 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
22:14:33   2  SELECT
22:14:33   3  tkr
22:14:33   4  ,ydate
22:14:33   5  ,tkrdate
22:14:33   6  ,trend
22:14:33   7  ,g1
22:14:33   8  ,gatt
22:14:33   9  ,gattn
22:14:33  10  -- Goodness attributes:
22:14:33  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
22:14:33  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
22:14:33  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
22:14:33  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
22:14:33  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
22:14:33  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
22:14:33  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
22:14:33  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
22:14:33  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
22:14:33  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
22:14:33  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
22:14:33  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
22:14:33  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
22:14:33  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
22:14:33  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
22:14:33  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
22:14:33  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
22:14:33  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
22:14:33  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
22:14:33  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
22:14:33  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
22:14:33  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
22:14:33  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
22:14:33  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
22:14:33  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
22:14:33  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
22:14:33  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
22:14:33  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
22:14:33  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
22:14:33  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
22:14:33  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
22:14:33  42  FROM stk16svmspy
22:14:33  43  /

Table created.

Elapsed: 00:00:00.77
22:14:34 SQL> 
22:14:34 SQL> -- rpt
22:14:34 SQL> 
22:14:34 SQL> SELECT
22:14:34   2  tkr
22:14:34   3  ,trend
22:14:34   4  ,gatt
22:14:34   5  ,COUNT(tkr)
22:14:34   6  ,AVG(g1)
22:14:34   7  FROM stk_ms_svmspy
22:14:34   8  GROUP BY tkr,trend,gatt
22:14:34   9  ORDER BY tkr,trend,gatt
22:14:34  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
VALE		-1 nup	     1548 -.37027364
VALE		-1 up	     1466 .465412478
VALE		-1	       12
VALE		 1 nup	      715 -.45203081
VALE		 1 up	      315  .44965377
VALE		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
22:14:34 SQL> 
22:14:34 SQL> SELECT
22:14:34   2  tkr
22:14:34   3  ,0+TO_CHAR(ydate,'D')daynum
22:14:34   4  ,COUNT(tkr)
22:14:34   5  ,MIN(ydate),MAX(ydate)
22:14:34   6  FROM stk_ms_svmspy
22:14:34   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
22:14:34   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
22:14:34   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
VALE		 2	  780 2011-01-24 14:30:00 2011-04-04 19:55:00
VALE		 3	  858 2011-01-25 14:30:00 2011-04-05 19:55:00
VALE		 4	  858 2011-01-26 14:30:00 2011-04-06 19:55:00
VALE		 5	  858 2011-01-27 14:30:00 2011-04-07 19:55:00
VALE		 6	  858 2011-01-28 14:30:00 2011-04-08 19:55:00

Elapsed: 00:00:00.01
22:14:34 SQL> 
22:14:34 SQL> -- exit
22:14:34 SQL> @stk10svmd.sql '&1'
22:14:34 SQL> --
22:14:34 SQL> -- stk10svmd.sql
22:14:34 SQL> --
22:14:34 SQL> 
22:14:34 SQL> -- Creates views and tables for demonstrating SVM.
22:14:34 SQL> -- I need to run this after I run stk10.sql
22:14:34 SQL> 
22:14:34 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.15
22:14:34 SQL> 
22:14:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.10
22:14:34 SQL> 
22:14:34 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
22:14:34   2  SELECT
22:14:34   3  tkr
22:14:34   4  ,ydate
22:14:34   5  ,tkr||ydate tkrdate
22:14:34   6  ,clse
22:14:34   7  ,rownum rnum -- acts as t in my time-series
22:14:34   8  -- Derive some attributes from clse.
22:14:34   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
22:14:34  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
22:14:34  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
22:14:34  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
22:14:34  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
22:14:34  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
22:14:34  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
22:14:34  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
22:14:34  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
22:14:34  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
22:14:34  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
22:14:34  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
22:14:34  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
22:14:34  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
22:14:34  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
22:14:34  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
22:14:34  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
22:14:34  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
22:14:34  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
22:14:34  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
22:14:34  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
22:14:34  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
22:14:34  31  -- ystk21 created here: svmd/cr_ystk21.sql
22:14:34  32  FROM ystk21
22:14:34  33  WHERE UPPER(tkr)='&1'
22:14:34  34  AND ydate > '1990-01-01'
22:14:34  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
22:14:34  36  ORDER BY ydate
22:14:34  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='VALE'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='VALE')

Table created.

Elapsed: 00:00:00.70
22:14:35 SQL> 
22:14:35 SQL> -- rpt
22:14:35 SQL> 
22:14:35 SQL> SELECT
22:14:35   2  tkr
22:14:35   3  ,COUNT(tkr)
22:14:35   4  ,MIN(clse),MAX(clse)
22:14:35   5  ,MIN(avg4),MAX(avg4)
22:14:35   6  ,MIN(ydate),MAX(ydate)
22:14:35   7  FROM stk_svmd10svmspy
22:14:35   8  GROUP BY tkr
22:14:35   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
VALE		2280	   1.41      41.01	1.434	  40.106 2002-03-21 21:00:00 2011-04-07 21:00:00

Elapsed: 00:00:00.01
22:14:35 SQL> 
22:14:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:14:35 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
22:14:35 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
22:14:35   2  SELECT
22:14:35   3  tkr
22:14:35   4  ,ydate
22:14:35   5  ,tkrdate
22:14:35   6  ,clse
22:14:35   7  ,rnum
22:14:35   8  -- g1 is important. I want to predict g1:
22:14:35   9  ,ld - clse g1
22:14:35  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
22:14:35  11  -- I want more attributes from the ones I derived above:
22:14:35  12  -- clse relation to moving-min
22:14:35  13  ,clse-min3  cm3
22:14:35  14  ,clse-min4  cm4
22:14:35  15  ,clse-min5  cm5
22:14:35  16  ,clse-min6  cm6
22:14:35  17  ,clse-min7  cm7
22:14:35  18  ,clse-min8  cm8
22:14:35  19  ,clse-min9  cm9
22:14:35  20  -- clse relation to moving-avg
22:14:35  21  ,clse-avg3  ca3
22:14:35  22  ,clse-avg4  ca4
22:14:35  23  ,clse-avg5  ca5
22:14:35  24  ,clse-avg6  ca6
22:14:35  25  ,clse-avg7  ca7
22:14:35  26  ,clse-avg8  ca8
22:14:35  27  ,clse-avg9  ca9
22:14:35  28  -- clse relation to moving-max
22:14:35  29  ,clse-max3  cx3
22:14:35  30  ,clse-max4  cx4
22:14:35  31  ,clse-max5  cx5
22:14:35  32  ,clse-max6  cx6
22:14:35  33  ,clse-max7  cx7
22:14:35  34  ,clse-max8  cx8
22:14:35  35  ,clse-max9  cx9
22:14:35  36  -- Derive date related attributes:
22:14:35  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:14:35  38  ,0+TO_CHAR(ydate,'D')d
22:14:35  39  ,0+TO_CHAR(ydate,'W')w
22:14:35  40  -- mpm stands for minutes-past-midnight:
22:14:35  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:14:35  42  -- mph stands for minutes-past-hour:
22:14:35  43  ,0+TO_CHAR(ydate,'MI')mph
22:14:35  44  FROM stk_svmd10svmspy
22:14:35  45  ORDER BY ydate
22:14:35  46  /

Table created.

Elapsed: 00:00:00.10
22:14:35 SQL> 
22:14:35 SQL> -- rpt
22:14:35 SQL> 
22:14:35 SQL> SELECT
22:14:35   2  tkr
22:14:35   3  ,COUNT(tkr)
22:14:35   4  ,MIN(clse),MAX(clse)
22:14:35   5  ,MIN(ydate),MAX(ydate)
22:14:35   6  FROM stk_svmd12
22:14:35   7  GROUP BY tkr
22:14:35   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
VALE		2280	   1.41      41.01 2002-03-21 21:00:00 2011-04-07 21:00:00

Elapsed: 00:00:00.01
22:14:35 SQL> 
22:14:35 SQL> -- Prepare for derivation of NTILE based parameters.
22:14:35 SQL> -- Also derive the "trend" parameter:
22:14:35 SQL> 
22:14:35 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
22:14:35 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
22:14:35   2  SELECT
22:14:35   3  tkr
22:14:35   4  ,ydate
22:14:35   5  ,tkrdate
22:14:35   6  ,clse
22:14:35   7  ,g1
22:14:35   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
22:14:35   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
22:14:35  10  ,CASE WHEN trend IS NULL THEN 1
22:14:35  11  	    WHEN trend =0      THEN 1
22:14:35  12  	    ELSE trend END trend
22:14:35  13  ,cm3
22:14:35  14  ,cm4
22:14:35  15  ,cm5
22:14:35  16  ,cm6
22:14:35  17  ,cm7
22:14:35  18  ,cm8
22:14:35  19  ,cm9
22:14:35  20  ,ca3
22:14:35  21  ,ca4
22:14:35  22  ,ca5
22:14:35  23  ,ca6
22:14:35  24  ,ca7
22:14:35  25  ,ca8
22:14:35  26  ,ca9
22:14:35  27  ,cx3
22:14:35  28  ,cx4
22:14:35  29  ,cx5
22:14:35  30  ,cx6
22:14:35  31  ,cx7
22:14:35  32  ,cx8
22:14:35  33  ,cx9
22:14:35  34  ,hh
22:14:35  35  ,d
22:14:35  36  ,w
22:14:35  37  ,mpm
22:14:35  38  ,mph
22:14:35  39  FROM stk_svmd12
22:14:35  40  -- Guard against divide by 0:
22:14:35  41  WHERE clse > 0
22:14:35  42  ORDER BY ydate
22:14:35  43  /

Table created.

Elapsed: 00:00:00.07
22:14:35 SQL> 
22:14:35 SQL> -- rpt
22:14:35 SQL> 
22:14:35 SQL> SELECT
22:14:35   2  tkr
22:14:35   3  ,trend
22:14:35   4  ,gatt
22:14:35   5  ,COUNT(tkr)
22:14:35   6  ,AVG(g1)
22:14:35   7  FROM stk_svmd14
22:14:35   8  GROUP BY tkr,trend,gatt
22:14:35   9  ORDER BY tkr,trend,gatt
22:14:35  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
VALE		  -1 nup	485 -.34026804
VALE		  -1 up 	469 .411599147
VALE		   1 nup	709 -.26248237
VALE		   1 up 	616 .308457792
VALE		   1		  1

Elapsed: 00:00:00.01
22:14:35 SQL> 
22:14:35 SQL> -- Derive NTILE based params:
22:14:35 SQL> 
22:14:35 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.04
22:14:35 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
22:14:35   2  SELECT
22:14:35   3  tkr
22:14:35   4  ,ydate
22:14:35   5  ,tkrdate
22:14:35   6  ,clse
22:14:35   7  ,g1
22:14:35   8  ,gatt
22:14:35   9  ,gattn
22:14:35  10  ,trend
22:14:35  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
22:14:35  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
22:14:35  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
22:14:35  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
22:14:35  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
22:14:35  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
22:14:35  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
22:14:35  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
22:14:35  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
22:14:35  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
22:14:35  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
22:14:35  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
22:14:35  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
22:14:35  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
22:14:35  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
22:14:35  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
22:14:35  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
22:14:35  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
22:14:35  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
22:14:35  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
22:14:35  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
22:14:35  32  ,hh  att21
22:14:35  33  ,d   att22
22:14:35  34  ,w   att23
22:14:35  35  ,mpm att24
22:14:35  36  ,mph att25
22:14:35  37  ,trend att26
22:14:35  38  FROM stk_svmd14
22:14:35  39  ORDER BY ydate
22:14:35  40  /

Table created.

Elapsed: 00:00:00.31
22:14:36 SQL> 
22:14:36 SQL> -- rpt
22:14:36 SQL> 
22:14:36 SQL> SELECT
22:14:36   2  tkr
22:14:36   3  ,trend
22:14:36   4  ,gatt
22:14:36   5  ,COUNT(tkr)
22:14:36   6  ,AVG(g1)
22:14:36   7  FROM stk_svmd16
22:14:36   8  GROUP BY tkr,trend,gatt
22:14:36   9  ORDER BY tkr,trend,gatt
22:14:36  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
VALE		  -1 nup	485 -.34026804
VALE		  -1 up 	469 .411599147
VALE		   1 nup	709 -.26248237
VALE		   1 up 	616 .308457792
VALE		   1		  1

Elapsed: 00:00:00.01
22:14:36 SQL> 
22:14:36 SQL> -- Comment out feedback related syntax:
22:14:36 SQL> 
22:14:36 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
22:14:36 SQL> -- SELECT
22:14:36 SQL> -- m.tkr
22:14:36 SQL> -- ,m.ydate
22:14:36 SQL> -- ,m.tkrdate
22:14:36 SQL> -- ,l.score score_long
22:14:36 SQL> -- ,s.score score_short
22:14:36 SQL> -- ,m.g1
22:14:36 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
22:14:36 SQL> -- WHERE l.targ='gatt'
22:14:36 SQL> -- AND	 s.targ='gattn'
22:14:36 SQL> -- AND l.tkrdate = s.tkrdate
22:14:36 SQL> -- AND l.tkrdate = m.tkrdate
22:14:36 SQL> -- -- Speed things up:
22:14:36 SQL> -- AND l.tkr = '&1'
22:14:36 SQL> -- AND s.tkr = '&1'
22:14:36 SQL> -- /
22:14:36 SQL> --
22:14:36 SQL> -- DROP TABLE score_corr_tkr;
22:14:36 SQL> --
22:14:36 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
22:14:36 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
22:14:36 SQL> -- (
22:14:36 SQL> --   SELECT
22:14:36 SQL> --   tkrdate
22:14:36 SQL> --   -- Find corr() tween score and g1 over 8 day period:
22:14:36 SQL> --   ,CORR((score_long - score_short),g1)
22:14:36 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
22:14:36 SQL> --   FROM sc12tkr
22:14:36 SQL> -- )
22:14:36 SQL> -- GROUP BY tkrdate
22:14:36 SQL> -- /
22:14:36 SQL> 
22:14:36 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
22:14:36 SQL> 
22:14:36 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
22:14:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
22:14:36 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
22:14:36   2  SELECT
22:14:36   3  tkr
22:14:36   4  ,ydate
22:14:36   5  ,tkrdate
22:14:36   6  ,trend
22:14:36   7  ,g1
22:14:36   8  ,gatt
22:14:36   9  ,gattn
22:14:36  10  -- Goodness attributes:
22:14:36  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
22:14:36  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
22:14:36  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
22:14:36  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
22:14:36  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
22:14:36  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
22:14:36  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
22:14:36  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
22:14:36  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
22:14:36  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
22:14:36  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
22:14:36  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
22:14:36  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
22:14:36  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
22:14:36  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
22:14:36  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
22:14:36  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
22:14:36  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
22:14:36  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
22:14:36  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
22:14:36  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
22:14:36  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
22:14:36  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
22:14:36  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
22:14:36  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
22:14:36  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
22:14:36  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
22:14:36  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
22:14:36  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
22:14:36  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
22:14:36  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
22:14:36  42  FROM stk_svmd16
22:14:36  43  /

Table created.

Elapsed: 00:00:00.51
22:14:36 SQL> 
22:14:36 SQL> -- rpt
22:14:36 SQL> 
22:14:36 SQL> SELECT
22:14:36   2  tkr
22:14:36   3  ,trend
22:14:36   4  ,gatt
22:14:36   5  ,COUNT(tkr)
22:14:36   6  ,AVG(g1)
22:14:36   7  FROM stk_ms_svmd_svmspy
22:14:36   8  GROUP BY tkr,trend,gatt
22:14:36   9  ORDER BY tkr,trend,gatt
22:14:36  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
VALE		  -1 nup	485 -.34026804
VALE		  -1 up 	469 .411599147
VALE		   1 nup	709 -.26248237
VALE		   1 up 	616 .308457792
VALE		   1		  1

Elapsed: 00:00:00.01
22:14:36 SQL> 
22:14:36 SQL> SELECT
22:14:36   2  tkr
22:14:36   3  ,COUNT(tkr)
22:14:36   4  ,MIN(ydate),MAX(ydate)
22:14:36   5  FROM stk_ms_svmd_svmspy
22:14:36   6  GROUP BY tkr
22:14:36   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
VALE		2280 2002-03-21 21:00:00 2011-04-07 21:00:00

Elapsed: 00:00:00.01
22:14:36 SQL> 
22:14:36 SQL> -- exit
22:14:36 SQL> 
22:14:36 SQL> 
22:14:36 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.06
22:14:36 SQL> 
22:14:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
22:14:37 SQL> 
22:14:37 SQL> CREATE TABLE stk_ms_u COMPRESS AS
22:14:37   2  SELECT * FROM stk_ms_svmspy
22:14:37   3  UNION
22:14:37   4  SELECT * FROM stk_ms_svmd_svmspy
22:14:37   5  /

Table created.

Elapsed: 00:00:00.17
22:14:37 SQL> 
22:14:37 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
