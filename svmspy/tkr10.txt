
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 20 22:32:07 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:32:08 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:32:08 SQL> 
22:32:08 SQL> 22:32:08 SQL> --
22:32:08 SQL> -- stk10u.sql
22:32:08 SQL> --
22:32:08 SQL> 
22:32:08 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
22:32:08 SQL> 
22:32:08 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
22:32:08 SQL> @stk10.sql     '&1'
22:32:08 SQL> --
22:32:08 SQL> -- stk10.sql
22:32:08 SQL> --
22:32:08 SQL> 
22:32:08 SQL> -- Creates views and tables for demonstrating SVM.
22:32:08 SQL> 
22:32:08 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.28
22:32:08 SQL> 
22:32:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.19
22:32:08 SQL> 
22:32:08 SQL> CREATE TABLE stk10svmspy COMPRESS AS
22:32:08   2  SELECT
22:32:08   3  tkr
22:32:08   4  ,ydate
22:32:08   5  ,tkr||ydate tkrdate
22:32:08   6  ,clse
22:32:08   7  ,clse2
22:32:08   8  ,rownum rnum -- acts as t in my time-series
22:32:08   9  -- g1 is important. I want to predict g1:
22:32:08  10  ,gain1day g1
22:32:08  11  -- Derive some attributes from clse.
22:32:08  12  -- Each row spans 5 minutes.
22:32:08  13  -- The number of rows in 1 day is 24*60/5.
22:32:08  14  -- I want the aggregations to span from 3 days to 9 days:
22:32:08  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
22:32:08  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
22:32:08  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
22:32:08  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
22:32:08  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
22:32:08  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
22:32:08  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
22:32:08  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
22:32:08  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
22:32:08  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
22:32:08  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
22:32:08  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
22:32:08  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
22:32:08  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
22:32:08  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
22:32:08  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
22:32:08  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
22:32:08  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
22:32:08  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
22:32:08  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
22:32:08  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
22:32:08  36  FROM di5min_stk_c2
22:32:08  37  WHERE UPPER(tkr)='&1'
22:32:08  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
22:32:08  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
22:32:08  40  ORDER BY ydate
22:32:08  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='DIA'

Table created.

Elapsed: 00:00:02.97
22:32:11 SQL> 
22:32:11 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.12
22:32:12 SQL> 
22:32:12 SQL> -- rpt
22:32:12 SQL> 
22:32:12 SQL> SELECT
22:32:12   2  tkr
22:32:12   3  ,COUNT(tkr)ccount
22:32:12   4  ,MIN(clse)mnclse,MAX(clse)mxclse
22:32:12   5  -- ,MIN(avg4),MAX(avg4)
22:32:12   6  ,MIN(ydate),MAX(ydate)
22:32:12   7  ,MIN(g1)
22:32:12   8  ,MAX(g1)
22:32:12   9  FROM stk10svmspy
22:32:12  10  GROUP BY tkr
22:32:12  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
DIA	     25049	96.34	  118.47 2009-10-28 18:10:00 2011-01-20 20:55:00      -5.24	  4.35

Elapsed: 00:00:00.03
22:32:12 SQL> 
22:32:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:32:12 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.09
22:32:12 SQL> CREATE TABLE stk12svmspy COMPRESS AS
22:32:12   2  SELECT
22:32:12   3  tkr
22:32:12   4  ,ydate
22:32:12   5  ,tkrdate
22:32:12   6  ,clse
22:32:12   7  ,rnum
22:32:12   8  ,g1
22:32:12   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
22:32:12  10  -- I want more attributes from the ones I derived above:
22:32:12  11  -- clse relation to moving-min
22:32:12  12  ,clse-min3  cm3
22:32:12  13  ,clse-min4  cm4
22:32:12  14  ,clse-min5  cm5
22:32:12  15  ,clse-min6  cm6
22:32:12  16  ,clse-min7  cm7
22:32:12  17  ,clse-min8  cm8
22:32:12  18  ,clse-min9  cm9
22:32:12  19  -- clse relation to moving-avg
22:32:12  20  ,clse-avg3  ca3
22:32:12  21  ,clse-avg4  ca4
22:32:12  22  ,clse-avg5  ca5
22:32:12  23  ,clse-avg6  ca6
22:32:12  24  ,clse-avg7  ca7
22:32:12  25  ,clse-avg8  ca8
22:32:12  26  ,clse-avg9  ca9
22:32:12  27  -- clse relation to moving-max
22:32:12  28  ,clse-max3  cx3
22:32:12  29  ,clse-max4  cx4
22:32:12  30  ,clse-max5  cx5
22:32:12  31  ,clse-max6  cx6
22:32:12  32  ,clse-max7  cx7
22:32:12  33  ,clse-max8  cx8
22:32:12  34  ,clse-max9  cx9
22:32:12  35  -- Derive date related attributes:
22:32:12  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:32:12  37  ,0+TO_CHAR(ydate,'D')d
22:32:12  38  ,0+TO_CHAR(ydate,'W')w
22:32:12  39  -- mpm stands for minutes-past-midnight:
22:32:12  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:32:12  41  -- mph stands for minutes-past-hour:
22:32:12  42  ,0+TO_CHAR(ydate,'MI')mph
22:32:12  43  FROM stk10svmspy
22:32:12  44  ORDER BY ydate
22:32:12  45  /

Table created.

Elapsed: 00:00:00.62
22:32:13 SQL> 
22:32:13 SQL> -- rpt
22:32:13 SQL> 
22:32:13 SQL> SELECT
22:32:13   2  tkr
22:32:13   3  ,COUNT(tkr)ccount
22:32:13   4  ,MIN(clse)mnclse,MAX(clse)mxclse
22:32:13   5  -- ,MIN(avg4),MAX(avg4)
22:32:13   6  ,MIN(ydate),MAX(ydate)
22:32:13   7  ,MIN(g1)
22:32:13   8  ,AVG(g1)
22:32:13   9  ,MAX(g1)
22:32:13  10  FROM stk12svmspy
22:32:13  11  GROUP BY tkr
22:32:13  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
DIA	     25049	96.34	  118.47 2009-10-28 18:10:00 2011-01-20 20:55:00      -5.24 .063569177	     4.35

Elapsed: 00:00:00.05
22:32:13 SQL> 
22:32:13 SQL> -- Prepare for derivation of NTILE based parameters.
22:32:13 SQL> -- Also derive the "trend" parameter:
22:32:13 SQL> 
22:32:13 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
22:32:13 SQL> CREATE TABLE stk14svmspy COMPRESS AS
22:32:13   2  SELECT
22:32:13   3  tkr
22:32:13   4  ,ydate
22:32:13   5  ,tkrdate
22:32:13   6  ,clse
22:32:13   7  ,g1
22:32:13   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
22:32:13   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
22:32:13  10  ,CASE WHEN trend IS NULL THEN 1
22:32:13  11  	    WHEN trend =0      THEN 1
22:32:13  12  	    ELSE trend END trend
22:32:13  13  ,cm3
22:32:13  14  ,cm4
22:32:13  15  ,cm5
22:32:13  16  ,cm6
22:32:13  17  ,cm7
22:32:13  18  ,cm8
22:32:13  19  ,cm9
22:32:13  20  ,ca3
22:32:13  21  ,ca4
22:32:13  22  ,ca5
22:32:13  23  ,ca6
22:32:13  24  ,ca7
22:32:13  25  ,ca8
22:32:13  26  ,ca9
22:32:13  27  ,cx3
22:32:13  28  ,cx4
22:32:13  29  ,cx5
22:32:13  30  ,cx6
22:32:13  31  ,cx7
22:32:13  32  ,cx8
22:32:13  33  ,cx9
22:32:13  34  ,hh
22:32:13  35  ,d
22:32:13  36  ,w
22:32:13  37  ,mpm
22:32:13  38  ,mph
22:32:13  39  FROM stk12svmspy
22:32:13  40  -- Guard against divide by 0:
22:32:13  41  WHERE clse > 0
22:32:13  42  ORDER BY ydate
22:32:13  43  /

Table created.

Elapsed: 00:00:00.37
22:32:13 SQL> 
22:32:13 SQL> -- rpt
22:32:13 SQL> 
22:32:13 SQL> SELECT
22:32:13   2  tkr
22:32:13   3  ,trend
22:32:13   4  ,gatt
22:32:13   5  ,COUNT(tkr)
22:32:13   6  ,AVG(g1)
22:32:13   7  FROM stk14svmspy
22:32:13   8  GROUP BY tkr,trend,gatt
22:32:13   9  ORDER BY tkr,trend,gatt
22:32:13  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
DIA		-1 nup	     4302 -.74077406
DIA		-1 up	     3258 1.13186924
DIA		-1		7
DIA		 1 nup	    11161 -.34805371
DIA		 1 up	     6020 .823350917
DIA		 1	      301

6 rows selected.

Elapsed: 00:00:00.03
22:32:14 SQL> 
22:32:14 SQL> -- Derive NTILE based params:
22:32:14 SQL> 
22:32:14 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.03
22:32:14 SQL> CREATE TABLE stk16svmspy COMPRESS AS
22:32:14   2  SELECT
22:32:14   3  tkr
22:32:14   4  ,ydate
22:32:14   5  ,tkrdate
22:32:14   6  ,clse
22:32:14   7  ,g1
22:32:14   8  ,gatt
22:32:14   9  ,gattn
22:32:14  10  ,trend
22:32:14  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
22:32:14  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
22:32:14  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
22:32:14  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
22:32:14  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
22:32:14  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
22:32:14  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
22:32:14  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
22:32:14  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
22:32:14  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
22:32:14  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
22:32:14  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
22:32:14  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
22:32:14  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
22:32:14  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
22:32:14  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
22:32:14  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
22:32:14  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
22:32:14  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
22:32:14  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
22:32:14  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
22:32:14  32  ,hh  att21
22:32:14  33  ,d   att22
22:32:14  34  ,w   att23
22:32:14  35  ,mpm att24
22:32:14  36  ,mph att25
22:32:14  37  ,trend att26
22:32:14  38  FROM stk14svmspy
22:32:14  39  ORDER BY ydate
22:32:14  40  /

Table created.

Elapsed: 00:00:02.98
22:32:17 SQL> 
22:32:17 SQL> -- rpt
22:32:17 SQL> 
22:32:17 SQL> SELECT
22:32:17   2  tkr
22:32:17   3  ,trend
22:32:17   4  ,gatt
22:32:17   5  ,COUNT(tkr)
22:32:17   6  ,AVG(g1)
22:32:17   7  FROM stk16svmspy
22:32:17   8  GROUP BY tkr,trend,gatt
22:32:17   9  ORDER BY tkr,trend,gatt
22:32:17  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
DIA		-1 nup	     4302 -.74077406
DIA		-1 up	     3258 1.13186924
DIA		-1		7
DIA		 1 nup	    11161 -.34805371
DIA		 1 up	     6020 .823350917
DIA		 1	      301

6 rows selected.

Elapsed: 00:00:00.03
22:32:17 SQL> 
22:32:17 SQL> -- Now I derive goodness attributes:
22:32:17 SQL> 
22:32:17 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.05
22:32:17 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
22:32:17   2  SELECT
22:32:17   3  tkr
22:32:17   4  ,ydate
22:32:17   5  ,tkrdate
22:32:17   6  ,trend
22:32:17   7  ,g1
22:32:17   8  ,gatt
22:32:17   9  ,gattn
22:32:17  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
22:32:17  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
22:32:17  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
22:32:17  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
22:32:17  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
22:32:17  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
22:32:17  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
22:32:17  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
22:32:17  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
22:32:17  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
22:32:17  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
22:32:17  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
22:32:17  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
22:32:17  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
22:32:17  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
22:32:17  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
22:32:17  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
22:32:17  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
22:32:17  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
22:32:17  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
22:32:17  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
22:32:17  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
22:32:17  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
22:32:17  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
22:32:17  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
22:32:17  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
22:32:17  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
22:32:17  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
22:32:17  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
22:32:17  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
22:32:17  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
22:32:17  41  FROM stk16svmspy
22:32:17  42  /

Table created.

Elapsed: 00:00:03.97
22:32:21 SQL> 
22:32:21 SQL> -- rpt
22:32:21 SQL> 
22:32:21 SQL> SELECT
22:32:21   2  tkr
22:32:21   3  ,trend
22:32:21   4  ,gatt
22:32:21   5  ,COUNT(tkr)
22:32:21   6  ,AVG(g1)
22:32:21   7  FROM stk_ms_svmspy
22:32:21   8  GROUP BY tkr,trend,gatt
22:32:21   9  ORDER BY tkr,trend,gatt
22:32:21  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
DIA		-1 nup	     4302 -.74077406
DIA		-1 up	     3258 1.13186924
DIA		-1		7
DIA		 1 nup	    11161 -.34805371
DIA		 1 up	     6020 .823350917
DIA		 1	      301

6 rows selected.

Elapsed: 00:00:00.03
22:32:21 SQL> 
22:32:21 SQL> SELECT
22:32:21   2  tkr
22:32:21   3  ,0+TO_CHAR(ydate,'D')daynum
22:32:21   4  ,COUNT(tkr)
22:32:21   5  ,MIN(ydate),MAX(ydate)
22:32:21   6  FROM stk_ms_svmspy
22:32:21   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
22:32:21   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
22:32:21   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
DIA		 2	 4922 2009-11-02 13:25:00 2011-01-10 20:55:00
DIA		 3	 5004 2009-11-03 13:25:00 2011-01-18 20:55:00
DIA		 4	 4999 2009-10-28 18:10:00 2011-01-19 20:55:00
DIA		 5	 5096 2009-10-29 13:25:00 2011-01-20 20:55:00
DIA		 6	 5028 2009-10-30 13:25:00 2011-01-14 20:55:00

Elapsed: 00:00:00.03
22:32:21 SQL> 
22:32:21 SQL> -- exit
22:32:21 SQL> @stk10svmd.sql '&1'
22:32:21 SQL> --
22:32:21 SQL> -- stk10svmd.sql
22:32:21 SQL> --
22:32:21 SQL> 
22:32:21 SQL> -- Creates views and tables for demonstrating SVM.
22:32:21 SQL> -- I need to run this after I run stk10.sql
22:32:21 SQL> 
22:32:21 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.20
22:32:21 SQL> 
22:32:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
22:32:21 SQL> 
22:32:21 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
22:32:21   2  SELECT
22:32:21   3  tkr
22:32:21   4  ,ydate
22:32:21   5  ,tkr||ydate tkrdate
22:32:21   6  ,clse
22:32:21   7  ,rownum rnum -- acts as t in my time-series
22:32:21   8  -- Derive some attributes from clse.
22:32:21   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
22:32:21  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
22:32:21  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
22:32:21  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
22:32:21  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
22:32:21  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
22:32:21  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
22:32:21  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
22:32:21  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
22:32:21  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
22:32:21  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
22:32:21  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
22:32:21  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
22:32:21  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
22:32:21  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
22:32:21  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
22:32:21  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
22:32:21  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
22:32:21  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
22:32:21  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
22:32:21  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
22:32:21  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
22:32:21  31  FROM ystk
22:32:21  32  WHERE UPPER(tkr)='&1'
22:32:21  33  AND ydate > '1990-01-01'
22:32:21  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
22:32:21  35  ORDER BY ydate
22:32:21  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='DIA'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='DIA')

Table created.

Elapsed: 00:00:00.26
22:32:21 SQL> 
22:32:21 SQL> -- rpt
22:32:21 SQL> 
22:32:21 SQL> SELECT
22:32:21   2  tkr
22:32:21   3  ,COUNT(tkr)
22:32:21   4  ,MIN(clse),MAX(clse)
22:32:21   5  ,MIN(avg4),MAX(avg4)
22:32:21   6  ,MIN(ydate),MAX(ydate)
22:32:21   7  FROM stk_svmd10svmspy
22:32:21   8  GROUP BY tkr
22:32:21   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
DIA		3275	  58.68     130.96     60.198	 130.228 1998-01-20 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.04
22:32:22 SQL> 
22:32:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:32:22 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
22:32:22 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
22:32:22   2  SELECT
22:32:22   3  tkr
22:32:22   4  ,ydate
22:32:22   5  ,tkrdate
22:32:22   6  ,clse
22:32:22   7  ,rnum
22:32:22   8  -- g1 is important. I want to predict g1:
22:32:22   9  ,ld - clse g1
22:32:22  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
22:32:22  11  -- I want more attributes from the ones I derived above:
22:32:22  12  -- clse relation to moving-min
22:32:22  13  ,clse-min3  cm3
22:32:22  14  ,clse-min4  cm4
22:32:22  15  ,clse-min5  cm5
22:32:22  16  ,clse-min6  cm6
22:32:22  17  ,clse-min7  cm7
22:32:22  18  ,clse-min8  cm8
22:32:22  19  ,clse-min9  cm9
22:32:22  20  -- clse relation to moving-avg
22:32:22  21  ,clse-avg3  ca3
22:32:22  22  ,clse-avg4  ca4
22:32:22  23  ,clse-avg5  ca5
22:32:22  24  ,clse-avg6  ca6
22:32:22  25  ,clse-avg7  ca7
22:32:22  26  ,clse-avg8  ca8
22:32:22  27  ,clse-avg9  ca9
22:32:22  28  -- clse relation to moving-max
22:32:22  29  ,clse-max3  cx3
22:32:22  30  ,clse-max4  cx4
22:32:22  31  ,clse-max5  cx5
22:32:22  32  ,clse-max6  cx6
22:32:22  33  ,clse-max7  cx7
22:32:22  34  ,clse-max8  cx8
22:32:22  35  ,clse-max9  cx9
22:32:22  36  -- Derive date related attributes:
22:32:22  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:32:22  38  ,0+TO_CHAR(ydate,'D')d
22:32:22  39  ,0+TO_CHAR(ydate,'W')w
22:32:22  40  -- mpm stands for minutes-past-midnight:
22:32:22  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:32:22  42  -- mph stands for minutes-past-hour:
22:32:22  43  ,0+TO_CHAR(ydate,'MI')mph
22:32:22  44  FROM stk_svmd10svmspy
22:32:22  45  ORDER BY ydate
22:32:22  46  /

Table created.

Elapsed: 00:00:00.10
22:32:22 SQL> 
22:32:22 SQL> -- rpt
22:32:22 SQL> 
22:32:22 SQL> SELECT
22:32:22   2  tkr
22:32:22   3  ,COUNT(tkr)
22:32:22   4  ,MIN(clse),MAX(clse)
22:32:22   5  ,MIN(ydate),MAX(ydate)
22:32:22   6  FROM stk_svmd12
22:32:22   7  GROUP BY tkr
22:32:22   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
DIA		3275	  58.68     130.96 1998-01-20 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.01
22:32:22 SQL> 
22:32:22 SQL> -- Prepare for derivation of NTILE based parameters.
22:32:22 SQL> -- Also derive the "trend" parameter:
22:32:22 SQL> 
22:32:22 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
22:32:22 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
22:32:22   2  SELECT
22:32:22   3  tkr
22:32:22   4  ,ydate
22:32:22   5  ,tkrdate
22:32:22   6  ,clse
22:32:22   7  ,g1
22:32:22   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
22:32:22   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
22:32:22  10  ,CASE WHEN trend IS NULL THEN 1
22:32:22  11  	    WHEN trend =0      THEN 1
22:32:22  12  	    ELSE trend END trend
22:32:22  13  ,cm3
22:32:22  14  ,cm4
22:32:22  15  ,cm5
22:32:22  16  ,cm6
22:32:22  17  ,cm7
22:32:22  18  ,cm8
22:32:22  19  ,cm9
22:32:22  20  ,ca3
22:32:22  21  ,ca4
22:32:22  22  ,ca5
22:32:22  23  ,ca6
22:32:22  24  ,ca7
22:32:22  25  ,ca8
22:32:22  26  ,ca9
22:32:22  27  ,cx3
22:32:22  28  ,cx4
22:32:22  29  ,cx5
22:32:22  30  ,cx6
22:32:22  31  ,cx7
22:32:22  32  ,cx8
22:32:22  33  ,cx9
22:32:22  34  ,hh
22:32:22  35  ,d
22:32:22  36  ,w
22:32:22  37  ,mpm
22:32:22  38  ,mph
22:32:22  39  FROM stk_svmd12
22:32:22  40  -- Guard against divide by 0:
22:32:22  41  WHERE clse > 0
22:32:22  42  ORDER BY ydate
22:32:22  43  /

Table created.

Elapsed: 00:00:00.09
22:32:22 SQL> 
22:32:22 SQL> -- rpt
22:32:22 SQL> 
22:32:22 SQL> SELECT
22:32:22   2  tkr
22:32:22   3  ,trend
22:32:22   4  ,gatt
22:32:22   5  ,COUNT(tkr)
22:32:22   6  ,AVG(g1)
22:32:22   7  FROM stk_svmd14
22:32:22   8  GROUP BY tkr,trend,gatt
22:32:22   9  ORDER BY tkr,trend,gatt
22:32:22  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
DIA		  -1 nup	851 -.70985899
DIA		  -1 up 	579 1.10801382
DIA		   1 nup       1189 -.46616484
DIA		   1 up 	655 .875984733
DIA		   1		  1

Elapsed: 00:00:00.01
22:32:22 SQL> 
22:32:22 SQL> -- Derive NTILE based params:
22:32:22 SQL> 
22:32:22 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.04
22:32:22 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
22:32:22   2  SELECT
22:32:22   3  tkr
22:32:22   4  ,ydate
22:32:22   5  ,tkrdate
22:32:22   6  ,clse
22:32:22   7  ,g1
22:32:22   8  ,gatt
22:32:22   9  ,gattn
22:32:22  10  ,trend
22:32:22  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
22:32:22  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
22:32:22  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
22:32:22  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
22:32:22  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
22:32:22  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
22:32:22  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
22:32:22  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
22:32:22  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
22:32:22  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
22:32:22  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
22:32:22  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
22:32:22  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
22:32:22  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
22:32:22  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
22:32:22  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
22:32:22  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
22:32:22  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
22:32:22  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
22:32:22  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
22:32:22  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
22:32:22  32  ,hh  att21
22:32:22  33  ,d   att22
22:32:22  34  ,w   att23
22:32:22  35  ,mpm att24
22:32:22  36  ,mph att25
22:32:22  37  ,trend att26
22:32:22  38  FROM stk_svmd14
22:32:22  39  ORDER BY ydate
22:32:22  40  /

Table created.

Elapsed: 00:00:00.37
22:32:22 SQL> 
22:32:22 SQL> -- rpt
22:32:22 SQL> 
22:32:22 SQL> SELECT
22:32:22   2  tkr
22:32:22   3  ,trend
22:32:22   4  ,gatt
22:32:22   5  ,COUNT(tkr)
22:32:22   6  ,AVG(g1)
22:32:22   7  FROM stk_svmd16
22:32:22   8  GROUP BY tkr,trend,gatt
22:32:22   9  ORDER BY tkr,trend,gatt
22:32:22  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
DIA		  -1 nup	851 -.70985899
DIA		  -1 up 	579 1.10801382
DIA		   1 nup       1189 -.46616484
DIA		   1 up 	655 .875984733
DIA		   1		  1

Elapsed: 00:00:00.02
22:32:22 SQL> 
22:32:22 SQL> -- Now I derive goodness attributes:
22:32:22 SQL> 
22:32:22 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.04
22:32:22 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
22:32:22   2  SELECT
22:32:22   3  tkr
22:32:22   4  ,ydate
22:32:22   5  ,tkrdate
22:32:22   6  ,trend
22:32:22   7  ,g1
22:32:22   8  ,gatt
22:32:22   9  ,gattn
22:32:22  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
22:32:22  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
22:32:22  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
22:32:22  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
22:32:22  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
22:32:22  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
22:32:22  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
22:32:22  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
22:32:22  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
22:32:22  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
22:32:22  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
22:32:22  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
22:32:22  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
22:32:22  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
22:32:22  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
22:32:22  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
22:32:22  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
22:32:22  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
22:32:22  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
22:32:22  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
22:32:22  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
22:32:22  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
22:32:22  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
22:32:22  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
22:32:22  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
22:32:22  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
22:32:22  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
22:32:22  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
22:32:22  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
22:32:22  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
22:32:22  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
22:32:22  41  FROM stk_svmd16
22:32:22  42  /

Table created.

Elapsed: 00:00:00.63
22:32:23 SQL> 
22:32:23 SQL> -- rpt
22:32:23 SQL> 
22:32:23 SQL> SELECT
22:32:23   2  tkr
22:32:23   3  ,trend
22:32:23   4  ,gatt
22:32:23   5  ,COUNT(tkr)
22:32:23   6  ,AVG(g1)
22:32:23   7  FROM stk_ms_svmd_svmspy
22:32:23   8  GROUP BY tkr,trend,gatt
22:32:23   9  ORDER BY tkr,trend,gatt
22:32:23  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
DIA		  -1 nup	851 -.70985899
DIA		  -1 up 	579 1.10801382
DIA		   1 nup       1189 -.46616484
DIA		   1 up 	655 .875984733
DIA		   1		  1

Elapsed: 00:00:00.02
22:32:23 SQL> 
22:32:23 SQL> SELECT
22:32:23   2  tkr
22:32:23   3  ,COUNT(tkr)
22:32:23   4  ,MIN(ydate),MAX(ydate)
22:32:23   5  FROM stk_ms_svmd_svmspy
22:32:23   6  GROUP BY tkr
22:32:23   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
DIA		3275 1998-01-20 00:00:00 2011-01-19 00:00:00

Elapsed: 00:00:00.00
22:32:23 SQL> 
22:32:23 SQL> -- exit
22:32:23 SQL> 
22:32:23 SQL> 
22:32:23 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.04
22:32:23 SQL> 
22:32:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
22:32:23 SQL> 
22:32:23 SQL> CREATE TABLE stk_ms_u COMPRESS AS
22:32:23   2  SELECT * FROM stk_ms_svmspy
22:32:23   3  UNION
22:32:23   4  SELECT * FROM stk_ms_svmd_svmspy
22:32:23   5  /

Table created.

Elapsed: 00:00:00.49
22:32:24 SQL> 
22:32:24 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
