
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 27 20:58:53 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:58:53 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:58:53 SQL> 
20:58:53 SQL> 20:58:53 SQL> --
20:58:53 SQL> -- stk10u.sql
20:58:53 SQL> --
20:58:53 SQL> 
20:58:53 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
20:58:53 SQL> 
20:58:53 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
20:58:53 SQL> @stk10.sql     '&1'
20:58:53 SQL> --
20:58:53 SQL> -- stk10.sql
20:58:53 SQL> --
20:58:53 SQL> 
20:58:53 SQL> -- Creates views and tables for demonstrating SVM.
20:58:53 SQL> 
20:58:53 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.33
20:58:53 SQL> 
20:58:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
20:58:53 SQL> 
20:58:53 SQL> CREATE TABLE stk10svmspy COMPRESS AS
20:58:53   2  SELECT
20:58:53   3  tkr
20:58:53   4  ,ydate
20:58:53   5  ,tkr||ydate tkrdate
20:58:53   6  ,clse
20:58:53   7  ,clse2
20:58:53   8  ,rownum rnum -- acts as t in my time-series
20:58:53   9  -- g1 is important. I want to predict g1:
20:58:53  10  ,gain1day g1
20:58:53  11  -- Derive some attributes from clse.
20:58:53  12  -- Each row spans 5 minutes.
20:58:53  13  -- The number of rows in 1 day is 24*60/5.
20:58:53  14  -- I want the aggregations to span from 3 days to 9 days:
20:58:53  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
20:58:53  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
20:58:53  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
20:58:53  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
20:58:53  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
20:58:53  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
20:58:53  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
20:58:53  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
20:58:53  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
20:58:53  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
20:58:53  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
20:58:53  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
20:58:53  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
20:58:53  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
20:58:53  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
20:58:53  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
20:58:53  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
20:58:53  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
20:58:53  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
20:58:53  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
20:58:53  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
20:58:53  36  FROM di5min_stk_c2
20:58:53  37  WHERE UPPER(tkr)='&1'
20:58:53  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
20:58:53  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
20:58:53  40  ORDER BY ydate
20:58:53  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='TGT'

Table created.

Elapsed: 00:00:00.27
20:58:54 SQL> 
20:58:54 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.06
20:58:54 SQL> 
20:58:54 SQL> -- rpt
20:58:54 SQL> 
20:58:54 SQL> SELECT
20:58:54   2  tkr
20:58:54   3  ,COUNT(tkr)ccount
20:58:54   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:58:54   5  -- ,MIN(avg4),MAX(avg4)
20:58:54   6  ,MIN(ydate),MAX(ydate)
20:58:54   7  ,MIN(g1)
20:58:54   8  ,MAX(g1)
20:58:54   9  FROM stk10svmspy
20:58:54  10  GROUP BY tkr
20:58:54  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
TGT	      1325	 53.9	   60.37 2011-01-04 14:30:00 2011-01-27 20:50:00      -4.53	  1.67

Elapsed: 00:00:00.01
20:58:54 SQL> 
20:58:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:58:54 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.11
20:58:54 SQL> CREATE TABLE stk12svmspy COMPRESS AS
20:58:54   2  SELECT
20:58:54   3  tkr
20:58:54   4  ,ydate
20:58:54   5  ,tkrdate
20:58:54   6  ,clse
20:58:54   7  ,rnum
20:58:54   8  ,g1
20:58:54   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:58:54  10  -- I want more attributes from the ones I derived above:
20:58:54  11  -- clse relation to moving-min
20:58:54  12  ,clse-min3  cm3
20:58:54  13  ,clse-min4  cm4
20:58:54  14  ,clse-min5  cm5
20:58:54  15  ,clse-min6  cm6
20:58:54  16  ,clse-min7  cm7
20:58:54  17  ,clse-min8  cm8
20:58:54  18  ,clse-min9  cm9
20:58:54  19  -- clse relation to moving-avg
20:58:54  20  ,clse-avg3  ca3
20:58:54  21  ,clse-avg4  ca4
20:58:54  22  ,clse-avg5  ca5
20:58:54  23  ,clse-avg6  ca6
20:58:54  24  ,clse-avg7  ca7
20:58:54  25  ,clse-avg8  ca8
20:58:54  26  ,clse-avg9  ca9
20:58:54  27  -- clse relation to moving-max
20:58:54  28  ,clse-max3  cx3
20:58:54  29  ,clse-max4  cx4
20:58:54  30  ,clse-max5  cx5
20:58:54  31  ,clse-max6  cx6
20:58:54  32  ,clse-max7  cx7
20:58:54  33  ,clse-max8  cx8
20:58:54  34  ,clse-max9  cx9
20:58:54  35  -- Derive date related attributes:
20:58:54  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:58:54  37  ,0+TO_CHAR(ydate,'D')d
20:58:54  38  ,0+TO_CHAR(ydate,'W')w
20:58:54  39  -- mpm stands for minutes-past-midnight:
20:58:54  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:58:54  41  -- mph stands for minutes-past-hour:
20:58:54  42  ,0+TO_CHAR(ydate,'MI')mph
20:58:54  43  FROM stk10svmspy
20:58:54  44  ORDER BY ydate
20:58:54  45  /

Table created.

Elapsed: 00:00:00.07
20:58:54 SQL> 
20:58:54 SQL> -- rpt
20:58:54 SQL> 
20:58:54 SQL> SELECT
20:58:54   2  tkr
20:58:54   3  ,COUNT(tkr)ccount
20:58:54   4  ,MIN(clse)mnclse,MAX(clse)mxclse
20:58:54   5  -- ,MIN(avg4),MAX(avg4)
20:58:54   6  ,MIN(ydate),MAX(ydate)
20:58:54   7  ,MIN(g1)
20:58:54   8  ,AVG(g1)
20:58:54   9  ,MAX(g1)
20:58:54  10  FROM stk12svmspy
20:58:54  11  GROUP BY tkr
20:58:54  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
TGT	      1325	 53.9	   60.37 2011-01-04 14:30:00 2011-01-27 20:50:00      -4.53  -.2986142	     1.67

Elapsed: 00:00:00.00
20:58:54 SQL> 
20:58:54 SQL> -- Prepare for derivation of NTILE based parameters.
20:58:54 SQL> -- Also derive the "trend" parameter:
20:58:54 SQL> 
20:58:54 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.11
20:58:54 SQL> CREATE TABLE stk14svmspy COMPRESS AS
20:58:54   2  SELECT
20:58:54   3  tkr
20:58:54   4  ,ydate
20:58:54   5  ,tkrdate
20:58:54   6  ,clse
20:58:54   7  ,g1
20:58:54   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:58:54   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:58:54  10  ,CASE WHEN trend IS NULL THEN 1
20:58:54  11  	    WHEN trend =0      THEN 1
20:58:54  12  	    ELSE trend END trend
20:58:54  13  ,cm3
20:58:54  14  ,cm4
20:58:54  15  ,cm5
20:58:54  16  ,cm6
20:58:54  17  ,cm7
20:58:54  18  ,cm8
20:58:54  19  ,cm9
20:58:54  20  ,ca3
20:58:54  21  ,ca4
20:58:54  22  ,ca5
20:58:54  23  ,ca6
20:58:54  24  ,ca7
20:58:54  25  ,ca8
20:58:54  26  ,ca9
20:58:54  27  ,cx3
20:58:54  28  ,cx4
20:58:54  29  ,cx5
20:58:54  30  ,cx6
20:58:54  31  ,cx7
20:58:54  32  ,cx8
20:58:54  33  ,cx9
20:58:54  34  ,hh
20:58:54  35  ,d
20:58:54  36  ,w
20:58:54  37  ,mpm
20:58:54  38  ,mph
20:58:54  39  FROM stk12svmspy
20:58:54  40  -- Guard against divide by 0:
20:58:54  41  WHERE clse > 0
20:58:54  42  ORDER BY ydate
20:58:54  43  /

Table created.

Elapsed: 00:00:00.05
20:58:54 SQL> 
20:58:54 SQL> -- rpt
20:58:54 SQL> 
20:58:54 SQL> SELECT
20:58:54   2  tkr
20:58:54   3  ,trend
20:58:54   4  ,gatt
20:58:54   5  ,COUNT(tkr)
20:58:54   6  ,AVG(g1)
20:58:54   7  FROM stk14svmspy
20:58:54   8  GROUP BY tkr,trend,gatt
20:58:54   9  ORDER BY tkr,trend,gatt
20:58:54  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
TGT		-1 nup	      645 -.80891473
TGT		-1 up	      394 .541852792
TGT		-1	      156
TGT		 1 nup	      123 -.34268293
TGT		 1 up		7	 .19

Elapsed: 00:00:00.01
20:58:54 SQL> 
20:58:54 SQL> -- Derive NTILE based params:
20:58:54 SQL> 
20:58:54 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.10
20:58:54 SQL> CREATE TABLE stk16svmspy COMPRESS AS
20:58:54   2  SELECT
20:58:54   3  tkr
20:58:54   4  ,ydate
20:58:54   5  ,tkrdate
20:58:54   6  ,clse
20:58:54   7  ,g1
20:58:54   8  ,gatt
20:58:54   9  ,gattn
20:58:54  10  ,trend
20:58:54  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:58:54  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:58:54  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:58:54  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:58:54  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:58:54  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:58:54  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:58:54  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:58:54  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:58:54  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:58:54  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:58:54  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:58:54  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:58:54  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:58:54  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:58:54  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:58:54  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:58:54  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:58:54  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:58:54  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:58:54  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:58:54  32  ,hh  att21
20:58:54  33  ,d   att22
20:58:54  34  ,w   att23
20:58:54  35  ,mpm att24
20:58:54  36  ,mph att25
20:58:54  37  ,trend att26
20:58:54  38  FROM stk14svmspy
20:58:54  39  ORDER BY ydate
20:58:54  40  /

Table created.

Elapsed: 00:00:00.19
20:58:54 SQL> 
20:58:54 SQL> -- rpt
20:58:54 SQL> 
20:58:54 SQL> SELECT
20:58:54   2  tkr
20:58:54   3  ,trend
20:58:54   4  ,gatt
20:58:54   5  ,COUNT(tkr)
20:58:54   6  ,AVG(g1)
20:58:54   7  FROM stk16svmspy
20:58:54   8  GROUP BY tkr,trend,gatt
20:58:54   9  ORDER BY tkr,trend,gatt
20:58:54  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
TGT		-1 nup	      645 -.80891473
TGT		-1 up	      394 .541852792
TGT		-1	      156
TGT		 1 nup	      123 -.34268293
TGT		 1 up		7	 .19

Elapsed: 00:00:00.00
20:58:54 SQL> 
20:58:54 SQL> 
20:58:54 SQL> CREATE OR REPLACE VIEW sc12tkr AS
20:58:54   2  SELECT
20:58:54   3  m.tkr
20:58:54   4  ,m.ydate
20:58:54   5  ,m.tkrdate
20:58:54   6  ,l.score score_long
20:58:54   7  ,s.score score_short
20:58:54   8  ,m.g1
20:58:54   9  FROM stkscores l,stkscores s,stk16svmspy m
20:58:54  10  WHERE l.targ='gatt'
20:58:54  11  AND   s.targ='gattn'
20:58:54  12  AND l.tkrdate = s.tkrdate
20:58:54  13  AND l.tkrdate = m.tkrdate
20:58:54  14  -- Speed things up:
20:58:54  15  AND l.tkr = '&1'
20:58:54  16  AND s.tkr = '&1'
20:58:54  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'TGT'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'TGT'

View created.

Elapsed: 00:00:00.04
20:58:54 SQL> 
20:58:54 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.04
20:58:55 SQL> 
20:58:55 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
20:58:55   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:58:55   3  (
20:58:55   4  	SELECT
20:58:55   5  	tkrdate
20:58:55   6  	-- Find corr() tween score and g1 over 8 day period:
20:58:55   7  	,CORR((score_long - score_short),g1)
20:58:55   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
20:58:55   9  	FROM sc12tkr
20:58:55  10  )
20:58:55  11  GROUP BY tkrdate
20:58:55  12  /

Table created.

Elapsed: 00:00:00.14
20:58:55 SQL> 
20:58:55 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:58:55 SQL> 
20:58:55 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.09
20:58:55 SQL> 
20:58:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
20:58:55 SQL> 
20:58:55 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
20:58:55   2  SELECT
20:58:55   3  tkr
20:58:55   4  ,ydate
20:58:55   5  ,s.tkrdate
20:58:55   6  ,trend
20:58:55   7  ,g1
20:58:55   8  ,gatt
20:58:55   9  ,gattn
20:58:55  10  -- Recent CORR()tween scores and gains:
20:58:55  11  ,NVL(sc_corr,0)sc_corr
20:58:55  12  -- Goodness attributes:
20:58:55  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
20:58:55  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
20:58:55  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
20:58:55  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
20:58:55  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
20:58:55  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
20:58:55  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
20:58:55  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
20:58:55  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
20:58:55  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
20:58:55  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
20:58:55  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
20:58:55  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
20:58:55  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
20:58:55  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
20:58:55  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
20:58:55  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
20:58:55  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
20:58:55  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
20:58:55  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
20:58:55  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
20:58:55  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
20:58:55  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
20:58:55  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
20:58:55  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
20:58:55  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
20:58:55  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
20:58:55  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:58:55  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
20:58:55  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
20:58:55  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
20:58:55  44  FROM stk16svmspy s,score_corr_tkr c
20:58:55  45  WHERE s.tkrdate = c.tkrdate(+)
20:58:55  46  /

Table created.

Elapsed: 00:00:00.28
20:58:55 SQL> 
20:58:55 SQL> -- rpt
20:58:55 SQL> 
20:58:55 SQL> SELECT
20:58:55   2  tkr
20:58:55   3  ,trend
20:58:55   4  ,gatt
20:58:55   5  ,COUNT(tkr)
20:58:55   6  ,AVG(g1)
20:58:55   7  ,AVG(sc_corr)
20:58:55   8  FROM stk_ms_svmspy
20:58:55   9  GROUP BY tkr,trend,gatt
20:58:55  10  ORDER BY tkr,trend,gatt
20:58:55  11  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
------- ---------- --- ---------- ---------- ------------
TGT		-1 nup	      645 -.80891473	-.1052266
TGT		-1 up	      394 .541852792   -.15654078
TGT		-1	      156	       -.09865237
TGT		 1 nup	      123 -.34268293   -.00870067
TGT		 1 up		7	 .19   -.06553944

Elapsed: 00:00:00.01
20:58:55 SQL> 
20:58:55 SQL> SELECT
20:58:55   2  tkr
20:58:55   3  ,0+TO_CHAR(ydate,'D')daynum
20:58:55   4  ,COUNT(tkr)
20:58:55   5  ,MIN(ydate),MAX(ydate)
20:58:55   6  FROM stk_ms_svmspy
20:58:55   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
20:58:55   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
20:58:55   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
TGT		 2	  156 2011-01-10 14:30:00 2011-01-24 20:55:00
TGT		 3	  312 2011-01-04 14:30:00 2011-01-25 20:55:00
TGT		 4	  312 2011-01-05 14:30:00 2011-01-26 20:55:00
TGT		 5	  311 2011-01-06 14:30:00 2011-01-27 20:50:00
TGT		 6	  234 2011-01-07 14:30:00 2011-01-21 20:55:00

Elapsed: 00:00:00.00
20:58:55 SQL> 
20:58:55 SQL> -- exit
20:58:55 SQL> @stk10svmd.sql '&1'
20:58:55 SQL> --
20:58:55 SQL> -- stk10svmd.sql
20:58:55 SQL> --
20:58:55 SQL> 
20:58:55 SQL> -- Creates views and tables for demonstrating SVM.
20:58:55 SQL> -- I need to run this after I run stk10.sql
20:58:55 SQL> 
20:58:55 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.12
20:58:55 SQL> 
20:58:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.05
20:58:55 SQL> 
20:58:55 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
20:58:55   2  SELECT
20:58:55   3  tkr
20:58:55   4  ,ydate
20:58:55   5  ,tkr||ydate tkrdate
20:58:55   6  ,clse
20:58:55   7  ,rownum rnum -- acts as t in my time-series
20:58:55   8  -- Derive some attributes from clse.
20:58:55   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
20:58:55  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
20:58:55  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
20:58:55  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
20:58:55  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
20:58:55  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
20:58:55  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
20:58:55  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
20:58:55  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
20:58:55  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
20:58:55  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
20:58:55  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
20:58:55  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
20:58:55  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
20:58:55  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
20:58:55  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
20:58:55  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
20:58:55  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
20:58:55  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
20:58:55  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
20:58:55  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
20:58:55  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
20:58:55  31  -- ystk21 created here: svmd/cr_ystk21.sql
20:58:55  32  FROM ystk21
20:58:55  33  WHERE UPPER(tkr)='&1'
20:58:55  34  AND ydate > '1990-01-01'
20:58:55  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
20:58:55  36  ORDER BY ydate
20:58:55  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='TGT'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='TGT')

Table created.

Elapsed: 00:00:00.34
20:58:56 SQL> 
20:58:56 SQL> -- rpt
20:58:56 SQL> 
20:58:56 SQL> SELECT
20:58:56   2  tkr
20:58:56   3  ,COUNT(tkr)
20:58:56   4  ,MIN(clse),MAX(clse)
20:58:56   5  ,MIN(avg4),MAX(avg4)
20:58:56   6  ,MIN(ydate),MAX(ydate)
20:58:56   7  FROM stk_svmd10svmspy
20:58:56   8  GROUP BY tkr
20:58:56   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
TGT		5312	      3      66.63	3.058	  65.664 1990-01-02 21:00:00 2011-01-26 21:00:00

Elapsed: 00:00:00.01
20:58:56 SQL> 
20:58:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:58:56 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.11
20:58:56 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
20:58:56   2  SELECT
20:58:56   3  tkr
20:58:56   4  ,ydate
20:58:56   5  ,tkrdate
20:58:56   6  ,clse
20:58:56   7  ,rnum
20:58:56   8  -- g1 is important. I want to predict g1:
20:58:56   9  ,ld - clse g1
20:58:56  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
20:58:56  11  -- I want more attributes from the ones I derived above:
20:58:56  12  -- clse relation to moving-min
20:58:56  13  ,clse-min3  cm3
20:58:56  14  ,clse-min4  cm4
20:58:56  15  ,clse-min5  cm5
20:58:56  16  ,clse-min6  cm6
20:58:56  17  ,clse-min7  cm7
20:58:56  18  ,clse-min8  cm8
20:58:56  19  ,clse-min9  cm9
20:58:56  20  -- clse relation to moving-avg
20:58:56  21  ,clse-avg3  ca3
20:58:56  22  ,clse-avg4  ca4
20:58:56  23  ,clse-avg5  ca5
20:58:56  24  ,clse-avg6  ca6
20:58:56  25  ,clse-avg7  ca7
20:58:56  26  ,clse-avg8  ca8
20:58:56  27  ,clse-avg9  ca9
20:58:56  28  -- clse relation to moving-max
20:58:56  29  ,clse-max3  cx3
20:58:56  30  ,clse-max4  cx4
20:58:56  31  ,clse-max5  cx5
20:58:56  32  ,clse-max6  cx6
20:58:56  33  ,clse-max7  cx7
20:58:56  34  ,clse-max8  cx8
20:58:56  35  ,clse-max9  cx9
20:58:56  36  -- Derive date related attributes:
20:58:56  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:58:56  38  ,0+TO_CHAR(ydate,'D')d
20:58:56  39  ,0+TO_CHAR(ydate,'W')w
20:58:56  40  -- mpm stands for minutes-past-midnight:
20:58:56  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:58:56  42  -- mph stands for minutes-past-hour:
20:58:56  43  ,0+TO_CHAR(ydate,'MI')mph
20:58:56  44  FROM stk_svmd10svmspy
20:58:56  45  ORDER BY ydate
20:58:56  46  /

Table created.

Elapsed: 00:00:00.20
20:58:56 SQL> 
20:58:56 SQL> -- rpt
20:58:56 SQL> 
20:58:56 SQL> SELECT
20:58:56   2  tkr
20:58:56   3  ,COUNT(tkr)
20:58:56   4  ,MIN(clse),MAX(clse)
20:58:56   5  ,MIN(ydate),MAX(ydate)
20:58:56   6  FROM stk_svmd12
20:58:56   7  GROUP BY tkr
20:58:56   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
TGT		5312	      3      66.63 1990-01-02 21:00:00 2011-01-26 21:00:00

Elapsed: 00:00:00.01
20:58:56 SQL> 
20:58:56 SQL> -- Prepare for derivation of NTILE based parameters.
20:58:56 SQL> -- Also derive the "trend" parameter:
20:58:56 SQL> 
20:58:56 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.22
20:58:56 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
20:58:56   2  SELECT
20:58:56   3  tkr
20:58:56   4  ,ydate
20:58:56   5  ,tkrdate
20:58:56   6  ,clse
20:58:56   7  ,g1
20:58:56   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
20:58:56   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
20:58:56  10  ,CASE WHEN trend IS NULL THEN 1
20:58:56  11  	    WHEN trend =0      THEN 1
20:58:56  12  	    ELSE trend END trend
20:58:56  13  ,cm3
20:58:56  14  ,cm4
20:58:56  15  ,cm5
20:58:56  16  ,cm6
20:58:56  17  ,cm7
20:58:56  18  ,cm8
20:58:56  19  ,cm9
20:58:56  20  ,ca3
20:58:56  21  ,ca4
20:58:56  22  ,ca5
20:58:56  23  ,ca6
20:58:56  24  ,ca7
20:58:56  25  ,ca8
20:58:56  26  ,ca9
20:58:56  27  ,cx3
20:58:56  28  ,cx4
20:58:56  29  ,cx5
20:58:56  30  ,cx6
20:58:56  31  ,cx7
20:58:56  32  ,cx8
20:58:56  33  ,cx9
20:58:56  34  ,hh
20:58:56  35  ,d
20:58:56  36  ,w
20:58:56  37  ,mpm
20:58:56  38  ,mph
20:58:56  39  FROM stk_svmd12
20:58:56  40  -- Guard against divide by 0:
20:58:56  41  WHERE clse > 0
20:58:56  42  ORDER BY ydate
20:58:56  43  /

Table created.

Elapsed: 00:00:00.12
20:58:57 SQL> 
20:58:57 SQL> -- rpt
20:58:57 SQL> 
20:58:57 SQL> SELECT
20:58:57   2  tkr
20:58:57   3  ,trend
20:58:57   4  ,gatt
20:58:57   5  ,COUNT(tkr)
20:58:57   6  ,AVG(g1)
20:58:57   7  FROM stk_svmd14
20:58:57   8  GROUP BY tkr,trend,gatt
20:58:57   9  ORDER BY tkr,trend,gatt
20:58:57  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
TGT		  -1 nup       1368 -.36301901
TGT		  -1 up        1112 .522985612
TGT		   1 nup       1688 -.33418839
TGT		   1 up        1143 .464286964
TGT		   1		  1

Elapsed: 00:00:00.01
20:58:57 SQL> 
20:58:57 SQL> -- Derive NTILE based params:
20:58:57 SQL> 
20:58:57 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.10
20:58:57 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
20:58:57   2  SELECT
20:58:57   3  tkr
20:58:57   4  ,ydate
20:58:57   5  ,tkrdate
20:58:57   6  ,clse
20:58:57   7  ,g1
20:58:57   8  ,gatt
20:58:57   9  ,gattn
20:58:57  10  ,trend
20:58:57  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
20:58:57  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
20:58:57  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
20:58:57  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
20:58:57  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
20:58:57  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
20:58:57  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
20:58:57  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
20:58:57  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
20:58:57  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
20:58:57  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
20:58:57  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
20:58:57  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
20:58:57  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
20:58:57  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
20:58:57  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
20:58:57  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
20:58:57  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
20:58:57  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
20:58:57  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
20:58:57  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
20:58:57  32  ,hh  att21
20:58:57  33  ,d   att22
20:58:57  34  ,w   att23
20:58:57  35  ,mpm att24
20:58:57  36  ,mph att25
20:58:57  37  ,trend att26
20:58:57  38  FROM stk_svmd14
20:58:57  39  ORDER BY ydate
20:58:57  40  /

Table created.

Elapsed: 00:00:00.62
20:58:57 SQL> 
20:58:57 SQL> -- rpt
20:58:57 SQL> 
20:58:57 SQL> SELECT
20:58:57   2  tkr
20:58:57   3  ,trend
20:58:57   4  ,gatt
20:58:57   5  ,COUNT(tkr)
20:58:57   6  ,AVG(g1)
20:58:57   7  FROM stk_svmd16
20:58:57   8  GROUP BY tkr,trend,gatt
20:58:57   9  ORDER BY tkr,trend,gatt
20:58:57  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
TGT		  -1 nup       1368 -.36301901
TGT		  -1 up        1112 .522985612
TGT		   1 nup       1688 -.33418839
TGT		   1 up        1143 .464286964
TGT		   1		  1

Elapsed: 00:00:00.01
20:58:57 SQL> 
20:58:57 SQL> 
20:58:57 SQL> CREATE OR REPLACE VIEW sc12tkr AS
20:58:57   2  SELECT
20:58:57   3  m.tkr
20:58:57   4  ,m.ydate
20:58:57   5  ,m.tkrdate
20:58:57   6  ,l.score score_long
20:58:57   7  ,s.score score_short
20:58:57   8  ,m.g1
20:58:57   9  FROM stkscores l,stkscores s,stk_svmd16 m
20:58:57  10  WHERE l.targ='gatt'
20:58:57  11  AND   s.targ='gattn'
20:58:57  12  AND l.tkrdate = s.tkrdate
20:58:57  13  AND l.tkrdate = m.tkrdate
20:58:57  14  -- Speed things up:
20:58:57  15  AND l.tkr = '&1'
20:58:57  16  AND s.tkr = '&1'
20:58:57  17  /
old  15: AND l.tkr = '&1'
new  15: AND l.tkr = 'TGT'
old  16: AND s.tkr = '&1'
new  16: AND s.tkr = 'TGT'

View created.

Elapsed: 00:00:00.05
20:58:57 SQL> 
20:58:57 SQL> DROP TABLE score_corr_tkr;

Table dropped.

Elapsed: 00:00:00.06
20:58:57 SQL> 
20:58:57 SQL> CREATE TABLE score_corr_tkr COMPRESS AS
20:58:57   2  SELECT tkrdate,AVG(sc_corr)sc_corr FROM
20:58:57   3  (
20:58:57   4  	SELECT
20:58:57   5  	tkrdate
20:58:57   6  	-- Find corr() tween score and g1 over 8 day period:
20:58:57   7  	,CORR((score_long - score_short),g1)
20:58:57   8  	  OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
20:58:57   9  	FROM sc12tkr
20:58:57  10  )
20:58:57  11  GROUP BY tkrdate
20:58:57  12  /

Table created.

Elapsed: 00:00:00.12
20:58:57 SQL> 
20:58:57 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
20:58:57 SQL> 
20:58:57 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.18
20:58:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
20:58:58 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
20:58:58   2  SELECT
20:58:58   3  tkr
20:58:58   4  ,ydate
20:58:58   5  ,s.tkrdate
20:58:58   6  ,trend
20:58:58   7  ,g1
20:58:58   8  ,gatt
20:58:58   9  ,gattn
20:58:58  10  -- Recent CORR()tween scores and gains:
20:58:58  11  ,NVL(sc_corr,0)sc_corr
20:58:58  12  -- Goodness attributes:
20:58:58  13  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
20:58:58  14  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
20:58:58  15  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
20:58:58  16  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
20:58:58  17  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
20:58:58  18  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
20:58:58  19  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
20:58:58  20  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
20:58:58  21  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
20:58:58  22  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
20:58:58  23  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
20:58:58  24  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
20:58:58  25  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
20:58:58  26  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
20:58:58  27  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
20:58:58  28  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
20:58:58  29  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
20:58:58  30  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
20:58:58  31  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
20:58:58  32  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
20:58:58  33  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
20:58:58  34  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
20:58:58  35  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
20:58:58  36  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
20:58:58  37  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
20:58:58  38  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
20:58:58  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
20:58:58  40  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
20:58:58  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
20:58:58  42  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
20:58:58  43  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
20:58:58  44  FROM stk_svmd16 s,score_corr_tkr c
20:58:58  45  WHERE s.tkrdate = c.tkrdate(+)
20:58:58  46  /

Table created.

Elapsed: 00:00:00.97
20:58:59 SQL> 
20:58:59 SQL> -- rpt
20:58:59 SQL> 
20:58:59 SQL> SELECT
20:58:59   2  tkr
20:58:59   3  ,trend
20:58:59   4  ,gatt
20:58:59   5  ,COUNT(tkr)
20:58:59   6  ,AVG(g1)
20:58:59   7  ,AVG(sc_corr)
20:58:59   8  FROM stk_ms_svmd_svmspy
20:58:59   9  GROUP BY tkr,trend,gatt
20:58:59  10  ORDER BY tkr,trend,gatt
20:58:59  11  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1) AVG(SC_CORR)
--------- ---------- --- ---------- ---------- ------------
TGT		  -1 nup       1368 -.36301901		  0
TGT		  -1 up        1112 .522985612		  0
TGT		   1 nup       1688 -.33418839		  0
TGT		   1 up        1143 .464286964		  0
TGT		   1		  1			  0

Elapsed: 00:00:00.01
20:58:59 SQL> 
20:58:59 SQL> SELECT
20:58:59   2  tkr
20:58:59   3  ,COUNT(tkr)
20:58:59   4  ,MIN(ydate),MAX(ydate)
20:58:59   5  FROM stk_ms_svmd_svmspy
20:58:59   6  GROUP BY tkr
20:58:59   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
TGT		5312 1990-01-02 21:00:00 2011-01-26 21:00:00

Elapsed: 00:00:00.00
20:58:59 SQL> 
20:58:59 SQL> -- exit
20:58:59 SQL> 
20:58:59 SQL> 
20:58:59 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.19
20:58:59 SQL> 
20:58:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
20:58:59 SQL> 
20:58:59 SQL> CREATE TABLE stk_ms_u COMPRESS AS
20:58:59   2  SELECT * FROM stk_ms_svmspy
20:58:59   3  UNION
20:58:59   4  SELECT * FROM stk_ms_svmd_svmspy
20:58:59   5  /

Table created.

Elapsed: 00:00:00.16
20:59:00 SQL> 
20:59:00 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
