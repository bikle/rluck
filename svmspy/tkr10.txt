
SQL*Plus: Release 11.2.0.1.0 Production on Fri Mar 18 04:21:55 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:21:55 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:21:55 SQL> 
04:21:55 SQL> 04:21:55 SQL> --
04:21:55 SQL> -- stk10u.sql
04:21:55 SQL> --
04:21:55 SQL> 
04:21:55 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
04:21:55 SQL> 
04:21:55 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
04:21:55 SQL> @stk10.sql     '&1'
04:21:55 SQL> --
04:21:55 SQL> -- stk10.sql
04:21:55 SQL> --
04:21:55 SQL> 
04:21:55 SQL> -- Creates views and tables for demonstrating SVM.
04:21:55 SQL> 
04:21:55 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.22
04:21:55 SQL> 
04:21:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
04:21:56 SQL> 
04:21:56 SQL> CREATE TABLE stk10svmspy COMPRESS AS
04:21:56   2  SELECT
04:21:56   3  tkr
04:21:56   4  ,ydate
04:21:56   5  ,tkr||ydate tkrdate
04:21:56   6  ,clse
04:21:56   7  ,clse2
04:21:56   8  ,rownum rnum -- acts as t in my time-series
04:21:56   9  -- g1 is important. I want to predict g1:
04:21:56  10  ,gain1day g1
04:21:56  11  -- Derive some attributes from clse.
04:21:56  12  -- Each row spans 5 minutes.
04:21:56  13  -- The number of rows in 1 day is 24*60/5.
04:21:56  14  -- I want the aggregations to span from 3 days to 9 days:
04:21:56  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
04:21:56  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
04:21:56  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
04:21:56  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
04:21:56  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
04:21:56  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
04:21:56  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
04:21:56  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
04:21:56  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
04:21:56  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
04:21:56  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
04:21:56  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
04:21:56  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
04:21:56  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
04:21:56  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
04:21:56  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
04:21:56  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
04:21:56  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
04:21:56  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
04:21:56  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
04:21:56  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
04:21:56  36  FROM di5min_stk_c2
04:21:56  37  WHERE UPPER(tkr)='&1'
04:21:56  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
04:21:56  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
04:21:56  40  ORDER BY ydate
04:21:56  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='SWC'

Table created.

Elapsed: 00:00:00.55
04:21:56 SQL> 
04:21:56 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.10
04:21:56 SQL> 
04:21:56 SQL> -- rpt
04:21:56 SQL> 
04:21:56 SQL> SELECT
04:21:56   2  tkr
04:21:56   3  ,COUNT(tkr)ccount
04:21:56   4  ,MIN(clse)mnclse,MAX(clse)mxclse
04:21:56   5  -- ,MIN(avg4),MAX(avg4)
04:21:56   6  ,MIN(ydate),MAX(ydate)
04:21:56   7  ,MIN(g1)
04:21:56   8  ,MAX(g1)
04:21:56   9  FROM stk10svmspy
04:21:56  10  GROUP BY tkr
04:21:56  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
SWC	      2964	 19.5	   25.88 2011-01-19 14:30:00 2011-03-17 19:55:00      -2.24	  1.99

Elapsed: 00:00:00.01
04:21:56 SQL> 
04:21:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:21:56 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.08
04:21:56 SQL> CREATE TABLE stk12svmspy COMPRESS AS
04:21:56   2  SELECT
04:21:56   3  tkr
04:21:56   4  ,ydate
04:21:56   5  ,tkrdate
04:21:56   6  ,clse
04:21:56   7  ,rnum
04:21:56   8  ,g1
04:21:56   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
04:21:56  10  -- I want more attributes from the ones I derived above:
04:21:56  11  -- clse relation to moving-min
04:21:56  12  ,clse-min3  cm3
04:21:56  13  ,clse-min4  cm4
04:21:56  14  ,clse-min5  cm5
04:21:56  15  ,clse-min6  cm6
04:21:56  16  ,clse-min7  cm7
04:21:56  17  ,clse-min8  cm8
04:21:56  18  ,clse-min9  cm9
04:21:56  19  -- clse relation to moving-avg
04:21:56  20  ,clse-avg3  ca3
04:21:56  21  ,clse-avg4  ca4
04:21:56  22  ,clse-avg5  ca5
04:21:56  23  ,clse-avg6  ca6
04:21:56  24  ,clse-avg7  ca7
04:21:56  25  ,clse-avg8  ca8
04:21:56  26  ,clse-avg9  ca9
04:21:56  27  -- clse relation to moving-max
04:21:56  28  ,clse-max3  cx3
04:21:56  29  ,clse-max4  cx4
04:21:56  30  ,clse-max5  cx5
04:21:56  31  ,clse-max6  cx6
04:21:56  32  ,clse-max7  cx7
04:21:56  33  ,clse-max8  cx8
04:21:56  34  ,clse-max9  cx9
04:21:56  35  -- Derive date related attributes:
04:21:56  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:21:56  37  ,0+TO_CHAR(ydate,'D')d
04:21:56  38  ,0+TO_CHAR(ydate,'W')w
04:21:56  39  -- mpm stands for minutes-past-midnight:
04:21:56  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:21:56  41  -- mph stands for minutes-past-hour:
04:21:56  42  ,0+TO_CHAR(ydate,'MI')mph
04:21:56  43  FROM stk10svmspy
04:21:56  44  ORDER BY ydate
04:21:56  45  /

Table created.

Elapsed: 00:00:00.11
04:21:56 SQL> 
04:21:56 SQL> -- rpt
04:21:56 SQL> 
04:21:56 SQL> SELECT
04:21:56   2  tkr
04:21:56   3  ,COUNT(tkr)ccount
04:21:56   4  ,MIN(clse)mnclse,MAX(clse)mxclse
04:21:56   5  -- ,MIN(avg4),MAX(avg4)
04:21:56   6  ,MIN(ydate),MAX(ydate)
04:21:56   7  ,MIN(g1)
04:21:56   8  ,AVG(g1)
04:21:56   9  ,MAX(g1)
04:21:56  10  FROM stk12svmspy
04:21:56  11  GROUP BY tkr
04:21:56  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
SWC	      2964	 19.5	   25.88 2011-01-19 14:30:00 2011-03-17 19:55:00      -2.24 -.02642384	     1.99

Elapsed: 00:00:00.01
04:21:56 SQL> 
04:21:56 SQL> -- Prepare for derivation of NTILE based parameters.
04:21:56 SQL> -- Also derive the "trend" parameter:
04:21:56 SQL> 
04:21:56 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.04
04:21:56 SQL> CREATE TABLE stk14svmspy COMPRESS AS
04:21:56   2  SELECT
04:21:56   3  tkr
04:21:56   4  ,ydate
04:21:56   5  ,tkrdate
04:21:56   6  ,clse
04:21:56   7  ,g1
04:21:56   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
04:21:56   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
04:21:56  10  ,CASE WHEN trend IS NULL THEN 1
04:21:56  11  	    WHEN trend =0      THEN 1
04:21:56  12  	    ELSE trend END trend
04:21:56  13  ,cm3
04:21:56  14  ,cm4
04:21:56  15  ,cm5
04:21:56  16  ,cm6
04:21:56  17  ,cm7
04:21:56  18  ,cm8
04:21:56  19  ,cm9
04:21:56  20  ,ca3
04:21:56  21  ,ca4
04:21:56  22  ,ca5
04:21:56  23  ,ca6
04:21:56  24  ,ca7
04:21:56  25  ,ca8
04:21:56  26  ,ca9
04:21:56  27  ,cx3
04:21:56  28  ,cx4
04:21:56  29  ,cx5
04:21:56  30  ,cx6
04:21:56  31  ,cx7
04:21:56  32  ,cx8
04:21:56  33  ,cx9
04:21:56  34  ,hh
04:21:56  35  ,d
04:21:56  36  ,w
04:21:56  37  ,mpm
04:21:56  38  ,mph
04:21:56  39  FROM stk12svmspy
04:21:56  40  -- Guard against divide by 0:
04:21:56  41  WHERE clse > 0
04:21:56  42  ORDER BY ydate
04:21:56  43  /

Table created.

Elapsed: 00:00:00.13
04:21:57 SQL> 
04:21:57 SQL> -- rpt
04:21:57 SQL> 
04:21:57 SQL> SELECT
04:21:57   2  tkr
04:21:57   3  ,trend
04:21:57   4  ,gatt
04:21:57   5  ,COUNT(tkr)
04:21:57   6  ,AVG(g1)
04:21:57   7  FROM stk14svmspy
04:21:57   8  GROUP BY tkr,trend,gatt
04:21:57   9  ORDER BY tkr,trend,gatt
04:21:57  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
SWC		-1 nup	      591 -.60583333
SWC		-1 up	      435 .664178161
SWC		-1	       90
SWC		 1 nup	      901 -.53067029
SWC		 1 up	      791 .601066916
SWC		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
04:21:57 SQL> 
04:21:57 SQL> -- Derive NTILE based params:
04:21:57 SQL> 
04:21:57 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.03
04:21:57 SQL> CREATE TABLE stk16svmspy COMPRESS AS
04:21:57   2  SELECT
04:21:57   3  tkr
04:21:57   4  ,ydate
04:21:57   5  ,tkrdate
04:21:57   6  ,clse
04:21:57   7  ,g1
04:21:57   8  ,gatt
04:21:57   9  ,gattn
04:21:57  10  ,trend
04:21:57  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
04:21:57  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
04:21:57  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
04:21:57  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
04:21:57  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
04:21:57  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
04:21:57  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
04:21:57  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
04:21:57  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
04:21:57  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
04:21:57  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
04:21:57  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
04:21:57  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
04:21:57  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
04:21:57  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
04:21:57  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
04:21:57  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
04:21:57  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
04:21:57  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
04:21:57  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
04:21:57  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
04:21:57  32  ,hh  att21
04:21:57  33  ,d   att22
04:21:57  34  ,w   att23
04:21:57  35  ,mpm att24
04:21:57  36  ,mph att25
04:21:57  37  ,trend att26
04:21:57  38  FROM stk14svmspy
04:21:57  39  ORDER BY ydate
04:21:57  40  /

Table created.

Elapsed: 00:00:00.37
04:21:57 SQL> 
04:21:57 SQL> -- rpt
04:21:57 SQL> 
04:21:57 SQL> SELECT
04:21:57   2  tkr
04:21:57   3  ,trend
04:21:57   4  ,gatt
04:21:57   5  ,COUNT(tkr)
04:21:57   6  ,AVG(g1)
04:21:57   7  FROM stk16svmspy
04:21:57   8  GROUP BY tkr,trend,gatt
04:21:57   9  ORDER BY tkr,trend,gatt
04:21:57  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
SWC		-1 nup	      591 -.60583333
SWC		-1 up	      435 .664178161
SWC		-1	       90
SWC		 1 nup	      901 -.53067029
SWC		 1 up	      791 .601066916
SWC		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
04:21:57 SQL> 
04:21:57 SQL> -- Comment out feedback related syntax:
04:21:57 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
04:21:57 SQL> -- SELECT
04:21:57 SQL> -- m.tkr
04:21:57 SQL> -- ,m.ydate
04:21:57 SQL> -- ,m.tkrdate
04:21:57 SQL> -- ,l.score score_long
04:21:57 SQL> -- ,s.score score_short
04:21:57 SQL> -- ,m.g1
04:21:57 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
04:21:57 SQL> -- WHERE l.targ='gatt'
04:21:57 SQL> -- AND	 s.targ='gattn'
04:21:57 SQL> -- AND l.tkrdate = s.tkrdate
04:21:57 SQL> -- AND l.tkrdate = m.tkrdate
04:21:57 SQL> -- -- Speed things up:
04:21:57 SQL> -- AND l.tkr = '&1'
04:21:57 SQL> -- AND s.tkr = '&1'
04:21:57 SQL> -- /
04:21:57 SQL> --
04:21:57 SQL> -- DROP TABLE score_corr_tkr;
04:21:57 SQL> --
04:21:57 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
04:21:57 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
04:21:57 SQL> -- (
04:21:57 SQL> --   SELECT
04:21:57 SQL> --   tkrdate
04:21:57 SQL> --   -- Find corr() tween score and g1 over 8 day period:
04:21:57 SQL> --   ,CORR((score_long - score_short),g1)
04:21:57 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
04:21:57 SQL> --   FROM sc12tkr
04:21:57 SQL> -- )
04:21:57 SQL> -- GROUP BY tkrdate
04:21:57 SQL> -- /
04:21:57 SQL> 
04:21:57 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
04:21:57 SQL> 
04:21:57 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
04:21:57 SQL> 
04:21:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
04:21:57 SQL> 
04:21:57 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
04:21:57   2  SELECT
04:21:57   3  tkr
04:21:57   4  ,ydate
04:21:57   5  ,tkrdate
04:21:57   6  ,trend
04:21:57   7  ,g1
04:21:57   8  ,gatt
04:21:57   9  ,gattn
04:21:57  10  -- Goodness attributes:
04:21:57  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
04:21:57  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
04:21:57  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
04:21:57  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
04:21:57  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
04:21:57  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
04:21:57  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
04:21:57  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
04:21:57  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
04:21:57  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
04:21:57  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
04:21:57  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
04:21:57  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
04:21:57  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
04:21:57  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
04:21:57  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
04:21:57  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
04:21:57  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
04:21:57  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
04:21:57  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
04:21:57  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
04:21:57  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
04:21:57  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
04:21:57  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
04:21:57  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
04:21:57  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
04:21:57  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
04:21:57  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
04:21:57  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
04:21:57  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
04:21:57  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
04:21:57  42  FROM stk16svmspy
04:21:57  43  /

Table created.

Elapsed: 00:00:00.54
04:21:58 SQL> 
04:21:58 SQL> -- rpt
04:21:58 SQL> 
04:21:58 SQL> SELECT
04:21:58   2  tkr
04:21:58   3  ,trend
04:21:58   4  ,gatt
04:21:58   5  ,COUNT(tkr)
04:21:58   6  ,AVG(g1)
04:21:58   7  FROM stk_ms_svmspy
04:21:58   8  GROUP BY tkr,trend,gatt
04:21:58   9  ORDER BY tkr,trend,gatt
04:21:58  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
SWC		-1 nup	      591 -.60583333
SWC		-1 up	      435 .664178161
SWC		-1	       90
SWC		 1 nup	      901 -.53067029
SWC		 1 up	      791 .601066916
SWC		 1	      156

6 rows selected.

Elapsed: 00:00:00.01
04:21:58 SQL> 
04:21:58 SQL> SELECT
04:21:58   2  tkr
04:21:58   3  ,0+TO_CHAR(ydate,'D')daynum
04:21:58   4  ,COUNT(tkr)
04:21:58   5  ,MIN(ydate),MAX(ydate)
04:21:58   6  FROM stk_ms_svmspy
04:21:58   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
04:21:58   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
04:21:58   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
SWC		 2	  468 2011-01-24 14:30:00 2011-03-14 19:55:00
SWC		 3	  546 2011-01-25 14:30:00 2011-03-15 19:55:00
SWC		 4	  624 2011-01-19 14:30:00 2011-03-16 19:55:00
SWC		 5	  702 2011-01-20 14:30:00 2011-03-17 19:55:00
SWC		 6	  624 2011-01-21 14:30:00 2011-03-11 20:55:00

Elapsed: 00:00:00.01
04:21:58 SQL> 
04:21:58 SQL> -- exit
04:21:58 SQL> @stk10svmd.sql '&1'
04:21:58 SQL> --
04:21:58 SQL> -- stk10svmd.sql
04:21:58 SQL> --
04:21:58 SQL> 
04:21:58 SQL> -- Creates views and tables for demonstrating SVM.
04:21:58 SQL> -- I need to run this after I run stk10.sql
04:21:58 SQL> 
04:21:58 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.08
04:21:58 SQL> 
04:21:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.13
04:21:58 SQL> 
04:21:58 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
04:21:58   2  SELECT
04:21:58   3  tkr
04:21:58   4  ,ydate
04:21:58   5  ,tkr||ydate tkrdate
04:21:58   6  ,clse
04:21:58   7  ,rownum rnum -- acts as t in my time-series
04:21:58   8  -- Derive some attributes from clse.
04:21:58   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
04:21:58  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
04:21:58  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
04:21:58  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
04:21:58  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
04:21:58  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
04:21:58  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
04:21:58  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
04:21:58  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
04:21:58  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
04:21:58  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
04:21:58  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
04:21:58  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
04:21:58  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
04:21:58  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
04:21:58  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
04:21:58  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
04:21:58  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
04:21:58  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
04:21:58  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
04:21:58  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
04:21:58  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
04:21:58  31  -- ystk21 created here: svmd/cr_ystk21.sql
04:21:58  32  FROM ystk21
04:21:58  33  WHERE UPPER(tkr)='&1'
04:21:58  34  AND ydate > '1990-01-01'
04:21:58  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
04:21:58  36  ORDER BY ydate
04:21:58  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='SWC'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='SWC')

Table created.

Elapsed: 00:00:00.36
04:21:58 SQL> 
04:21:58 SQL> -- rpt
04:21:58 SQL> 
04:21:58 SQL> SELECT
04:21:58   2  tkr
04:21:58   3  ,COUNT(tkr)
04:21:58   4  ,MIN(clse),MAX(clse)
04:21:58   5  ,MIN(avg4),MAX(avg4)
04:21:58   6  ,MIN(ydate),MAX(ydate)
04:21:58   7  FROM stk_svmd10svmspy
04:21:58   8  GROUP BY tkr
04:21:58   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
SWC		4082	   1.76 	47	2.116	  44.976 1994-12-19 21:00:00 2011-03-15 21:00:00

Elapsed: 00:00:00.01
04:21:59 SQL> 
04:21:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:21:59 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.04
04:21:59 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
04:21:59   2  SELECT
04:21:59   3  tkr
04:21:59   4  ,ydate
04:21:59   5  ,tkrdate
04:21:59   6  ,clse
04:21:59   7  ,rnum
04:21:59   8  -- g1 is important. I want to predict g1:
04:21:59   9  ,ld - clse g1
04:21:59  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
04:21:59  11  -- I want more attributes from the ones I derived above:
04:21:59  12  -- clse relation to moving-min
04:21:59  13  ,clse-min3  cm3
04:21:59  14  ,clse-min4  cm4
04:21:59  15  ,clse-min5  cm5
04:21:59  16  ,clse-min6  cm6
04:21:59  17  ,clse-min7  cm7
04:21:59  18  ,clse-min8  cm8
04:21:59  19  ,clse-min9  cm9
04:21:59  20  -- clse relation to moving-avg
04:21:59  21  ,clse-avg3  ca3
04:21:59  22  ,clse-avg4  ca4
04:21:59  23  ,clse-avg5  ca5
04:21:59  24  ,clse-avg6  ca6
04:21:59  25  ,clse-avg7  ca7
04:21:59  26  ,clse-avg8  ca8
04:21:59  27  ,clse-avg9  ca9
04:21:59  28  -- clse relation to moving-max
04:21:59  29  ,clse-max3  cx3
04:21:59  30  ,clse-max4  cx4
04:21:59  31  ,clse-max5  cx5
04:21:59  32  ,clse-max6  cx6
04:21:59  33  ,clse-max7  cx7
04:21:59  34  ,clse-max8  cx8
04:21:59  35  ,clse-max9  cx9
04:21:59  36  -- Derive date related attributes:
04:21:59  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:21:59  38  ,0+TO_CHAR(ydate,'D')d
04:21:59  39  ,0+TO_CHAR(ydate,'W')w
04:21:59  40  -- mpm stands for minutes-past-midnight:
04:21:59  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:21:59  42  -- mph stands for minutes-past-hour:
04:21:59  43  ,0+TO_CHAR(ydate,'MI')mph
04:21:59  44  FROM stk_svmd10svmspy
04:21:59  45  ORDER BY ydate
04:21:59  46  /

Table created.

Elapsed: 00:00:00.11
04:21:59 SQL> 
04:21:59 SQL> -- rpt
04:21:59 SQL> 
04:21:59 SQL> SELECT
04:21:59   2  tkr
04:21:59   3  ,COUNT(tkr)
04:21:59   4  ,MIN(clse),MAX(clse)
04:21:59   5  ,MIN(ydate),MAX(ydate)
04:21:59   6  FROM stk_svmd12
04:21:59   7  GROUP BY tkr
04:21:59   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
SWC		4082	   1.76 	47 1994-12-19 21:00:00 2011-03-15 21:00:00

Elapsed: 00:00:00.00
04:21:59 SQL> 
04:21:59 SQL> -- Prepare for derivation of NTILE based parameters.
04:21:59 SQL> -- Also derive the "trend" parameter:
04:21:59 SQL> 
04:21:59 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.04
04:21:59 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
04:21:59   2  SELECT
04:21:59   3  tkr
04:21:59   4  ,ydate
04:21:59   5  ,tkrdate
04:21:59   6  ,clse
04:21:59   7  ,g1
04:21:59   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
04:21:59   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
04:21:59  10  ,CASE WHEN trend IS NULL THEN 1
04:21:59  11  	    WHEN trend =0      THEN 1
04:21:59  12  	    ELSE trend END trend
04:21:59  13  ,cm3
04:21:59  14  ,cm4
04:21:59  15  ,cm5
04:21:59  16  ,cm6
04:21:59  17  ,cm7
04:21:59  18  ,cm8
04:21:59  19  ,cm9
04:21:59  20  ,ca3
04:21:59  21  ,ca4
04:21:59  22  ,ca5
04:21:59  23  ,ca6
04:21:59  24  ,ca7
04:21:59  25  ,ca8
04:21:59  26  ,ca9
04:21:59  27  ,cx3
04:21:59  28  ,cx4
04:21:59  29  ,cx5
04:21:59  30  ,cx6
04:21:59  31  ,cx7
04:21:59  32  ,cx8
04:21:59  33  ,cx9
04:21:59  34  ,hh
04:21:59  35  ,d
04:21:59  36  ,w
04:21:59  37  ,mpm
04:21:59  38  ,mph
04:21:59  39  FROM stk_svmd12
04:21:59  40  -- Guard against divide by 0:
04:21:59  41  WHERE clse > 0
04:21:59  42  ORDER BY ydate
04:21:59  43  /

Table created.

Elapsed: 00:00:00.12
04:21:59 SQL> 
04:21:59 SQL> -- rpt
04:21:59 SQL> 
04:21:59 SQL> SELECT
04:21:59   2  tkr
04:21:59   3  ,trend
04:21:59   4  ,gatt
04:21:59   5  ,COUNT(tkr)
04:21:59   6  ,AVG(g1)
04:21:59   7  FROM stk_svmd14
04:21:59   8  GROUP BY tkr,trend,gatt
04:21:59   9  ORDER BY tkr,trend,gatt
04:21:59  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
SWC		  -1 nup	996 -.37213855
SWC		  -1 up 	912 .447861842
SWC		  -1		  1
SWC		   1 nup       1197 -.37172932
SWC		   1 up 	976 .429620902

Elapsed: 00:00:00.02
04:21:59 SQL> 
04:21:59 SQL> -- Derive NTILE based params:
04:21:59 SQL> 
04:21:59 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.04
04:21:59 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
04:21:59   2  SELECT
04:21:59   3  tkr
04:21:59   4  ,ydate
04:21:59   5  ,tkrdate
04:21:59   6  ,clse
04:21:59   7  ,g1
04:21:59   8  ,gatt
04:21:59   9  ,gattn
04:21:59  10  ,trend
04:21:59  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
04:21:59  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
04:21:59  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
04:21:59  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
04:21:59  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
04:21:59  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
04:21:59  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
04:21:59  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
04:21:59  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
04:21:59  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
04:21:59  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
04:21:59  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
04:21:59  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
04:21:59  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
04:21:59  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
04:21:59  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
04:21:59  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
04:21:59  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
04:21:59  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
04:21:59  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
04:21:59  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
04:21:59  32  ,hh  att21
04:21:59  33  ,d   att22
04:21:59  34  ,w   att23
04:21:59  35  ,mpm att24
04:21:59  36  ,mph att25
04:21:59  37  ,trend att26
04:21:59  38  FROM stk_svmd14
04:21:59  39  ORDER BY ydate
04:21:59  40  /

Table created.

Elapsed: 00:00:00.45
04:21:59 SQL> 
04:21:59 SQL> -- rpt
04:21:59 SQL> 
04:21:59 SQL> SELECT
04:21:59   2  tkr
04:21:59   3  ,trend
04:21:59   4  ,gatt
04:21:59   5  ,COUNT(tkr)
04:21:59   6  ,AVG(g1)
04:21:59   7  FROM stk_svmd16
04:21:59   8  GROUP BY tkr,trend,gatt
04:21:59   9  ORDER BY tkr,trend,gatt
04:21:59  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
SWC		  -1 nup	996 -.37213855
SWC		  -1 up 	912 .447861842
SWC		  -1		  1
SWC		   1 nup       1197 -.37172932
SWC		   1 up 	976 .429620902

Elapsed: 00:00:00.01
04:21:59 SQL> 
04:21:59 SQL> -- Comment out feedback related syntax:
04:21:59 SQL> 
04:21:59 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
04:21:59 SQL> -- SELECT
04:21:59 SQL> -- m.tkr
04:21:59 SQL> -- ,m.ydate
04:21:59 SQL> -- ,m.tkrdate
04:21:59 SQL> -- ,l.score score_long
04:21:59 SQL> -- ,s.score score_short
04:21:59 SQL> -- ,m.g1
04:21:59 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
04:21:59 SQL> -- WHERE l.targ='gatt'
04:21:59 SQL> -- AND	 s.targ='gattn'
04:21:59 SQL> -- AND l.tkrdate = s.tkrdate
04:21:59 SQL> -- AND l.tkrdate = m.tkrdate
04:21:59 SQL> -- -- Speed things up:
04:21:59 SQL> -- AND l.tkr = '&1'
04:21:59 SQL> -- AND s.tkr = '&1'
04:21:59 SQL> -- /
04:21:59 SQL> --
04:21:59 SQL> -- DROP TABLE score_corr_tkr;
04:21:59 SQL> --
04:21:59 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
04:21:59 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
04:21:59 SQL> -- (
04:21:59 SQL> --   SELECT
04:21:59 SQL> --   tkrdate
04:21:59 SQL> --   -- Find corr() tween score and g1 over 8 day period:
04:21:59 SQL> --   ,CORR((score_long - score_short),g1)
04:21:59 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
04:21:59 SQL> --   FROM sc12tkr
04:21:59 SQL> -- )
04:21:59 SQL> -- GROUP BY tkrdate
04:21:59 SQL> -- /
04:21:59 SQL> 
04:21:59 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
04:21:59 SQL> 
04:21:59 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.03
04:21:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
04:22:00 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
04:22:00   2  SELECT
04:22:00   3  tkr
04:22:00   4  ,ydate
04:22:00   5  ,tkrdate
04:22:00   6  ,trend
04:22:00   7  ,g1
04:22:00   8  ,gatt
04:22:00   9  ,gattn
04:22:00  10  -- Goodness attributes:
04:22:00  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
04:22:00  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
04:22:00  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
04:22:00  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
04:22:00  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
04:22:00  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
04:22:00  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
04:22:00  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
04:22:00  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
04:22:00  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
04:22:00  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
04:22:00  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
04:22:00  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
04:22:00  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
04:22:00  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
04:22:00  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
04:22:00  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
04:22:00  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
04:22:00  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
04:22:00  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
04:22:00  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
04:22:00  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
04:22:00  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
04:22:00  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
04:22:00  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
04:22:00  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
04:22:00  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
04:22:00  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
04:22:00  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
04:22:00  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
04:22:00  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
04:22:00  42  FROM stk_svmd16
04:22:00  43  /

Table created.

Elapsed: 00:00:00.74
04:22:00 SQL> 
04:22:00 SQL> -- rpt
04:22:00 SQL> 
04:22:00 SQL> SELECT
04:22:00   2  tkr
04:22:00   3  ,trend
04:22:00   4  ,gatt
04:22:00   5  ,COUNT(tkr)
04:22:00   6  ,AVG(g1)
04:22:00   7  FROM stk_ms_svmd_svmspy
04:22:00   8  GROUP BY tkr,trend,gatt
04:22:00   9  ORDER BY tkr,trend,gatt
04:22:00  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
SWC		  -1 nup	996 -.37213855
SWC		  -1 up 	912 .447861842
SWC		  -1		  1
SWC		   1 nup       1197 -.37172932
SWC		   1 up 	976 .429620902

Elapsed: 00:00:00.01
04:22:00 SQL> 
04:22:00 SQL> SELECT
04:22:00   2  tkr
04:22:00   3  ,COUNT(tkr)
04:22:00   4  ,MIN(ydate),MAX(ydate)
04:22:00   5  FROM stk_ms_svmd_svmspy
04:22:00   6  GROUP BY tkr
04:22:00   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
SWC		4082 1994-12-19 21:00:00 2011-03-15 21:00:00

Elapsed: 00:00:00.01
04:22:00 SQL> 
04:22:00 SQL> -- exit
04:22:00 SQL> 
04:22:00 SQL> 
04:22:00 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.05
04:22:00 SQL> 
04:22:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
04:22:01 SQL> 
04:22:01 SQL> CREATE TABLE stk_ms_u COMPRESS AS
04:22:01   2  SELECT * FROM stk_ms_svmspy
04:22:01   3  UNION
04:22:01   4  SELECT * FROM stk_ms_svmd_svmspy
04:22:01   5  /

Table created.

Elapsed: 00:00:00.18
04:22:01 SQL> 
04:22:01 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
