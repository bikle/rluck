
SQL*Plus: Release 11.2.0.1.0 Production on Sat Jan 22 10:34:12 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:34:12 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:34:12 SQL> 
10:34:12 SQL> 10:34:12 SQL> --
10:34:12 SQL> -- stk10u.sql
10:34:12 SQL> --
10:34:12 SQL> 
10:34:12 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
10:34:12 SQL> 
10:34:12 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
10:34:12 SQL> @stk10.sql     '&1'
10:34:12 SQL> --
10:34:12 SQL> -- stk10.sql
10:34:12 SQL> --
10:34:12 SQL> 
10:34:12 SQL> -- Creates views and tables for demonstrating SVM.
10:34:12 SQL> 
10:34:12 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.09
10:34:12 SQL> 
10:34:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.20
10:34:13 SQL> 
10:34:13 SQL> CREATE TABLE stk10svmspy COMPRESS AS
10:34:13   2  SELECT
10:34:13   3  tkr
10:34:13   4  ,ydate
10:34:13   5  ,tkr||ydate tkrdate
10:34:13   6  ,clse
10:34:13   7  ,clse2
10:34:13   8  ,rownum rnum -- acts as t in my time-series
10:34:13   9  -- g1 is important. I want to predict g1:
10:34:13  10  ,gain1day g1
10:34:13  11  -- Derive some attributes from clse.
10:34:13  12  -- Each row spans 5 minutes.
10:34:13  13  -- The number of rows in 1 day is 24*60/5.
10:34:13  14  -- I want the aggregations to span from 3 days to 9 days:
10:34:13  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
10:34:13  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
10:34:13  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
10:34:13  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
10:34:13  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
10:34:13  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
10:34:13  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
10:34:13  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
10:34:13  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
10:34:13  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
10:34:13  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
10:34:13  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
10:34:13  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
10:34:13  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
10:34:13  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
10:34:13  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
10:34:13  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
10:34:13  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
10:34:13  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
10:34:13  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
10:34:13  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
10:34:13  36  FROM di5min_stk_c2
10:34:13  37  WHERE UPPER(tkr)='&1'
10:34:13  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
10:34:13  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
10:34:13  40  ORDER BY ydate
10:34:13  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='AMX'

Table created.

Elapsed: 00:00:00.28
10:34:13 SQL> 
10:34:13 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.07
10:34:13 SQL> 
10:34:13 SQL> -- rpt
10:34:13 SQL> 
10:34:13 SQL> SELECT
10:34:13   2  tkr
10:34:13   3  ,COUNT(tkr)ccount
10:34:13   4  ,MIN(clse)mnclse,MAX(clse)mxclse
10:34:13   5  -- ,MIN(avg4),MAX(avg4)
10:34:13   6  ,MIN(ydate),MAX(ydate)
10:34:13   7  ,MIN(g1)
10:34:13   8  ,MAX(g1)
10:34:13   9  FROM stk10svmspy
10:34:13  10  GROUP BY tkr
10:34:13  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
AMX	      1014	 57.5	   59.58 2011-01-04 14:30:00 2011-01-21 20:55:00      -1.26	  1.19

Elapsed: 00:00:00.00
10:34:13 SQL> 
10:34:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:34:13 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.18
10:34:13 SQL> CREATE TABLE stk12svmspy COMPRESS AS
10:34:13   2  SELECT
10:34:13   3  tkr
10:34:13   4  ,ydate
10:34:13   5  ,tkrdate
10:34:13   6  ,clse
10:34:13   7  ,rnum
10:34:13   8  ,g1
10:34:13   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
10:34:13  10  -- I want more attributes from the ones I derived above:
10:34:13  11  -- clse relation to moving-min
10:34:13  12  ,clse-min3  cm3
10:34:13  13  ,clse-min4  cm4
10:34:13  14  ,clse-min5  cm5
10:34:13  15  ,clse-min6  cm6
10:34:13  16  ,clse-min7  cm7
10:34:13  17  ,clse-min8  cm8
10:34:13  18  ,clse-min9  cm9
10:34:13  19  -- clse relation to moving-avg
10:34:13  20  ,clse-avg3  ca3
10:34:13  21  ,clse-avg4  ca4
10:34:13  22  ,clse-avg5  ca5
10:34:13  23  ,clse-avg6  ca6
10:34:13  24  ,clse-avg7  ca7
10:34:13  25  ,clse-avg8  ca8
10:34:13  26  ,clse-avg9  ca9
10:34:13  27  -- clse relation to moving-max
10:34:13  28  ,clse-max3  cx3
10:34:13  29  ,clse-max4  cx4
10:34:13  30  ,clse-max5  cx5
10:34:13  31  ,clse-max6  cx6
10:34:13  32  ,clse-max7  cx7
10:34:13  33  ,clse-max8  cx8
10:34:13  34  ,clse-max9  cx9
10:34:13  35  -- Derive date related attributes:
10:34:13  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:34:13  37  ,0+TO_CHAR(ydate,'D')d
10:34:13  38  ,0+TO_CHAR(ydate,'W')w
10:34:13  39  -- mpm stands for minutes-past-midnight:
10:34:13  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:34:13  41  -- mph stands for minutes-past-hour:
10:34:13  42  ,0+TO_CHAR(ydate,'MI')mph
10:34:13  43  FROM stk10svmspy
10:34:13  44  ORDER BY ydate
10:34:13  45  /

Table created.

Elapsed: 00:00:00.10
10:34:13 SQL> 
10:34:13 SQL> -- rpt
10:34:13 SQL> 
10:34:13 SQL> SELECT
10:34:13   2  tkr
10:34:13   3  ,COUNT(tkr)ccount
10:34:13   4  ,MIN(clse)mnclse,MAX(clse)mxclse
10:34:13   5  -- ,MIN(avg4),MAX(avg4)
10:34:13   6  ,MIN(ydate),MAX(ydate)
10:34:13   7  ,MIN(g1)
10:34:13   8  ,AVG(g1)
10:34:13   9  ,MAX(g1)
10:34:13  10  FROM stk12svmspy
10:34:13  11  GROUP BY tkr
10:34:13  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
AMX	      1014	 57.5	   59.58 2011-01-04 14:30:00 2011-01-21 20:55:00      -1.26 -.01405594	     1.19

Elapsed: 00:00:00.01
10:34:13 SQL> 
10:34:13 SQL> -- Prepare for derivation of NTILE based parameters.
10:34:13 SQL> -- Also derive the "trend" parameter:
10:34:13 SQL> 
10:34:13 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.05
10:34:13 SQL> CREATE TABLE stk14svmspy COMPRESS AS
10:34:13   2  SELECT
10:34:13   3  tkr
10:34:13   4  ,ydate
10:34:13   5  ,tkrdate
10:34:13   6  ,clse
10:34:13   7  ,g1
10:34:13   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
10:34:13   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
10:34:13  10  ,CASE WHEN trend IS NULL THEN 1
10:34:13  11  	    WHEN trend =0      THEN 1
10:34:13  12  	    ELSE trend END trend
10:34:13  13  ,cm3
10:34:13  14  ,cm4
10:34:13  15  ,cm5
10:34:13  16  ,cm6
10:34:13  17  ,cm7
10:34:13  18  ,cm8
10:34:13  19  ,cm9
10:34:13  20  ,ca3
10:34:13  21  ,ca4
10:34:13  22  ,ca5
10:34:13  23  ,ca6
10:34:13  24  ,ca7
10:34:13  25  ,ca8
10:34:13  26  ,ca9
10:34:13  27  ,cx3
10:34:13  28  ,cx4
10:34:13  29  ,cx5
10:34:13  30  ,cx6
10:34:13  31  ,cx7
10:34:13  32  ,cx8
10:34:13  33  ,cx9
10:34:13  34  ,hh
10:34:13  35  ,d
10:34:13  36  ,w
10:34:13  37  ,mpm
10:34:13  38  ,mph
10:34:13  39  FROM stk12svmspy
10:34:13  40  -- Guard against divide by 0:
10:34:13  41  WHERE clse > 0
10:34:13  42  ORDER BY ydate
10:34:13  43  /

Table created.

Elapsed: 00:00:00.06
10:34:13 SQL> 
10:34:13 SQL> -- rpt
10:34:13 SQL> 
10:34:13 SQL> SELECT
10:34:13   2  tkr
10:34:13   3  ,trend
10:34:13   4  ,gatt
10:34:13   5  ,COUNT(tkr)
10:34:13   6  ,AVG(g1)
10:34:13   7  FROM stk14svmspy
10:34:13   8  GROUP BY tkr,trend,gatt
10:34:13   9  ORDER BY tkr,trend,gatt
10:34:13  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AMX		-1 nup	      142 -.00478873
AMX		-1 up	      119 .592521008
AMX		-1	      137
AMX		 1 nup	      471 -.28768577
AMX		 1 up	      126  .42547619
AMX		 1	       19

6 rows selected.

Elapsed: 00:00:00.00
10:34:13 SQL> 
10:34:13 SQL> -- Derive NTILE based params:
10:34:13 SQL> 
10:34:13 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.03
10:34:13 SQL> CREATE TABLE stk16svmspy COMPRESS AS
10:34:13   2  SELECT
10:34:13   3  tkr
10:34:13   4  ,ydate
10:34:13   5  ,tkrdate
10:34:13   6  ,clse
10:34:13   7  ,g1
10:34:13   8  ,gatt
10:34:13   9  ,gattn
10:34:13  10  ,trend
10:34:13  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
10:34:13  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
10:34:13  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
10:34:13  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
10:34:13  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
10:34:13  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
10:34:13  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
10:34:13  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
10:34:13  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
10:34:13  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
10:34:13  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
10:34:13  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
10:34:13  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
10:34:13  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
10:34:13  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
10:34:13  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
10:34:13  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
10:34:13  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
10:34:13  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
10:34:13  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
10:34:13  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
10:34:13  32  ,hh  att21
10:34:13  33  ,d   att22
10:34:13  34  ,w   att23
10:34:13  35  ,mpm att24
10:34:13  36  ,mph att25
10:34:13  37  ,trend att26
10:34:13  38  FROM stk14svmspy
10:34:13  39  ORDER BY ydate
10:34:13  40  /

Table created.

Elapsed: 00:00:00.20
10:34:14 SQL> 
10:34:14 SQL> -- rpt
10:34:14 SQL> 
10:34:14 SQL> SELECT
10:34:14   2  tkr
10:34:14   3  ,trend
10:34:14   4  ,gatt
10:34:14   5  ,COUNT(tkr)
10:34:14   6  ,AVG(g1)
10:34:14   7  FROM stk16svmspy
10:34:14   8  GROUP BY tkr,trend,gatt
10:34:14   9  ORDER BY tkr,trend,gatt
10:34:14  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AMX		-1 nup	      142 -.00478873
AMX		-1 up	      119 .592521008
AMX		-1	      137
AMX		 1 nup	      471 -.28768577
AMX		 1 up	      126  .42547619
AMX		 1	       19

6 rows selected.

Elapsed: 00:00:00.01
10:34:14 SQL> 
10:34:14 SQL> -- Now I derive goodness attributes:
10:34:14 SQL> 
10:34:14 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.04
10:34:14 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
10:34:14   2  SELECT
10:34:14   3  tkr
10:34:14   4  ,ydate
10:34:14   5  ,tkrdate
10:34:14   6  ,trend
10:34:14   7  ,g1
10:34:14   8  ,gatt
10:34:14   9  ,gattn
10:34:14  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
10:34:14  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
10:34:14  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
10:34:14  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
10:34:14  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
10:34:14  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
10:34:14  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
10:34:14  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
10:34:14  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
10:34:14  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
10:34:14  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
10:34:14  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
10:34:14  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
10:34:14  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
10:34:14  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
10:34:14  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
10:34:14  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
10:34:14  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
10:34:14  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
10:34:14  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
10:34:14  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
10:34:14  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
10:34:14  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
10:34:14  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
10:34:14  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
10:34:14  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
10:34:14  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
10:34:14  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
10:34:14  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
10:34:14  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
10:34:14  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
10:34:14  41  FROM stk16svmspy
10:34:14  42  /

Table created.

Elapsed: 00:00:00.19
10:34:14 SQL> 
10:34:14 SQL> -- rpt
10:34:14 SQL> 
10:34:14 SQL> SELECT
10:34:14   2  tkr
10:34:14   3  ,trend
10:34:14   4  ,gatt
10:34:14   5  ,COUNT(tkr)
10:34:14   6  ,AVG(g1)
10:34:14   7  FROM stk_ms_svmspy
10:34:14   8  GROUP BY tkr,trend,gatt
10:34:14   9  ORDER BY tkr,trend,gatt
10:34:14  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
AMX		-1 nup	      142 -.00478873
AMX		-1 up	      119 .592521008
AMX		-1	      137
AMX		 1 nup	      471 -.28768577
AMX		 1 up	      126  .42547619
AMX		 1	       19

6 rows selected.

Elapsed: 00:00:00.00
10:34:14 SQL> 
10:34:14 SQL> SELECT
10:34:14   2  tkr
10:34:14   3  ,0+TO_CHAR(ydate,'D')daynum
10:34:14   4  ,COUNT(tkr)
10:34:14   5  ,MIN(ydate),MAX(ydate)
10:34:14   6  FROM stk_ms_svmspy
10:34:14   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
10:34:14   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
10:34:14   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
AMX		 2	   78 2011-01-10 14:30:00 2011-01-10 20:55:00
AMX		 3	  234 2011-01-04 14:30:00 2011-01-18 20:55:00
AMX		 4	  234 2011-01-05 14:30:00 2011-01-19 20:55:00
AMX		 5	  234 2011-01-06 14:30:00 2011-01-20 20:55:00
AMX		 6	  234 2011-01-07 14:30:00 2011-01-21 20:55:00

Elapsed: 00:00:00.00
10:34:14 SQL> 
10:34:14 SQL> -- exit
10:34:14 SQL> @stk10svmd.sql '&1'
10:34:14 SQL> --
10:34:14 SQL> -- stk10svmd.sql
10:34:14 SQL> --
10:34:14 SQL> 
10:34:14 SQL> -- Creates views and tables for demonstrating SVM.
10:34:14 SQL> -- I need to run this after I run stk10.sql
10:34:14 SQL> 
10:34:14 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.11
10:34:14 SQL> 
10:34:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
10:34:14 SQL> 
10:34:14 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
10:34:14   2  SELECT
10:34:14   3  tkr
10:34:14   4  ,ydate
10:34:14   5  ,tkr||ydate tkrdate
10:34:14   6  ,clse
10:34:14   7  ,rownum rnum -- acts as t in my time-series
10:34:14   8  -- Derive some attributes from clse.
10:34:14   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
10:34:14  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
10:34:14  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
10:34:14  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
10:34:14  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
10:34:14  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
10:34:14  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
10:34:14  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
10:34:14  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
10:34:14  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
10:34:14  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
10:34:14  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
10:34:14  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
10:34:14  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
10:34:14  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
10:34:14  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
10:34:14  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
10:34:14  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
10:34:14  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
10:34:14  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
10:34:14  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
10:34:14  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
10:34:14  31  FROM ystk
10:34:14  32  WHERE UPPER(tkr)='&1'
10:34:14  33  AND ydate > '1990-01-01'
10:34:14  34  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
10:34:14  35  ORDER BY ydate
10:34:14  36  /
old  32: WHERE UPPER(tkr)='&1'
new  32: WHERE UPPER(tkr)='AMX'
old  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  34: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='AMX')

Table created.

Elapsed: 00:00:02.70
10:34:17 SQL> 
10:34:17 SQL> -- rpt
10:34:17 SQL> 
10:34:17 SQL> SELECT
10:34:17   2  tkr
10:34:17   3  ,COUNT(tkr)
10:34:17   4  ,MIN(clse),MAX(clse)
10:34:17   5  ,MIN(avg4),MAX(avg4)
10:34:17   6  ,MIN(ydate),MAX(ydate)
10:34:17   7  FROM stk_svmd10svmspy
10:34:17   8  GROUP BY tkr
10:34:17   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
AMX		2497	   3.62      66.85	3.752	   65.34 2001-02-13 00:00:00 2011-01-20 00:00:00

Elapsed: 00:00:00.02
10:34:17 SQL> 
10:34:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:34:17 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:06.81
10:34:24 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
10:34:24   2  SELECT
10:34:24   3  tkr
10:34:24   4  ,ydate
10:34:24   5  ,tkrdate
10:34:24   6  ,clse
10:34:24   7  ,rnum
10:34:24   8  -- g1 is important. I want to predict g1:
10:34:24   9  ,ld - clse g1
10:34:24  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
10:34:24  11  -- I want more attributes from the ones I derived above:
10:34:24  12  -- clse relation to moving-min
10:34:24  13  ,clse-min3  cm3
10:34:24  14  ,clse-min4  cm4
10:34:24  15  ,clse-min5  cm5
10:34:24  16  ,clse-min6  cm6
10:34:24  17  ,clse-min7  cm7
10:34:24  18  ,clse-min8  cm8
10:34:24  19  ,clse-min9  cm9
10:34:24  20  -- clse relation to moving-avg
10:34:24  21  ,clse-avg3  ca3
10:34:24  22  ,clse-avg4  ca4
10:34:24  23  ,clse-avg5  ca5
10:34:24  24  ,clse-avg6  ca6
10:34:24  25  ,clse-avg7  ca7
10:34:24  26  ,clse-avg8  ca8
10:34:24  27  ,clse-avg9  ca9
10:34:24  28  -- clse relation to moving-max
10:34:24  29  ,clse-max3  cx3
10:34:24  30  ,clse-max4  cx4
10:34:24  31  ,clse-max5  cx5
10:34:24  32  ,clse-max6  cx6
10:34:24  33  ,clse-max7  cx7
10:34:24  34  ,clse-max8  cx8
10:34:24  35  ,clse-max9  cx9
10:34:24  36  -- Derive date related attributes:
10:34:24  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:34:24  38  ,0+TO_CHAR(ydate,'D')d
10:34:24  39  ,0+TO_CHAR(ydate,'W')w
10:34:24  40  -- mpm stands for minutes-past-midnight:
10:34:24  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:34:24  42  -- mph stands for minutes-past-hour:
10:34:24  43  ,0+TO_CHAR(ydate,'MI')mph
10:34:24  44  FROM stk_svmd10svmspy
10:34:24  45  ORDER BY ydate
10:34:24  46  /

Table created.

Elapsed: 00:00:00.16
10:34:24 SQL> 
10:34:24 SQL> -- rpt
10:34:24 SQL> 
10:34:24 SQL> SELECT
10:34:24   2  tkr
10:34:24   3  ,COUNT(tkr)
10:34:24   4  ,MIN(clse),MAX(clse)
10:34:24   5  ,MIN(ydate),MAX(ydate)
10:34:24   6  FROM stk_svmd12
10:34:24   7  GROUP BY tkr
10:34:24   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
AMX		2497	   3.62      66.85 2001-02-13 00:00:00 2011-01-20 00:00:00

Elapsed: 00:00:00.01
10:34:24 SQL> 
10:34:24 SQL> -- Prepare for derivation of NTILE based parameters.
10:34:24 SQL> -- Also derive the "trend" parameter:
10:34:24 SQL> 
10:34:24 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:04.09
10:34:28 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
10:34:28   2  SELECT
10:34:28   3  tkr
10:34:28   4  ,ydate
10:34:28   5  ,tkrdate
10:34:28   6  ,clse
10:34:28   7  ,g1
10:34:28   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
10:34:28   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
10:34:28  10  ,CASE WHEN trend IS NULL THEN 1
10:34:28  11  	    WHEN trend =0      THEN 1
10:34:28  12  	    ELSE trend END trend
10:34:28  13  ,cm3
10:34:28  14  ,cm4
10:34:28  15  ,cm5
10:34:28  16  ,cm6
10:34:28  17  ,cm7
10:34:28  18  ,cm8
10:34:28  19  ,cm9
10:34:28  20  ,ca3
10:34:28  21  ,ca4
10:34:28  22  ,ca5
10:34:28  23  ,ca6
10:34:28  24  ,ca7
10:34:28  25  ,ca8
10:34:28  26  ,ca9
10:34:28  27  ,cx3
10:34:28  28  ,cx4
10:34:28  29  ,cx5
10:34:28  30  ,cx6
10:34:28  31  ,cx7
10:34:28  32  ,cx8
10:34:28  33  ,cx9
10:34:28  34  ,hh
10:34:28  35  ,d
10:34:28  36  ,w
10:34:28  37  ,mpm
10:34:28  38  ,mph
10:34:28  39  FROM stk_svmd12
10:34:28  40  -- Guard against divide by 0:
10:34:28  41  WHERE clse > 0
10:34:28  42  ORDER BY ydate
10:34:28  43  /

Table created.

Elapsed: 00:00:00.19
10:34:28 SQL> 
10:34:28 SQL> -- rpt
10:34:28 SQL> 
10:34:28 SQL> SELECT
10:34:28   2  tkr
10:34:28   3  ,trend
10:34:28   4  ,gatt
10:34:28   5  ,COUNT(tkr)
10:34:28   6  ,AVG(g1)
10:34:28   7  FROM stk_svmd14
10:34:28   8  GROUP BY tkr,trend,gatt
10:34:28   9  ORDER BY tkr,trend,gatt
10:34:28  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AMX		  -1 nup	539 -.45536178
AMX		  -1 up 	500	 .6077
AMX		   1 nup	821 -.38609013
AMX		   1 up 	636 .487814465
AMX		   1		  1

Elapsed: 00:00:00.01
10:34:28 SQL> 
10:34:28 SQL> -- Derive NTILE based params:
10:34:28 SQL> 
10:34:28 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.19
10:34:28 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
10:34:28   2  SELECT
10:34:28   3  tkr
10:34:28   4  ,ydate
10:34:28   5  ,tkrdate
10:34:28   6  ,clse
10:34:28   7  ,g1
10:34:28   8  ,gatt
10:34:28   9  ,gattn
10:34:28  10  ,trend
10:34:28  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
10:34:28  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
10:34:28  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
10:34:28  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
10:34:28  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
10:34:28  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
10:34:28  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
10:34:28  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
10:34:28  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
10:34:28  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
10:34:28  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
10:34:28  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
10:34:28  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
10:34:28  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
10:34:28  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
10:34:28  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
10:34:28  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
10:34:28  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
10:34:28  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
10:34:28  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
10:34:28  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
10:34:28  32  ,hh  att21
10:34:28  33  ,d   att22
10:34:28  34  ,w   att23
10:34:28  35  ,mpm att24
10:34:28  36  ,mph att25
10:34:28  37  ,trend att26
10:34:28  38  FROM stk_svmd14
10:34:28  39  ORDER BY ydate
10:34:28  40  /

Table created.

Elapsed: 00:00:00.33
10:34:29 SQL> 
10:34:29 SQL> -- rpt
10:34:29 SQL> 
10:34:29 SQL> SELECT
10:34:29   2  tkr
10:34:29   3  ,trend
10:34:29   4  ,gatt
10:34:29   5  ,COUNT(tkr)
10:34:29   6  ,AVG(g1)
10:34:29   7  FROM stk_svmd16
10:34:29   8  GROUP BY tkr,trend,gatt
10:34:29   9  ORDER BY tkr,trend,gatt
10:34:29  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AMX		  -1 nup	539 -.45536178
AMX		  -1 up 	500	 .6077
AMX		   1 nup	821 -.38609013
AMX		   1 up 	636 .487814465
AMX		   1		  1

Elapsed: 00:00:00.01
10:34:29 SQL> 
10:34:29 SQL> -- Now I derive goodness attributes:
10:34:29 SQL> 
10:34:29 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.05
10:34:29 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
10:34:29   2  SELECT
10:34:29   3  tkr
10:34:29   4  ,ydate
10:34:29   5  ,tkrdate
10:34:29   6  ,trend
10:34:29   7  ,g1
10:34:29   8  ,gatt
10:34:29   9  ,gattn
10:34:29  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
10:34:29  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
10:34:29  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
10:34:29  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
10:34:29  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
10:34:29  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
10:34:29  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
10:34:29  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
10:34:29  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
10:34:29  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
10:34:29  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
10:34:29  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
10:34:29  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
10:34:29  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
10:34:29  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
10:34:29  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
10:34:29  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
10:34:29  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
10:34:29  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
10:34:29  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
10:34:29  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
10:34:29  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
10:34:29  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
10:34:29  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
10:34:29  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
10:34:29  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
10:34:29  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
10:34:29  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
10:34:29  38  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
10:34:29  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
10:34:29  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
10:34:29  41  FROM stk_svmd16
10:34:29  42  /

Table created.

Elapsed: 00:00:00.45
10:34:29 SQL> 
10:34:29 SQL> -- rpt
10:34:29 SQL> 
10:34:29 SQL> SELECT
10:34:29   2  tkr
10:34:29   3  ,trend
10:34:29   4  ,gatt
10:34:29   5  ,COUNT(tkr)
10:34:29   6  ,AVG(g1)
10:34:29   7  FROM stk_ms_svmd_svmspy
10:34:29   8  GROUP BY tkr,trend,gatt
10:34:29   9  ORDER BY tkr,trend,gatt
10:34:29  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
AMX		  -1 nup	539 -.45536178
AMX		  -1 up 	500	 .6077
AMX		   1 nup	821 -.38609013
AMX		   1 up 	636 .487814465
AMX		   1		  1

Elapsed: 00:00:00.01
10:34:29 SQL> 
10:34:29 SQL> SELECT
10:34:29   2  tkr
10:34:29   3  ,COUNT(tkr)
10:34:29   4  ,MIN(ydate),MAX(ydate)
10:34:29   5  FROM stk_ms_svmd_svmspy
10:34:29   6  GROUP BY tkr
10:34:29   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
AMX		2497 2001-02-13 00:00:00 2011-01-20 00:00:00

Elapsed: 00:00:00.01
10:34:29 SQL> 
10:34:29 SQL> -- exit
10:34:29 SQL> 
10:34:29 SQL> 
10:34:29 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.05
10:34:29 SQL> 
10:34:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
10:34:30 SQL> 
10:34:30 SQL> CREATE TABLE stk_ms_u COMPRESS AS
10:34:30   2  SELECT * FROM stk_ms_svmspy
10:34:30   3  UNION
10:34:30   4  SELECT * FROM stk_ms_svmd_svmspy
10:34:30   5  /

Table created.

Elapsed: 00:00:00.10
10:34:30 SQL> 
10:34:30 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
