
SQL*Plus: Release 11.2.0.1.0 Production on Wed Mar 30 22:23:59 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:23:59 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:23:59 SQL> 
22:23:59 SQL> 22:23:59 SQL> --
22:23:59 SQL> -- stk10u.sql
22:23:59 SQL> --
22:23:59 SQL> 
22:23:59 SQL> -- I use this script to mix data from stk_ms_svmspy and stk_ms
22:23:59 SQL> 
22:23:59 SQL> -- I need to run stk10.sql before I run stk10svmd.sql
22:23:59 SQL> @stk10.sql     '&1'
22:23:59 SQL> --
22:23:59 SQL> -- stk10.sql
22:23:59 SQL> --
22:23:59 SQL> 
22:23:59 SQL> -- Creates views and tables for demonstrating SVM.
22:23:59 SQL> 
22:23:59 SQL> DROP TABLE stk10svmspy;

Table dropped.

Elapsed: 00:00:00.17
22:23:59 SQL> 
22:23:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
22:23:59 SQL> 
22:23:59 SQL> CREATE TABLE stk10svmspy COMPRESS AS
22:23:59   2  SELECT
22:23:59   3  tkr
22:23:59   4  ,ydate
22:23:59   5  ,tkr||ydate tkrdate
22:23:59   6  ,clse
22:23:59   7  ,clse2
22:23:59   8  ,rownum rnum -- acts as t in my time-series
22:23:59   9  -- g1 is important. I want to predict g1:
22:23:59  10  ,gain1day g1
22:23:59  11  -- Derive some attributes from clse.
22:23:59  12  -- Each row spans 5 minutes.
22:23:59  13  -- The number of rows in 1 day is 24*60/5.
22:23:59  14  -- I want the aggregations to span from 3 days to 9 days:
22:23:59  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)min3
22:23:59  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)min4
22:23:59  17  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)min5
22:23:59  18  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)min6
22:23:59  19  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)min7
22:23:59  20  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)min8
22:23:59  21  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)min9
22:23:59  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)avg3
22:23:59  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)avg4
22:23:59  24  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)avg5
22:23:59  25  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)avg6
22:23:59  26  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)avg7
22:23:59  27  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)avg8
22:23:59  28  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)avg9
22:23:59  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*24*60/5 PRECEDING AND CURRENT ROW)max3
22:23:59  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4*24*60/5 PRECEDING AND CURRENT ROW)max4
22:23:59  31  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5*24*60/5 PRECEDING AND CURRENT ROW)max5
22:23:59  32  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6*24*60/5 PRECEDING AND CURRENT ROW)max6
22:23:59  33  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7*24*60/5 PRECEDING AND CURRENT ROW)max7
22:23:59  34  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)max8
22:23:59  35  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9*24*60/5 PRECEDING AND CURRENT ROW)max9
22:23:59  36  FROM di5min_stk_c2
22:23:59  37  WHERE UPPER(tkr)='&1'
22:23:59  38  AND TO_CHAR(ydate,'dy')IN('mon','tue','wed','thu','fri')
22:23:59  39  AND 0+TO_CHAR(ydate,'HH24')BETWEEN 13 AND 20
22:23:59  40  ORDER BY ydate
22:23:59  41  /
old  37: WHERE UPPER(tkr)='&1'
new  37: WHERE UPPER(tkr)='GD'

Table created.

Elapsed: 00:00:00.54
22:24:00 SQL> 
22:24:00 SQL> ANALYZE TABLE stk10svmspy COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.11
22:24:00 SQL> 
22:24:00 SQL> -- rpt
22:24:00 SQL> 
22:24:00 SQL> SELECT
22:24:00   2  tkr
22:24:00   3  ,COUNT(tkr)ccount
22:24:00   4  ,MIN(clse)mnclse,MAX(clse)mxclse
22:24:00   5  -- ,MIN(avg4),MAX(avg4)
22:24:00   6  ,MIN(ydate),MAX(ydate)
22:24:00   7  ,MIN(g1)
22:24:00   8  ,MAX(g1)
22:24:00   9  FROM stk10svmspy
22:24:00  10  GROUP BY tkr
22:24:00  11  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ----------
GD	      3289 60.8145605	   76.53 2011-01-28 14:30:00 2011-03-30 14:30:00      -4.76 6.88543945

Elapsed: 00:00:00.02
22:24:00 SQL> 
22:24:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:24:00 SQL> DROP TABLE stk12svmspy;

Table dropped.

Elapsed: 00:00:00.19
22:24:00 SQL> CREATE TABLE stk12svmspy COMPRESS AS
22:24:00   2  SELECT
22:24:00   3  tkr
22:24:00   4  ,ydate
22:24:00   5  ,tkrdate
22:24:00   6  ,clse
22:24:00   7  ,rnum
22:24:00   8  ,g1
22:24:00   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
22:24:00  10  -- I want more attributes from the ones I derived above:
22:24:00  11  -- clse relation to moving-min
22:24:00  12  ,clse-min3  cm3
22:24:00  13  ,clse-min4  cm4
22:24:00  14  ,clse-min5  cm5
22:24:00  15  ,clse-min6  cm6
22:24:00  16  ,clse-min7  cm7
22:24:00  17  ,clse-min8  cm8
22:24:00  18  ,clse-min9  cm9
22:24:00  19  -- clse relation to moving-avg
22:24:00  20  ,clse-avg3  ca3
22:24:00  21  ,clse-avg4  ca4
22:24:00  22  ,clse-avg5  ca5
22:24:00  23  ,clse-avg6  ca6
22:24:00  24  ,clse-avg7  ca7
22:24:00  25  ,clse-avg8  ca8
22:24:00  26  ,clse-avg9  ca9
22:24:00  27  -- clse relation to moving-max
22:24:00  28  ,clse-max3  cx3
22:24:00  29  ,clse-max4  cx4
22:24:00  30  ,clse-max5  cx5
22:24:00  31  ,clse-max6  cx6
22:24:00  32  ,clse-max7  cx7
22:24:00  33  ,clse-max8  cx8
22:24:00  34  ,clse-max9  cx9
22:24:00  35  -- Derive date related attributes:
22:24:00  36  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:24:00  37  ,0+TO_CHAR(ydate,'D')d
22:24:00  38  ,0+TO_CHAR(ydate,'W')w
22:24:00  39  -- mpm stands for minutes-past-midnight:
22:24:00  40  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:24:00  41  -- mph stands for minutes-past-hour:
22:24:00  42  ,0+TO_CHAR(ydate,'MI')mph
22:24:00  43  FROM stk10svmspy
22:24:00  44  ORDER BY ydate
22:24:00  45  /

Table created.

Elapsed: 00:00:00.17
22:24:00 SQL> 
22:24:00 SQL> -- rpt
22:24:00 SQL> 
22:24:00 SQL> SELECT
22:24:00   2  tkr
22:24:00   3  ,COUNT(tkr)ccount
22:24:00   4  ,MIN(clse)mnclse,MAX(clse)mxclse
22:24:00   5  -- ,MIN(avg4),MAX(avg4)
22:24:00   6  ,MIN(ydate),MAX(ydate)
22:24:00   7  ,MIN(g1)
22:24:00   8  ,AVG(g1)
22:24:00   9  ,MAX(g1)
22:24:00  10  FROM stk12svmspy
22:24:00  11  GROUP BY tkr
22:24:00  12  /

TKR	    CCOUNT     MNCLSE	  MXCLSE MIN(YDATE)	     MAX(YDATE) 	    MIN(G1)    AVG(G1)	  MAX(G1)
------- ---------- ---------- ---------- ------------------- ------------------- ---------- ---------- ----------
GD	      3289 60.8145605	   76.53 2011-01-28 14:30:00 2011-03-30 14:30:00      -4.76 .258351703 6.88543945

Elapsed: 00:00:00.01
22:24:00 SQL> 
22:24:00 SQL> -- Prepare for derivation of NTILE based parameters.
22:24:00 SQL> -- Also derive the "trend" parameter:
22:24:00 SQL> 
22:24:00 SQL> DROP TABLE stk14svmspy;

Table dropped.

Elapsed: 00:00:00.18
22:24:00 SQL> CREATE TABLE stk14svmspy COMPRESS AS
22:24:00   2  SELECT
22:24:00   3  tkr
22:24:00   4  ,ydate
22:24:00   5  ,tkrdate
22:24:00   6  ,clse
22:24:00   7  ,g1
22:24:00   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
22:24:00   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
22:24:00  10  ,CASE WHEN trend IS NULL THEN 1
22:24:00  11  	    WHEN trend =0      THEN 1
22:24:00  12  	    ELSE trend END trend
22:24:00  13  ,cm3
22:24:00  14  ,cm4
22:24:00  15  ,cm5
22:24:00  16  ,cm6
22:24:00  17  ,cm7
22:24:00  18  ,cm8
22:24:00  19  ,cm9
22:24:00  20  ,ca3
22:24:00  21  ,ca4
22:24:00  22  ,ca5
22:24:00  23  ,ca6
22:24:00  24  ,ca7
22:24:00  25  ,ca8
22:24:00  26  ,ca9
22:24:00  27  ,cx3
22:24:00  28  ,cx4
22:24:00  29  ,cx5
22:24:00  30  ,cx6
22:24:00  31  ,cx7
22:24:00  32  ,cx8
22:24:00  33  ,cx9
22:24:00  34  ,hh
22:24:00  35  ,d
22:24:00  36  ,w
22:24:00  37  ,mpm
22:24:00  38  ,mph
22:24:00  39  FROM stk12svmspy
22:24:00  40  -- Guard against divide by 0:
22:24:00  41  WHERE clse > 0
22:24:00  42  ORDER BY ydate
22:24:00  43  /

Table created.

Elapsed: 00:00:00.14
22:24:01 SQL> 
22:24:01 SQL> -- rpt
22:24:01 SQL> 
22:24:01 SQL> SELECT
22:24:01   2  tkr
22:24:01   3  ,trend
22:24:01   4  ,gatt
22:24:01   5  ,COUNT(tkr)
22:24:01   6  ,AVG(g1)
22:24:01   7  FROM stk14svmspy
22:24:01   8  GROUP BY tkr,trend,gatt
22:24:01   9  ORDER BY tkr,trend,gatt
22:24:01  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
GD		-1 nup	      376 -.44930981
GD		-1 up	      536 2.01153791
GD		-1	       12
GD		 1 nup	     1236 -.67092251
GD		 1 up	      973 .746487207
GD		 1	      156

6 rows selected.

Elapsed: 00:00:00.02
22:24:01 SQL> 
22:24:01 SQL> -- Derive NTILE based params:
22:24:01 SQL> 
22:24:01 SQL> DROP TABLE stk16svmspy;

Table dropped.

Elapsed: 00:00:00.23
22:24:01 SQL> CREATE TABLE stk16svmspy COMPRESS AS
22:24:01   2  SELECT
22:24:01   3  tkr
22:24:01   4  ,ydate
22:24:01   5  ,tkrdate
22:24:01   6  ,clse
22:24:01   7  ,g1
22:24:01   8  ,gatt
22:24:01   9  ,gattn
22:24:01  10  ,trend
22:24:01  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
22:24:01  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
22:24:01  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
22:24:01  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
22:24:01  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
22:24:01  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
22:24:01  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
22:24:01  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
22:24:01  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
22:24:01  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
22:24:01  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
22:24:01  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
22:24:01  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
22:24:01  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
22:24:01  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
22:24:01  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
22:24:01  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
22:24:01  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
22:24:01  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
22:24:01  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
22:24:01  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
22:24:01  32  ,hh  att21
22:24:01  33  ,d   att22
22:24:01  34  ,w   att23
22:24:01  35  ,mpm att24
22:24:01  36  ,mph att25
22:24:01  37  ,trend att26
22:24:01  38  FROM stk14svmspy
22:24:01  39  ORDER BY ydate
22:24:01  40  /

Table created.

Elapsed: 00:00:00.53
22:24:01 SQL> 
22:24:01 SQL> -- rpt
22:24:01 SQL> 
22:24:01 SQL> SELECT
22:24:01   2  tkr
22:24:01   3  ,trend
22:24:01   4  ,gatt
22:24:01   5  ,COUNT(tkr)
22:24:01   6  ,AVG(g1)
22:24:01   7  FROM stk16svmspy
22:24:01   8  GROUP BY tkr,trend,gatt
22:24:01   9  ORDER BY tkr,trend,gatt
22:24:01  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
GD		-1 nup	      376 -.44930981
GD		-1 up	      536 2.01153791
GD		-1	       12
GD		 1 nup	     1236 -.67092251
GD		 1 up	      973 .746487207
GD		 1	      156

6 rows selected.

Elapsed: 00:00:00.02
22:24:01 SQL> 
22:24:01 SQL> -- Comment out feedback related syntax:
22:24:01 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
22:24:01 SQL> -- SELECT
22:24:01 SQL> -- m.tkr
22:24:01 SQL> -- ,m.ydate
22:24:01 SQL> -- ,m.tkrdate
22:24:01 SQL> -- ,l.score score_long
22:24:01 SQL> -- ,s.score score_short
22:24:01 SQL> -- ,m.g1
22:24:01 SQL> -- FROM stkscores l,stkscores s,stk16svmspy m
22:24:01 SQL> -- WHERE l.targ='gatt'
22:24:01 SQL> -- AND	 s.targ='gattn'
22:24:01 SQL> -- AND l.tkrdate = s.tkrdate
22:24:01 SQL> -- AND l.tkrdate = m.tkrdate
22:24:01 SQL> -- -- Speed things up:
22:24:01 SQL> -- AND l.tkr = '&1'
22:24:01 SQL> -- AND s.tkr = '&1'
22:24:01 SQL> -- /
22:24:01 SQL> --
22:24:01 SQL> -- DROP TABLE score_corr_tkr;
22:24:01 SQL> --
22:24:01 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
22:24:01 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
22:24:01 SQL> -- (
22:24:01 SQL> --   SELECT
22:24:01 SQL> --   tkrdate
22:24:01 SQL> --   -- Find corr() tween score and g1 over 8 day period:
22:24:01 SQL> --   ,CORR((score_long - score_short),g1)
22:24:01 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
22:24:01 SQL> --   FROM sc12tkr
22:24:01 SQL> -- )
22:24:01 SQL> -- GROUP BY tkrdate
22:24:01 SQL> -- /
22:24:01 SQL> 
22:24:01 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
22:24:01 SQL> 
22:24:01 SQL> DROP TABLE stk_ms_svmspy;

Table dropped.

Elapsed: 00:00:00.25
22:24:02 SQL> 
22:24:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.27
22:24:02 SQL> 
22:24:02 SQL> CREATE TABLE stk_ms_svmspy COMPRESS AS
22:24:02   2  SELECT
22:24:02   3  tkr
22:24:02   4  ,ydate
22:24:02   5  ,tkrdate
22:24:02   6  ,trend
22:24:02   7  ,g1
22:24:02   8  ,gatt
22:24:02   9  ,gattn
22:24:02  10  -- Goodness attributes:
22:24:02  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g00
22:24:02  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g01
22:24:02  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g02
22:24:02  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g03
22:24:02  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g04
22:24:02  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g05
22:24:02  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g06
22:24:02  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g07
22:24:02  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g08
22:24:02  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g09
22:24:02  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g10
22:24:02  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g11
22:24:02  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g12
22:24:02  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g13
22:24:02  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g14
22:24:02  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g15
22:24:02  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g16
22:24:02  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g17
22:24:02  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g18
22:24:02  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g19
22:24:02  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g20
22:24:02  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g21
22:24:02  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g22
22:24:02  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g23
22:24:02  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g24
22:24:02  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g25
22:24:02  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90*24*60/5 PRECEDING AND CURRENT ROW)g26
22:24:02  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
22:24:02  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60*24*60/5 PRECEDING AND CURRENT ROW)g27
22:24:02  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30*24*60/5 PRECEDING AND CURRENT ROW)g28
22:24:02  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10*24*60/5 PRECEDING AND CURRENT ROW)g29
22:24:02  42  FROM stk16svmspy
22:24:02  43  /

Table created.

Elapsed: 00:00:00.69
22:24:03 SQL> 
22:24:03 SQL> -- rpt
22:24:03 SQL> 
22:24:03 SQL> SELECT
22:24:03   2  tkr
22:24:03   3  ,trend
22:24:03   4  ,gatt
22:24:03   5  ,COUNT(tkr)
22:24:03   6  ,AVG(g1)
22:24:03   7  FROM stk_ms_svmspy
22:24:03   8  GROUP BY tkr,trend,gatt
22:24:03   9  ORDER BY tkr,trend,gatt
22:24:03  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G1)
------- ---------- --- ---------- ----------
GD		-1 nup	      376 -.44930981
GD		-1 up	      536 2.01153791
GD		-1	       12
GD		 1 nup	     1236 -.67092251
GD		 1 up	      973 .746487207
GD		 1	      156

6 rows selected.

Elapsed: 00:00:00.02
22:24:03 SQL> 
22:24:03 SQL> SELECT
22:24:03   2  tkr
22:24:03   3  ,0+TO_CHAR(ydate,'D')daynum
22:24:03   4  ,COUNT(tkr)
22:24:03   5  ,MIN(ydate),MAX(ydate)
22:24:03   6  FROM stk_ms_svmspy
22:24:03   7  GROUP BY tkr,0+TO_CHAR(ydate,'D')
22:24:03   8  ORDER BY tkr,0+TO_CHAR(ydate,'D')
22:24:03   9  /

TKR	    DAYNUM COUNT(TKR) MIN(YDATE)	  MAX(YDATE)
------- ---------- ---------- ------------------- -------------------
GD		 2	  624 2011-01-31 14:30:00 2011-03-28 19:55:00
GD		 3	  702 2011-02-01 14:30:00 2011-03-29 19:55:00
GD		 4	  637 2011-02-02 14:30:00 2011-03-30 14:30:00
GD		 5	  624 2011-02-03 14:30:00 2011-03-24 19:55:00
GD		 6	  702 2011-01-28 14:30:00 2011-03-25 19:55:00

Elapsed: 00:00:00.01
22:24:03 SQL> 
22:24:03 SQL> -- exit
22:24:03 SQL> @stk10svmd.sql '&1'
22:24:03 SQL> --
22:24:03 SQL> -- stk10svmd.sql
22:24:03 SQL> --
22:24:03 SQL> 
22:24:03 SQL> -- Creates views and tables for demonstrating SVM.
22:24:03 SQL> -- I need to run this after I run stk10.sql
22:24:03 SQL> 
22:24:03 SQL> DROP TABLE   stk_svmd10svmspy;

Table dropped.

Elapsed: 00:00:00.11
22:24:03 SQL> 
22:24:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.09
22:24:03 SQL> 
22:24:03 SQL> CREATE TABLE stk_svmd10svmspy COMPRESS AS
22:24:03   2  SELECT
22:24:03   3  tkr
22:24:03   4  ,ydate
22:24:03   5  ,tkr||ydate tkrdate
22:24:03   6  ,clse
22:24:03   7  ,rownum rnum -- acts as t in my time-series
22:24:03   8  -- Derive some attributes from clse.
22:24:03   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)min3
22:24:03  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)min4
22:24:03  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)min5
22:24:03  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)min6
22:24:03  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)min7
22:24:03  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)min8
22:24:03  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)min9
22:24:03  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)avg3
22:24:03  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)avg4
22:24:03  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)avg5
22:24:03  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)avg6
22:24:03  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)avg7
22:24:03  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)avg8
22:24:03  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)avg9
22:24:03  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)max3
22:24:03  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)max4
22:24:03  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)max5
22:24:03  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)max6
22:24:03  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND CURRENT ROW)max7
22:24:03  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)max8
22:24:03  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)max9
22:24:03  30  ,LEAD(clse,1,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld
22:24:03  31  -- ystk21 created here: svmd/cr_ystk21.sql
22:24:03  32  FROM ystk21
22:24:03  33  WHERE UPPER(tkr)='&1'
22:24:03  34  AND ydate > '1990-01-01'
22:24:03  35  AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
22:24:03  36  ORDER BY ydate
22:24:03  37  /
old  33: WHERE UPPER(tkr)='&1'
new  33: WHERE UPPER(tkr)='GD'
old  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='&1')
new  35: AND ydate NOT IN(SELECT DISTINCT ydate FROM stk_ms_svmspy WHERE UPPER(tkr)='GD')

Table created.

Elapsed: 00:00:00.42
22:24:03 SQL> 
22:24:03 SQL> -- rpt
22:24:03 SQL> 
22:24:03 SQL> SELECT
22:24:03   2  tkr
22:24:03   3  ,COUNT(tkr)
22:24:03   4  ,MIN(clse),MAX(clse)
22:24:03   5  ,MIN(avg4),MAX(avg4)
22:24:03   6  ,MIN(ydate),MAX(ydate)
22:24:03   7  FROM stk_svmd10svmspy
22:24:03   8  GROUP BY tkr
22:24:03   9  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	     MAX(YDATE)
--------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
GD		5349	    .27      88.48	 .288	  87.778 1990-01-02 21:00:00 2011-03-29 21:00:00

Elapsed: 00:00:00.05
22:24:03 SQL> 
22:24:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:24:03 SQL> DROP TABLE stk_svmd12;

Table dropped.

Elapsed: 00:00:00.25
22:24:04 SQL> CREATE TABLE stk_svmd12 COMPRESS AS
22:24:04   2  SELECT
22:24:04   3  tkr
22:24:04   4  ,ydate
22:24:04   5  ,tkrdate
22:24:04   6  ,clse
22:24:04   7  ,rnum
22:24:04   8  -- g1 is important. I want to predict g1:
22:24:04   9  ,ld - clse g1
22:24:04  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
22:24:04  11  -- I want more attributes from the ones I derived above:
22:24:04  12  -- clse relation to moving-min
22:24:04  13  ,clse-min3  cm3
22:24:04  14  ,clse-min4  cm4
22:24:04  15  ,clse-min5  cm5
22:24:04  16  ,clse-min6  cm6
22:24:04  17  ,clse-min7  cm7
22:24:04  18  ,clse-min8  cm8
22:24:04  19  ,clse-min9  cm9
22:24:04  20  -- clse relation to moving-avg
22:24:04  21  ,clse-avg3  ca3
22:24:04  22  ,clse-avg4  ca4
22:24:04  23  ,clse-avg5  ca5
22:24:04  24  ,clse-avg6  ca6
22:24:04  25  ,clse-avg7  ca7
22:24:04  26  ,clse-avg8  ca8
22:24:04  27  ,clse-avg9  ca9
22:24:04  28  -- clse relation to moving-max
22:24:04  29  ,clse-max3  cx3
22:24:04  30  ,clse-max4  cx4
22:24:04  31  ,clse-max5  cx5
22:24:04  32  ,clse-max6  cx6
22:24:04  33  ,clse-max7  cx7
22:24:04  34  ,clse-max8  cx8
22:24:04  35  ,clse-max9  cx9
22:24:04  36  -- Derive date related attributes:
22:24:04  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:24:04  38  ,0+TO_CHAR(ydate,'D')d
22:24:04  39  ,0+TO_CHAR(ydate,'W')w
22:24:04  40  -- mpm stands for minutes-past-midnight:
22:24:04  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:24:04  42  -- mph stands for minutes-past-hour:
22:24:04  43  ,0+TO_CHAR(ydate,'MI')mph
22:24:04  44  FROM stk_svmd10svmspy
22:24:04  45  ORDER BY ydate
22:24:04  46  /

Table created.

Elapsed: 00:00:00.16
22:24:04 SQL> 
22:24:04 SQL> -- rpt
22:24:04 SQL> 
22:24:04 SQL> SELECT
22:24:04   2  tkr
22:24:04   3  ,COUNT(tkr)
22:24:04   4  ,MIN(clse),MAX(clse)
22:24:04   5  ,MIN(ydate),MAX(ydate)
22:24:04   6  FROM stk_svmd12
22:24:04   7  GROUP BY tkr
22:24:04   8  /

TKR	  COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
--------- ---------- ---------- ---------- ------------------- -------------------
GD		5349	    .27      88.48 1990-01-02 21:00:00 2011-03-29 21:00:00

Elapsed: 00:00:00.01
22:24:04 SQL> 
22:24:04 SQL> -- Prepare for derivation of NTILE based parameters.
22:24:04 SQL> -- Also derive the "trend" parameter:
22:24:04 SQL> 
22:24:04 SQL> DROP TABLE stk_svmd14;

Table dropped.

Elapsed: 00:00:00.15
22:24:04 SQL> CREATE TABLE stk_svmd14 COMPRESS AS
22:24:04   2  SELECT
22:24:04   3  tkr
22:24:04   4  ,ydate
22:24:04   5  ,tkrdate
22:24:04   6  ,clse
22:24:04   7  ,g1
22:24:04   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse >	0.30/100 THEN 'up' ELSE 'nup' END gatt
22:24:04   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1/clse < -0.30/100 THEN 'up' ELSE 'nup' END gattn
22:24:04  10  ,CASE WHEN trend IS NULL THEN 1
22:24:04  11  	    WHEN trend =0      THEN 1
22:24:04  12  	    ELSE trend END trend
22:24:04  13  ,cm3
22:24:04  14  ,cm4
22:24:04  15  ,cm5
22:24:04  16  ,cm6
22:24:04  17  ,cm7
22:24:04  18  ,cm8
22:24:04  19  ,cm9
22:24:04  20  ,ca3
22:24:04  21  ,ca4
22:24:04  22  ,ca5
22:24:04  23  ,ca6
22:24:04  24  ,ca7
22:24:04  25  ,ca8
22:24:04  26  ,ca9
22:24:04  27  ,cx3
22:24:04  28  ,cx4
22:24:04  29  ,cx5
22:24:04  30  ,cx6
22:24:04  31  ,cx7
22:24:04  32  ,cx8
22:24:04  33  ,cx9
22:24:04  34  ,hh
22:24:04  35  ,d
22:24:04  36  ,w
22:24:04  37  ,mpm
22:24:04  38  ,mph
22:24:04  39  FROM stk_svmd12
22:24:04  40  -- Guard against divide by 0:
22:24:04  41  WHERE clse > 0
22:24:04  42  ORDER BY ydate
22:24:04  43  /

Table created.

Elapsed: 00:00:00.10
22:24:04 SQL> 
22:24:04 SQL> -- rpt
22:24:04 SQL> 
22:24:04 SQL> SELECT
22:24:04   2  tkr
22:24:04   3  ,trend
22:24:04   4  ,gatt
22:24:04   5  ,COUNT(tkr)
22:24:04   6  ,AVG(g1)
22:24:04   7  FROM stk_svmd14
22:24:04   8  GROUP BY tkr,trend,gatt
22:24:04   9  ORDER BY tkr,trend,gatt
22:24:04  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GD		  -1 nup       1310 -.32177863
GD		  -1 up 	958 .501210856
GD		   1 nup       1899 -.26688784
GD		   1 up        1181  .44358171
GD		   1		  1

Elapsed: 00:00:00.04
22:24:04 SQL> 
22:24:04 SQL> -- Derive NTILE based params:
22:24:04 SQL> 
22:24:04 SQL> DROP TABLE stk_svmd16;

Table dropped.

Elapsed: 00:00:00.06
22:24:04 SQL> CREATE TABLE stk_svmd16 COMPRESS AS
22:24:04   2  SELECT
22:24:04   3  tkr
22:24:04   4  ,ydate
22:24:04   5  ,tkrdate
22:24:04   6  ,clse
22:24:04   7  ,g1
22:24:04   8  ,gatt
22:24:04   9  ,gattn
22:24:04  10  ,trend
22:24:04  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att00
22:24:04  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att01
22:24:04  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att02
22:24:04  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att03
22:24:04  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att04
22:24:04  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att05
22:24:04  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm9)att06
22:24:04  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att07
22:24:04  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att08
22:24:04  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att09
22:24:04  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att10
22:24:04  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att11
22:24:04  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att12
22:24:04  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca9)att13
22:24:04  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att14
22:24:04  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att15
22:24:04  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att16
22:24:04  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att17
22:24:04  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att18
22:24:04  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att19
22:24:04  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx9)att20
22:24:04  32  ,hh  att21
22:24:04  33  ,d   att22
22:24:04  34  ,w   att23
22:24:04  35  ,mpm att24
22:24:04  36  ,mph att25
22:24:04  37  ,trend att26
22:24:04  38  FROM stk_svmd14
22:24:04  39  ORDER BY ydate
22:24:04  40  /

Table created.

Elapsed: 00:00:00.68
22:24:05 SQL> 
22:24:05 SQL> -- rpt
22:24:05 SQL> 
22:24:05 SQL> SELECT
22:24:05   2  tkr
22:24:05   3  ,trend
22:24:05   4  ,gatt
22:24:05   5  ,COUNT(tkr)
22:24:05   6  ,AVG(g1)
22:24:05   7  FROM stk_svmd16
22:24:05   8  GROUP BY tkr,trend,gatt
22:24:05   9  ORDER BY tkr,trend,gatt
22:24:05  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GD		  -1 nup       1310 -.32177863
GD		  -1 up 	958 .501210856
GD		   1 nup       1899 -.26688784
GD		   1 up        1181  .44358171
GD		   1		  1

Elapsed: 00:00:00.02
22:24:05 SQL> 
22:24:05 SQL> -- Comment out feedback related syntax:
22:24:05 SQL> 
22:24:05 SQL> -- CREATE OR REPLACE VIEW sc12tkr AS
22:24:05 SQL> -- SELECT
22:24:05 SQL> -- m.tkr
22:24:05 SQL> -- ,m.ydate
22:24:05 SQL> -- ,m.tkrdate
22:24:05 SQL> -- ,l.score score_long
22:24:05 SQL> -- ,s.score score_short
22:24:05 SQL> -- ,m.g1
22:24:05 SQL> -- FROM stkscores l,stkscores s,stk_svmd16 m
22:24:05 SQL> -- WHERE l.targ='gatt'
22:24:05 SQL> -- AND	 s.targ='gattn'
22:24:05 SQL> -- AND l.tkrdate = s.tkrdate
22:24:05 SQL> -- AND l.tkrdate = m.tkrdate
22:24:05 SQL> -- -- Speed things up:
22:24:05 SQL> -- AND l.tkr = '&1'
22:24:05 SQL> -- AND s.tkr = '&1'
22:24:05 SQL> -- /
22:24:05 SQL> --
22:24:05 SQL> -- DROP TABLE score_corr_tkr;
22:24:05 SQL> --
22:24:05 SQL> -- CREATE TABLE score_corr_tkr COMPRESS AS
22:24:05 SQL> -- SELECT tkrdate,AVG(sc_corr)sc_corr FROM
22:24:05 SQL> -- (
22:24:05 SQL> --   SELECT
22:24:05 SQL> --   tkrdate
22:24:05 SQL> --   -- Find corr() tween score and g1 over 8 day period:
22:24:05 SQL> --   ,CORR((score_long - score_short),g1)
22:24:05 SQL> --     OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)sc_corr
22:24:05 SQL> --   FROM sc12tkr
22:24:05 SQL> -- )
22:24:05 SQL> -- GROUP BY tkrdate
22:24:05 SQL> -- /
22:24:05 SQL> 
22:24:05 SQL> -- Now I derive goodness attributes and join with score_corr_tkr:
22:24:05 SQL> 
22:24:05 SQL> DROP TABLE stk_ms_svmd_svmspy;

Table dropped.

Elapsed: 00:00:00.11
22:24:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
22:24:05 SQL> CREATE TABLE stk_ms_svmd_svmspy COMPRESS AS
22:24:05   2  SELECT
22:24:05   3  tkr
22:24:05   4  ,ydate
22:24:05   5  ,tkrdate
22:24:05   6  ,trend
22:24:05   7  ,g1
22:24:05   8  ,gatt
22:24:05   9  ,gattn
22:24:05  10  -- Goodness attributes:
22:24:05  11  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g00
22:24:05  12  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g01
22:24:05  13  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g02
22:24:05  14  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g03
22:24:05  15  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g04
22:24:05  16  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g05
22:24:05  17  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g06
22:24:05  18  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g07
22:24:05  19  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g08
22:24:05  20  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g09
22:24:05  21  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g10
22:24:05  22  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g11
22:24:05  23  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g12
22:24:05  24  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g13
22:24:05  25  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g14
22:24:05  26  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g15
22:24:05  27  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g16
22:24:05  28  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g17
22:24:05  29  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g18
22:24:05  30  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g19
22:24:05  31  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g20
22:24:05  32  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g21
22:24:05  33  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g22
22:24:05  34  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g23
22:24:05  35  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g24
22:24:05  36  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g25
22:24:05  37  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 90 PRECEDING AND CURRENT ROW)g26
22:24:05  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
22:24:05  39  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 60 PRECEDING AND CURRENT ROW)g27
22:24:05  40  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 30 PRECEDING AND CURRENT ROW)g28
22:24:05  41  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND CURRENT ROW)g29
22:24:05  42  FROM stk_svmd16
22:24:05  43  /

Table created.

Elapsed: 00:00:01.06
22:24:06 SQL> 
22:24:06 SQL> -- rpt
22:24:06 SQL> 
22:24:06 SQL> SELECT
22:24:06   2  tkr
22:24:06   3  ,trend
22:24:06   4  ,gatt
22:24:06   5  ,COUNT(tkr)
22:24:06   6  ,AVG(g1)
22:24:06   7  FROM stk_ms_svmd_svmspy
22:24:06   8  GROUP BY tkr,trend,gatt
22:24:06   9  ORDER BY tkr,trend,gatt
22:24:06  10  /

TKR	       TREND GAT COUNT(TKR)    AVG(G1)
--------- ---------- --- ---------- ----------
GD		  -1 nup       1310 -.32177863
GD		  -1 up 	958 .501210856
GD		   1 nup       1899 -.26688784
GD		   1 up        1181  .44358171
GD		   1		  1

Elapsed: 00:00:00.02
22:24:06 SQL> 
22:24:06 SQL> SELECT
22:24:06   2  tkr
22:24:06   3  ,COUNT(tkr)
22:24:06   4  ,MIN(ydate),MAX(ydate)
22:24:06   5  FROM stk_ms_svmd_svmspy
22:24:06   6  GROUP BY tkr
22:24:06   7  /

TKR	  COUNT(TKR) MIN(YDATE) 	 MAX(YDATE)
--------- ---------- ------------------- -------------------
GD		5349 1990-01-02 21:00:00 2011-03-29 21:00:00

Elapsed: 00:00:00.01
22:24:06 SQL> 
22:24:06 SQL> -- exit
22:24:06 SQL> 
22:24:06 SQL> 
22:24:06 SQL> DROP TABLE   stk_ms_u;

Table dropped.

Elapsed: 00:00:00.58
22:24:07 SQL> 
22:24:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.24
22:24:07 SQL> 
22:24:07 SQL> CREATE TABLE stk_ms_u COMPRESS AS
22:24:07   2  SELECT * FROM stk_ms_svmspy
22:24:07   3  UNION
22:24:07   4  SELECT * FROM stk_ms_svmd_svmspy
22:24:07   5  /

Table created.

Elapsed: 00:00:00.21
22:24:07 SQL> 
22:24:07 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
