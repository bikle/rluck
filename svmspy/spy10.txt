
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 2 05:34:18 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:34:18 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
05:34:18 SQL> 05:34:18 SQL> --
05:34:18 SQL> -- stk10.sql
05:34:18 SQL> --
05:34:18 SQL> 
05:34:18 SQL> -- Creates views and tables for demonstrating SVM.
05:34:18 SQL> 
05:34:18 SQL> CREATE OR REPLACE VIEW stk10 AS
05:34:18   2  SELECT
05:34:18   3  tkr
05:34:18   4  ,ydate
05:34:18   5  ,tkr||ydate tkrdate
05:34:18   6  ,clse
05:34:18   7  ,rownum rnum -- acts as t in my time-series
05:34:18   8  -- Derive some attributes from clse.
05:34:18   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
05:34:18  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
05:34:18  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:34:18  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
05:34:18  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:34:18  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
05:34:18  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:34:18  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
05:34:18  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
05:34:18  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:34:18  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
05:34:18  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:34:18  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
05:34:18  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:34:18  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
05:34:18  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
05:34:18  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:34:18  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
05:34:18  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:34:18  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
05:34:18  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:34:18  30  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
05:34:18  31  FROM dukas5min_stk WHERE UPPER(tkr)='&1'
05:34:18  32  ORDER BY ydate
05:34:18  33  /
old  31: FROM dukas5min_stk WHERE UPPER(tkr)='&1'
new  31: FROM dukas5min_stk WHERE UPPER(tkr)='SPY'

View created.

Elapsed: 00:00:00.05
05:34:18 SQL> 
05:34:18 SQL> -- rpt
05:34:18 SQL> 
05:34:18 SQL> SELECT
05:34:18   2  tkr
05:34:18   3  ,COUNT(tkr)
05:34:18   4  ,MIN(clse),MAX(clse)
05:34:18   5  ,MIN(avg4),MAX(avg4)
05:34:18   6  ,MIN(ydate),MAX(ydate)
05:34:18   7  FROM stk10
05:34:18   8  GROUP BY tkr
05:34:18   9  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
-------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
SPY	      19911	103.18	    126.2 103.882959 126.128776 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.57
05:34:19 SQL> 
05:34:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:34:19 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.15
05:34:19 SQL> CREATE TABLE stk12 COMPRESS AS
05:34:19   2  SELECT
05:34:19   3  tkr
05:34:19   4  ,ydate
05:34:19   5  ,tkrdate
05:34:19   6  ,clse
05:34:19   7  ,rnum
05:34:19   8  -- g4 is important. I want to predict g4:
05:34:19   9  ,ld4 - clse g4
05:34:19  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
05:34:19  11  -- I want more attributes from the ones I derived above:
05:34:19  12  -- clse relation to moving-min
05:34:19  13  ,clse-min2  cm2
05:34:19  14  ,clse-min3  cm3
05:34:19  15  ,clse-min4  cm4
05:34:19  16  ,clse-min5  cm5
05:34:19  17  ,clse-min6  cm6
05:34:19  18  ,clse-min7  cm7
05:34:19  19  ,clse-min8  cm8
05:34:19  20  -- clse relation to moving-avg
05:34:19  21  ,clse-avg2  ca2
05:34:19  22  ,clse-avg3  ca3
05:34:19  23  ,clse-avg4  ca4
05:34:19  24  ,clse-avg5  ca5
05:34:19  25  ,clse-avg6  ca6
05:34:19  26  ,clse-avg7  ca7
05:34:19  27  ,clse-avg8  ca8
05:34:19  28  -- clse relation to moving-max
05:34:19  29  ,clse-max2  cx2
05:34:19  30  ,clse-max3  cx3
05:34:19  31  ,clse-max4  cx4
05:34:19  32  ,clse-max5  cx5
05:34:19  33  ,clse-max6  cx6
05:34:19  34  ,clse-max7  cx7
05:34:19  35  ,clse-max8  cx8
05:34:19  36  -- Derive date related attributes:
05:34:19  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:34:19  38  ,0+TO_CHAR(ydate,'D')d
05:34:19  39  ,0+TO_CHAR(ydate,'W')w
05:34:19  40  -- mpm stands for minutes-past-midnight:
05:34:19  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:34:19  42  -- mph stands for minutes-past-hour:
05:34:19  43  ,0+TO_CHAR(ydate,'MI')mph
05:34:19  44  FROM stk10
05:34:19  45  ORDER BY ydate
05:34:19  46  /

Table created.

Elapsed: 00:00:01.30
05:34:20 SQL> 
05:34:20 SQL> -- rpt
05:34:20 SQL> 
05:34:20 SQL> SELECT
05:34:20   2  tkr
05:34:20   3  ,COUNT(tkr)
05:34:20   4  ,MIN(clse),MAX(clse)
05:34:20   5  ,MIN(ydate),MAX(ydate)
05:34:20   6  FROM stk12
05:34:20   7  GROUP BY tkr
05:34:20   8  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
-------- ---------- ---------- ---------- ------------------- -------------------
SPY	      19911	103.18	    126.2 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.04
05:34:20 SQL> 
05:34:20 SQL> -- Prepare for derivation of NTILE based parameters.
05:34:20 SQL> -- Also derive the "trend" parameter:
05:34:20 SQL> 
05:34:20 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.16
05:34:21 SQL> CREATE TABLE stk14 COMPRESS AS
05:34:21   2  SELECT
05:34:21   3  tkr
05:34:21   4  ,ydate
05:34:21   5  ,tkrdate
05:34:21   6  ,clse
05:34:21   7  ,g4
05:34:21   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4 > 0.30 THEN 'up' ELSE 'nup' END gatt
05:34:21   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4< -0.30 THEN 'up' ELSE 'nup' END gattn
05:34:21  10  ,CASE WHEN trend IS NULL THEN 1
05:34:21  11  	    WHEN trend =0      THEN 1
05:34:21  12  	    ELSE trend END trend
05:34:21  13  ,cm2
05:34:21  14  ,cm3
05:34:21  15  ,cm4
05:34:21  16  ,cm5
05:34:21  17  ,cm6
05:34:21  18  ,cm7
05:34:21  19  ,cm8
05:34:21  20  ,ca2
05:34:21  21  ,ca3
05:34:21  22  ,ca4
05:34:21  23  ,ca5
05:34:21  24  ,ca6
05:34:21  25  ,ca7
05:34:21  26  ,ca8
05:34:21  27  ,cx2
05:34:21  28  ,cx3
05:34:21  29  ,cx4
05:34:21  30  ,cx5
05:34:21  31  ,cx6
05:34:21  32  ,cx7
05:34:21  33  ,cx8
05:34:21  34  ,hh
05:34:21  35  ,d
05:34:21  36  ,w
05:34:21  37  ,mpm
05:34:21  38  ,mph
05:34:21  39  FROM stk12
05:34:21  40  ORDER BY ydate
05:34:21  41  /

Table created.

Elapsed: 00:00:00.28
05:34:21 SQL> 
05:34:21 SQL> -- rpt
05:34:21 SQL> 
05:34:21 SQL> SELECT
05:34:21   2  tkr
05:34:21   3  ,trend
05:34:21   4  ,gatt
05:34:21   5  ,COUNT(tkr)
05:34:21   6  ,AVG(g4)
05:34:21   7  FROM stk14
05:34:21   8  GROUP BY tkr,trend,gatt
05:34:21   9  ORDER BY tkr,trend,gatt
05:34:21  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5153 -.42306715
SPY		 -1 up	      3458 .946631001
SPY		 -1		17
SPY		  1 nup       7830 -.35064049
SPY		  1 up	      3422 .771193746
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.03
05:34:21 SQL> 
05:34:21 SQL> -- Derive NTILE based params:
05:34:21 SQL> 
05:34:21 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.12
05:34:21 SQL> CREATE TABLE stk16 COMPRESS AS
05:34:21   2  SELECT
05:34:21   3  tkr
05:34:21   4  ,ydate
05:34:21   5  ,tkrdate
05:34:21   6  ,clse
05:34:21   7  ,g4
05:34:21   8  ,gatt
05:34:21   9  ,gattn
05:34:21  10  ,trend
05:34:21  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
05:34:21  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
05:34:21  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
05:34:21  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
05:34:21  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
05:34:21  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
05:34:21  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
05:34:21  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
05:34:21  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
05:34:21  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
05:34:21  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
05:34:21  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
05:34:21  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
05:34:21  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
05:34:21  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
05:34:21  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
05:34:21  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
05:34:21  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
05:34:21  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
05:34:21  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
05:34:21  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
05:34:21  32  ,hh  att21
05:34:21  33  ,d   att22
05:34:21  34  ,w   att23
05:34:21  35  ,mpm att24
05:34:21  36  ,mph att25
05:34:21  37  ,trend att26
05:34:21  38  FROM stk14
05:34:21  39  ORDER BY ydate
05:34:21  40  /

Table created.

Elapsed: 00:00:02.21
05:34:23 SQL> 
05:34:23 SQL> -- rpt
05:34:23 SQL> 
05:34:23 SQL> SELECT
05:34:23   2  tkr
05:34:23   3  ,trend
05:34:23   4  ,gatt
05:34:23   5  ,COUNT(tkr)
05:34:23   6  ,AVG(g4)
05:34:23   7  FROM stk16
05:34:23   8  GROUP BY tkr,trend,gatt
05:34:23   9  ORDER BY tkr,trend,gatt
05:34:23  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5153 -.42306715
SPY		 -1 up	      3458 .946631001
SPY		 -1		17
SPY		  1 nup       7830 -.35064049
SPY		  1 up	      3422 .771193746
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.02
05:34:23 SQL> 
05:34:23 SQL> -- Now I derive goodness attributes:
05:34:23 SQL> 
05:34:23 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.15
05:34:23 SQL> CREATE TABLE stk_ms COMPRESS AS
05:34:23   2  SELECT
05:34:23   3  tkr
05:34:23   4  ,ydate
05:34:23   5  ,tkrdate
05:34:23   6  ,trend
05:34:23   7  ,g4
05:34:23   8  ,gatt
05:34:23   9  ,gattn
05:34:23  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
05:34:23  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
05:34:23  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
05:34:23  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
05:34:23  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
05:34:23  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
05:34:23  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
05:34:23  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
05:34:23  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
05:34:23  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
05:34:23  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
05:34:23  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
05:34:23  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
05:34:23  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
05:34:23  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
05:34:23  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
05:34:23  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
05:34:23  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
05:34:23  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
05:34:23  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
05:34:23  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
05:34:23  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
05:34:23  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
05:34:23  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
05:34:23  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
05:34:23  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
05:34:23  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
05:34:23  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
05:34:23  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
05:34:23  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
05:34:23  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
05:34:23  41  FROM stk16
05:34:23  42  /

Table created.

Elapsed: 00:00:03.08
05:34:27 SQL> 
05:34:27 SQL> -- rpt
05:34:27 SQL> 
05:34:27 SQL> SELECT
05:34:27   2  tkr
05:34:27   3  ,trend
05:34:27   4  ,gatt
05:34:27   5  ,COUNT(tkr)
05:34:27   6  ,AVG(g4)
05:34:27   7  FROM stk_ms
05:34:27   8  GROUP BY tkr,trend,gatt
05:34:27   9  ORDER BY tkr,trend,gatt
05:34:27  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5153 -.42306715
SPY		 -1 up	      3458 .946631001
SPY		 -1		17
SPY		  1 nup       7830 -.35064049
SPY		  1 up	      3422 .771193746
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.03
05:34:27 SQL> 
05:34:27 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
