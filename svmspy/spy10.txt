
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 2 08:31:44 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:31:44 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
08:31:44 SQL> 08:31:44 SQL> --
08:31:44 SQL> -- stk10.sql
08:31:44 SQL> --
08:31:44 SQL> 
08:31:44 SQL> -- Creates views and tables for demonstrating SVM.
08:31:44 SQL> 
08:31:44 SQL> CREATE OR REPLACE VIEW stk10 AS
08:31:44   2  SELECT
08:31:44   3  tkr
08:31:44   4  ,ydate
08:31:44   5  ,tkr||ydate tkrdate
08:31:44   6  ,clse
08:31:44   7  ,rownum rnum -- acts as t in my time-series
08:31:44   8  -- Derive some attributes from clse.
08:31:44   9  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
08:31:44  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
08:31:44  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:31:44  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)min5
08:31:44  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:31:44  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)min7
08:31:44  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:31:44  16  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
08:31:44  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
08:31:44  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:31:44  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)avg5
08:31:44  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:31:44  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)avg7
08:31:44  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:31:44  23  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
08:31:44  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
08:31:44  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:31:44  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*5 PRECEDING AND CURRENT ROW)max5
08:31:44  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:31:44  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*7 PRECEDING AND CURRENT ROW)max7
08:31:44  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:31:44  30  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
08:31:44  31  FROM dukas5min_stk WHERE UPPER(tkr)='&1'
08:31:44  32  ORDER BY ydate
08:31:44  33  /
old  31: FROM dukas5min_stk WHERE UPPER(tkr)='&1'
new  31: FROM dukas5min_stk WHERE UPPER(tkr)='SPY'

View created.

Elapsed: 00:00:00.05
08:31:44 SQL> 
08:31:44 SQL> -- rpt
08:31:44 SQL> 
08:31:44 SQL> SELECT
08:31:44   2  tkr
08:31:44   3  ,COUNT(tkr)
08:31:44   4  ,MIN(clse),MAX(clse)
08:31:44   5  ,MIN(avg4),MAX(avg4)
08:31:44   6  ,MIN(ydate),MAX(ydate)
08:31:44   7  FROM stk10
08:31:44   8  GROUP BY tkr
08:31:44   9  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
-------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
SPY	      19911	103.18	    126.2 103.882959 126.128776 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.56
08:31:45 SQL> 
08:31:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:31:45 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.04
08:31:45 SQL> CREATE TABLE stk12 COMPRESS AS
08:31:45   2  SELECT
08:31:45   3  tkr
08:31:45   4  ,ydate
08:31:45   5  ,tkrdate
08:31:45   6  ,clse
08:31:45   7  ,rnum
08:31:45   8  -- g4 is important. I want to predict g4:
08:31:45   9  ,ld4 - clse g4
08:31:45  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
08:31:45  11  -- I want more attributes from the ones I derived above:
08:31:45  12  -- clse relation to moving-min
08:31:45  13  ,clse-min2  cm2
08:31:45  14  ,clse-min3  cm3
08:31:45  15  ,clse-min4  cm4
08:31:45  16  ,clse-min5  cm5
08:31:45  17  ,clse-min6  cm6
08:31:45  18  ,clse-min7  cm7
08:31:45  19  ,clse-min8  cm8
08:31:45  20  -- clse relation to moving-avg
08:31:45  21  ,clse-avg2  ca2
08:31:45  22  ,clse-avg3  ca3
08:31:45  23  ,clse-avg4  ca4
08:31:45  24  ,clse-avg5  ca5
08:31:45  25  ,clse-avg6  ca6
08:31:45  26  ,clse-avg7  ca7
08:31:45  27  ,clse-avg8  ca8
08:31:45  28  -- clse relation to moving-max
08:31:45  29  ,clse-max2  cx2
08:31:45  30  ,clse-max3  cx3
08:31:45  31  ,clse-max4  cx4
08:31:45  32  ,clse-max5  cx5
08:31:45  33  ,clse-max6  cx6
08:31:45  34  ,clse-max7  cx7
08:31:45  35  ,clse-max8  cx8
08:31:45  36  -- Derive date related attributes:
08:31:45  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:31:45  38  ,0+TO_CHAR(ydate,'D')d
08:31:45  39  ,0+TO_CHAR(ydate,'W')w
08:31:45  40  -- mpm stands for minutes-past-midnight:
08:31:45  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:31:45  42  -- mph stands for minutes-past-hour:
08:31:45  43  ,0+TO_CHAR(ydate,'MI')mph
08:31:45  44  FROM stk10
08:31:45  45  ORDER BY ydate
08:31:45  46  /

Table created.

Elapsed: 00:00:01.26
08:31:46 SQL> 
08:31:46 SQL> -- rpt
08:31:46 SQL> 
08:31:46 SQL> SELECT
08:31:46   2  tkr
08:31:46   3  ,COUNT(tkr)
08:31:46   4  ,MIN(clse),MAX(clse)
08:31:46   5  ,MIN(ydate),MAX(ydate)
08:31:46   6  FROM stk12
08:31:46   7  GROUP BY tkr
08:31:46   8  /

TKR	 COUNT(TKR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
-------- ---------- ---------- ---------- ------------------- -------------------
SPY	      19911	103.18	    126.2 2009-10-28 18:10:01 2010-12-31 20:50:01

Elapsed: 00:00:00.03
08:31:46 SQL> 
08:31:46 SQL> -- Prepare for derivation of NTILE based parameters.
08:31:46 SQL> -- Also derive the "trend" parameter:
08:31:46 SQL> 
08:31:46 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.04
08:31:46 SQL> CREATE TABLE stk14 COMPRESS AS
08:31:46   2  SELECT
08:31:46   3  tkr
08:31:46   4  ,ydate
08:31:46   5  ,tkrdate
08:31:46   6  ,clse
08:31:46   7  ,g4
08:31:46   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.30/120 THEN 'up' ELSE 'nup' END gatt
08:31:46   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.30/120 THEN 'up' ELSE 'nup' END gattn
08:31:46  10  ,CASE WHEN trend IS NULL THEN 1
08:31:46  11  	    WHEN trend =0      THEN 1
08:31:46  12  	    ELSE trend END trend
08:31:46  13  ,cm2
08:31:46  14  ,cm3
08:31:46  15  ,cm4
08:31:46  16  ,cm5
08:31:46  17  ,cm6
08:31:46  18  ,cm7
08:31:46  19  ,cm8
08:31:46  20  ,ca2
08:31:46  21  ,ca3
08:31:46  22  ,ca4
08:31:46  23  ,ca5
08:31:46  24  ,ca6
08:31:46  25  ,ca7
08:31:46  26  ,ca8
08:31:46  27  ,cx2
08:31:46  28  ,cx3
08:31:46  29  ,cx4
08:31:46  30  ,cx5
08:31:46  31  ,cx6
08:31:46  32  ,cx7
08:31:46  33  ,cx8
08:31:46  34  ,hh
08:31:46  35  ,d
08:31:46  36  ,w
08:31:46  37  ,mpm
08:31:46  38  ,mph
08:31:46  39  FROM stk12
08:31:46  40  -- Guard against divide by 0:
08:31:46  41  WHERE clse > 0
08:31:46  42  ORDER BY ydate
08:31:46  43  /

Table created.

Elapsed: 00:00:00.28
08:31:46 SQL> 
08:31:46 SQL> -- rpt
08:31:46 SQL> 
08:31:46 SQL> SELECT
08:31:46   2  tkr
08:31:46   3  ,trend
08:31:46   4  ,gatt
08:31:46   5  ,COUNT(tkr)
08:31:46   6  ,AVG(g4)
08:31:46   7  FROM stk14
08:31:46   8  GROUP BY tkr,trend,gatt
08:31:46   9  ORDER BY tkr,trend,gatt
08:31:46  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5064 -.43559439
SPY		 -1 up	      3547 .930148012
SPY		 -1		17
SPY		  1 nup       7736 -.35844041
SPY		  1 up	      3516 .758363197
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.04
08:31:46 SQL> 
08:31:46 SQL> -- Derive NTILE based params:
08:31:46 SQL> 
08:31:46 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.03
08:31:46 SQL> CREATE TABLE stk16 COMPRESS AS
08:31:46   2  SELECT
08:31:46   3  tkr
08:31:46   4  ,ydate
08:31:46   5  ,tkrdate
08:31:46   6  ,clse
08:31:46   7  ,g4
08:31:46   8  ,gatt
08:31:46   9  ,gattn
08:31:46  10  ,trend
08:31:46  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
08:31:46  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
08:31:46  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
08:31:46  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
08:31:46  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
08:31:46  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
08:31:46  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
08:31:46  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
08:31:46  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
08:31:46  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
08:31:46  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
08:31:46  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
08:31:46  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
08:31:46  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
08:31:46  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
08:31:46  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
08:31:46  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
08:31:46  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
08:31:46  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
08:31:46  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
08:31:46  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
08:31:46  32  ,hh  att21
08:31:46  33  ,d   att22
08:31:46  34  ,w   att23
08:31:46  35  ,mpm att24
08:31:46  36  ,mph att25
08:31:46  37  ,trend att26
08:31:46  38  FROM stk14
08:31:46  39  ORDER BY ydate
08:31:46  40  /

Table created.

Elapsed: 00:00:02.25
08:31:48 SQL> 
08:31:48 SQL> -- rpt
08:31:48 SQL> 
08:31:48 SQL> SELECT
08:31:48   2  tkr
08:31:48   3  ,trend
08:31:48   4  ,gatt
08:31:48   5  ,COUNT(tkr)
08:31:48   6  ,AVG(g4)
08:31:48   7  FROM stk16
08:31:48   8  GROUP BY tkr,trend,gatt
08:31:48   9  ORDER BY tkr,trend,gatt
08:31:48  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5064 -.43559439
SPY		 -1 up	      3547 .930148012
SPY		 -1		17
SPY		  1 nup       7736 -.35844041
SPY		  1 up	      3516 .758363197
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.03
08:31:49 SQL> 
08:31:49 SQL> -- Now I derive goodness attributes:
08:31:49 SQL> 
08:31:49 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.05
08:31:49 SQL> CREATE TABLE stk_ms COMPRESS AS
08:31:49   2  SELECT
08:31:49   3  tkr
08:31:49   4  ,ydate
08:31:49   5  ,tkrdate
08:31:49   6  ,trend
08:31:49   7  ,g4
08:31:49   8  ,gatt
08:31:49   9  ,gattn
08:31:49  10  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
08:31:49  11  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
08:31:49  12  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
08:31:49  13  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
08:31:49  14  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
08:31:49  15  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
08:31:49  16  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
08:31:49  17  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
08:31:49  18  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
08:31:49  19  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
08:31:49  20  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
08:31:49  21  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
08:31:49  22  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
08:31:49  23  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
08:31:49  24  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
08:31:49  25  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
08:31:49  26  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
08:31:49  27  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
08:31:49  28  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
08:31:49  29  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
08:31:49  30  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
08:31:49  31  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
08:31:49  32  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
08:31:49  33  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
08:31:49  34  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
08:31:49  35  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
08:31:49  36  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
08:31:49  37  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
08:31:49  38  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g27
08:31:49  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g28
08:31:49  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g29
08:31:49  41  FROM stk16
08:31:49  42  /

Table created.

Elapsed: 00:00:03.13
08:31:52 SQL> 
08:31:52 SQL> -- rpt
08:31:52 SQL> 
08:31:52 SQL> SELECT
08:31:52   2  tkr
08:31:52   3  ,trend
08:31:52   4  ,gatt
08:31:52   5  ,COUNT(tkr)
08:31:52   6  ,AVG(g4)
08:31:52   7  FROM stk_ms
08:31:52   8  GROUP BY tkr,trend,gatt
08:31:52   9  ORDER BY tkr,trend,gatt
08:31:52  10  /

TKR	      TREND GAT COUNT(TKR)    AVG(G4)
-------- ---------- --- ---------- ----------
SPY		 -1 nup       5064 -.43559439
SPY		 -1 up	      3547 .930148012
SPY		 -1		17
SPY		  1 nup       7736 -.35844041
SPY		  1 up	      3516 .758363197
SPY		  1		31

6 rows selected.

Elapsed: 00:00:00.02
08:31:52 SQL> 
08:31:52 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
