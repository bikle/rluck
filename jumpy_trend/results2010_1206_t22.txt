/pt/s/rlk/jumpy_trend/results2010_1206_t22.txt

The script, t22.sql, does show me some historical revert-to-mean
behavior which appears lucrative.

One general piece of information which jumps out at me is that the
shorter duration strategies favor the trading of these pairs:

  - aud_usd
  - usd_cad
  - usd_chf  

And I see that the longer duration strategies favor the trading of these pairs:

  - eur_usd
  - usd_jpy



Here is strategy summary to describe how to trade these results.

Name: 2 hr strategy

I watch aud_usd, eur_usd, usd_cad and wait for 2-hour-npg to move more than 4 x std2.
I then open a position for 1 hour which is contrary to the trend.

I like this strategy because data supporting it has:
  - Nice balanced negative CORR() for eur_usd, usd_cad
  - Nice balanced AVG_NPG32 for aud_usd
  - High COUNT(PAIR) for aud_usd, eur_usd, usd_cad

I dislike this strategy because data supporting it has:
  - Poor balanced negative CORR() for aud_usd
  - Poor values for eur_usd under AVG_NPG32
  - High values for aud_usd under STDDV_NPG32

Here is a report snippet which supports this strategy.
I want to see large negative values for CRR2HR.
A value of -1.0 would be perfection.
I want to see large values for AVG_NPG32 which have an opposite sign of AVG_NPG2:

19:37:08  10  WHERE ABS(npg2)> 4*std2 AND nt2 IN(1,3)
19:37:08  11  GROUP BY nt2,pair
19:37:08  12  ORDER BY nt2,pair
19:37:08  13  /
     TREND PAIR     COUNT(PAIR)     CRR2HR   AVG_NPG2  AVG_NPG32 STDDV_NPG32
---------- -------- ----------- ---------- ---------- ---------- -----------
        -1 aud_usd          100       -.02     -.0126      .0006        .004
        -1 eur_usd           73       -.22     -.0091     -.0003       .0019
        -1 gbp_usd          118       -.18     -.0102      .0004       .0034
        -1 usd_cad           98       -.17     -.0105      .0003       .0021
        -1 usd_chf          103        .02     -.0103     -.0003       .0022
        -1 usd_jpy          132       -.27     -.0121      .0006       .0051
         1 aud_usd           72       -.19      .0117     -.0007       .0037
         1 eur_usd          111       -.49        .01          0       .0023
         1 gbp_usd           65        .13       .009     -.0006        .002
         1 usd_cad          122       -.38      .0107     -.0008       .0031
         1 usd_chf          137       -.27      .0094          0       .0022
         1 usd_jpy          101        .29      .0111      .0009        .003
12 rows selected.



Name: 4 hr strategy

I watch aud_usd, gbp_usd, usd_cad, usd_chf and wait for 4-hour-npg to move more than 4 x std4.
I then open a position for 2 hours which is contrary to the trend.

I like this strategy because data supporting it has:
  - Nice balanced negative CORR() for usd_cad
  - Nice balanced AVG_NPG64 for aud_usd, usd_cad
  - High COUNT(PAIR) for usd_cad, usd_chf
  - Low values for usd_chf under STDDV_NPG64

I dislike this strategy because data supporting it has:
  - Low COUNT(PAIR) for aud_usd, gbp_usd
  - Unbalanced values for aud_usd, gbp_usd, usd_chf under CRR4HR
  - Low values for usd_chf under AVG_NPG64
  - High values for aud_usd under STDDV_NPG64

Here is a report snippet which supports this strategy.
I want to see large negative values for CRR4HR.
A value of -1.0 would be perfection.
I want to see large values for AVG_NPG64 which have an opposite sign of AVG_NPG4:

19:37:08  10  WHERE ABS(npg4)> 4*std4 AND nt4 IN(1,3)
19:37:08  11  GROUP BY nt4,pair
19:37:08  12  ORDER BY nt4,pair
19:37:08  13  /
     TREND PAIR     COUNT(PAIR)     CRR4HR   AVG_NPG4  AVG_NPG64 STDDV_NPG64
---------- -------- ----------- ---------- ---------- ---------- -----------
        -1 aud_usd           88        -.4     -.0171      .0026       .0046
        -1 eur_usd           72        .01     -.0123     -.0006       .0027
        -1 gbp_usd           89       -.37     -.0139      .0006       .0025
        -1 usd_cad           80       -.24     -.0136      .0015       .0035
        -1 usd_chf          100       -.21     -.0133      .0001       .0018
        -1 usd_jpy          123       -.25      -.017     -.0007       .0089
         1 aud_usd           33         .1      .0166     -.0021       .0061
         1 eur_usd           89       -.57       .013     -.0014       .0026
         1 gbp_usd           52        .05      .0124     -.0003       .0031
         1 usd_cad          104       -.38      .0147     -.0011       .0038
         1 usd_chf          114       -.05      .0126     -.0006       .0024
         1 usd_jpy          105        .05      .0156      .0014       .0042
12 rows selected.





Name: 6 hr strategy

I watch aud_usd, gbp_usd, usd_cad, usd_chf and wait for 6-hour-npg to move more than 4 x std6.
I then open a position for 3 hours which is contrary to the trend.

I like this strategy because data supporting it has:
  - Nice balanced negative CORR() for aud_usd, usd_cad
  - Nice balanced AVG_NPG96 for gbp_usd, usd_cad
  - Low values for usd_chf under STDDV_NPG96
  - Generally nice values for CRR6HR
  - Generally nice relationship between AVG_NPG6 and AVG_NPG96

I dislike this strategy because data supporting it has:
  - Generally low counts.
  - Unbalanced values for aud_usd under AVG_NPG96
  - High values for aud_usd under STDDV_NPG96

Here is a report snippet which supports this strategy.
I want to see large negative values for CRR6HR.
A value of -1.0 would be perfection.
I want to see large values for AVG_NPG96 which have an opposite sign of AVG_NPG6:

19:37:09  10  WHERE ABS(npg6)> 4*std6 AND nt6 IN(1,3)
19:37:09  11  GROUP BY nt6,pair
19:37:09  12  ORDER BY nt6,pair
19:37:09  13  /
     TREND PAIR     COUNT(PAIR)     CRR6HR   AVG_NPG6  AVG_NPG96 STDDV_NPG96
---------- -------- ----------- ---------- ---------- ---------- -----------
        -1 aud_usd           55       -.18     -.0197      .0001       .0057
        -1 eur_usd           69        .15     -.0154     -.0012       .0019
        -1 gbp_usd           93       -.28     -.0159      .0015       .0045
        -1 usd_cad           22       -.38     -.0158      .0028       .0033
        -1 usd_chf           71       -.05     -.0148      .0005       .0021
        -1 usd_jpy          135       -.34     -.0197      .0005       .0096
         1 aud_usd           24       -.54       .021     -.0042       .0043
         1 eur_usd           49       -.63      .0152     -.0008        .004
         1 gbp_usd           41       -.08      .0149     -.0015        .002
         1 usd_cad           81       -.52      .0174     -.0013       .0029
         1 usd_chf           76       -.06      .0148     -.0005       .0032
         1 usd_jpy          119        .21      .0191       .002       .0046
12 rows selected.




Name: 8 hr strategy

I watch aud_usd, gbp_usd, usd_cad, usd_chf and wait for 8-hour-npg to move more than 4 x std8.
I then open a position for 4 hours which is contrary to the trend.

I like this strategy because data supporting it has:
  - Nice balanced negative CORR() for gbp_usd, usd_cad, usd_chf
  - Nice balanced AVG_NPG128 for gbp_usd, usd_cad, usd_chf
  - Low values for usd_chf under STDDV_NPG128
  - Generally nice values for CRR8HR
  - Generally nice relationship between AVG_NPG8 and AVG_NPG128

I dislike this strategy because data supporting it has:
  - Generally low counts.
  - Unbalanced values for aud_usd under CRR8HR and AVG_NPG128
  - High values for aud_usd under STDDV_NPG128

Here is a report snippet which supports this strategy.
I want to see large negative values for CRR8HR.
A value of -1.0 would be perfection.
I want to see large values for AVG_NPG128 which have an opposite sign of AVG_NPG8:

19:37:09  10  WHERE ABS(npg8)> 4*std8 AND nt8 IN(1,3)
19:37:09  11  GROUP BY nt8,pair
19:37:09  12  ORDER BY nt8,pair
19:37:09  13  /
     TREND PAIR     COUNT(PAIR)     CRR8HR   AVG_NPG8 AVG_NPG128 STDDV_NPG128
---------- -------- ----------- ---------- ---------- ---------- ------------
        -1 aud_usd           53       -.24     -.0234      .0003        .0045
        -1 eur_usd           49        -.3     -.0178     -.0011        .0021
        -1 gbp_usd           75       -.33     -.0176      .0021        .0043
        -1 usd_cad            5        -.8     -.0185      .0008        .0043
        -1 usd_chf           36       -.27     -.0162      .0008        .0027
        -1 usd_jpy          112       -.55      -.023      .0042        .0078
         1 aud_usd           17        .24      .0223     -.0031        .0038
         1 eur_usd           39       -.42      .0185      .0005        .0041
         1 gbp_usd           13       -.16      .0164     -.0011        .0028
         1 usd_cad           77       -.66      .0193     -.0009        .0032
         1 usd_chf           43       -.44      .0172     -.0004         .002
         1 usd_jpy          118       -.56      .0222      .0019        .0044
12 rows selected.


Name: 10 hr strategy

I watch aud_usd, gbp_usd, usd_cad, usd_chf, usd_jpy and wait for 10-hour-npg to move more than 4 x std10.
I then open a position for 5 hours which is contrary to the trend.

I like this strategy because data supporting it has:
  - Nice balanced negative CORR() for usd_chf, usd_jpy
  - High counts for usd_jpy
  - Nice balanced AVG_NPG1510 for usd_cad, usd_chf
  - Low values for usd_chf under STDDV_NPG1510

I dislike this strategy because data supporting it has:
  - Generally low counts.
  - Unbalanced values for aud_usd, gbp_usd under CRR10HR and AVG_NPG1510
  - Unbalanced values for usd_jpy AVG_NPG1510
  - High values for aud_usd, usd_jpy under STDDV_NPG96

Here is a report snippet which supports this strategy.
I want to see large negative values for CRR10HR.
A value of -1.0 would be perfection.
I want to see large values for AVG_NPG1510 which have an opposite sign of AVG_NPG10:

19:37:09  10  WHERE ABS(npg10)> 4*std10 AND nt10 IN(1,3)
19:37:09  11  GROUP BY nt10,pair
19:37:09  12  ORDER BY nt10,pair
19:37:09  13  /
     TREND PAIR     COUNT(PAIR)    CRR10HR  AVG_NPG10 AVG_NPG1510 STDDV_NPG1510
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd           44       -.15     -.0257      -.0005         .0078
        -1 eur_usd           45       -.05     -.0195       .0001         .0027
        -1 gbp_usd           63       -.36     -.0192       .0023         .0045
        -1 usd_cad            1                -.0203       .0037             0
        -1 usd_chf           11        -.4     -.0173       .0014         .0014
        -1 usd_jpy          113        -.7     -.0249       .0072         .0077
         1 aud_usd           12       -.07      .0241      -.0049         .0039
         1 eur_usd           52        .21      .0191       .0019         .0045
         1 gbp_usd            3        .23      .0182       .0001         .0013
         1 usd_cad           87       -.47      .0209      -.0011         .0042
         1 usd_chf           37       -.47       .018      -.0018         .0009
         1 usd_jpy          126       -.35      .0232        .002         .0044
12 rows selected.




Name: 12 hr strategy

I watch aud_usd, eur_usd, usd_cad, usd_chf, usd_jpy and wait for 12-hour-npg to move more than 4 x std12.
I then open a position for 6 hours which is contrary to the trend.

I like this strategy because data supporting it has:
  - Nice balanced negative CORR() for eur_usd, usd_chf
  - High counts for usd_jpy
  - Nice balanced AVG_NPG1812 for usd_cad, usd_chf
  - Low values for usd_chf under STDDV_NPG1510

I dislike this strategy because data supporting it has:
  - Very low counts
  - Lack of good general negative CORR()

Here is a report snippet which supports this strategy.
I want to see large negative values for CRR12HR.
A value of -1.0 would be perfection.
I want to see large values for AVG_NPG1812 which have an opposite sign of AVG_NPG12:

19:37:09  10  WHERE ABS(npg12)> 4*std12 AND nt12 IN(1,3)
19:37:09  11  GROUP BY nt12,pair
19:37:09  12  ORDER BY nt12,pair
19:37:09  13  /
     TREND PAIR     COUNT(PAIR)    CRR12HR  AVG_NPG12 AVG_NPG1812 STDDV_NPG1812
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd           51        .05     -.0273      -.0042         .0088
        -1 eur_usd           27       -.33     -.0205      -.0002         .0029
        -1 gbp_usd           45       -.14     -.0201       .0008         .0051
        -1 usd_cad            1                -.0215      -.0049             0
        -1 usd_chf            4         -1     -.0188       .0017         .0003
        -1 usd_jpy          123       -.76     -.0253       .0079         .0077
         1 aud_usd            1                 .0287       .0004             0
         1 eur_usd           63       -.47      .0215      -.0028         .0068
         1 gbp_usd            3        .76      .0193       .0014         .0031
         1 usd_cad           66       -.29      .0226      -.0011         .0045
         1 usd_chf           13       -.44      .0194      -.0024         .0011
         1 usd_jpy          150          0      .0237       .0005         .0048
12 rows selected.


Name: 12 hr strategy (3.5 x std12)

I watch eur_usd, usd_cad, usd_chf, usd_jpy and wait for 12-hour-npg to move more than 3.5 x std12.
I then open a position for 6 hours which is contrary to the trend.

I like this strategy because data supporting it has:
  - Nice balanced negative CORR() for eur_usd
  - High counts for eur_usd, usd_jpy
  - Nice balanced AVG_NPG1812 for eur_usd
  - Low values for usd_chf under STDDV_NPG1812

I dislike this strategy because data supporting it has:
  - Lack of good general negative CORR()


Here is a report snippet which supports this strategy.
I want to see large negative values for CRR12HR.
A value of -1.0 would be perfection.
I want to see large values for AVG_NPG1812 which have an opposite sign of AVG_NPG12:


oracle@z2:/pt/s/rlk/jumpy_trend$ sqt @t22_12hr_3x_std12.sql

SQL*Plus: Release 11.2.0.1.0 Production on Mon Dec 6 21:38:35 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:38:36 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:38:36 SQL> --
21:38:36 SQL> -- t22_12hr_3x_std12.sql
21:38:36 SQL> --
21:38:36 SQL> 
21:38:36 SQL> -- I use this to boost the row count from tr14 for npg12.
21:38:36 SQL> 
21:38:36 SQL> SELECT
21:38:36   2  nt12-2 trend
21:38:36   3  ,pair
21:38:36   4  ,COUNT(pair)
21:38:36   5  ,ROUND(CORR(npg12,npg1812),2)crr12hr
21:38:36   6  ,ROUND(AVG(npg12),4)         avg_npg12
21:38:36   7  ,ROUND(AVG(npg1812),4)       avg_npg1812
21:38:36   8  ,ROUND(STDDEV(npg1812),4)    stddv_npg1812
21:38:36   9  FROM tr14
21:38:36  10  WHERE ABS(npg12)> 3*std12 AND nt12 IN(1,3)
21:38:36  11  GROUP BY nt12,pair
21:38:36  12  ORDER BY nt12,pair
21:38:36  13  /

     TREND PAIR     COUNT(PAIR)    CRR12HR  AVG_NPG12 AVG_NPG1812 STDDV_NPG1812
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd          278        .23     -.0225      -.0003         .0087
        -1 eur_usd          194        .16     -.0172      -.0005         .0033
        -1 gbp_usd          252        .04     -.0167       .0008         .0045
        -1 usd_cad           67       -.17     -.0169      -.0006         .0027
        -1 usd_chf          199        .05     -.0154       .0002          .002
        -1 usd_jpy          245       -.67     -.0209       .0043         .0081
         1 aud_usd          225       -.18      .0209       .0012         .0052
         1 eur_usd          211       -.31      .0183      -.0002          .006
         1 gbp_usd          102        .13      .0156      -.0006         .0036
         1 usd_cad          312       -.03      .0185      -.0006         .0037
         1 usd_chf          133       -.07      .0162      -.0015         .0025
         1 usd_jpy          273       -.02      .0203       .0006         .0053

12 rows selected.

Elapsed: 00:00:00.35
21:38:36 SQL> 
21:38:36 SQL> SELECT
21:38:36   2  nt12-2 trend
21:38:36   3  ,pair
21:38:36   4  ,COUNT(pair)
21:38:36   5  ,ROUND(CORR(npg12,npg1812),2)crr12hr
21:38:36   6  ,ROUND(AVG(npg12),4)         avg_npg12
21:38:36   7  ,ROUND(AVG(npg1812),4)       avg_npg1812
21:38:36   8  ,ROUND(STDDEV(npg1812),4)    stddv_npg1812
21:38:36   9  FROM tr14
21:38:36  10  -- Boost npg12 from 3.0 to 3.5:
21:38:36  11  WHERE ABS(npg12)> 3.5*std12 AND nt12 IN(1,3)
21:38:36  12  GROUP BY nt12,pair
21:38:36  13  ORDER BY nt12,pair
21:38:36  14  /

     TREND PAIR     COUNT(PAIR)    CRR12HR  AVG_NPG12 AVG_NPG1812 STDDV_NPG1812
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd          129        .17      -.025      -.0023         .0081
        -1 eur_usd           94       -.24     -.0188      -.0012          .003
        -1 gbp_usd          111       -.09     -.0186       .0003         .0046
        -1 usd_cad           10        .34     -.0193       .0017         .0038
        -1 usd_chf           46       -.09     -.0171      -.0002         .0023
        -1 usd_jpy          174       -.72     -.0232       .0059         .0083
         1 aud_usd           47       -.13      .0232      -.0003         .0055
         1 eur_usd          132       -.43        .02      -.0008         .0066
         1 gbp_usd           28         .2      .0175       .0002         .0017
         1 usd_cad          136       -.28      .0209      -.0002         .0041
         1 usd_chf           73       -.44      .0175      -.0016         .0011
         1 usd_jpy          197        .03      .0223       .0003         .0052

12 rows selected.

Elapsed: 00:00:00.25
21:38:36 SQL> 
21:38:36 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
oracle@z2:/pt/s/rlk/jumpy_trend$ 





Name: 14 hr strategy

I watch usd_jpy and wait for 14-hour-npg to move more than 4 x std14.
I then open a position for 7 hours which is contrary to the trend.


I like this strategy because data supporting it has:
  - High counts for usd_jpy

I dislike this strategy because data supporting it has:
  - Lack of good general negative CORR()


Here is a report snippet which supports this strategy.
I want to see large negative values for CRR14HR.
A value of -1.0 would be perfection.
I want to see large values for AVG_NPG2114 which have an opposite sign of AVG_NPG14:

19:37:10  10  WHERE ABS(npg14)> 4*std14 AND nt14 IN(1,3)
19:37:10  11  GROUP BY nt14,pair
19:37:10  12  ORDER BY nt14,pair
19:37:10  13  /

     TREND PAIR     COUNT(PAIR)    CRR14HR  AVG_NPG14 AVG_NPG2114 STDDV_NPG2114
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd           49       -.29     -.0302      -.0027         .0082
        -1 eur_usd           16        .35     -.0222      -.0018         .0029
        -1 gbp_usd           21       -.35     -.0217       .0023         .0059
        -1 usd_cad            1                -.0252      -.0041             0
        -1 usd_jpy           98       -.83     -.0273       .0093         .0085
         1 aud_usd            9       -.71      .0284       .0011         .0012
         1 eur_usd           61       -.43      .0238      -.0043         .0079
         1 usd_cad           42       -.74       .024      -.0012         .0041
         1 usd_chf            1                  .021      -.0053             0
         1 usd_jpy          148        .02      .0252      -.0005         .0052
10 rows selected.


Here is a snippet showing the result when I relax the predicate a bit:

21:57:42 SQL> --
21:57:42 SQL> -- t22_14hr_3x_std14.sql
21:57:42 SQL> --
21:57:42 SQL> 
21:57:42 SQL> -- I use this to boost the row count from tr14 for npg14.
21:57:42 SQL> 
21:57:42 SQL> SELECT
21:57:42   2  nt14-2 trend
21:57:42   3  ,pair
21:57:42   4  ,COUNT(pair)
21:57:42   5  ,ROUND(CORR(npg14,npg2114),2)crr14hr
21:57:42   6  ,ROUND(AVG(npg14),4)         avg_npg14
21:57:42   7  ,ROUND(AVG(npg2114),4)       avg_npg2114
21:57:42   8  ,ROUND(STDDEV(npg2114),4)    stddv_npg2114
21:57:42   9  FROM tr14
21:57:42  10  WHERE ABS(npg14)> 3*std14 AND nt14 IN(1,3)
21:57:42  11  GROUP BY nt14,pair
21:57:42  12  ORDER BY nt14,pair
21:57:42  13  /

     TREND PAIR     COUNT(PAIR)    CRR14HR  AVG_NPG14 AVG_NPG2114 STDDV_NPG2114
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd          266       -.02     -.0246      -.0016         .0093
        -1 eur_usd          169        .11     -.0182      -.0008         .0033
        -1 gbp_usd          247       -.07     -.0178       .0001         .0055
        -1 usd_cad           54        .12     -.0185      -.0002         .0034
        -1 usd_chf          142       -.07     -.0163      -.0001         .0016
        -1 usd_jpy          233       -.74     -.0219       .0055         .0076
         1 aud_usd          185       -.05      .0227       .0013         .0052
         1 eur_usd          225       -.33      .0196      -.0022         .0061
         1 gbp_usd           65       -.06      .0169      -.0005         .0031
         1 usd_cad          298       -.12      .0198      -.0005         .0042
         1 usd_chf          138       -.35      .0164      -.0005         .0024
         1 usd_jpy          275       -.03      .0218      -.0006         .0052

12 rows selected.

Elapsed: 00:00:00.28
21:57:42 SQL> 
21:57:42 SQL> SELECT
21:57:42   2  nt14-2 trend
21:57:42   3  ,pair
21:57:42   4  ,COUNT(pair)
21:57:42   5  ,ROUND(CORR(npg14,npg2114),2)crr14hr
21:57:42   6  ,ROUND(AVG(npg14),4)         avg_npg14
21:57:42   7  ,ROUND(AVG(npg2114),4)       avg_npg2114
21:57:42   8  ,ROUND(STDDEV(npg2114),4)    stddv_npg2114
21:57:42   9  FROM tr14
21:57:42  10  WHERE ABS(npg14)> 3.5*std14 AND nt14 IN(1,3)
21:57:42  11  GROUP BY nt14,pair
21:57:42  12  ORDER BY nt14,pair
21:57:42  13  /

     TREND PAIR     COUNT(PAIR)    CRR14HR  AVG_NPG14 AVG_NPG2114 STDDV_NPG2114
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd          148        .06     -.0268      -.0009         .0098
        -1 eur_usd           55        .33     -.0204      -.0008         .0027
        -1 gbp_usd          109        -.2     -.0195       .0002         .0053
        -1 usd_cad           11        .43     -.0209      -.0005         .0033
        -1 usd_chf           32         .1     -.0182       .0001         .0012
        -1 usd_jpy          175        -.8     -.0237       .0068         .0074
         1 aud_usd           49        .06      .0257       .0004         .0032
         1 eur_usd          122       -.26      .0217      -.0035         .0072
         1 gbp_usd           18        .08      .0184      -.0014         .0043
         1 usd_cad          146       -.39      .0217      -.0004         .0034
         1 usd_chf           22       -.35      .0186      -.0018         .0019
         1 usd_jpy          209        .07      .0234      -.0009         .0053

12 rows selected.

Elapsed: 00:00:00.25
21:57:42 SQL> 
21:57:42 SQL> 
21:57:42 SQL> exit




Name: 16 hr strategy

I watch eur_usd, usd_cad, usd_chf, usd_jpy and wait for 16-hour-npg to move more than 4 x std16.
I then open a position for 8 hours which is contrary to the trend.


I like this strategy because data supporting it has:
  - High counts for usd_jpy

I dislike this strategy because data supporting it has:
  - Lack of good general negative CORR()


Here is a report snippet which supports this strategy.
I want to see large negative values for CRR16HR.
A value of -1.0 would be perfection.
I want to see large values for AVG_NPG2416 which have an opposite sign of AVG_NPG16:

19:37:10  10  WHERE ABS(npg16)> 4*std16 AND nt16 IN(1,3)
19:37:10  11  GROUP BY nt16,pair
19:37:10  12  ORDER BY nt16,pair
19:37:10  13  /
     TREND PAIR     COUNT(PAIR)    CRR16HR  AVG_NPG16 AVG_NPG2416 STDDV_NPG2416
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd           52       -.01     -.0335       .0015         .0074
        -1 eur_usd           12       -.51     -.0234       .0025         .0032
        -1 gbp_usd           30       -.36      -.024       .0041         .0068
        -1 usd_chf            7       -.93     -.0219       .0013         .0004
        -1 usd_jpy           77       -.93     -.0291       .0117         .0088
         1 aud_usd           15       -.05      .0309       .0021         .0012
         1 eur_usd           51       -.27      .0248      -.0073          .008
         1 gbp_usd            2          1      .0225       .0068         .0004
         1 usd_cad           35       -.79      .0265      -.0038         .0053
         1 usd_jpy          131       -.01      .0268      -.0018         .0056
10 rows selected.


Here is a snippet showing the result when I relax the predicate a bit:

22:07:01 SQL> --
22:07:01 SQL> -- t22_16hr_3x_std16.sql
22:07:01 SQL> --
22:07:01 SQL> 
22:07:01 SQL> -- I use this to boost the row count from tr14 for npg16.
22:07:01 SQL> 
22:07:01 SQL> SELECT
22:07:01   2  nt16-2 trend
22:07:01   3  ,pair
22:07:01   4  ,COUNT(pair)
22:07:01   5  ,ROUND(CORR(npg16,npg2416),2)crr16hr
22:07:01   6  ,ROUND(AVG(npg16),4)         avg_npg16
22:07:01   7  ,ROUND(AVG(npg2416),4)       avg_npg2416
22:07:01   8  ,ROUND(STDDEV(npg2416),4)    stddv_npg2416
22:07:01   9  FROM tr14
22:07:01  10  WHERE ABS(npg16)> 3*std16 AND nt16 IN(1,3)
22:07:01  11  GROUP BY nt16,pair
22:07:01  12  ORDER BY nt16,pair
22:07:01  13  /

     TREND PAIR     COUNT(PAIR)    CRR16HR  AVG_NPG16 AVG_NPG2416 STDDV_NPG2416
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd          278        -.1     -.0262      -.0002         .0097
        -1 eur_usd          179       -.02     -.0191       .0004         .0045
        -1 gbp_usd          235       -.35     -.0194      -.0002         .0052
        -1 usd_cad           46        .22     -.0198      -.0004          .003
        -1 usd_chf          102       -.21     -.0173       .0002         .0017
        -1 usd_jpy          247       -.85     -.0222       .0061          .007
         1 aud_usd          142        .05       .025       .0016         .0043
         1 eur_usd          229       -.35      .0205      -.0035         .0062
         1 gbp_usd           67         .3      .0176       .0005         .0027
         1 usd_cad          292       -.34       .021      -.0012         .0044
         1 usd_chf          104       -.34      .0169      -.0009         .0031
         1 usd_jpy          290       -.19      .0223      -.0007         .0048

12 rows selected.

Elapsed: 00:00:00.29
22:07:01 SQL> 
22:07:01 SQL> SELECT
22:07:01   2  nt16-2 trend
22:07:01   3  ,pair
22:07:01   4  ,COUNT(pair)
22:07:01   5  ,ROUND(CORR(npg16,npg2416),2)crr16hr
22:07:01   6  ,ROUND(AVG(npg16),4)         avg_npg16
22:07:01   7  ,ROUND(AVG(npg2416),4)       avg_npg2416
22:07:01   8  ,ROUND(STDDEV(npg2416),4)    stddv_npg2416
22:07:01   9  FROM tr14
22:07:01  10  WHERE ABS(npg16)> 3.5*std16 AND nt16 IN(1,3)
22:07:01  11  GROUP BY nt16,pair
22:07:01  12  ORDER BY nt16,pair
22:07:01  13  /

     TREND PAIR     COUNT(PAIR)    CRR16HR  AVG_NPG16 AVG_NPG2416 STDDV_NPG2416
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd          127       -.02     -.0297       .0014         .0092
        -1 eur_usd           53       -.31     -.0215       .0001         .0044
        -1 gbp_usd          109       -.45     -.0213       .0011         .0052
        -1 usd_cad            8        .43      -.022      -.0018         .0031
        -1 usd_chf           14       -.51     -.0206       .0011         .0005
        -1 usd_jpy          167       -.89     -.0243       .0079         .0073
         1 aud_usd           47        .02      .0284       .0017         .0024
         1 eur_usd          106       -.28      .0229      -.0053         .0074
         1 gbp_usd            3        .96      .0216       .0041         .0047
         1 usd_cad          111       -.52      .0235      -.0023         .0045
         1 usd_chf            7       -.41       .019      -.0037         .0034
         1 usd_jpy          193       -.17      .0247       -.001         .0054

12 rows selected.

Elapsed: 00:00:00.28
22:07:01 SQL> 
22:07:01 SQL> 
22:07:01 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
oracle@z2:/pt/s/rlk/jumpy_trend$ 






Here is a screen dump of me running t22.sql:


oracle@z2:/pt/s/rlk/jumpy_trend$ sqt @t22.sql

SQL*Plus: Release 11.2.0.1.0 Production on Mon Dec 6 19:34:43 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

19:34:43 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
19:34:43 SQL> --
19:34:43 SQL> -- t22.sql
19:34:43 SQL> --
19:34:43 SQL> 
19:34:43 SQL> -- I use this script to look at Forex data which has a 10 minute duration between each datapoint.
19:34:43 SQL> 
19:34:43 SQL> SET LINES 66
19:34:43 SQL> DESC dukas10min
 Name                             Null?    Type
 -------------------------------- -------- -----------------------
 PAIR                                      VARCHAR2(8)
 YDATE                                     DATE
 VOL                                       NUMBER
 OPN                                       NUMBER
 CLSE                                      NUMBER
 MN                                        NUMBER
 MX                                        NUMBER

19:34:43 SQL> SET LINES 166
19:34:43 SQL> 
19:34:43 SQL> SELECT
19:34:43   2  pair
19:34:43   3  ,MIN(ydate)
19:34:43   4  ,COUNT(*)
19:34:43   5  ,MAX(ydate)
19:34:43   6  FROM dukas10min
19:34:43   7  GROUP BY pair
19:34:43   8  ORDER BY pair
19:34:43   9  /

PAIR     MIN(YDATE)            COUNT(*) MAX(YDATE)
-------- ------------------- ---------- -------------------
aud_usd  2009-09-18 05:50:01      45543 2010-12-03 17:50:01
eur_usd  2009-09-18 05:50:01      45543 2010-12-03 17:50:01
gbp_usd  2009-09-18 05:50:01      45543 2010-12-03 17:50:01
usd_cad  2009-09-18 05:50:01      45543 2010-12-03 17:50:01
usd_chf  2009-09-18 05:50:01      45543 2010-12-03 17:50:01
usd_jpy  2009-09-18 05:50:01      45543 2010-12-03 17:50:01

6 rows selected.

Elapsed: 00:00:00.10
19:34:44 SQL> 
19:34:44 SQL> 
19:34:44 SQL> CREATE OR REPLACE VIEW tr10 AS
19:34:44   2  SELECT
19:34:44   3  pair
19:34:44   4  -- ydate is granular down to 10 min:
19:34:44   5  ,ydate
19:34:44   6  ,clse
19:34:44   7  -- Relative to current-row, get future closing prices.
19:34:44   8  -- 2 hr:
19:34:44   9  ,LEAD(clse,12,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse2
19:34:44  10  -- 3 hr:
19:34:44  11  ,LEAD(clse,3 *6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse3
19:34:44  12  ,LEAD(clse,4 *6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse4
19:34:44  13  ,LEAD(clse,6 *6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse6
19:34:44  14  ,LEAD(clse,8 *6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse8
19:34:44  15  ,LEAD(clse,9 *6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse9
19:34:44  16  ,LEAD(clse,10*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse10
19:34:44  17  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse12
19:34:44  18  ,LEAD(clse,14*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse14
19:34:44  19  ,LEAD(clse,15*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse15
19:34:44  20  ,LEAD(clse,16*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse16
19:34:44  21  ,LEAD(clse,18*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse18
19:34:44  22  ,LEAD(clse,21*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse21
19:34:44  23  ,LEAD(clse,24*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)clse24
19:34:44  24  FROM dukas10min
19:34:44  25  -- Prevent divide by zero:
19:34:44  26  WHERE clse > 0
19:34:44  27  ORDER BY pair,ydate
19:34:44  28  /

View created.

Elapsed: 00:00:00.04
19:34:44 SQL> 
19:34:44 SQL> -- I collect normalized gains.
19:34:44 SQL> -- I normalize the gains so I can compare JPY to AUD, CHF, CAD:
19:34:44 SQL> -- usd_jpy is near 85.
19:34:44 SQL> -- aud_usd, usd_cad, usd_chf are near 1.
19:34:44 SQL> 
19:34:44 SQL> CREATE OR REPLACE VIEW tr12 AS
19:34:44   2  SELECT
19:34:44   3  pair
19:34:44   4  ,ydate
19:34:44   5  ,clse
19:34:44   6  -- I collect normalized gains.
19:34:44   7  -- I match t1 and         t2:
19:34:44   8  ,(clse2-clse)/clse  npg2,(clse3-clse2)/clse    npg32
19:34:44   9  ,(clse4-clse)/clse  npg4,(clse6-clse4)/clse    npg64
19:34:44  10  ,(clse6-clse)/clse  npg6,(clse9-clse6)/clse    npg96
19:34:44  11  ,(clse8-clse)/clse  npg8,(clse12-clse8)/clse   npg128
19:34:44  12  ,(clse10-clse)/clse npg10,(clse15-clse10)/clse npg1510
19:34:44  13  ,(clse12-clse)/clse npg12,(clse18-clse12)/clse npg1812
19:34:44  14  ,(clse14-clse)/clse npg14,(clse21-clse14)/clse npg2114
19:34:44  15  ,(clse16-clse)/clse npg16,(clse24-clse16)/clse npg2416
19:34:44  16  FROM tr10
19:34:44  17  ORDER BY pair,ydate
19:34:44  18  /

View created.

Elapsed: 00:00:00.05
19:34:44 SQL> 
19:34:44 SQL> -- Collect everything into a table which should help query performance.
19:34:44 SQL> -- Additionally, collect rolling-STDDEV() of npgX:
19:34:44 SQL> 
19:34:44 SQL> DROP TABLE tr14;

Table dropped.

Elapsed: 00:00:00.12
19:34:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.12
19:34:44 SQL> CREATE TABLE tr14 COMPRESS AS
19:34:44   2  SELECT
19:34:44   3  pair
19:34:44   4  ,ydate
19:34:44   5  ,clse
19:34:44   6  --t1,  t2:
19:34:44   7  ,npg2, npg32
19:34:44   8  ,npg4, npg64
19:34:44   9  ,npg6, npg96
19:34:44  10  ,npg8, npg128
19:34:44  11  ,npg10, npg1510
19:34:44  12  ,npg12, npg1812
19:34:44  13  ,npg14, npg2114
19:34:44  14  ,npg16, npg2416
19:34:44  15  -- I use ntX to help me separate positive npgX from negative npgX:
19:34:44  16  ,NTILE(3)OVER(PARTITION BY pair ORDER BY npg2 )nt2
19:34:44  17  ,NTILE(3)OVER(PARTITION BY pair ORDER BY npg4 )nt4
19:34:44  18  ,NTILE(3)OVER(PARTITION BY pair ORDER BY npg6 )nt6
19:34:44  19  ,NTILE(3)OVER(PARTITION BY pair ORDER BY npg8 )nt8
19:34:44  20  ,NTILE(3)OVER(PARTITION BY pair ORDER BY npg10)nt10
19:34:44  21  ,NTILE(3)OVER(PARTITION BY pair ORDER BY npg12)nt12
19:34:44  22  ,NTILE(3)OVER(PARTITION BY pair ORDER BY npg14)nt14
19:34:44  23  ,NTILE(3)OVER(PARTITION BY pair ORDER BY npg16)nt16
19:34:44  24  ,STDDEV(npg2 )OVER(PARTITION BY pair)std2
19:34:44  25  ,STDDEV(npg4 )OVER(PARTITION BY pair)std4
19:34:44  26  ,STDDEV(npg6 )OVER(PARTITION BY pair)std6
19:34:44  27  ,STDDEV(npg8 )OVER(PARTITION BY pair)std8
19:34:44  28  ,STDDEV(npg10)OVER(PARTITION BY pair)std10
19:34:44  29  ,STDDEV(npg12)OVER(PARTITION BY pair)std12
19:34:44  30  ,STDDEV(npg14)OVER(PARTITION BY pair)std14
19:34:44  31  ,STDDEV(npg16)OVER(PARTITION BY pair)std16
19:34:44  32  FROM tr12
19:34:44  33  ORDER BY pair,ydate
19:34:44  34  /

Table created.

Elapsed: 00:02:16.07
19:37:00 SQL> 
19:37:00 SQL> ANALYZE TABLE tr14 ESTIMATE STATISTICS SAMPLE 9 PERCENT;

Table analyzed.

Elapsed: 00:00:01.98
19:37:02 SQL> 
19:37:02 SQL> -- Display the standard deviation distribution for later reference:
19:37:02 SQL> SELECT
19:37:02   2  pair
19:37:02   3  ,ROUND(STDDEV(npg2 ),4)std2
19:37:02   4  ,ROUND(STDDEV(npg4 ),4)std4
19:37:02   5  ,ROUND(STDDEV(npg6 ),4)std6
19:37:02   6  ,ROUND(STDDEV(npg8 ),4)std8
19:37:02   7  ,ROUND(STDDEV(npg10),4)std10
19:37:02   8  ,ROUND(STDDEV(npg12),4)std12
19:37:02   9  ,ROUND(STDDEV(npg14),4)std14
19:37:02  10  ,ROUND(STDDEV(npg16),4)std16
19:37:02  11  FROM tr12
19:37:02  12  GROUP BY pair
19:37:02  13  ORDER BY pair
19:37:02  14  /

PAIR           STD2       STD4       STD6       STD8      STD10      STD12      STD14      STD16
-------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
aud_usd       .0026      .0036      .0044      .0051      .0057      .0063      .0068      .0073
eur_usd        .002      .0028      .0035       .004      .0045      .0049      .0053      .0057
gbp_usd        .002      .0028      .0034      .0039      .0043      .0047      .0051      .0055
usd_cad       .0022       .003      .0037      .0042      .0047      .0052      .0056       .006
usd_chf        .002      .0028      .0033      .0038      .0042      .0046       .005      .0053
usd_jpy        .002      .0028      .0034      .0039      .0044      .0047      .0051      .0054

6 rows selected.

Elapsed: 00:00:06.16
19:37:08 SQL> 
19:37:08 SQL> -- Look at CORR() between t1 and t2.
19:37:08 SQL> 
19:37:08 SQL> SELECT
19:37:08   2  nt2-2 trend
19:37:08   3  ,pair
19:37:08   4  ,COUNT(pair)
19:37:08   5  ,ROUND(CORR(npg2,npg32),2)crr2hr
19:37:08   6  ,ROUND(AVG(npg2),4)       avg_npg2
19:37:08   7  ,ROUND(AVG(npg32),4)      avg_npg32
19:37:08   8  ,ROUND(STDDEV(npg32),4)   stddv_npg32
19:37:08   9  FROM tr14
19:37:08  10  WHERE ABS(npg2)> 4*std2 AND nt2 IN(1,3)
19:37:08  11  GROUP BY nt2,pair
19:37:08  12  ORDER BY nt2,pair
19:37:08  13  /

     TREND PAIR     COUNT(PAIR)     CRR2HR   AVG_NPG2  AVG_NPG32 STDDV_NPG32
---------- -------- ----------- ---------- ---------- ---------- -----------
        -1 aud_usd          100       -.02     -.0126      .0006        .004
        -1 eur_usd           73       -.22     -.0091     -.0003       .0019
        -1 gbp_usd          118       -.18     -.0102      .0004       .0034
        -1 usd_cad           98       -.17     -.0105      .0003       .0021
        -1 usd_chf          103        .02     -.0103     -.0003       .0022
        -1 usd_jpy          132       -.27     -.0121      .0006       .0051
         1 aud_usd           72       -.19      .0117     -.0007       .0037
         1 eur_usd          111       -.49        .01          0       .0023
         1 gbp_usd           65        .13       .009     -.0006        .002
         1 usd_cad          122       -.38      .0107     -.0008       .0031
         1 usd_chf          137       -.27      .0094          0       .0022
         1 usd_jpy          101        .29      .0111      .0009        .003

12 rows selected.

Elapsed: 00:00:00.23
19:37:08 SQL> 
19:37:08 SQL> SELECT
19:37:08   2  nt4-2 trend
19:37:08   3  ,pair
19:37:08   4  ,COUNT(pair)
19:37:08   5  ,ROUND(CORR(npg4,npg64),2)crr4hr
19:37:08   6  ,ROUND(AVG(npg4),4)       avg_npg4
19:37:08   7  ,ROUND(AVG(npg64),4)      avg_npg64
19:37:08   8  ,ROUND(STDDEV(npg64),4)   stddv_npg64
19:37:08   9  FROM tr14
19:37:08  10  WHERE ABS(npg4)> 4*std4 AND nt4 IN(1,3)
19:37:08  11  GROUP BY nt4,pair
19:37:08  12  ORDER BY nt4,pair
19:37:08  13  /

     TREND PAIR     COUNT(PAIR)     CRR4HR   AVG_NPG4  AVG_NPG64 STDDV_NPG64
---------- -------- ----------- ---------- ---------- ---------- -----------
        -1 aud_usd           88        -.4     -.0171      .0026       .0046
        -1 eur_usd           72        .01     -.0123     -.0006       .0027
        -1 gbp_usd           89       -.37     -.0139      .0006       .0025
        -1 usd_cad           80       -.24     -.0136      .0015       .0035
        -1 usd_chf          100       -.21     -.0133      .0001       .0018
        -1 usd_jpy          123       -.25      -.017     -.0007       .0089
         1 aud_usd           33         .1      .0166     -.0021       .0061
         1 eur_usd           89       -.57       .013     -.0014       .0026
         1 gbp_usd           52        .05      .0124     -.0003       .0031
         1 usd_cad          104       -.38      .0147     -.0011       .0038
         1 usd_chf          114       -.05      .0126     -.0006       .0024
         1 usd_jpy          105        .05      .0156      .0014       .0042

12 rows selected.

Elapsed: 00:00:00.22
19:37:09 SQL> 
19:37:09 SQL> SELECT
19:37:09   2  nt6-2 trend
19:37:09   3  ,pair
19:37:09   4  ,COUNT(pair)
19:37:09   5  ,ROUND(CORR(npg6,npg96),2)crr6hr
19:37:09   6  ,ROUND(AVG(npg6),4)       avg_npg6
19:37:09   7  ,ROUND(AVG(npg96),4)      avg_npg96
19:37:09   8  ,ROUND(STDDEV(npg96),4)   stddv_npg96
19:37:09   9  FROM tr14
19:37:09  10  WHERE ABS(npg6)> 4*std6 AND nt6 IN(1,3)
19:37:09  11  GROUP BY nt6,pair
19:37:09  12  ORDER BY nt6,pair
19:37:09  13  /

     TREND PAIR     COUNT(PAIR)     CRR6HR   AVG_NPG6  AVG_NPG96 STDDV_NPG96
---------- -------- ----------- ---------- ---------- ---------- -----------
        -1 aud_usd           55       -.18     -.0197      .0001       .0057
        -1 eur_usd           69        .15     -.0154     -.0012       .0019
        -1 gbp_usd           93       -.28     -.0159      .0015       .0045
        -1 usd_cad           22       -.38     -.0158      .0028       .0033
        -1 usd_chf           71       -.05     -.0148      .0005       .0021
        -1 usd_jpy          135       -.34     -.0197      .0005       .0096
         1 aud_usd           24       -.54       .021     -.0042       .0043
         1 eur_usd           49       -.63      .0152     -.0008        .004
         1 gbp_usd           41       -.08      .0149     -.0015        .002
         1 usd_cad           81       -.52      .0174     -.0013       .0029
         1 usd_chf           76       -.06      .0148     -.0005       .0032
         1 usd_jpy          119        .21      .0191       .002       .0046

12 rows selected.

Elapsed: 00:00:00.22
19:37:09 SQL> 
19:37:09 SQL> SELECT
19:37:09   2  nt8-2 trend
19:37:09   3  ,pair
19:37:09   4  ,COUNT(pair)
19:37:09   5  ,ROUND(CORR(npg8,npg128),2)crr8hr
19:37:09   6  ,ROUND(AVG(npg8),4)        avg_npg8
19:37:09   7  ,ROUND(AVG(npg128),4)      avg_npg128
19:37:09   8  ,ROUND(STDDEV(npg128),4)   stddv_npg128
19:37:09   9  FROM tr14
19:37:09  10  WHERE ABS(npg8)> 4*std8 AND nt8 IN(1,3)
19:37:09  11  GROUP BY nt8,pair
19:37:09  12  ORDER BY nt8,pair
19:37:09  13  /

     TREND PAIR     COUNT(PAIR)     CRR8HR   AVG_NPG8 AVG_NPG128 STDDV_NPG128
---------- -------- ----------- ---------- ---------- ---------- ------------
        -1 aud_usd           53       -.24     -.0234      .0003        .0045
        -1 eur_usd           49        -.3     -.0178     -.0011        .0021
        -1 gbp_usd           75       -.33     -.0176      .0021        .0043
        -1 usd_cad            5        -.8     -.0185      .0008        .0043
        -1 usd_chf           36       -.27     -.0162      .0008        .0027
        -1 usd_jpy          112       -.55      -.023      .0042        .0078
         1 aud_usd           17        .24      .0223     -.0031        .0038
         1 eur_usd           39       -.42      .0185      .0005        .0041
         1 gbp_usd           13       -.16      .0164     -.0011        .0028
         1 usd_cad           77       -.66      .0193     -.0009        .0032
         1 usd_chf           43       -.44      .0172     -.0004         .002
         1 usd_jpy          118       -.56      .0222      .0019        .0044

12 rows selected.

Elapsed: 00:00:00.21
19:37:09 SQL> 
19:37:09 SQL> SELECT
19:37:09   2  nt10-2 trend
19:37:09   3  ,pair
19:37:09   4  ,COUNT(pair)
19:37:09   5  ,ROUND(CORR(npg10,npg1510),2)crr10hr
19:37:09   6  ,ROUND(AVG(npg10),4)         avg_npg10
19:37:09   7  ,ROUND(AVG(npg1510),4)       avg_npg1510
19:37:09   8  ,ROUND(STDDEV(npg1510),4)    stddv_npg1510
19:37:09   9  FROM tr14
19:37:09  10  WHERE ABS(npg10)> 4*std10 AND nt10 IN(1,3)
19:37:09  11  GROUP BY nt10,pair
19:37:09  12  ORDER BY nt10,pair
19:37:09  13  /

     TREND PAIR     COUNT(PAIR)    CRR10HR  AVG_NPG10 AVG_NPG1510 STDDV_NPG1510
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd           44       -.15     -.0257      -.0005         .0078
        -1 eur_usd           45       -.05     -.0195       .0001         .0027
        -1 gbp_usd           63       -.36     -.0192       .0023         .0045
        -1 usd_cad            1                -.0203       .0037             0
        -1 usd_chf           11        -.4     -.0173       .0014         .0014
        -1 usd_jpy          113        -.7     -.0249       .0072         .0077
         1 aud_usd           12       -.07      .0241      -.0049         .0039
         1 eur_usd           52        .21      .0191       .0019         .0045
         1 gbp_usd            3        .23      .0182       .0001         .0013
         1 usd_cad           87       -.47      .0209      -.0011         .0042
         1 usd_chf           37       -.47       .018      -.0018         .0009
         1 usd_jpy          126       -.35      .0232        .002         .0044

12 rows selected.

Elapsed: 00:00:00.22
19:37:09 SQL> 
19:37:09 SQL> 
19:37:09 SQL> SELECT
19:37:09   2  nt12-2 trend
19:37:09   3  ,pair
19:37:09   4  ,COUNT(pair)
19:37:09   5  ,ROUND(CORR(npg12,npg1812),2)crr12hr
19:37:09   6  ,ROUND(AVG(npg12),4)         avg_npg12
19:37:09   7  ,ROUND(AVG(npg1812),4)       avg_npg1812
19:37:09   8  ,ROUND(STDDEV(npg1812),4)    stddv_npg1812
19:37:09   9  FROM tr14
19:37:09  10  WHERE ABS(npg12)> 4*std12 AND nt12 IN(1,3)
19:37:09  11  GROUP BY nt12,pair
19:37:09  12  ORDER BY nt12,pair
19:37:09  13  /

     TREND PAIR     COUNT(PAIR)    CRR12HR  AVG_NPG12 AVG_NPG1812 STDDV_NPG1812
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd           51        .05     -.0273      -.0042         .0088
        -1 eur_usd           27       -.33     -.0205      -.0002         .0029
        -1 gbp_usd           45       -.14     -.0201       .0008         .0051
        -1 usd_cad            1                -.0215      -.0049             0
        -1 usd_chf            4         -1     -.0188       .0017         .0003
        -1 usd_jpy          123       -.76     -.0253       .0079         .0077
         1 aud_usd            1                 .0287       .0004             0
         1 eur_usd           63       -.47      .0215      -.0028         .0068
         1 gbp_usd            3        .76      .0193       .0014         .0031
         1 usd_cad           66       -.29      .0226      -.0011         .0045
         1 usd_chf           13       -.44      .0194      -.0024         .0011
         1 usd_jpy          150          0      .0237       .0005         .0048

12 rows selected.

Elapsed: 00:00:00.25
19:37:10 SQL> 
19:37:10 SQL> SELECT
19:37:10   2  nt14-2 trend
19:37:10   3  ,pair
19:37:10   4  ,COUNT(pair)
19:37:10   5  ,ROUND(CORR(npg14,npg2114),2)crr14hr
19:37:10   6  ,ROUND(AVG(npg14),4)         avg_npg14
19:37:10   7  ,ROUND(AVG(npg2114),4)       avg_npg2114
19:37:10   8  ,ROUND(STDDEV(npg2114),4)    stddv_npg2114
19:37:10   9  FROM tr14
19:37:10  10  WHERE ABS(npg14)> 4*std14 AND nt14 IN(1,3)
19:37:10  11  GROUP BY nt14,pair
19:37:10  12  ORDER BY nt14,pair
19:37:10  13  /

     TREND PAIR     COUNT(PAIR)    CRR14HR  AVG_NPG14 AVG_NPG2114 STDDV_NPG2114
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd           49       -.29     -.0302      -.0027         .0082
        -1 eur_usd           16        .35     -.0222      -.0018         .0029
        -1 gbp_usd           21       -.35     -.0217       .0023         .0059
        -1 usd_cad            1                -.0252      -.0041             0
        -1 usd_jpy           98       -.83     -.0273       .0093         .0085
         1 aud_usd            9       -.71      .0284       .0011         .0012
         1 eur_usd           61       -.43      .0238      -.0043         .0079
         1 usd_cad           42       -.74       .024      -.0012         .0041
         1 usd_chf            1                  .021      -.0053             0
         1 usd_jpy          148        .02      .0252      -.0005         .0052

10 rows selected.

Elapsed: 00:00:00.26
19:37:10 SQL> 
19:37:10 SQL> SELECT
19:37:10   2  nt16-2 trend
19:37:10   3  ,pair
19:37:10   4  ,COUNT(pair)
19:37:10   5  ,ROUND(CORR(npg16,npg2416),2)crr16hr
19:37:10   6  ,ROUND(AVG(npg16),4)         avg_npg16
19:37:10   7  ,ROUND(AVG(npg2416),4)       avg_npg2416
19:37:10   8  ,ROUND(STDDEV(npg2416),4)    stddv_npg2416
19:37:10   9  FROM tr14
19:37:10  10  WHERE ABS(npg16)> 4*std16 AND nt16 IN(1,3)
19:37:10  11  GROUP BY nt16,pair
19:37:10  12  ORDER BY nt16,pair
19:37:10  13  /

     TREND PAIR     COUNT(PAIR)    CRR16HR  AVG_NPG16 AVG_NPG2416 STDDV_NPG2416
---------- -------- ----------- ---------- ---------- ----------- -------------
        -1 aud_usd           52       -.01     -.0335       .0015         .0074
        -1 eur_usd           12       -.51     -.0234       .0025         .0032
        -1 gbp_usd           30       -.36      -.024       .0041         .0068
        -1 usd_chf            7       -.93     -.0219       .0013         .0004
        -1 usd_jpy           77       -.93     -.0291       .0117         .0088
         1 aud_usd           15       -.05      .0309       .0021         .0012
         1 eur_usd           51       -.27      .0248      -.0073          .008
         1 gbp_usd            2          1      .0225       .0068         .0004
         1 usd_cad           35       -.79      .0265      -.0038         .0053
         1 usd_jpy          131       -.01      .0268      -.0018         .0056

10 rows selected.

Elapsed: 00:00:00.23
19:37:10 SQL> 
19:37:10 SQL> EXIT
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
oracle@z2:/pt/s/rlk/jumpy_trend$ 
